{
  "metadata": {
    "id": 81598961,
    "node_id": "MDEwOlJlcG9zaXRvcnk4MTU5ODk2MQ==",
    "name": "cpython",
    "full_name": "python/cpython",
    "private": false,
    "owner": {
      "login": "python",
      "id": 1525981,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/python",
      "html_url": "https://github.com/python",
      "followers_url": "https://api.github.com/users/python/followers",
      "following_url": "https://api.github.com/users/python/following{/other_user}",
      "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/python/subscriptions",
      "organizations_url": "https://api.github.com/users/python/orgs",
      "repos_url": "https://api.github.com/users/python/repos",
      "events_url": "https://api.github.com/users/python/events{/privacy}",
      "received_events_url": "https://api.github.com/users/python/received_events",
      "type": "Organization",
      "user_view_type": "public",
      "site_admin": false
    },
    "html_url": "https://github.com/python/cpython",
    "description": "The Python programming language",
    "fork": false,
    "url": "https://api.github.com/repos/python/cpython",
    "forks_url": "https://api.github.com/repos/python/cpython/forks",
    "keys_url": "https://api.github.com/repos/python/cpython/keys{/key_id}",
    "collaborators_url": "https://api.github.com/repos/python/cpython/collaborators{/collaborator}",
    "teams_url": "https://api.github.com/repos/python/cpython/teams",
    "hooks_url": "https://api.github.com/repos/python/cpython/hooks",
    "issue_events_url": "https://api.github.com/repos/python/cpython/issues/events{/number}",
    "events_url": "https://api.github.com/repos/python/cpython/events",
    "assignees_url": "https://api.github.com/repos/python/cpython/assignees{/user}",
    "branches_url": "https://api.github.com/repos/python/cpython/branches{/branch}",
    "tags_url": "https://api.github.com/repos/python/cpython/tags",
    "blobs_url": "https://api.github.com/repos/python/cpython/git/blobs{/sha}",
    "git_tags_url": "https://api.github.com/repos/python/cpython/git/tags{/sha}",
    "git_refs_url": "https://api.github.com/repos/python/cpython/git/refs{/sha}",
    "trees_url": "https://api.github.com/repos/python/cpython/git/trees{/sha}",
    "statuses_url": "https://api.github.com/repos/python/cpython/statuses/{sha}",
    "languages_url": "https://api.github.com/repos/python/cpython/languages",
    "stargazers_url": "https://api.github.com/repos/python/cpython/stargazers",
    "contributors_url": "https://api.github.com/repos/python/cpython/contributors",
    "subscribers_url": "https://api.github.com/repos/python/cpython/subscribers",
    "subscription_url": "https://api.github.com/repos/python/cpython/subscription",
    "commits_url": "https://api.github.com/repos/python/cpython/commits{/sha}",
    "git_commits_url": "https://api.github.com/repos/python/cpython/git/commits{/sha}",
    "comments_url": "https://api.github.com/repos/python/cpython/comments{/number}",
    "issue_comment_url": "https://api.github.com/repos/python/cpython/issues/comments{/number}",
    "contents_url": "https://api.github.com/repos/python/cpython/contents/{+path}",
    "compare_url": "https://api.github.com/repos/python/cpython/compare/{base}...{head}",
    "merges_url": "https://api.github.com/repos/python/cpython/merges",
    "archive_url": "https://api.github.com/repos/python/cpython/{archive_format}{/ref}",
    "downloads_url": "https://api.github.com/repos/python/cpython/downloads",
    "issues_url": "https://api.github.com/repos/python/cpython/issues{/number}",
    "pulls_url": "https://api.github.com/repos/python/cpython/pulls{/number}",
    "milestones_url": "https://api.github.com/repos/python/cpython/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/python/cpython/notifications{?since,all,participating}",
    "labels_url": "https://api.github.com/repos/python/cpython/labels{/name}",
    "releases_url": "https://api.github.com/repos/python/cpython/releases{/id}",
    "deployments_url": "https://api.github.com/repos/python/cpython/deployments",
    "created_at": "2017-02-10T19:23:51Z",
    "updated_at": "2025-07-20T23:34:39Z",
    "pushed_at": "2025-07-21T00:00:19Z",
    "git_url": "git://github.com/python/cpython.git",
    "ssh_url": "git@github.com:python/cpython.git",
    "clone_url": "https://github.com/python/cpython.git",
    "svn_url": "https://github.com/python/cpython",
    "homepage": "https://www.python.org",
    "size": 716571,
    "stargazers_count": 67950,
    "watchers_count": 67950,
    "language": "Python",
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "has_discussions": false,
    "forks_count": 32407,
    "mirror_url": null,
    "archived": false,
    "disabled": false,
    "open_issues_count": 9187,
    "license": {
      "key": "other",
      "name": "Other",
      "spdx_id": "NOASSERTION",
      "url": null,
      "node_id": "MDc6TGljZW5zZTA="
    },
    "allow_forking": true,
    "is_template": false,
    "web_commit_signoff_required": false,
    "topics": [],
    "visibility": "public",
    "forks": 32407,
    "open_issues": 9187,
    "watchers": 67950,
    "default_branch": "main",
    "permissions": {
      "admin": false,
      "maintain": false,
      "push": false,
      "triage": false,
      "pull": true
    },
    "score": 1.0
  },
  "scraped_at": "2025-07-20T20:38:50.227020",
  "issues": [
    {
      "url": "https://api.github.com/repos/python/cpython/issues/118450",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/118450/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/118450/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/118450/events",
      "html_url": "https://github.com/python/cpython/pull/118450",
      "id": 2272454082,
      "node_id": "PR_kwDOBN0Z8c5uMefg",
      "number": 118450,
      "title": "gh-117139: Convert the evaluation stack to stack refs",
      "user": {
        "login": "Fidget-Spinner",
        "id": 28750310,
        "node_id": "MDQ6VXNlcjI4NzUwMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fidget-Spinner",
        "html_url": "https://github.com/Fidget-Spinner",
        "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
        "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
        "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
        "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
        "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 65,
      "created_at": "2024-04-30T21:09:40Z",
      "updated_at": "2024-06-26T19:10:55Z",
      "closed_at": "2024-06-26T19:10:44Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/118450",
        "html_url": "https://github.com/python/cpython/pull/118450",
        "diff_url": "https://github.com/python/cpython/pull/118450.diff",
        "patch_url": "https://github.com/python/cpython/pull/118450.patch",
        "merged_at": "2024-06-26T19:10:44Z"
      },
      "body": "This PR sets up tagged pointers for CPython.\r\n\r\nThe general idea is to create a separate struct `_PyStackRef` for everything on the evaluation stack to store the bits. This forces the C compiler to warn us if we try to cast things or pull things out of the struct directly.\r\n\r\nOnly for free threading: We tag the low bit if something is deferred - that means we skip incref and decref operations on it. This behavior may change in the future if Mark's plans to defer all objects in the interpreter loop pans out.\r\n\r\nThis implies a strict stack reference discipline is required. ALL incref and decref operations on stackrefs must use the stackref variants. It is unsafe to untag something then do normal incref/decref ops on it.\r\n\r\nThe new incref and decref variants are called dup and close. They mimic a \"handle\" API operating on these stackrefs.\r\n\r\nPlease read `Include/internal/pycore_stackref.h` for more information!\r\n<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\ngh-NNNNN: Summary of the changes made\r\n```\r\n\r\nWhere: gh-NNNNN refers to the GitHub issue number.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `main`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `main`.\r\n\r\n-->\r\n\r\n\r\n<!-- gh-issue-number: gh-117139 -->\r\n* Issue: gh-117139\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "Fidget-Spinner",
        "id": 28750310,
        "node_id": "MDQ6VXNlcjI4NzUwMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fidget-Spinner",
        "html_url": "https://github.com/Fidget-Spinner",
        "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
        "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
        "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
        "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
        "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/118450/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/118450/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2087341245",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2087341245",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2087341245,
          "node_id": "IC_kwDOBN0Z8c58aky9",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-30T21:13:08Z",
          "updated_at": "2024-04-30T21:13:08Z",
          "author_association": "MEMBER",
          "body": "Could we hold off on this until 3.14? It's only a week until feature freeze for 3.13 (at which point main becomes 3.14), and this looks like a lot of churn in a time where we all would like stability to merge things that are actually needed in 3.13.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2087341245/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2087357731",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2087357731",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2087357731,
          "node_id": "IC_kwDOBN0Z8c58ao0j",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-30T21:18:26Z",
          "updated_at": "2024-04-30T21:18:26Z",
          "author_association": "MEMBER",
          "body": "> Could we hold off on this until 3.14? It's only a week until feature freeze for 3.13 (at which point main becomes 3.14), and this looks like a lot of churn in a time where we all would like stability to merge things that are actually needed in 3.13.\r\n\r\nAlright. I always forget that ten other people are rushing in things at the same time as me. I don't think this will add any value for CPython 3.13 anyways at the moment.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2087357731/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2087487883",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2087487883",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2087487883,
          "node_id": "IC_kwDOBN0Z8c58bImL",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-30T21:57:34Z",
          "updated_at": "2024-04-30T21:57:34Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Could we hold off on this until 3.14?\r\n\r\nThat makes sense. I'll start providing feedback and reviewing this now, but it won't be merged in 3.13.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2087487883/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2091810741",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2091810741",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2091810741,
          "node_id": "IC_kwDOBN0Z8c58rn-1",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-02T21:55:19Z",
          "updated_at": "2024-05-02T21:55:19Z",
          "author_association": "MEMBER",
          "body": "Adding a lot more deferred objects exposes refleaks in the call sequence again. Need to investigate.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2091810741/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2102189437",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2102189437",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2102189437,
          "node_id": "IC_kwDOBN0Z8c59TN19",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-09T08:21:44Z",
          "updated_at": "2024-05-09T08:21:44Z",
          "author_association": "MEMBER",
          "body": "Can we have an issue for this. The linked issue is just about the tagging scheme, but this goes much deeper.\r\n\r\nWithout an isssue, there is nowhere to discuss design or other higher level problems.\r\n\r\n\r\nFor now, I'll comment on this PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2102189437/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2102190419",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2102190419",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2102190419,
          "node_id": "IC_kwDOBN0Z8c59TOFT",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-09T08:22:22Z",
          "updated_at": "2024-05-09T08:22:22Z",
          "author_association": "MEMBER",
          "body": "How are generators and coroutines to be handled?\r\n\r\nIf a deferred reference to an object is held in a suspended generator, and there are no other references to that object, what happens?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2102190419/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2102406791",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2102406791",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2102406791,
          "node_id": "IC_kwDOBN0Z8c59UC6H",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-09T10:35:18Z",
          "updated_at": "2024-05-09T10:35:18Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nWhen you're done making the requested changes, leave the comment: `I have made the requested changes; please review again`.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2102406791/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2102759803",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2102759803",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2102759803,
          "node_id": "IC_kwDOBN0Z8c59VZF7",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-09T14:20:40Z",
          "updated_at": "2024-05-09T14:20:40Z",
          "author_association": "MEMBER",
          "body": "> Can we have an issue for this. The linked issue is just about the tagging scheme, but this goes much deeper.\r\n\r\nPlease comment on that issue, or we can rename the title to be more inclusive of the current PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2102759803/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2105069303",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2105069303",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2105069303,
          "node_id": "IC_kwDOBN0Z8c59eM73",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-10T18:18:25Z",
          "updated_at": "2024-05-10T18:20:42Z",
          "author_association": "MEMBER",
          "body": "I have made the requested changes; please review again\r\n\r\nNamely:\r\n1. Manually convert most of the bytecodes.c to stackref, instead of making it magically done by the cases generator.\r\n2. Fix ownership problems when using steal or borrow.\r\n3. Tag all pointers `0b11`.\r\n\r\nTo be conservative, this PR only defers immortal objects at the moment and NULL.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2105069303/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2105069380",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2105069380",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2105069380,
          "node_id": "IC_kwDOBN0Z8c59eM9E",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-10T18:18:29Z",
          "updated_at": "2024-05-10T18:18:29Z",
          "author_association": "NONE",
          "body": "Thanks for making the requested changes!\n\n@markshannon: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2105069380/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2105281139",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2105281139",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2105281139,
          "node_id": "IC_kwDOBN0Z8c59fApz",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-10T21:16:03Z",
          "updated_at": "2024-05-10T21:16:03Z",
          "author_association": "MEMBER",
          "body": "Note: I'm aware that certain decref options don't follow the semantics laid out in the issue. For now they're still safe because they will never operate on deferred objects. In PEP 703's plan, (non-immortal) floats and ints will not be deferred. So we're safe for now. However, in the future **if** we want to defer everything, then those need to be removed https://github.com/python/cpython/issues/118930.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2105281139/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2106065583",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2106065583",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2106065583,
          "node_id": "IC_kwDOBN0Z8c59iAKv",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-12T00:10:58Z",
          "updated_at": "2024-05-12T00:10:58Z",
          "author_association": "MEMBER",
          "body": "5% performance hit on single-threaded default build: https://github.com/faster-cpython/benchmarking-public/tree/main/results/bm-20240511-3.14.0a0-144a6fa",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2106065583/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2107193748",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2107193748",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2107193748,
          "node_id": "IC_kwDOBN0Z8c59mTmU",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-13T10:19:48Z",
          "updated_at": "2024-05-13T10:19:48Z",
          "author_association": "MEMBER",
          "body": "I really think we need a design document (in an issue) that we can discuss before doing more work on this.\r\nI will attempt to summarize what I believe to be the design at the moment:\r\n\r\n* Values on \"localsplus\", that is the fast locals and evaluation stack, of frames may be deferred. This includes suspended generators, so that deferred references may occur in the heap without being present in the frame stack\r\n* A reference can only be deferred if it references an object whose class is in a fixed set of \"deferrable\" classes.\r\n* Because deferred references can exist in the heap alone, objects that can have deferred references to them can only collected by scanning the heap.\r\n* Calls to `Py_Dealloc` can cause a garbage collection and updating `stacktop` across all calls to `Py_Dealloc` and any other call that would escape the interpreter is deemed too expensive.\r\n* This has the following consequences:\r\n   * Since the stack pointer may not visible to the GC it must scan the whole stack including the dead part.\r\n   * Unused stack items must be initialized to NULL, so that they don't point to invalid memory.\r\n   * It is OK to scan dead pointers to deferred objects, as only the GC can free those objects.\r\n   * *I don't understand how non-deferred objects are freed, as we cannot safely look at non-deferred pointers.*\r\n \r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2107193748/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2107885361",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2107885361",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2107885361,
          "node_id": "IC_kwDOBN0Z8c59o8cx",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-13T15:00:26Z",
          "updated_at": "2024-05-13T15:00:26Z",
          "author_association": "CONTRIBUTOR",
          "body": "> I really think we need a design document (in an issue)...\r\n\r\nI'll add a more detailed summary of the GC changes to:\r\n\r\n*  https://github.com/python/cpython/issues/117376\r\n\r\n> I don't understand how non-deferred objects are freed, as we cannot safely look at non-deferred pointers\r\n\r\nWe don't look at non-deferred pointers above `stacktop` (beyond checking the tag). \r\n\r\nTo be clear, what we are describing here is an extra step in the GC that scans each thread's stack and ensures that deferred referenced objects from thread's stacks are kept alive. These frames are mostly not tracked and would not otherwise be considered by the GC.\r\n\r\nWe don't need to do anything special in this step for non-deferred references because those objects are kept alive by their reference count (i.e., computed `gc_refs > 0`), just like they are today.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2107885361/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2108103489",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2108103489",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2108103489,
          "node_id": "IC_kwDOBN0Z8c59pxtB",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-05-13T16:03:16Z",
          "updated_at": "2024-05-13T16:03:16Z",
          "author_association": "CONTRIBUTOR",
          "body": "I've updated https://github.com/python/cpython/issues/117376.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2108103489/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2146795361",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2146795361",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2146795361,
          "node_id": "IC_kwDOBN0Z8c5_9X9h",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-04T07:23:35Z",
          "updated_at": "2024-06-04T07:23:45Z",
          "author_association": "MEMBER",
          "body": "> 1. We should ensure that this is at least perf-neutral in the default build. If it's not, we should disable the tagged pointers.\r\n\r\nIt's definitely going to be slower. Last we measured it was 5% slowdown. I guess I'll disable it for the default build then (for now).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2146795361/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2146854976",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2146854976",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2146854976,
          "node_id": "IC_kwDOBN0Z8c5_9mhA",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-04T07:55:47Z",
          "updated_at": "2024-06-04T07:55:47Z",
          "author_association": "MEMBER",
          "body": "> We should ensure that this is at least perf-neutral in the default build. If it's not, we should disable the tagged pointers.\r\n\r\nI think I'm going to ask the Faster CPython team whether they want to land the PR with a 3-5% hit on default builds as-is, or ifdef it out and land with maybe a 1% perf hit (this would be due to fusing NULL into a normal pointer, thus causing dup and close to require xincref and xdecref on default builds).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2146854976/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2149592590",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2149592590",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2149592590,
          "node_id": "IC_kwDOBN0Z8c6AIC4O",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-05T11:26:05Z",
          "updated_at": "2024-06-05T11:26:05Z",
          "author_association": "MEMBER",
          "body": "No slowdown on default build:\r\nhttps://github.com/faster-cpython/benchmarking-public/tree/main/results/bm-20240604-3.14.0a0-6a6bae2\r\n\r\n5% slowdown on free-threaded build:\r\nhttps://github.com/faster-cpython/benchmarking-public/tree/main/results/bm-20240604-3.14.0a0-6a6bae2-NOGIL",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2149592590/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2150505697",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2150505697",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2150505697,
          "node_id": "IC_kwDOBN0Z8c6ALhzh",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-05T16:41:22Z",
          "updated_at": "2024-06-05T16:41:22Z",
          "author_association": "MEMBER",
          "body": "> Only tags all pointers 0b11 and NULL and immortal stuff as deferred for now.\r\n\r\nHey @Fidget-Spinner, could you update the PR description to be less criptic? I have no idea what you meant with this sentence. This PR is large enough that I think at least the PR description (and perhaps the commit message) should have a careful description of what this PR is doing. (The issue feels more like a discussion than a description of a specific design.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2150505697/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2155134060",
          "html_url": "https://github.com/python/cpython/pull/118450#issuecomment-2155134060",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/118450",
          "id": 2155134060,
          "node_id": "IC_kwDOBN0Z8c6AdLxs",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-07T16:08:21Z",
          "updated_at": "2024-06-07T16:09:23Z",
          "author_association": "MEMBER",
          "body": "I see that you removed `PyObject_Vectorcall_StackRef` and the other call variants. Thanks for doing that.\r\nCould you do the same for `_PyEval_UnpackIterableStackRef`, `_PyDict_FromStackRefItems`, `_PyBuildSlice_ConsumeStackRefs`, and `_PyUnicode_JoinStackRef`.\r\nCould you also convert `_PyList_FromStackSteal` and `_PyTuple_FromStackSteal` back to taking `PyObject **`?\r\nThat way the changes aren't leaking into the `Object` folder which should only be concerned with heap references.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2155134060/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/95749",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/95749/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/95749/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/95749/events",
      "html_url": "https://github.com/python/cpython/pull/95749",
      "id": 1330838353,
      "node_id": "PR_kwDOBN0Z8c48wvaX",
      "number": 95749,
      "title": "gh-95271: Improve sqlite3 tutorial wording",
      "user": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 667924166,
          "node_id": "MDU6TGFiZWw2Njc5MjQxNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/skip%20news",
          "name": "skip news",
          "color": "000000",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 23,
      "created_at": "2022-08-06T20:04:53Z",
      "updated_at": "2022-08-18T18:36:39Z",
      "closed_at": "2022-08-18T18:36:21Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/95749",
        "html_url": "https://github.com/python/cpython/pull/95749",
        "diff_url": "https://github.com/python/cpython/pull/95749.diff",
        "patch_url": "https://github.com/python/cpython/pull/95749.patch",
        "merged_at": "2022-08-18T18:36:21Z"
      },
      "body": "Using [the Di\u00e1taxis language of tutorials](https://diataxis.fr/tutorials/#the-language-of-tutorials) as a guideline.\r\n\r\n<!-- gh-issue-number: gh-95271 -->\r\n* Issue: gh-95271\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/95749/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/95749/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1207276405",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1207276405",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1207276405,
          "node_id": "IC_kwDOBN0Z8c5H9ZN1",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-06T20:13:45Z",
          "updated_at": "2022-08-06T20:13:45Z",
          "author_association": "CONTRIBUTOR",
          "body": "I removed the `:memory:` tip; it is given in the reference. Perhaps we can instead start the tutorial off by first using a memory database, then using an on-disk database.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1207276405/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1208593973",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1208593973",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1208593973,
          "node_id": "IC_kwDOBN0Z8c5ICa41",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-08T20:46:27Z",
          "updated_at": "2022-08-08T20:46:27Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks for the initial review, Ezio! Tutorials are indeed hard :) PTAL",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1208593973/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1208950520",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1208950520",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1208950520,
          "node_id": "IC_kwDOBN0Z8c5IDx74",
          "user": {
            "login": "CAM-Gerlach",
            "id": 17051931,
            "node_id": "MDQ6VXNlcjE3MDUxOTMx",
            "avatar_url": "https://avatars.githubusercontent.com/u/17051931?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CAM-Gerlach",
            "html_url": "https://github.com/CAM-Gerlach",
            "followers_url": "https://api.github.com/users/CAM-Gerlach/followers",
            "following_url": "https://api.github.com/users/CAM-Gerlach/following{/other_user}",
            "gists_url": "https://api.github.com/users/CAM-Gerlach/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CAM-Gerlach/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CAM-Gerlach/subscriptions",
            "organizations_url": "https://api.github.com/users/CAM-Gerlach/orgs",
            "repos_url": "https://api.github.com/users/CAM-Gerlach/repos",
            "events_url": "https://api.github.com/users/CAM-Gerlach/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CAM-Gerlach/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-09T06:02:01Z",
          "updated_at": "2022-08-09T06:02:07Z",
          "author_association": "MEMBER",
          "body": "(Didn't meant to approve, meant to make that a comment sorry)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1208950520/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1209102370",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1209102370",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1209102370,
          "node_id": "IC_kwDOBN0Z8c5IEXAi",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-09T08:54:22Z",
          "updated_at": "2022-08-09T08:54:22Z",
          "author_association": "CONTRIBUTOR",
          "body": "Ok, I've tried to address more of your concerns, Ezio and CAM; thank you so much for feedback. I updated the SQL example as well; let me know how you think it works.[^1]\r\n\r\n[^1]: Some other parts of the docs expand on the tutorial database; I think we should consider rewriting those to be stand-alone examples instead of leaning on the tutorial.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1209102370/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1209844405",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1209844405",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1209844405,
          "node_id": "IC_kwDOBN0Z8c5IHMK1",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-09T20:31:51Z",
          "updated_at": "2022-08-09T20:31:51Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Also, another comment: maybe I'm overly concerned, but I do see a potential issue with the name `python.db` for the database\u2014users might think it is somehow \"special\" or related to Python itself, rather than that by chance happening to on the topic of Python releases. Maybe `releases.db` or `python_releases.db` would be clearer and avoid any potentially special or confusing connotations?\r\n\r\nI thought about that myself; I think we should either revert to the original `example.db`, or maybe slightly better: `tutorial.db`.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1209844405/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1210415108",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1210415108",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1210415108,
          "node_id": "IC_kwDOBN0Z8c5IJXgE",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-10T09:34:05Z",
          "updated_at": "2022-08-10T09:34:05Z",
          "author_association": "CONTRIBUTOR",
          "body": "I think we're getting close to something usable, and hopefully something that is an improvement. I consider the following additions to the tutorial (maybe not in this PR):\r\n\r\n- introducing the connection context manager for implicitly committing inserted data\r\n- introducing the `sqlite3.Row` row factory",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1210415108/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1211455020",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1211455020",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1211455020,
          "node_id": "IC_kwDOBN0Z8c5INVYs",
          "user": {
            "login": "ezio-melotti",
            "id": 25624924,
            "node_id": "MDQ6VXNlcjI1NjI0OTI0",
            "avatar_url": "https://avatars.githubusercontent.com/u/25624924?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ezio-melotti",
            "html_url": "https://github.com/ezio-melotti",
            "followers_url": "https://api.github.com/users/ezio-melotti/followers",
            "following_url": "https://api.github.com/users/ezio-melotti/following{/other_user}",
            "gists_url": "https://api.github.com/users/ezio-melotti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ezio-melotti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ezio-melotti/subscriptions",
            "organizations_url": "https://api.github.com/users/ezio-melotti/orgs",
            "repos_url": "https://api.github.com/users/ezio-melotti/repos",
            "events_url": "https://api.github.com/users/ezio-melotti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ezio-melotti/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-11T01:10:54Z",
          "updated_at": "2022-08-11T01:10:54Z",
          "author_association": "MEMBER",
          "body": "\r\n> * introducing the connection context manager for implicitly committing inserted data\r\n\r\nHow common is this?  If it's like the builtin `open()`, where you want to use it pretty much all the time instead of calling `file.close()` manually, then it belongs in the tutorial.  If instead calling `.commit()` manually is common enough, then you might cover the context manager in a separate howto.\r\n\r\nYou can also use `.commit()` manually, and then add a sentence like \"It is also possible to use a context manager to commit directly.  The above code is equivalent to:: <two lines using the context manager>\"\r\n\r\n> * introducing the sqlite3.Row row factory\r\n\r\nThis sounds like it belongs in an howto too.\r\n\r\n---\r\n\r\nI'm also thinking whether it would be useful to have a \"Further readings\" list at the end of the tutorial that links to some of the howtos, or perhaps just a single link to the howto section (assuming the howtos are sorted from simpler to most complex).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1211455020/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1211505865",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1211505865",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1211505865,
          "node_id": "IC_kwDOBN0Z8c5INhzJ",
          "user": {
            "login": "CAM-Gerlach",
            "id": 17051931,
            "node_id": "MDQ6VXNlcjE3MDUxOTMx",
            "avatar_url": "https://avatars.githubusercontent.com/u/17051931?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CAM-Gerlach",
            "html_url": "https://github.com/CAM-Gerlach",
            "followers_url": "https://api.github.com/users/CAM-Gerlach/followers",
            "following_url": "https://api.github.com/users/CAM-Gerlach/following{/other_user}",
            "gists_url": "https://api.github.com/users/CAM-Gerlach/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CAM-Gerlach/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CAM-Gerlach/subscriptions",
            "organizations_url": "https://api.github.com/users/CAM-Gerlach/orgs",
            "repos_url": "https://api.github.com/users/CAM-Gerlach/repos",
            "events_url": "https://api.github.com/users/CAM-Gerlach/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CAM-Gerlach/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-11T03:02:38Z",
          "updated_at": "2022-08-11T03:02:48Z",
          "author_association": "MEMBER",
          "body": "> I'm also thinking whether it would be useful to have a \"Further readings\" list at the end of the tutorial that links to some of the howtos, or perhaps just a single link to the howto section (assuming the howtos are sorted from simpler to most complex).\r\n\r\nIf the former, this could be a `seealso` directive block",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1211505865/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1211702794",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1211702794",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1211702794,
          "node_id": "IC_kwDOBN0Z8c5IOR4K",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-11T08:39:58Z",
          "updated_at": "2022-08-11T08:39:58Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > I'm also thinking whether it would be useful to have a \"Further readings\" list at the end of the tutorial that links to some of the howtos, or perhaps just a single link to the howto section (assuming the howtos are sorted from simpler to most complex).\r\n> \r\n> If the former, this could be a `seealso` directive block\r\n\r\nI've also been thinking about this, and I think it is a good idea. I've also seen this in other well-structured docs (Django, amongst others, IIRC).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1211702794/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1212995139",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1212995139",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1212995139,
          "node_id": "IC_kwDOBN0Z8c5ITNZD",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-12T11:08:56Z",
          "updated_at": "2022-08-12T11:08:56Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Somehow something didn't get submitted right, maybe?\r\n\r\nThat's quite possible.\r\n\r\nI'll address the last rounds of review in the upcoming push.\r\n\r\nRegarding tone: I also noticed that Di\u00e1taxis uses three variants. I think second person singular would be a good fit. IMO, some parts can use the imperative mood (such as the SQL injection attack warnings).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1212995139/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1213005767",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1213005767",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1213005767,
          "node_id": "IC_kwDOBN0Z8c5ITP_H",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-12T11:22:30Z",
          "updated_at": "2022-08-12T11:22:30Z",
          "author_association": "CONTRIBUTOR",
          "body": "I pushed a new revision. I left some conversations open; feel free to close them.\r\n\r\nIn addition to addressing your highly appreciated review comments, I also tried to improve the overall tone of the tutorial.\r\n\r\nI left out introducing the row factory and the context manager; since I now added a `seealso` section that point to the howto's, that should be taken care of.\r\n\r\nI still think it would be nice to introduce the new sqlite3 CLI in the >= 3.12 version of the docs. It could be as simple as this:\r\n\r\n_First, let's check the SQLite version your sqlite3 module is built with by executing the command `python -m sqlite3 -v`._ etc.\r\n\r\nOTOH, the CLI may be better off with its own howto.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1213005767/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1214306752",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1214306752",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1214306752,
          "node_id": "IC_kwDOBN0Z8c5IYNnA",
          "user": {
            "login": "CAM-Gerlach",
            "id": 17051931,
            "node_id": "MDQ6VXNlcjE3MDUxOTMx",
            "avatar_url": "https://avatars.githubusercontent.com/u/17051931?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CAM-Gerlach",
            "html_url": "https://github.com/CAM-Gerlach",
            "followers_url": "https://api.github.com/users/CAM-Gerlach/followers",
            "following_url": "https://api.github.com/users/CAM-Gerlach/following{/other_user}",
            "gists_url": "https://api.github.com/users/CAM-Gerlach/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CAM-Gerlach/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CAM-Gerlach/subscriptions",
            "organizations_url": "https://api.github.com/users/CAM-Gerlach/orgs",
            "repos_url": "https://api.github.com/users/CAM-Gerlach/repos",
            "events_url": "https://api.github.com/users/CAM-Gerlach/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CAM-Gerlach/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-14T08:01:28Z",
          "updated_at": "2022-08-14T08:01:28Z",
          "author_association": "MEMBER",
          "body": "Sorry for the long delay on this; I got held up with other things and then was ~being lazy~ taking a break for a day.\r\n\r\n> I pushed a new revision. I left some conversations open; feel free to close them.\r\n\r\nJust FYI, unless and until python/core-workflow#460 is resolved, I can't mark even my own review comments as resolved.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1214306752/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1214351163",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1214351163",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1214351163,
          "node_id": "IC_kwDOBN0Z8c5IYYc7",
          "user": {
            "login": "evildmp",
            "id": 86222,
            "node_id": "MDQ6VXNlcjg2MjIy",
            "avatar_url": "https://avatars.githubusercontent.com/u/86222?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/evildmp",
            "html_url": "https://github.com/evildmp",
            "followers_url": "https://api.github.com/users/evildmp/followers",
            "following_url": "https://api.github.com/users/evildmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/evildmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/evildmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/evildmp/subscriptions",
            "organizations_url": "https://api.github.com/users/evildmp/orgs",
            "repos_url": "https://api.github.com/users/evildmp/repos",
            "events_url": "https://api.github.com/users/evildmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/evildmp/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-14T11:49:32Z",
          "updated_at": "2022-08-14T11:49:32Z",
          "author_association": "CONTRIBUTOR",
          "body": "> I thought about that myself; I think we should either revert to the original `example.db`, or maybe slightly better: `tutorial.db`.\r\n\r\n`tutorial.db` is what I would choose. It gives a good signal.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1214351163/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1214454156",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1214454156",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1214454156,
          "node_id": "IC_kwDOBN0Z8c5IYxmM",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-14T21:41:34Z",
          "updated_at": "2022-08-14T21:41:34Z",
          "author_association": "CONTRIBUTOR",
          "body": "Daniele's reasons for using first person plural kind of sold me. That form is used in other parts of the stdlib docs, so it should be ok to use it here as well. Let me know what you think.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1214454156/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1214885613",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1214885613",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1214885613,
          "node_id": "IC_kwDOBN0Z8c5Iaa7t",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-15T10:58:20Z",
          "updated_at": "2022-08-15T11:01:44Z",
          "author_association": "CONTRIBUTOR",
          "body": "> The tutorial looks great now! I left a few more comments if you feel like tweaking it a bit further, but otherwise I think it's ready to land. Undoubtedly a great improvement over the original.\r\n\r\nEven though we're not done yet, I'd like to summarise my experiences so far.\r\n\r\nThank you so much, both of you, and of course Daniele, for your patience and incredibly helpful reviews; I could never have done this without your help.\r\n\r\nI don't know about you, CAM and Ezio, but I think there are some lessons learned here (for me at least). Perhaps we could do a debrief on the up-coming docs meeting?\r\n\r\nHere are some thoughts. IMO, the PR was premature:\r\n\r\n- I thought I had a good grasp on how to apply Di\u00e1taxis, but there was a lot of details I had missed, or just forgot about while writing. Looking back at the reviews, I see that the reviews themselves changed during the course of the PR, probably because all of us were getting more and more into what applying Di\u00e1taxis is, and how to use it. (Pardon my clumsy wording there, but I hope you get the gist of it.) OTOH, the best way to learn something is to use it. It did not help that I'd read everything on the Di\u00e1taxis page up and down multiple times; I had to apply it and try to use it in order to discover that I was mostly fumbling in the dark, so it was a great learning experience \ud83d\ude03 \r\n- I should have discussed tone and langage before creating a PR. We now ended up with going back and forth with changes in  one and language, before eventually settling on first person plural combined with the imperative mode.\r\n- I should've come up with the example database and laid out the steps beforehand. Going back and forth with the examples was time-consuming, and unneeded. Once again, planning before doing is a good thing.\r\n- There's probably more we could've done better; fill in the blanks[^1]\r\n\r\n\r\n[^1]: or create a thread on discord \ud83d\ude06 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1214885613/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 2,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1214904052",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1214904052",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1214904052,
          "node_id": "IC_kwDOBN0Z8c5Iafb0",
          "user": {
            "login": "evildmp",
            "id": 86222,
            "node_id": "MDQ6VXNlcjg2MjIy",
            "avatar_url": "https://avatars.githubusercontent.com/u/86222?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/evildmp",
            "html_url": "https://github.com/evildmp",
            "followers_url": "https://api.github.com/users/evildmp/followers",
            "following_url": "https://api.github.com/users/evildmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/evildmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/evildmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/evildmp/subscriptions",
            "organizations_url": "https://api.github.com/users/evildmp/orgs",
            "repos_url": "https://api.github.com/users/evildmp/repos",
            "events_url": "https://api.github.com/users/evildmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/evildmp/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-15T11:22:14Z",
          "updated_at": "2022-08-15T11:22:14Z",
          "author_association": "CONTRIBUTOR",
          "body": "> * I see that the reviews themselves changed during the course of the PR ... I had to apply it and try to use it in order to discover that I was mostly fumbling in the dark, so it was a great learning experience \ud83d\ude03\r\n> * I should have discussed tone and langage before creating a PR. \r\n> * I should've come up with the example database and laid out the steps beforehand. Going back and forth with the examples was time-consuming, and unneeded. Once again, planning before doing is a good thing.\r\n\r\nYou will be glad to know that the entire second workshop (\"Getting documentation done\") attempts to address exactly these questions. \r\n\r\nPlease bring your thoughts and experiences. If you can take a couple of minutes, please write down your _feelings_ about those experiences, which they are still fresh - we'll discuss those.\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1214904052/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1214913528",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1214913528",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1214913528,
          "node_id": "IC_kwDOBN0Z8c5Iahv4",
          "user": {
            "login": "ezio-melotti",
            "id": 25624924,
            "node_id": "MDQ6VXNlcjI1NjI0OTI0",
            "avatar_url": "https://avatars.githubusercontent.com/u/25624924?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ezio-melotti",
            "html_url": "https://github.com/ezio-melotti",
            "followers_url": "https://api.github.com/users/ezio-melotti/followers",
            "following_url": "https://api.github.com/users/ezio-melotti/following{/other_user}",
            "gists_url": "https://api.github.com/users/ezio-melotti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ezio-melotti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ezio-melotti/subscriptions",
            "organizations_url": "https://api.github.com/users/ezio-melotti/orgs",
            "repos_url": "https://api.github.com/users/ezio-melotti/repos",
            "events_url": "https://api.github.com/users/ezio-melotti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ezio-melotti/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-15T11:35:08Z",
          "updated_at": "2022-08-15T11:35:08Z",
          "author_association": "MEMBER",
          "body": "> Going back and forth with the examples was time-consuming, and unneeded.  Once again, planning before doing is a good thing.\r\n\r\nI think we didn't quite know exactly what our destination was when we started, so we kept iterating and exploring different solutions until we were satisfied.  Even though it was somewhat time-consuming, I don't think it was unneeded: as you mentioned, going through this whole process is what allowed us to learn.  Had we just blindly followed some guidelines, we wouldn't have had the opportunity to try, compare, and discuss all our options and their pros and cons.\r\n\r\nAfter going through this experience (and after the Diataxis workshop), we will in a much better position to take informed decisions while working on the documentation, and we will be able to do so more efficiently.\r\n\r\nAlso thank you for your patience and for listening to all our comments and bikesheddings[^1].\r\n\r\n[^1]: despite the fact that at times we were borderline [pilkunnussijat](https://en.wiktionary.org/wiki/pilkunnussija) :upside_down_face: ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1214913528/reactions",
            "total_count": 4,
            "+1": 0,
            "-1": 0,
            "laugh": 2,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1216086250",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1216086250",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1216086250,
          "node_id": "IC_kwDOBN0Z8c5IfADq",
          "user": {
            "login": "CAM-Gerlach",
            "id": 17051931,
            "node_id": "MDQ6VXNlcjE3MDUxOTMx",
            "avatar_url": "https://avatars.githubusercontent.com/u/17051931?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CAM-Gerlach",
            "html_url": "https://github.com/CAM-Gerlach",
            "followers_url": "https://api.github.com/users/CAM-Gerlach/followers",
            "following_url": "https://api.github.com/users/CAM-Gerlach/following{/other_user}",
            "gists_url": "https://api.github.com/users/CAM-Gerlach/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CAM-Gerlach/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CAM-Gerlach/subscriptions",
            "organizations_url": "https://api.github.com/users/CAM-Gerlach/orgs",
            "repos_url": "https://api.github.com/users/CAM-Gerlach/repos",
            "events_url": "https://api.github.com/users/CAM-Gerlach/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CAM-Gerlach/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-16T02:57:02Z",
          "updated_at": "2022-08-16T02:57:02Z",
          "author_association": "MEMBER",
          "body": "> OTOH, the best way to learn something is to use it. It did not help that I'd read everything on the Di\u00e1taxis page up and down multiple times; I had to apply it and try to use it in order to discover that I was mostly fumbling in the dark, so it was a great learning experience\r\n\r\n+:100: That has definitely been my experience with Diataxis too\u2014in general, I learn best by doing, and I've continually learned and re-learned new insights both in the overall course of experimenting with Diataxis, and just in this PR in particular. Funny enough, this seems to be one of the core messages of the Diataxis tutorial guidance itself:\r\n\r\n> A lesson entails a relationship between a teacher and a pupil. In all learning of this kind, **learning takes place through what the pupil does**.\r\n\r\nIndeed, that seems to be how we've best learned Diataxis :)\r\n\r\n> * I should have discussed tone and langage before creating a PR. We now ended up with going back and forth with changes in  one and language, before eventually settling on first person plural combined with the imperative mode.\r\n> \r\n> * I should've come up with the example database and laid out the steps beforehand. Going back and forth with the examples was time-consuming, and unneeded. Once again, planning before doing is a good thing.\r\n\r\nMaybe, but it would have been difficult to actually see how these worked out in context before seeing the whole thing, and once we've gone through it once (or a few times), guidelines can be documented in the dev guide and future PRs will go much smoother, without any back and forth. We might have spent the time planning, and then thrown all that out anyway when it didn't quite work in practice, or at least wasn't fully informed by it.\r\n\r\nTypically, I'll write and have others review an outline (or more usually with Spyder, have whoever the writer is do that for _me_ to review) for _new_ docs, which can be very good at focusing discussion on the big picture\u2014what needs to be included, what could be expended upon, what's missing and how to organize it all\u2014before spending time on or getting too into the weeds of the details. Conversely, for re-writes like this, especially given its one of our first times grappling with applying Diataxis guidance to tutorials, it seems you did what planning you could, but we could only go so far before just going ahead with an implementation and iterating from there.\r\n\r\n> Also thank you for your patience and for listening to all our comments and bikesheddings\r\n\r\nTo be fair, that applies a lot more to me than to you, heh",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1216086250/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1217840569",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1217840569",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1217840569,
          "node_id": "IC_kwDOBN0Z8c5IlsW5",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-17T10:40:13Z",
          "updated_at": "2022-08-17T10:40:13Z",
          "author_association": "CONTRIBUTOR",
          "body": "I think we should consider landing this. Further improvements can be done incrementally, using Issues and PRs.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1217840569/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1219793505",
          "html_url": "https://github.com/python/cpython/pull/95749#issuecomment-1219793505",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95749",
          "id": 1219793505,
          "node_id": "IC_kwDOBN0Z8c5ItJJh",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-18T18:17:10Z",
          "updated_at": "2022-08-18T18:17:10Z",
          "author_association": "CONTRIBUTOR",
          "body": "All right, I'm going to land this tonight. Great working with you all!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1219793505/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 2,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/46888",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/46888/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/46888/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/46888/events",
      "html_url": "https://github.com/python/cpython/issues/46888",
      "id": 1198830882,
      "node_id": "MDU6SXNzdWUxMTk4ODMwODgy",
      "number": 46888,
      "title": "Adding a new regex module (compatible with re)",
      "user": {
        "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
        "id": 92819966,
        "node_id": "M_kgDOBYhR_g",
        "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
        "html_url": "https://github.com/timehorse",
        "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
        "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
        "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
        "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
        "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
        "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
        "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668725,
          "node_id": "LA_kwDOBN0Z8c7viAS1",
          "url": "https://api.github.com/repos/python/cpython/labels/stdlib",
          "name": "stdlib",
          "color": "09fc59",
          "default": false,
          "description": "Python modules in the Lib dir"
        },
        {
          "id": 4018687965,
          "node_id": "LA_kwDOBN0Z8c7viE_d",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-regex",
          "name": "topic-regex",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 334,
      "created_at": "2008-04-15T11:57:51Z",
      "updated_at": "2022-04-10T01:25:27Z",
      "closed_at": "2021-01-25T22:30:27Z",
      "author_association": "MANNEQUIN",
      "type": null,
      "active_lock_reason": null,
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [2636](https://bugs.python.org/issue2636)\n--- | :---\nNosy | @loewis, @birkenfeld, @gpshead, @amauryfa, @ncoghlan, @abalkin, @pitrou, @vstinner, @giampaolo, @mark-summerfield, @ssbr, @ezio-melotti, @akitada, @stevendaprano, @alex, @bitdancer, @sandrotosi, @sorcio, @ericsnowcurrently, @Fak3, @serhiy-storchaka, @jayvdb\nFiles | <li>[regex_test-20100316](https://bugs.python.org/file16563/regex_test-20100316 \"Uploaded as application/octet-stream at 2010-03-16.15:56:36 by moreati\"): Python 2.6.5 re test run against regex-20100305</li><li>[issue2636-20101230.zip](https://bugs.python.org/file20192/issue2636-20101230.zip \"Uploaded as application/x-zip-compressed at 2010-12-30.02:25:56 by mrabarnett\")</li><li>[remove_guards.diff](https://bugs.python.org/file20203/remove_guards.diff \"Uploaded as text/plain at 2010-12-31.09:23:52 by jacques\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = <Date 2021-01-25.22:30:27.300>\ncreated_at = <Date 2008-04-15.11:57:51.375>\nlabels = ['expert-regex', 'type-feature', 'library']\ntitle = 'Adding a new regex module (compatible with re)'\nupdated_at = <Date 2021-01-25.22:30:27.294>\nuser = 'https://bugs.python.org/timehorse'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-01-25.22:30:27.294>\nactor = 'vstinner'\nassignee = 'none'\nclosed = True\nclosed_date = <Date 2021-01-25.22:30:27.300>\ncloser = 'vstinner'\ncomponents = ['Library (Lib)', 'Regular Expressions']\ncreation = <Date 2008-04-15.11:57:51.375>\ncreator = 'timehorse'\ndependencies = []\nfiles = ['16563', '20192', '20203']\nhgrepos = ['108']\nissue_num = 2636\nkeywords = ['patch']\nmessage_count = 334.0\nmessages = ['65513', '65593', '65613', '65614', '65617', '65725', '65726', '65727', '65734', '65838', '65841', '66033', '67309', '67447', '67448', '68336', '68339', '68358', '68399', '68409', '73185', '73295', '73714', '73717', '73721', '73730', '73752', '73766', '73779', '73780', '73782', '73791', '73794', '73798', '73801', '73803', '73805', '73827', '73848', '73853', '73854', '73855', '73861', '73875', '73955', '74025', '74026', '74058', '74104', '74174', '74203', '74204', '74904', '80916', '81112', '81236', '81238', '81239', '81240', '81359', '81473', '81475', '82673', '82739', '82950', '83271', '83277', '83390', '83411', '83427', '83428', '83429', '83988', '83989', '83993', '84350', '86004', '86032', '89632', '89634', '89643', '90954', '90961', '90985', '90986', '90989', '91028', '91035', '91038', '91245', '91250', '91437', '91439', '91448', '91450', '91460', '91462', '91463', '91473', '91474', '91490', '91495', '91496', '91497', '91500', '91535', '91598', '91607', '91610', '91671', '91917', '97860', '98809', '99072', '99132', '99148', '99186', '99190', '99462', '99470', '99479', '99481', '99494', '99548', '99552', '99665', '99668', '99835', '99863', '99872', '99888', '99890', '99892', '100066', '100076', '100080', '100134', '100152', '100359', '100362', '100370', '100452', '101172', '101181', '101193', '101557', '102042', '103003', '103060', '103064', '103078', '103095', '103096', '103097', '109358', '109363', '109372', '109384', '109401', '109403', '109404', '109405', '109406', '109407', '109408', '109409', '109410', '109413', '109447', '109460', '109461', '109463', '109474', '109657', '110233', '110237', '110701', '110704', '110761', '111519', '111531', '111643', '111652', '111656', '111660', '111921', '113927', '113931', '114034', '114766', '116133', '116151', '116223', '116227', '116229', '116231', '116238', '116248', '116252', '116276', '116749', '117008', '117046', '117050', '118243', '118631', '118636', '118640', '118674', '118682', '119887', '119930', '119947', '119951', '119956', '119958', '120013', '120037', '120038', '120164', '120202', '120203', '120204', '120206', '120215', '120216', '120243', '120571', '120969', '120976', '120984', '120986', '121136', '121145', '121149', '121589', '121832', '122221', '122225', '122228', '122880', '123518', '123527', '123747', '124581', '124582', '124585', '124614', '124626', '124627', '124746', '124750', '124759', '124816', '124821', '124833', '124834', '124891', '124900', '124904', '124905', '124906', '124909', '124912', '124929', '124931', '124936', '124950', '124959', '124971', '124988', '124990', '125291', '126294', '126372', '127045', '130886', '130905', '130906', '130999', '135700', '135703', '135704', '140102', '140152', '140154', '143090', '143333', '143334', '143337', '143340', '143343', '143350', '143352', '143355', '143366', '143367', '143374', '143377', '143389', '143423', '143442', '143445', '143447', '143448', '143467', '143471', '143619', '144110', '152210', '152211', '152212', '152214', '152215', '152217', '152218', '152246', '157445', '174888', '221629', '221657', '230846', '230862', '230866', '230867', '230873', '230877', '230885', '230887', '231137', '231141', '231159', '231165', '385674']\nnosy_count = 43.0\nnosy_names = ['loewis', 'georg.brandl', 'gregory.p.smith', 'jimjjewett', 'sjmachin', 'amaury.forgeotdarc', 'ncoghlan', 'belopolsky', 'pitrou', 'vstinner', 'nneonneo', 'giampaolo.rodola', 'rsc', 'timehorse', 'mark', 'vbr', 'Devin Jeanpierre', 'ezio.melotti', 'mrabarnett', 'jaylogan', 'akitada', 'moreati', 'steven.daprano', 'alex', 'r.david.murray', 'jacques', 'zdwiel', 'THRlWiTi', 'sandro.tosi', 'abacabadabacaba', 'stiv', 'davide.rizzo', 'mattchaput', 'ronnix', 'tshepang', 'eric.snow', 'akoumjian', 'Roman.Evstifeev', 'serhiy.storchaka', 'Mateon1', 'jayvdb', 'Socob', 'petros']\npr_nums = []\npriority = 'normal'\nresolution = 'rejected'\nstage = 'resolved'\nstatus = 'closed'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue2636'\nversions = []\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/46888/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/46888/timeline",
      "performed_via_github_app": null,
      "state_reason": "completed",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417726",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417726",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417726,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3MjY=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-15T11:57:48Z",
          "updated_at": "2008-04-15T11:57:48Z",
          "author_association": "MANNEQUIN",
          "body": "I am working on adding features to the current Regexp implementation,\nwhich is now set to 2.2.2.  These features are to bring the Regexp code\ncloser in line with Perl 5.10 as well as add a few python-specific\nniceties and potential speed-ups and clean-ups.\n\nI will be posting regular patch updates to this thread when major\nmilestones have been reach with a description of the feature(s) added. \nCurrently, the list of proposed changes are (in no particular order):\n\n1) Fix \\<a href=\"http://bugs.python.org/issue433030\"\\>bpo-433030\\</a\\> by\nadding support for Atomic Grouping and Possessive Qualifiers\n\n2) Make named matches direct attributes of the match object; i.e.\ninstead of m.group('foo'), one will be able to write simply m.foo.\n\n3) (maybe) make Match objects subscriptable, such that m[n] is\nequivalent to m.group(n) and allow slicing.\n\n4) Implement Perl-style back-references including relative back-references.\n\n5) Add a well-formed, python-specific comment modifier, e.g. (?P#...);\nthe difference between (?P#...) and Perl/Python's (?#...) is that the\nformer will allow nested parentheses as well as parenthetical escaping,\nso that patterns of the form '(?P# Evaluate (the following) expression,\n3\\\\) using some other technique)'.  The (?P#...) will interpret this\nentire expression as a comment, where as with (?#...) only, everything\nfollowing ' expression...' would be considered part of the match. \n(?P#...) will necessarily be slower than (?#...) and so only should be\nused if richer commenting style is required but the verbose mode is not\ndesired.\n\n6) Add official support for fast, non-repeating capture groups with the\nTemplate option.  Template is unofficially supported and disables all\nrepeat operators (*, + and ?).  This would mainly consist of documenting\nits behavior.\n\n7) Modify the re compiled expression cache to better handle the\nthrashing condition.  Currently, when regular expressions are compiled,\nthe result is cached so that if the same expression is compiled again,\nit is retrieved from the cache and no extra work has to be done.  This\ncache supports up to 100 entries.  Once the 100th entry is reached, the\ncache is cleared and a new compile must occur.  The danger, all be it\nrare, is that one may compile the 100th expression only to find that one\nrecompiles it and has to do the same work all over again when it may\nhave been done 3 expressions ago.  By modifying this logic slightly, it\nis possible to establish an arbitrary counter that gives a time stamp to\neach compiled entry and instead of clearing the entire cache when it\nreaches capacity, only eliminate the oldest half of the cache, keeping\nthe half that is more recent.  This should limit the possibility of\nthrashing to cases where a very large number of Regular Expressions are\ncontinually recompiled.  In addition to this, I will update the limit to\n256 entries, meaning that the 128 most recent are kept.\n\n8) Emacs/Perl style character classes, e.g. [:alphanum:].  For instance,\n:alphanum: would not include the '\\_' in the character class.\n\n9) C-Engine speed-ups.  I commenting and cleaning up the \\_sre.c Regexp\nengine to make it flow more linearly, rather than with all the current\ngotos and replace the switch-case statements with lookup tables, which\nin tests have shown to be faster.  This will also include adding many\nmore comments to the C code in order to make it easier for future\ndevelopers to follow.  These changes are subject to testing and some\nmodifications may not be included in the final release if they are shown\nto be slower than the existing code.  Also, a number of Macros are being\neliminated where appropriate.\n\n10) Export any (not already) shared value between the Python Code and\nthe C code, e.g. the default Maximum Repeat count (65536); this will\nallow those constants to be changed in 1 central place.\n\n11) Various other Perl 5.10 conformance modifications, TBD.\n\n\nMore items may come and suggestions are welcome.\n\n\\-----\n\nCurrently, I have code which implements 5) and 7), have done some work\non 10) and am almost 9).  When 9) is complete, I will work on 1), some\nof which, such as parsing, is already done, then probably 8) and 4)\nbecause they should not require too much work -- 4) is parser-only\nAFAICT.  Then, I will attempt 2) and 3), though those will require\nchanges at the C-Code level.  Then I will investigate what additional\nelements of 11) I can easily implement.  Finally, I will write\ndocumentation for all of these features, including 6).\n\nIn a few days, I will provide a patch with my interim results and will\nupdate the patches with regular updates when Milestones are reached.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417726/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417728",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417728",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417728,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3Mjg=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-17T22:06:58Z",
          "updated_at": "2008-04-17T22:06:58Z",
          "author_association": "MANNEQUIN",
          "body": "I am very sorry to report (at least for me) that as of this moment, item \n9), although not yet complete, is stable and able to pass all the \nexisting python regexp tests.  Because these tests are timed, I am using \nthe timings from the first suite of tests to perform a benchmark of \nperformance between old and new code.  Based on discussion with Andrew \nKuchling, I have decided for the sake of simplicity, the \"timing\" of \neach version is to be calculated by the absolute minimum time to execute \nobserved because it is believed this execution would have had the most \ncontinuous CPU cycles and thus most closely represents the true \nexecution time.\n\nIt is this current conclusion that greatly saddens me, not that the \neffort has not been valuable in understanding the current engine.  \nIndeed, I understand the current engine now well enough that I could \nproceed with the other modifications as-is rather than implementing them \nwith the new engine.  Mind you, I will likely not bring over the copious  \ncomments that the new engine received when I translated it to a form \nwithout C_Macros and gotos, as that would require too much effort IMHO.\n\nAnyway, all that being said, and keeping in mind that I am not 100% \nsatisfied with the new engine and may still be able to wring some timing \nout of it -- not that I will spend much more time on this -- here is \nwhere we currently stand:\n\nOld Engine: 6.574s\nNew Engine: 7.239s\n\nThis makes the old Engine 665ms faster over the entire first test_re.py \nsuite, or 9% faster than the New Engine.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417728/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417729",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417729",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417729,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3Mjk=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-18T13:38:47Z",
          "updated_at": "2008-04-18T13:38:47Z",
          "author_association": "MANNEQUIN",
          "body": "Here are the modification so far for item 9) in \\_sre.c plus some small\nmodifications to sre_constants.h which are only to get \\_sre.c to\ncompile; normally sre_constants.h is generated by sre_constants.py, so\nthis is not the final version of that file.  I also would have intended\nto make SRE_CHARSET and SRE_COUNT use lookup tables, as well as maybe\nothers, but not likely any other lookup tables.  I also want to remove\nalloc_pos out of the self object and make it a parameter to the ALLOC\nparameter and probably get rid of the op_code attribute since it is only\nused in 1 place to save one subtract in a very rare case.  But I want to\nresolve the 10% problem first, so would appreciate it if people could\nlook at the REMOVE_SRE_MATCH_MACROS section of code and compare it to\nthe non-REMOVE_SRE_MATCH_MACROS version of SRE_MATCH and see if you can\nsuggest anything to make the former (new code) faster to get me that\nelusive 10%.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417729/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417730",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417730",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417730,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3MzA=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-18T14:23:18Z",
          "updated_at": "2008-04-18T14:23:18Z",
          "author_association": "MANNEQUIN",
          "body": "Here is a patch to implement item 7)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417730/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417733",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417733",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417733,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3MzM=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-18T14:50:44Z",
          "updated_at": "2008-04-18T14:50:44Z",
          "author_association": "MANNEQUIN",
          "body": "This simple patch adds (?P#...)-style comment support.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417733/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417735",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417735",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417735,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3MzU=",
          "user": {
            "login": "74c4563b-ab1c-43d8-9219-30c4eca796bc",
            "id": 92799436,
            "node_id": "M_kgDOBYgBzA",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799436?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc",
            "html_url": "https://github.com/jimjjewett",
            "followers_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/followers",
            "following_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/following{/other_user}",
            "gists_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/subscriptions",
            "organizations_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/orgs",
            "repos_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/repos",
            "events_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-24T14:23:34Z",
          "updated_at": "2008-04-24T14:23:34Z",
          "author_association": "MANNEQUIN",
          "body": "> These features are to bring the Regexp code closer in line with Perl 5.10\n\nWhy 5.1 instead of 5.8 or at least 5.6?  Is it just a scope-creep issue?\n\n> as well as add a few python-specific\n\nbecause this also adds to the scope.\n\n\n> 2) Make named matches direct attributes \n> of the match object; i.e. instead of m.group('foo'), \n> one will be able to write simply m.foo.\n\n> 3) (maybe) make Match objects subscriptable, such \n> that m[n] is equivalent to m.group(n) and allow slicing.\n\n(2) and (3) would both be nice, but I'm not sure it makes sense to do \n\\*both* instead of picking one.\n\n> 5) Add a well-formed, python-specific comment modifier, \n> e.g. (?P#...);  \n\n[handles parens in comments without turning on verbose, but is slower]\n\nWhy?  It adds another incompatibility, so it has to be very useful or \nclear.  What exactly is the advantage over just turning on verbose?\n\n> 9) C-Engine speed-ups. ...\n> a number of Macros are being eliminated where appropriate.\n\nBe careful on those, particular on str/unicode and different compile options.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417735/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417737",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417737",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417737,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3Mzc=",
          "user": {
            "login": "amauryfa",
            "id": 645208,
            "node_id": "MDQ6VXNlcjY0NTIwOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/645208?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/amauryfa",
            "html_url": "https://github.com/amauryfa",
            "followers_url": "https://api.github.com/users/amauryfa/followers",
            "following_url": "https://api.github.com/users/amauryfa/following{/other_user}",
            "gists_url": "https://api.github.com/users/amauryfa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/amauryfa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/amauryfa/subscriptions",
            "organizations_url": "https://api.github.com/users/amauryfa/orgs",
            "repos_url": "https://api.github.com/users/amauryfa/repos",
            "events_url": "https://api.github.com/users/amauryfa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/amauryfa/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-24T14:31:53Z",
          "updated_at": "2008-04-24T14:31:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "> \\> These features are to bring the Regexp code closer in line \n> \\> with Perl 5.10\n> \n> Why 5.1 instead of 5.8 or at least 5.6?  Is it just a scope-creep issue?\n\n5.10.0 comes after 5.8 and is the latest version (2007/12/18)! \nYes it is confusing.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417737/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417740",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417740",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417740,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NDA=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-24T16:06:23Z",
          "updated_at": "2008-04-24T16:06:23Z",
          "author_association": "MANNEQUIN",
          "body": "Thanks Jim for your thoughts!\n\nArmaury has already explained about Perl 5.10.0.  I suppose it's like\nMacintosh version numbering, since Mac Tiger went from version 10.4.9 to\n10.4.10 and 10.4.11 a few years ago.  Maybe we should call Python 2.6\nPython 2.06 just in case.  But 2.6 is the known last in the 2 series so\nit's not a problem for us!  :)\n\n>\\> as well as add a few python-specific\n>\n> because this also adds to the scope.\n\nAt this point the only python-specific changes I am proposing would be\nitems 2, 3 (discussed below), 5 (discussed below), 6 and 7.  6 is only a\ndocumentation change, the code is already implemented.  7 is just a\nbetter behavior.  I think it is RARE one compiles more than 100 unique\nregular expressions, but you never know as projects tend to grow over\ntime, and in the old code the 101st would be recompiled even if it was\njust compiled 2 minutes ago.  The patch is available so I leave it to\nthe community to judge for themselves whether it is worth it, but as you\ncan see, it's not a very large change.\n\n>\\> 2) Make named matches direct attributes \n>\\> of the match object; i.e. instead of m.group('foo'), \n>\\> one will be able to write simply m.foo.\n>\n>\\> 3) (maybe) make Match objects subscriptable, such \n>\\> that m[n] is equivalent to m.group(n) and allow slicing.\n>\n> (2) and (3) would both be nice, but I'm not sure it makes sense to do \n> \\*both* instead of picking one.\n\nWell, I think named matches are better than numbered ones, so I'd\ndefinitely go with 2.  The problem with 2, though, is that it still\nleaves the rather typographically intense m.group(n), since I cannot\nwrite m.3.  However, since capture groups are always numbered\nsequentially, it models a list very nicely.  So I think for indexing by\ngroup number, the subscripting operator makes sense.  I was not\noriginally suggesting m['foo'] be supported, but I can see how that may\ncome out of 3.  But there is a restriction on python named matches that\nthey have to be valid python and that strikes me as 2 more than 3\nbecause 3 would not require such a restriction but 2 would.  So at least\nI want 2, but it seems IMHO m[1] is better than m.group(1) and not in\nthe least hard or a confusing way of retrieving the given group.  Mind\nyou, the Match object is a C-struct with python binding and I'm not\nexactly sure how to add either feature to it, but I'm sure the C-API\nmanual will help with that.\n\n>\\> 5) Add a well-formed, python-specific comment modifier, \n>\\> e.g. (?P#...);  \n>\n> [handles parens in comments without turning on verbose, but is slower]\n>\n> Why?  It adds another incompatibility, so it has to be very useful or \n> clear.  What exactly is the advantage over just turning on verbose?\n\nWell, Larry Wall and Guido agreed long ago that we, the python\ncommunity, own all expressions of the form (?P...) and although I'd be\nmy preference to make (?#...) more in conformance with understanding\nparenthesis nesting, changing the logic behind THAT would make python\nnon-standard.  So as far as any conflicting design, we needn't worry.\n\nAs for speed, the this all occurs in the parser and does not effect the\ncompiler or engine.  It occurs only after a (?P has been read and then\nonly as the last check before failure, so it should not be much slower\nexcept when the expression is invalid.  The actual execution time to\nfind the closing brace of (?P#...) is a bit slower than that for (?#...)\nbut not by much.\n\nVerbose is generally a good idea for anything more than a trivial\nRegular Expression.  However, it can have overhead if not included as\nthe first flag: an expression is always checked for verbose\npost-compilation and if it is encountered, the expression is compiled a\nsecond time, which is somewhat wasteful.  But the reason I like the\n(?P#...) over (?#...) is because I think people would more tend to assume:\n\nr'He(?# 2 (TWO) ls)llo' should match \"Hello\" but it doesn't.\n\nThat expression only matches \"He ls)llo\", so I created the (?P#...) to\nmake the comment match type more intuitive:\n\nr'He(?P# 2 (TWO) ls)llo' matches \"Hello\".\n\n>\\> 9) C-Engine speed-ups. ...\n>\\> a number of Macros are being eliminated where appropriate.\n>\n> Be careful on those, particular on str/unicode and different\n> compile options.\n\nWill do; thanks for the advice!  I have only observed the UNICODE flag\ncontrolling whether certain code is used (besides the ones I've added)\nand have tried to stay true to that when I encounter it.  Mind you,\nunless I can get my extra 10% it's unlikely I'd actually go with item 9\nhere, even if it is easier to read IMHO.  However, I want to run the new\nengine proposal through gprof to see if I can track down some bottlenecks.\n\nAt some point, I hope to get my current changes on Launchpad if I can\nget that working.  If I do, I'll give a link to how people can check out\nmy working code here as well.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417740/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417744",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417744",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417744,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NDQ=",
          "user": {
            "login": "74c4563b-ab1c-43d8-9219-30c4eca796bc",
            "id": 92799436,
            "node_id": "M_kgDOBYgBzA",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799436?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc",
            "html_url": "https://github.com/jimjjewett",
            "followers_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/followers",
            "following_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/following{/other_user}",
            "gists_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/subscriptions",
            "organizations_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/orgs",
            "repos_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/repos",
            "events_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/74c4563b-ab1c-43d8-9219-30c4eca796bc/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-24T18:09:25Z",
          "updated_at": "2008-04-24T18:09:25Z",
          "author_association": "MANNEQUIN",
          "body": "Python 2.6 isn't the last, but Guido has said that there won't be a 2.10.\n\n> Match object is a C-struct with python binding\n> and I'm not exactly sure how to add either feature to it\n\nI may be misunderstanding -- isn't this just a matter of writing the \nfunction and setting it in the tp_as_sequence and tp_as_mapping slots?\n\n> Larry Wall and Guido agreed long ago that we, the python\n> community, own all expressions of the form (?P...)\n\nCool -- that reference should probably be added to the docs.  For someone \ntrying to learn or translate regular expressions, it helps to know that (?P\n ...) is explicitly a python extension (even if Perl adopts it later).\n\nDefinately put the example in the doc.  \n\n    r'He(?# 2 (TWO) ls)llo' should match \"Hello\" but it doesn't.  Maybe \neven without the change, as doco on the current situation.\n\nDoes VERBOSE really have to be the first flag, or does it just have to be on \nthe whole pattern instead of an internal switch?\n\nI'm not sure I fully understand what you said about template.  Is this a \nspecial undocumented switch, or just an internal optimization mode that \nshould be triggered whenever the repeat operators don't happen to occur?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417744/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417745",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417745",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417745,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NDU=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-26T10:08:05Z",
          "updated_at": "2008-04-26T10:08:05Z",
          "author_association": "MEMBER",
          "body": "I don't know anything about regexp implementation, but if you replace a\nswitch-case with a function lookup table, it isn't surprising that the\nnew version ends up slower. A local jump is always faster than a\nfunction call, because of the setup overhead and stack manipulation the\nlatter involves.\n\nSo you might try to do the cleanup while keeping the switch-case\nstructure, if possible.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417745/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417747",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417747",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417747,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NDc=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-26T11:51:10Z",
          "updated_at": "2008-04-26T11:51:10Z",
          "author_association": "MANNEQUIN",
          "body": "Thank you and Merci Antoine!\n\nThat is a good point.  It is clearly specific to the compiler whether a \nswitch-case will be turned into a series of conditional branches or \nsimply creating an internal jump table with lookup.  And it is true \nthat most compilers, if I understand correctly, use the jump-table \napproach for any switch-case over 2 or 3 entries when the cases are \ntightly grouped and near 0.  That is probably why the original code \nworked so fast.  I'll see if I can combine the best of both \napproaches.  Thanks again!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417747/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417749",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417749",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417749,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NDk=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-05-01T14:15:35Z",
          "updated_at": "2008-05-01T14:15:35Z",
          "author_association": "MANNEQUIN",
          "body": "I am making my changes in a Bazaar branch hosted on Launchpad.  It took\nme quite a while to get things set up more-or-less logically but there\nthey are and I'm currently trying to re-apply my local changes up to\ntoday into the various branches I have.  Each of the 11 issues I\noutlined originally has its own branch, with a root branch from which\nall these branches are derived to serve as a place for a) merging in\npython 2.6 alpha concurrent development (merges) and to apply any\nadditional re changes that don't fall into any of the other categories,\nof which I have so far found only 2 small ones.\n\nAnyway, if anyone is interested in monitoring my progress, it is\navailable at:\n\nhttps://code.launchpad.net/~timehorse/\n\nI will still post major milestones here, but one can monitory day-to-day \nprogress on Launchpad.  Also on launchpad you will find more detail on\nthe plans for each of the 11 modifications, for the curious.\n\nThanks again for all the advice!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417749/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417751",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417751",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417751,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NTE=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-05-24T21:38:54Z",
          "updated_at": "2008-05-24T21:38:54Z",
          "author_association": "MANNEQUIN",
          "body": "I am finally making progress again, after a month of changing my \npatches from my local svn repository to bazaar hosted on launchpad.net, \nas stated in my last update.  I also have more or less finished the \nprobably easiest item, #5, so I have a full patch for that available \nnow.  First, though, I want to update my \"No matter what\" patch, which \nis to say these are the changes I want to make if any changes are made \nto the Regexp code.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417751/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417752",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417752",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417752,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NTI=",
          "user": {
            "login": "a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "id": 92819789,
            "node_id": "M_kgDOBYhRTQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "html_url": "https://github.com/mark-summerfield",
            "followers_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/followers",
            "following_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/following{/other_user}",
            "gists_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/subscriptions",
            "organizations_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/orgs",
            "repos_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/repos",
            "events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-05-28T13:38:41Z",
          "updated_at": "2008-05-28T13:38:41Z",
          "author_association": "MANNEQUIN",
          "body": "AFAIK if you have a regex with named capture groups there is no direct\nway to relate them to the capture group numbers.\nYou could do (untested; Python 3 syntax):\n\n```py\n    d = {v: k for k, v in match.groupdict()}\n    for i in range(match.lastindex):\n         print(i, match.group(i), d[match.group(i)])\n```\n\n\nOne possible solution would be a grouptuples() function that returned a\ntuple of 3-tuples (index, name, captured_text) with the name being None\nfor unnamed groups.\n\nAnyway, good luck with all your improvements, I will be especially glad\nif you manage to do (2) and (8) (and maybe (3)).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417752/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417754",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417754",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417754,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NTQ=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-05-28T13:57:24Z",
          "updated_at": "2008-05-28T13:57:24Z",
          "author_association": "MANNEQUIN",
          "body": "Mark scribbled:\n> One possible solution would be a grouptuples() function that returned\n> a tuple of 3-tuples (index, name, captured_text) with the name being\n> None for unnamed groups.\n\nHmm.  Well, that's not a bad idea at all IMHO and would, AFAICT probably \nbe easier to do than (2) but I would still do (2) but will try to add \nthat to one of the existing items or spawn another item for it since it \nis kind of a distinct feature.\n\nMy preference right now is to finish off the test cases for (7) because \nit is already coded, then finish the work on (1) as that was the \noriginal reason for modification then on to (2) then (3) as they are \nrelated and then I don't mind tackling (8) because I think that one \nshouldn't be too hard.  Interestingly, the existing engine code \n(sre_parse.py) has a place-holder, commented out, for character classes \nbut it was never properly implemented.  And I will warn that with \nUnicode, I THINK all the character classes exist as unicode functions or \ncan be implemented as multiple unicode functions, but I'm not 100% sure \nso if I run into that problem, some character classes may initially be \nleft out while I work on another item.\n\nAnyway, thanks for the input, Mark!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417754/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417759",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417759",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417759,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NTk=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-06-17T17:43:20Z",
          "updated_at": "2008-06-17T17:43:20Z",
          "author_association": "MANNEQUIN",
          "body": "Well, it's time for another update on my progress...\n\nSome good news first: Atomic Grouping is now completed, tested and \ndocumented, and as stated above, is classified as bpo-2636-01 and \nrelated patches.  Secondly, with caveats listed below, Named Match Group \nAttributes on a match object (item 2) is also more or less complete at \nbpo-2636-02 -- it only lacks documentation.\n\nNow, I want to also update my list of items.  We left off at 11: Other \nPerl-specific modifications.  Since that time, I have spawned a number \nof other branches, the first of which (bpo-2636-12) I am happy to \nannounce is also complete!\n\n12) Implement the changes to the documentation of re as per Jim J. \nJewett suggestion from 2008-04-24 14:09.  Again, this has been done.\n\n13) Implement a grouptuples(...) method as per Mark Summerfield's \nsuggest on 2008-05-28 09:38.  grouptuples would take the same filtering \nparameters as the other group* functions, and would return a list of 3-\ntuples (unless only 1 group was requested).  It should default to all \nmatch groups (1..n, not group 0, the matching string).\n\n14) As per PEP-3131 and the move to Python 3.0, python will begin to \nallow full UNICODE-compliant identifier names.  Correspondingly, it \nwould be the responsibility of this item to allow UNICODE names for \nmatch groups.  This would allow retrieval of UNICODE names via the \ngroup* functions or when combined with Item 3, the getitem handler \n(m[u'...']) (03+14) and the attribute name itself (e.g. getattr(m, \nu'...')) when combined with item 2 (02+14).\n\n15) Change the Pattern_Type, Match_Type and Scanner_Type (experimental) \nto become richer Python Types.  Specifically, add \\_\\_doc__ strings to \neach of these types' methods and members.\n\n16) Implement various FIXMEs.\n\n16-1) Implement the FIXME such that if m is a MatchObject, del m.string \nwill disassociate the original matched string from the match object; \nstring would be the only member that would allow modification or \ndeletion and you will not be able to modify the m.string value, only \ndelete it.\n\n\\-----\n\nFinally, I want to say a couple notes about Item 2:\n\nFirstly, as noted in Item 14, I wish to add support for UNICODE match \ngroup names, and the current version of the C-code would not allow that; \nit would only make sense to add UNICODE support if 14 is implemented, so \nadding support for UNICODE match object attributes would depend on both \nitems 2 and 14.  Thus, that would be implemented in bpo-2636-02+14.\n\nSecondly, there is a FIXME which I discussed in Item 16; I gave that \nproblem it's own item and branch.  Also, as stated in Item 15, I would \nlike to add more robust help code to the Match object and bind \\_\\_doc__ \nstrings to the fixed attributes.  Although this would not directly \neffect the Item 2 implementation, it would probably involve moving some \ncode around in its vicinity.\n\nFinally, I would like suggestions on how to handle name collisions when \nmatch group names are provided as attributes.  For instance, an \nexpression like '(?P\\<pos\\>.\\*)' would match more or less any string and \nassign it to the name \"pos\".  But \"pos\" is already an attribute of the \nMatch object, and therefore pos cannot be exposed as a named match group  \nattribute, since match.pos will return the usual meaning of pos for a \nmatch object, not the value of the capture group names \"pos\".\n\nI have 3 proposals as to how to handle this:\n\na) Simply disallow the exposure of match group name attributes if the \nnames collide with an existing member of the basic Match Object \ninterface.\n\nb) Expose the reserved names through a special prefix notation, and for \nforward compatibility, expose all names via this prefix notation.  In \nother words, if the prefix was 'k', match.kpos could be used to access \npos; if it was '\\_', match.\\_pos would be used.  If Item 3 is implemented, \nit may be sufficient to allow access via match['pos'] as the canonical \nway of handling match group names using reserved words.\n\nc) Don't expose the names directly; only expose them through a prefixed \nname, e.g. match.\\_pos or match.kpos.\n\nPersonally, I like a because if Item 3 is implemented, it makes a fairly \nuseful shorthand for retrieving keyword names when a keyword is used for \na name.  Also, we could put a deprecation warning in to inform users \nthat eventually match groups names that are keywords in the Match Object \nwill eventually be disallowed.  However, I don't support restricting the \nmatch group names any more than they already are (they must be a valid \npython identifier only) so again I would go with a) and nothing more and \nthat's what's implemented in bpo-2636-02.patch.\n\n\\-----\n\nNow, rather than posting umteen patch files I am posting one bz2-\ncompressed tar of ALL patch files for all threads, where each file is of \nthe form:\n\nbpo-2636(-\\\\d\\\\d|+\\\\d\\\\d)*(-only)?.patch\n\nFor instance,\n\nbpo-2636-01.patch is the p1 patch that is a difference between the \ncurrent Python trunk and all that would need to be implemented to \nsupport Atomic Grouping / Possessive Qualifiers.  Combined branches are \ncombined with a PLUS ('+') and sub-branches concatenated with a DASH ('-\n').  Thus, \"bpo-2636-01+09-01-01+10.patch\" is a patch which combines \nthe work from Item 1: Atomic Grouping / Possessive Qualifiers, the sub-\nsub branch of Item 9: Engine Cleanups and Item 10: Shared Constants.  \nItem 9 has both a child and a grandchild.  The Child (09-01) is my \nproposed engine redesign with the single loop; the grandchild (09-01-01) \nis the redesign with the triple loop.  Finally the optional \"-only\" flag \nmeans that the diff is against the core SRE modifications branch and \nthus does not include the core branch changes.\n\nAs noted above, Items 01, 02, 05, 07 and 12 should be considered more or \nless complete and ready for merging assuming I don't identify in my \nimplementation of the other items that I neglected something in these.  \nThe rest, including the combined items, are all provided in the given \ntarball.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417759/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417761",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417761",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417761,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NjE=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-06-17T19:07:10Z",
          "updated_at": "2008-06-17T19:07:10Z",
          "author_association": "MANNEQUIN",
          "body": "Sorry, as I stated in the last post, I generated the patches then realized \nthat I was missing the documentation for Item 2, so I have updated the \nbpo-2636-02.patch file and am attaching that separately until the next \nrelease of the patch tarball.  bpo-2636-02-only.patch should be ignored \nand I will only regenerate it with the correct documentation in the next \ntarball release so I can move on to either Character Classes or Relative \nBack-references.  I wanna pause Item 3 for the moment because 2, 3, 13, \n14, 15 and 16 all seem closely related and I need a break to allow my mind \nto wrap around the big picture before I try and tackle each one.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417761/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417763",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417763",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417763,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NjM=",
          "user": {
            "login": "a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "id": 92819789,
            "node_id": "M_kgDOBYhRTQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "html_url": "https://github.com/mark-summerfield",
            "followers_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/followers",
            "following_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/following{/other_user}",
            "gists_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/subscriptions",
            "organizations_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/orgs",
            "repos_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/repos",
            "events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-06-18T07:13:15Z",
          "updated_at": "2008-06-18T07:13:15Z",
          "author_association": "MANNEQUIN",
          "body": "[snip]\n> 13) Implement a grouptuples(...) method as per Mark Summerfield's\n> suggest on 2008-05-28 09:38.  grouptuples would take the same filtering\n> parameters as the other group* functions, and would return a list of 3-\n> tuples (unless only 1 group was requested).  It should default to all\n> match groups (1..n, not group 0, the matching string).\n\n:-)\n\n[snip]\n> Finally, I would like suggestions on how to handle name collisions when\n> match group names are provided as attributes.  For instance, an\n> expression like '(?P\\<pos\\>.\\*)' would match more or less any string and\n> assign it to the name \"pos\".  But \"pos\" is already an attribute of the\n> Match object, and therefore pos cannot be exposed as a named match group\n> attribute, since match.pos will return the usual meaning of pos for a\n> match object, not the value of the capture group names \"pos\".\n>\n> I have 3 proposals as to how to handle this:\n>\n> a) Simply disallow the exposure of match group name attributes if the\n> names collide with an existing member of the basic Match Object\n> interface.\n\nI don't like the prefix ideas and now that you've spelt it out I don't\nlike the sometimes m.foo will work and sometimes it won't. So I prefer\nm['foo'] to be the canonical way because that guarantees your code is\nalways consistent.\n\n\\------------------------------------------------------------\nBTW I wanted to do a simple regex to match a string that might or might\nnot be quoted, and that could contain quotes (but not those used to\ndelimit it). My first attempt was illegal:\n\n    (?P<quote>['\"])?([^(?=quote)])+(?(quote)(?=quote))\n\nIt isn't hard to work round but it did highlight the fact that you can't\nuse captures inside character classes. I don't know if Perl allows this;\nI guess if it doesn't then Python shouldn't either since GvR wants the\nengine to be Perl compatible.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417763/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417764",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417764",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417764,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NjQ=",
          "user": {
            "login": "f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "id": 92819966,
            "node_id": "M_kgDOBYhR_g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819966?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69",
            "html_url": "https://github.com/timehorse",
            "followers_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/followers",
            "following_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/following{/other_user}",
            "gists_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/subscriptions",
            "organizations_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/orgs",
            "repos_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/repos",
            "events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/events{/privacy}",
            "received_events_url": "https://api.github.com/users/f0c60cc3-3318-4c1a-b471-b3af1d161d69/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-06-19T12:01:27Z",
          "updated_at": "2008-06-19T12:01:27Z",
          "author_association": "MANNEQUIN",
          "body": "Thanks for weighing in Mark!  Actually, your point is valid and quite \nfair, though I would not assume that Item 3 would be included just \nbecause Item 2 isn't.  I will do my best to develop both, but I do not \nmake the final decision as to what python includes.  That having been \nsaid, 3 seems very likely at this point so we may be okay, but let me \ngive this one more try as I think I have a better solution to make Item \n2 more palatable.  Let's say we have 5 choices here:\n\n> a) Simply disallow the exposure of match group name attributes if the \n> names collide with an existing member of the basic Match Object \n> interface.\n>\n> b) Expose the reserved names through a special prefix notation, and\n> for forward compatibility, expose all names via this prefix notation. \n> In other words, if the prefix was 'k', match.kpos could be used to\n> access pos; if it was '\\_', match.\\_pos would be used.  If Item 3 is\n> implemented, it may be sufficient to allow access via match['pos'] as\n> the canonical way of handling match group names using reserved words.\n>\n> c) Don't expose the names directly; only expose them through a\n> prefixed name, e.g. match.\\_pos or match.kpos.\n\nd) (As Mark suggested) we drop Item 2 completely.  I have not invested \nmuch work in this so that would not bother me, but IMHO I actually \nprefer Item 2 to 3 so I would really like to see it preserved in some \nform.\n\ne) Add an option, re.MATCH_ATTRIBUTES, that is used as a Match Creation \nflag.  When the re.MATCH_ATTRIBUTES or re.A flag is included in the \ncompile, or (?a) is included in the pattern, it will do 2 things.  \nFirst, it will raise an exception if either a) there exists an unnamed \ncapture group or b) the capture group name is a reserved keyword.  In \naddition to this, I would put in a hook to support a from \\_\\_future__ so \nthat any post 2.6 changes to the match object type can be smoothly \nintegrated a version early to allow programmers to change when any \nfuture changes come.  Secondly, I would \\*conditionally* allow arbitrary \ncapture group name via the \\_\\_getattr__ handler IFF that flag was \npresent; otherwise you could not access Capture Groups by name via \nmatch.foo.\n\nI really like the idea of e) so I'm taking Item 2 out of the \"ready for \nmerge\" category and going to put it in the queue for the modifications \nspelled out above.  I'm not too worried about our flags differing from \nPerl too much as we did base our first 4 on Perl (x, s, m, i), but \nsubsequently added Unicode and Locale, which Perl does not have, and \nnever implemented o (since our caching semantic already pretty much \ngives every expression that), e (which is specific to Perl syntax \nAFAICT) and g (which can be simulated via re.split).  So I propose we \ntake A and implement it as I've specified and that is the current goal \nof Item 2.  Once this is done and working, we can decide whether it \nshould be included in the python trunk.\n\nHow does that sound to you, Mark and anyone else who wishes to weigh in?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417764/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417766",
          "html_url": "https://github.com/python/cpython/issues/46888#issuecomment-1093417766",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46888",
          "id": 1093417766,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTc3NjY=",
          "user": {
            "login": "a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "id": 92819789,
            "node_id": "M_kgDOBYhRTQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "html_url": "https://github.com/mark-summerfield",
            "followers_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/followers",
            "following_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/following{/other_user}",
            "gists_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/subscriptions",
            "organizations_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/orgs",
            "repos_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/repos",
            "events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-06-19T14:15:51Z",
          "updated_at": "2008-06-19T14:15:51Z",
          "author_association": "MANNEQUIN",
          "body": "[snip]\n\nIt seems to me that both using a special prefix or adding an option are\nadding a lot of baggage and will increase the learning curve.\n\nThe nice thing about (3) (even without slicing) is that it seems a v.\nnatural extension. But (2) seems magical (i.e., Perl-like rather than\nPythonic) which I really don't like.\n\nBTW I just noticed this:\n\n```pycon\n'<_sre.SRE_Pattern object at 0x9ded020>'\n>>> \"{0!r}\".format(rx)\n'<_sre.SRE_Pattern object at 0x9ded020>'\n>>> \"{0!s}\".format(rx)\n'<_sre.SRE_Pattern object at 0x9ded020>'\n>>> \"{0!a}\".format(rx)\n```\n\n\nThat's fair enough, but maybe for !s the output should be rx.pattern?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093417766/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/57912",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/57912/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/57912/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/57912/events",
      "html_url": "https://github.com/python/cpython/issues/57912",
      "id": 1198876096,
      "node_id": "MDU6SXNzdWUxMTk4ODc2MDk2",
      "number": 57912,
      "title": "Hash collision security issue",
      "user": {
        "login": "warsaw",
        "id": 210184,
        "node_id": "MDQ6VXNlcjIxMDE4NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/210184?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/warsaw",
        "html_url": "https://github.com/warsaw",
        "followers_url": "https://api.github.com/users/warsaw/followers",
        "following_url": "https://api.github.com/users/warsaw/following{/other_user}",
        "gists_url": "https://api.github.com/users/warsaw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/warsaw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/warsaw/subscriptions",
        "organizations_url": "https://api.github.com/users/warsaw/orgs",
        "repos_url": "https://api.github.com/users/warsaw/repos",
        "events_url": "https://api.github.com/users/warsaw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/warsaw/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 544837556,
          "node_id": "MDU6TGFiZWw1NDQ4Mzc1NTY=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-security",
          "name": "type-security",
          "color": "b60205",
          "default": false,
          "description": "A security issue"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018687099,
          "node_id": "LA_kwDOBN0Z8c7viEx7",
          "url": "https://api.github.com/repos/python/cpython/labels/release-blocker",
          "name": "release-blocker",
          "color": "660205",
          "default": false,
          "description": null
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 328,
      "created_at": "2012-01-03T19:36:50Z",
      "updated_at": "2022-04-10T04:56:44Z",
      "closed_at": "2012-03-13T22:25:46Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [13703](https://bugs.python.org/issue13703)\n--- | :---\nNosy | @malemburg, @gvanrossum, @tim-one, @loewis, @warsaw, @birkenfeld, @terryjreedy, @gpshead, @jcea, @mdickinson, @pitrou, @tiran, @benjaminp, @serwy, @merwok, @alex, @skrah, @davidmalcolm, @bz2, @markshannon, @ericsnowcurrently, @jimjjewett, @PaulMcMillan\nDependencies | <li>bpo-13704: Random number generator in Python core</li>\nFiles | <li>[hash-attack.patch](https://bugs.python.org/file24151/hash-attack.patch \"Uploaded as text/plain at 2012-01-06.12:52:20 by @malemburg\")</li><li>[SafeDict.py](https://bugs.python.org/file24169/SafeDict.py \"Uploaded as text/plain at 2012-01-08.00:19:14 by v+python\"): SafeDict implementation</li><li>[bench_startup.py](https://bugs.python.org/file24223/bench_startup.py \"Uploaded as text/plain at 2012-01-13.00:36:06 by @vstinner\")</li><li>[random-8.patch](https://bugs.python.org/file24259/random-8.patch \"Uploaded as text/plain at 2012-01-17.12:21:31 by @vstinner\")</li><li>[hash-collision-counting-dmalcolm-2012-01-20-001.patch](https://bugs.python.org/file24286/hash-collision-counting-dmalcolm-2012-01-20-001.patch \"Uploaded as text/plain at 2012-01-20.22:55:12 by @davidmalcolm\")</li><li>[amortized-probe-counting-dmalcolm-2012-01-20-002.patch](https://bugs.python.org/file24288/amortized-probe-counting-dmalcolm-2012-01-20-002.patch \"Uploaded as text/plain at 2012-01-21.03:16:17 by @davidmalcolm\")</li><li>[amortized-probe-counting-dmalcolm-2012-01-21-003.patch](https://bugs.python.org/file24289/amortized-probe-counting-dmalcolm-2012-01-21-003.patch \"Uploaded as text/plain at 2012-01-21.17:02:53 by @davidmalcolm\")</li><li>[hash-attack-2.patch](https://bugs.python.org/file24295/hash-attack-2.patch \"Uploaded as text/plain at 2012-01-23.13:07:23 by @malemburg\")</li><li>[hash-attack-3.patch](https://bugs.python.org/file24299/hash-attack-3.patch \"Uploaded as text/plain at 2012-01-23.16:43:23 by @malemburg\")</li><li>[integercollision.py](https://bugs.python.org/file24300/integercollision.py \"Uploaded as text/plain at 2012-01-23.16:43:23 by @malemburg\")</li><li>[backport-of-hash-randomization-to-2.7-dmalcolm-2012-01-23-001.patch](https://bugs.python.org/file24304/backport-of-hash-randomization-to-2.7-dmalcolm-2012-01-23-001.patch \"Uploaded as text/plain at 2012-01-23.21:31:54 by @davidmalcolm\"): Backport of haypo's random-8.patch to 2.7</li><li>[hybrid-approach-dmalcolm-2012-01-25-001.patch](https://bugs.python.org/file24320/hybrid-approach-dmalcolm-2012-01-25-001.patch \"Uploaded as text/plain at 2012-01-25.11:05:43 by @davidmalcolm\"): Hybrid approach to solving dict DoS attack</li><li>[hybrid-approach-dmalcolm-2012-01-25-002.patch](https://bugs.python.org/file24324/hybrid-approach-dmalcolm-2012-01-25-002.patch \"Uploaded as text/plain at 2012-01-25.17:49:17 by @davidmalcolm\")</li><li>[optin-hash-randomization-for-3.1-dmalcolm-2012-01-27-001.patch](https://bugs.python.org/file24343/optin-hash-randomization-for-3.1-dmalcolm-2012-01-27-001.patch \"Uploaded as text/plain at 2012-01-28.05:13:27 by @davidmalcolm\")</li><li>[optin-hash-randomization-for-3.1-dmalcolm-2012-01-28-001.patch](https://bugs.python.org/file24353/optin-hash-randomization-for-3.1-dmalcolm-2012-01-28-001.patch \"Uploaded as text/plain at 2012-01-28.23:14:26 by @davidmalcolm\")</li><li>[optin-hash-randomization-for-3.1-dmalcolm-2012-01-29-001.patch](https://bugs.python.org/file24365/optin-hash-randomization-for-3.1-dmalcolm-2012-01-29-001.patch \"Uploaded as text/plain at 2012-01-30.01:39:12 by @davidmalcolm\")</li><li>[unnamed](https://bugs.python.org/file24366/unnamed \"Uploaded as text/x-patch at 2012-01-30.01:44:14 by @davidmalcolm\")</li><li>[optin-hash-randomization-for-3.1-dmalcolm-2012-01-30-001.patch](https://bugs.python.org/file24370/optin-hash-randomization-for-3.1-dmalcolm-2012-01-30-001.patch \"Uploaded as text/plain at 2012-01-30.17:31:15 by @davidmalcolm\")</li><li>[optin-hash-randomization-for-3.1-dmalcolm-2012-01-30-002.patch](https://bugs.python.org/file24371/optin-hash-randomization-for-3.1-dmalcolm-2012-01-30-002.patch \"Uploaded as text/plain at 2012-01-30.22:22:45 by @davidmalcolm\")</li><li>[optin-hash-randomization-for-2.6-dmalcolm-2012-01-30-001.patch](https://bugs.python.org/file24375/optin-hash-randomization-for-2.6-dmalcolm-2012-01-30-001.patch \"Uploaded as text/plain at 2012-01-31.01:34:06 by @davidmalcolm\")</li><li>[results-16.txt](https://bugs.python.org/file24385/results-16.txt \"Uploaded as text/plain at 2012-02-01.03:29:11 by @davidmalcolm\")</li><li>[add-randomization-to-2.6-dmalcolm-2012-02-01-001.patch](https://bugs.python.org/file24391/add-randomization-to-2.6-dmalcolm-2012-02-01-001.patch \"Uploaded as text/plain at 2012-02-02.01:18:06 by @davidmalcolm\")</li><li>[fix-broken-tests-on-2.6-dmalcolm-2012-02-01-001.patch](https://bugs.python.org/file24392/fix-broken-tests-on-2.6-dmalcolm-2012-02-01-001.patch \"Uploaded as text/plain at 2012-02-02.01:18:17 by @davidmalcolm\")</li><li>[add-randomization-to-3.1-dmalcolm-2012-02-01-001.patch](https://bugs.python.org/file24393/add-randomization-to-3.1-dmalcolm-2012-02-01-001.patch \"Uploaded as text/plain at 2012-02-02.01:18:17 by @davidmalcolm\")</li><li>[fix-broken-tests-on-3.1-dmalcolm-2012-02-01-001.patch](https://bugs.python.org/file24394/fix-broken-tests-on-3.1-dmalcolm-2012-02-01-001.patch \"Uploaded as text/plain at 2012-02-02.01:18:23 by @davidmalcolm\")</li><li>[add-randomization-to-2.6-dmalcolm-2012-02-06-001.patch](https://bugs.python.org/file24434/add-randomization-to-2.6-dmalcolm-2012-02-06-001.patch \"Uploaded as text/plain at 2012-02-06.19:07:31 by @davidmalcolm\")</li><li>[fix-broken-tests-on-2.6-dmalcolm-2012-02-06-001.patch](https://bugs.python.org/file24435/fix-broken-tests-on-2.6-dmalcolm-2012-02-06-001.patch \"Uploaded as text/plain at 2012-02-06.19:07:38 by @davidmalcolm\")</li><li>[add-randomization-to-3.1-dmalcolm-2012-02-06-001.patch](https://bugs.python.org/file24436/add-randomization-to-3.1-dmalcolm-2012-02-06-001.patch \"Uploaded as text/plain at 2012-02-06.19:07:39 by @davidmalcolm\")</li><li>[fix-broken-tests-on-3.1-dmalcolm-2012-02-06-001.patch](https://bugs.python.org/file24437/fix-broken-tests-on-3.1-dmalcolm-2012-02-06-001.patch \"Uploaded as text/plain at 2012-02-06.19:07:40 by @davidmalcolm\")</li><li>[add-randomization-to-2.6-dmalcolm-2012-02-11-001.patch](https://bugs.python.org/file24490/add-randomization-to-2.6-dmalcolm-2012-02-11-001.patch \"Uploaded as text/plain at 2012-02-11.23:06:14 by @davidmalcolm\")</li><li>[add-randomization-to-3.1-dmalcolm-2012-02-11-001.patch](https://bugs.python.org/file24491/add-randomization-to-3.1-dmalcolm-2012-02-11-001.patch \"Uploaded as text/plain at 2012-02-11.23:06:22 by @davidmalcolm\")</li><li>[add-randomization-to-2.6-dmalcolm-2012-02-13-001.patch](https://bugs.python.org/file24514/add-randomization-to-2.6-dmalcolm-2012-02-13-001.patch \"Uploaded as text/plain at 2012-02-13.20:37:04 by @davidmalcolm\")</li><li>[add-randomization-to-3.1-dmalcolm-2012-02-13-001.patch](https://bugs.python.org/file24515/add-randomization-to-3.1-dmalcolm-2012-02-13-001.patch \"Uploaded as text/plain at 2012-02-13.20:37:08 by @davidmalcolm\")</li><li>[hash-patch-3.1-gb-03.patch](https://bugs.python.org/file24563/hash-patch-3.1-gb-03.patch \"Uploaded as text/plain at 2012-02-19.10:00:45 by @birkenfeld\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = <Date 2012-03-13.22:25:45.919>\ncreated_at = <Date 2012-01-03.19:36:49.855>\nlabels = ['type-security', 'interpreter-core', 'release-blocker', '3.11']\ntitle = 'Hash collision security issue'\nupdated_at = <Date 2021-11-08.16:57:10.080>\nuser = 'https://github.com/warsaw'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2021-11-08.16:57:10.080>\nactor = 'vstinner'\nassignee = 'none'\nclosed = True\nclosed_date = <Date 2012-03-13.22:25:45.919>\ncloser = 'gregory.p.smith'\ncomponents = ['Interpreter Core']\ncreation = <Date 2012-01-03.19:36:49.855>\ncreator = 'barry'\ndependencies = ['13704']\nfiles = ['24151', '24169', '24223', '24259', '24286', '24288', '24289', '24295', '24299', '24300', '24304', '24320', '24324', '24343', '24353', '24365', '24366', '24370', '24371', '24375', '24385', '24391', '24392', '24393', '24394', '24434', '24435', '24436', '24437', '24490', '24491', '24514', '24515', '24563']\nhgrepos = []\nissue_num = 13703\nkeywords = ['patch']\nmessage_count = 328.0\nmessages = ['150522', '150525', '150526', '150529', '150531', '150532', '150533', '150534', '150541', '150543', '150558', '150559', '150560', '150562', '150563', '150565', '150568', '150569', '150570', '150577', '150589', '150592', '150601', '150609', '150613', '150616', '150619', '150620', '150621', '150622', '150625', '150634', '150635', '150636', '150637', '150638', '150639', '150641', '150642', '150643', '150644', '150645', '150646', '150647', '150648', '150649', '150650', '150651', '150652', '150655', '150656', '150659', '150662', '150665', '150668', '150694', '150699', '150702', '150706', '150707', '150708', '150712', '150713', '150718', '150719', '150724', '150725', '150726', '150727', '150738', '150748', '150756', '150766', '150768', '150769', '150771', '150795', '150829', '150832', '150835', '150836', '150840', '150847', '150856', '150857', '150859', '150865', '150866', '150934', '151012', '151017', '151031', '151033', '151047', '151048', '151061', '151062', '151063', '151064', '151065', '151069', '151070', '151071', '151073', '151074', '151078', '151092', '151120', '151121', '151122', '151157', '151158', '151159', '151167', '151353', '151401', '151402', '151419', '151422', '151448', '151449', '151468', '151472', '151474', '151484', '151519', '151528', '151560', '151561', '151565', '151566', '151567', '151574', '151582', '151583', '151584', '151585', '151586', '151589', '151590', '151596', '151604', '151617', '151620', '151625', '151626', '151628', '151629', '151632', '151633', '151647', '151662', '151664', '151677', '151679', '151680', '151681', '151682', '151684', '151685', '151689', '151691', '151699', '151700', '151701', '151703', '151707', '151714', '151731', '151734', '151735', '151737', '151739', '151744', '151745', '151747', '151748', '151753', '151754', '151756', '151758', '151794', '151796', '151798', '151812', '151813', '151814', '151815', '151825', '151826', '151847', '151850', '151867', '151869', '151870', '151939', '151941', '151942', '151944', '151956', '151959', '151960', '151961', '151965', '151966', '151967', '151970', '151973', '151977', '151984', '152030', '152033', '152037', '152039', '152040', '152041', '152043', '152046', '152051', '152057', '152060', '152066', '152070', '152104', '152112', '152117', '152118', '152125', '152146', '152149', '152183', '152186', '152199', '152200', '152203', '152204', '152270', '152271', '152275', '152276', '152299', '152300', '152309', '152311', '152315', '152335', '152344', '152352', '152362', '152364', '152422', '152452', '152453', '152723', '152730', '152731', '152732', '152734', '152740', '152747', '152753', '152754', '152755', '152758', '152760', '152763', '152764', '152767', '152768', '152769', '152777', '152780', '152781', '152784', '152787', '152789', '152797', '152811', '152855', '153055', '153074', '153081', '153082', '153140', '153141', '153143', '153144', '153297', '153301', '153369', '153395', '153682', '153683', '153690', '153695', '153750', '153753', '153798', '153802', '153817', '153833', '153848', '153849', '153850', '153852', '153853', '153854', '153860', '153861', '153862', '153868', '153872', '153873', '153877', '153975', '153980', '154428', '154430', '154432', '154853', '155293', '155472', '155527', '155680', '155681', '155682', '405727', '405745']\nnosy_count = 36.0\nnosy_names = ['lemburg', 'gvanrossum', 'tim.peters', 'loewis', 'barry', 'georg.brandl', 'terry.reedy', 'gregory.p.smith', 'jcea', 'mark.dickinson', 'pitrou', 'christian.heimes', 'benjamin.peterson', 'roger.serwy', 'eric.araujo', 'grahamd', 'Arfrever', 'v+python', 'alex', 'cvrebert', 'zbysz', 'skrah', 'dmalcolm', 'gz', 'neologix', 'Arach', 'Mark.Shannon', 'python-dev', 'eric.snow', 'Zhiping.Deng', 'Huzaifa.Sidhpurwala', 'Jim.Jewett', 'PaulMcMillan', 'fx5', 'skorgu', 'jsvaughan']\npr_nums = []\npriority = 'release blocker'\nresolution = 'fixed'\nstage = 'needs patch'\nstatus = 'closed'\nsuperseder = None\ntype = 'security'\nurl = 'https://bugs.python.org/issue13703'\nversions = ['Python 3.11']\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "gpshead",
        "id": 68491,
        "node_id": "MDQ6VXNlcjY4NDkx",
        "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gpshead",
        "html_url": "https://github.com/gpshead",
        "followers_url": "https://api.github.com/users/gpshead/followers",
        "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
        "organizations_url": "https://api.github.com/users/gpshead/orgs",
        "repos_url": "https://api.github.com/users/gpshead/repos",
        "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gpshead/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/57912/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/57912/timeline",
      "performed_via_github_app": null,
      "state_reason": "completed",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566355",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566355",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566355,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNTU=",
          "user": {
            "login": "warsaw",
            "id": 210184,
            "node_id": "MDQ6VXNlcjIxMDE4NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/210184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/warsaw",
            "html_url": "https://github.com/warsaw",
            "followers_url": "https://api.github.com/users/warsaw/followers",
            "following_url": "https://api.github.com/users/warsaw/following{/other_user}",
            "gists_url": "https://api.github.com/users/warsaw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/warsaw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/warsaw/subscriptions",
            "organizations_url": "https://api.github.com/users/warsaw/orgs",
            "repos_url": "https://api.github.com/users/warsaw/repos",
            "events_url": "https://api.github.com/users/warsaw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/warsaw/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T19:36:50Z",
          "updated_at": "2012-01-03T19:36:50Z",
          "author_association": "MEMBER",
          "body": "This is already publicly known and in deep discussion on python-dev.  The proper fix is still TBD.  Essentially, hash collisions can be exploited to DoS a web framework that automatically parses input forms into dictionaries.\r\n\r\nStart here:\r\n\r\nhttp://mail.python.org/pipermail/python-dev/2011-December/115116.html",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566355/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566356",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566356",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566356,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNTY=",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T20:19:25Z",
          "updated_at": "2012-01-03T20:19:25Z",
          "author_association": "MEMBER",
          "body": "I had a short chat with Guido yesterday. I'll try to sum up the conversation. Guido, please correct me if I got something wrong or missed a point.\r\n\r\nGuido wants the fix as simple and less intrusive as possible as he wants to provide/apply a patch for Python 2.4 to 3.3. This means any new stuff is off the table unless it's really, really necessary. Say goodbye to my experimental MurmurHash3 patch.\r\n\r\nWe haven't agreed whether the randomization should be enabled by default or disabled by default. IMHO it should be disabled for all releases except for the upcoming 3.3 release. The env var PYTHONRANDOMHASH=1 would enable the randomization. It's simple to set the env var in e.g. Apache for mod_python and mod_wsgi.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566356/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566357",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566357",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566357,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNTc=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T20:24:32Z",
          "updated_at": "2012-01-03T20:24:32Z",
          "author_association": "MEMBER",
          "body": "> We haven't agreed whether the randomization should be enabled by\n> default or disabled by default. IMHO it should be disabled for all\n> releases except for the upcoming 3.3 release.\n\nI think on the contrary it must be enabled by default. Leaving security\nholes open is wrong.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566357/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566358",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566358",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566358,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNTg=",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T20:31:16Z",
          "updated_at": "2012-01-03T20:31:16Z",
          "author_association": "MEMBER",
          "body": "> I think on the contrary it must be enabled by default. Leaving security\r\n> holes open is wrong.\r\n\r\nWe can't foresee the implications of the randomization and only a small number of deployments is affected by the problem. But I won't start a fight on the matter. ;)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566358/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566360",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566360",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566360,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNjA=",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T20:47:45Z",
          "updated_at": "2012-01-03T20:47:45Z",
          "author_association": "MEMBER",
          "body": "I'm with Antoine -- turn it on by default.  Maybe there should be a release candidate to test the waters.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566363",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566363",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566363,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNjM=",
          "user": {
            "login": "warsaw",
            "id": 210184,
            "node_id": "MDQ6VXNlcjIxMDE4NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/210184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/warsaw",
            "html_url": "https://github.com/warsaw",
            "followers_url": "https://api.github.com/users/warsaw/followers",
            "following_url": "https://api.github.com/users/warsaw/following{/other_user}",
            "gists_url": "https://api.github.com/users/warsaw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/warsaw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/warsaw/subscriptions",
            "organizations_url": "https://api.github.com/users/warsaw/orgs",
            "repos_url": "https://api.github.com/users/warsaw/repos",
            "events_url": "https://api.github.com/users/warsaw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/warsaw/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T20:49:39Z",
          "updated_at": "2012-01-03T20:49:39Z",
          "author_association": "MEMBER",
          "body": "On Jan 03, 2012, at 08:24 PM, Antoine Pitrou wrote:\n\n>I think on the contrary it must be enabled by default. Leaving security\n>holes open is wrong.\n\nUnless there's evidence of performance regressions or backward\nincompatibilities, I agree.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566363/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566365",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566365",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566365,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNjU=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T21:20:59Z",
          "updated_at": "2012-01-03T21:20:59Z",
          "author_association": "MEMBER",
          "body": "> Unless there's evidence of performance regressions\r\n> or backward incompatibilities, I agree.\r\n\r\nIf hash() is modified, str(dict) and str(set) will change for example. It may break doctests. Can we consider that the application should not rely (indirectly) on hash and so fix (for example) their doctests? Or is it a backward incompatibility?\r\n\r\nhash() was already modified in major Python versions.\r\n\r\nFor this specific issue, I consider that security is more important than str(dict).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566365/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566366",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566366",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566366,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNjY=",
          "user": {
            "login": "benjaminp",
            "id": 219470,
            "node_id": "MDQ6VXNlcjIxOTQ3MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/219470?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjaminp",
            "html_url": "https://github.com/benjaminp",
            "followers_url": "https://api.github.com/users/benjaminp/followers",
            "following_url": "https://api.github.com/users/benjaminp/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjaminp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjaminp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjaminp/subscriptions",
            "organizations_url": "https://api.github.com/users/benjaminp/orgs",
            "repos_url": "https://api.github.com/users/benjaminp/repos",
            "events_url": "https://api.github.com/users/benjaminp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjaminp/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T21:43:35Z",
          "updated_at": "2012-01-03T21:43:35Z",
          "author_association": "CONTRIBUTOR",
          "body": "Barry, when this gets fixed, shall we coordinate release times?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566366/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566368",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566368",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566368,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNjg=",
          "user": {
            "login": "warsaw",
            "id": 210184,
            "node_id": "MDQ6VXNlcjIxMDE4NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/210184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/warsaw",
            "html_url": "https://github.com/warsaw",
            "followers_url": "https://api.github.com/users/warsaw/followers",
            "following_url": "https://api.github.com/users/warsaw/following{/other_user}",
            "gists_url": "https://api.github.com/users/warsaw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/warsaw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/warsaw/subscriptions",
            "organizations_url": "https://api.github.com/users/warsaw/orgs",
            "repos_url": "https://api.github.com/users/warsaw/repos",
            "events_url": "https://api.github.com/users/warsaw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/warsaw/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T22:02:46Z",
          "updated_at": "2012-01-03T22:02:46Z",
          "author_association": "MEMBER",
          "body": "On Jan 03, 2012, at 09:43 PM, Benjamin Peterson wrote:\n\n>Barry, when this gets fixed, shall we coordinate release times?\n\nYes!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566368/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566369",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566369",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566369,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNjk=",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T22:08:19Z",
          "updated_at": "2012-01-03T22:08:19Z",
          "author_association": "MEMBER",
          "body": "Randomized hashing destabilizes the unit tests of Python, too. Here are the outputs of four test runs:\r\n\r\n11 tests failed:\r\n    test_collections test_dbm test_dis test_gdb test_inspect\r\n    test_packaging test_set test_symtable test_ttk_textonly\r\n    test_urllib test_urlparse\r\n\r\n9 tests failed:\r\n    test_dbm test_dis test_gdb test_json test_packaging test_set\r\n    test_symtable test_urllib test_urlparse\r\n\r\n10 tests failed:\r\n    test_dbm test_dis test_gdb test_inspect test_packaging test_set\r\n    test_symtable test_ttk_textonly test_urllib test_urlparse\r\n\r\n9 tests failed:\r\n    test_collections test_dbm test_dict test_dis test_gdb\r\n    test_packaging test_symtable test_urllib test_urlparse",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566369/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566370",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566370",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566370,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNzA=",
          "user": {
            "login": "3cbf7d86-addd-4bfa-8721-7e95bc50ded0",
            "id": 99430526,
            "node_id": "M_kgDOBe0wfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/99430526?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0",
            "html_url": "https://github.com/PaulMcMillan",
            "followers_url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0/followers",
            "following_url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0/following{/other_user}",
            "gists_url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0/subscriptions",
            "organizations_url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0/orgs",
            "repos_url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0/repos",
            "events_url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/3cbf7d86-addd-4bfa-8721-7e95bc50ded0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-03T23:52:47Z",
          "updated_at": "2012-01-03T23:52:47Z",
          "author_association": "MANNEQUIN",
          "body": "I agree that we should enable randomness by default, and provide an easy way for users to disable it if necessary (unit test suites that explicitly depend on order being an obvious candidate).\r\n\r\nI'll link my proposed algorithm change here, for the record:\r\nhttps://gist.github.com/0a91e52efa74f61858b5\r\n\r\nI've gotten confirmation from several other sources that the fix recommended by the presenters (just a random initialization seed) only prevents the most basic form of the attack.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566370/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566371",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566371",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566371,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNzE=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-04T00:22:37Z",
          "updated_at": "2012-01-04T00:22:37Z",
          "author_association": "MEMBER",
          "body": "Christian Heimes proposes the following change in its randomhash branch (see issue bpo-13704):\r\n\r\n```diff\n-    x = (Py_uhash_t) *p << 7;\r\n+    x = Py_RndHashSeed + ((Py_uhash_t) *p << 7);\r\n     for (i = 0; i < len; i++)\r\n         x = (1000003U * x) ^ (Py_uhash_t) *p++;\r\n     x ^= (Py_uhash_t) len;\n```\n\r\n\r\nThis change doesn't add any security if the attacker can inject any string and retreive the hash value. You can retreive directly Py_RndHashSeed using:\r\n\r\n```py\nPy_RndHashSeed = intmask((hash(\"a\") ^ len(\"a\") ^ ord(\"a\")) * DIVIDE) - (ord(\"a\") << 7)\n```\n\r\n\r\nwhere intmask() truncates to a long (x mod 2^(long bits)) and DIVIDE = 1/1000003 mod 2^(long bits). For example, DIVIDE=2021759595 for 32 bits long.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566371/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566372",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566372",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566372,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNzI=",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-04T00:38:29Z",
          "updated_at": "2012-01-04T00:38:29Z",
          "author_association": "MEMBER",
          "body": "Victor, please ignore my code related to hash randomization for now. I've deliberately not linked my branch to this bug report. I'm well aware that it's not secure and that it's pretty easy to reverse engineer the seed from a hash of a short string. The code is a proof of concept to detect failing tests and other issues.\r\n\r\nI'm in private contact with Paul and we are working together. He has done extended research and I'll gladly follow his expertise. I've already discussed the issue with small strings, but I can't recall if it was a private mail to Paul or a public one to the dev list.\r\n\r\nPaul:\r\nI still think that you should special case short strings (five or few chars sound good). An attacker can't do much harm with one to five char strings but such short strings may make it too easy to calculate the seed.\r\n\r\n16kb of seed is still a lot. Most CPUs have about 16 to 32, maybe 64kb L1 cache for data. 1024 to 4096 bytes should increase cache locality and reduce speed impacts.\r\n\r\nPS: I'm going to reply to your last mail tomorrow.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566372/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566373",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566373",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566373,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNzM=",
          "user": {
            "login": "terryjreedy",
            "id": 19036496,
            "node_id": "MDQ6VXNlcjE5MDM2NDk2",
            "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/terryjreedy",
            "html_url": "https://github.com/terryjreedy",
            "followers_url": "https://api.github.com/users/terryjreedy/followers",
            "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
            "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
            "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
            "repos_url": "https://api.github.com/users/terryjreedy/repos",
            "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-04T00:55:05Z",
          "updated_at": "2012-01-04T00:55:05Z",
          "author_association": "MEMBER",
          "body": "In bpo-13707 I suggest a change to the current hash() entry which is needed independently of this issue, because the default hash (for object()), being tied to id() is already limited to an object's lifetime. But this change will become more imperative if hash() is made run-dependent for numbers and strings.\r\n\r\nThere does not seems to presently \\*be* a security hole for 64 bit builds, so if there is any noticeable slowdown on 64 bit builds and it is sensibly easy to tie the default to the bitness, I would think it should be off for such builds.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566373/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566374",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566374",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566374,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNzQ=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-04T01:00:55Z",
          "updated_at": "2012-01-04T01:00:55Z",
          "author_association": "MEMBER",
          "body": "Paul first proposition (on python-dev) was to replace:\r\n\r\n    ...\r\n    x = (ord(s[0]) << 7)\r\n    while i < length:\r\n        x = intmask((1000003*x) ^ ord(s[i]))\r\n        ...\r\n\r\nby:\r\n\r\n    ...\r\n    x = (ord(s[0]) << 7)\r\n    while i < length:\r\n        x = intmask((1000003*x) ^ ord(s[i])) ^ r[x % len_r]\r\n        ...\r\n\r\nThis change has a vulnerability similar than the one of Christian's suggested changed. The \"r\" array can be retreived directly with:\r\n\r\n```py\nr2 = []\r\nfor i in xrange(len(r)):\r\n    s = chr(intmask(i * UNSHIFT7) % len(r))\r\n    h = intmask(hash(s) ^ len(s) ^ ord(s) ^ ((ord(s) << 7) * MOD))\r\n    r2.append(chr(h))\r\nr2 = ''.join(r2)\n```\n\r\n\r\nwhere UNSHIFT7 = 1/2\\*\\*7 mod 2^(long bits).\r\n\r\nBy the way, this change always use r[0] to hash all string of one ASCII character (U+0000-U+007F).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566374/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566375",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566375",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566375,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNzU=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-04T01:30:00Z",
          "updated_at": "2012-01-04T01:30:00Z",
          "author_association": "MEMBER",
          "body": "> I'm in private contact with Paul and we are working together. He has\n> done extended research and I'll gladly follow his expertise. I've\n> already discussed the issue with small strings, but I can't recall if\n> it was a private mail to Paul or a public one to the dev list.\n\nCan all this be discussed on this issue now that it's the official point\nof reference? It will avoid the repetition of arguments we see here and\nthere.\n\n(I don't think special-casing small strings makes sense, because then\nyou have two algorithms to audit rather than one)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566375/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566376",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566376",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566376,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNzY=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-04T01:54:51Z",
          "updated_at": "2012-01-04T01:54:51Z",
          "author_association": "MEMBER",
          "body": "> https://gist.github.com/0a91e52efa74f61858b5\r\n\r\nPlease, attach directly a file to the issue, or copy/paste the code in your comment. Interesting part the code:\r\n\\---\r\n\r\n#Proposed replacement\r\n#\\--------------------------------------\r\n```py\nimport os, array\r\nsize_exponent = 14 #adjust as a memory/security tradeoff\r\nr = array.array('l', os.urandom(2**size_exponent))\r\nlen_r = len(r)\r\n\r\ndef _hash_string2(s):\r\n    \"\"\"The algorithm behind compute_hash() for a string or a unicode.\"\"\"\r\n    length = len(s)\r\n    #print s\r\n    if length == 0:\r\n        return -1\r\n    x = (ord(s[0]) << 7) ^ r[length % len_r]\r\n    i = 0\r\n    while i < length:\r\n        x = intmask((1000003*x) ^ ord(s[i]))\r\n        x ^= r[x % len_r]\r\n        i += 1\r\n    x ^= length\r\n    return intmask(x)\n```\n\r\n---\r\n\r\n> r = array.array('l', os.urandom(2\\*\\*size_exponent))\r\n> len_r = len(r)\r\n\r\nr size should not depend on the size of a long. You should write something like:\r\n\r\n```py\nsizeof_long = ctypes.sizeof(ctypes.c_long)\r\nr_bits = 8\r\nr = array.array('l', os.urandom((2**r_bits) * sizeof_long))\r\nr_mask = 2**r_bits-1\n```\n\r\n\r\nand then replace \"% len_r\" by \"& r_mask\".\r\n\r\nWhat is the minimum value of r_bits? For example, would it be safe to use a single long integer? (r_bits=1)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566376/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566379",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566379",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566379,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzNzk=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-04T01:58:04Z",
          "updated_at": "2012-01-04T01:58:04Z",
          "author_association": "MEMBER",
          "body": "> \\> r = array.array('l', os.urandom(2\\*\\*size_exponent))\n> \\> len_r = len(r)\n> \n> r size should not depend on the size of a long. You should write something like:\n> \n> sizeof_long = ctypes.sizeof(ctypes.c_long)\n> r_bits = 8\n> r = array.array('l', os.urandom((2\\*\\*r_bits) * sizeof_long))\n> r_mask = 2\\*\\*r_bits-1\n\nThe final code will be in C and will use neither ctypes nor array.array.\nArguing about this looks quite pointless IMO.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566379/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566380",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566380",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566380,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzODA=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-04T02:14:54Z",
          "updated_at": "2012-01-04T02:14:54Z",
          "author_association": "MEMBER",
          "body": "For the record, here is what \"man urandom\" says about random seed size:\r\n\r\n\u201c[...] no cryptographic primitive available today can hope to promise \r\nmore than 256  bits of  security,  so  if  any  program  reads more than \r\n256 bits (32 bytes) from the kernel random pool per invocation, or per \r\nreasonable  reseed  interval (not less than one minute), that should be\r\ntaken as a sign that its cryptography  is  not  skilfully  implemented.\u201d\r\n\r\nIn that light, reading a 64 bytes seed from /dev/urandom is already a lot, and 4096 bytes is simply insane.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566380/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566381",
          "html_url": "https://github.com/python/cpython/issues/57912#issuecomment-1093566381",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/57912",
          "id": 1093566381,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NjYzODE=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2012-01-04T03:08:15Z",
          "updated_at": "2012-01-04T03:08:15Z",
          "author_association": "MEMBER",
          "body": "I read that the attack cannot be computed with actual computers (it's too expensive) against Python 64 bits. I tried to change str.\\_\\_hash__ in Python 32 bits to compute the hash in 64 bits and than truncate the hash to 32 bits: it doesn't change anything, the hash values are the same, so it doesn't improve the security.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093566381/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103764",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103764/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103764/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103764/events",
      "html_url": "https://github.com/python/cpython/pull/103764",
      "id": 1681550498,
      "node_id": "PR_kwDOBN0Z8c5PBKrh",
      "number": 103764,
      "title": "gh-103763: Implement PEP 695",
      "user": {
        "login": "JelleZijlstra",
        "id": 906600,
        "node_id": "MDQ6VXNlcjkwNjYwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JelleZijlstra",
        "html_url": "https://github.com/JelleZijlstra",
        "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
        "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
        "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
        "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
        "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
        "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 66,
      "created_at": "2023-04-24T15:31:50Z",
      "updated_at": "2024-09-10T23:37:06Z",
      "closed_at": "2023-05-16T03:36:24Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/103764",
        "html_url": "https://github.com/python/cpython/pull/103764",
        "diff_url": "https://github.com/python/cpython/pull/103764.diff",
        "patch_url": "https://github.com/python/cpython/pull/103764.patch",
        "merged_at": "2023-05-16T03:36:23Z"
      },
      "body": "I will update this message as the status of the PR changes.\r\n\r\nThis is a complete implementation. It incorporates the changes in python/peps#3122, which were approved by the SC.\r\n\r\nI wrote a detailed account of the changes in this PR at https://jellezijlstra.github.io/pep695\r\n\r\nReviews are welcome on any aspect of the implementation.\r\n\r\n<!-- gh-issue-number: gh-103763 -->\r\n* Issue: gh-103763\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "JelleZijlstra",
        "id": 906600,
        "node_id": "MDQ6VXNlcjkwNjYwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JelleZijlstra",
        "html_url": "https://github.com/JelleZijlstra",
        "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
        "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
        "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
        "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
        "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
        "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103764/reactions",
        "total_count": 7,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 4,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103764/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1520783913",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1520783913",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1520783913,
          "node_id": "IC_kwDOBN0Z8c5apVIp",
          "user": {
            "login": "TeamSpen210",
            "id": 8453732,
            "node_id": "MDQ6VXNlcjg0NTM3MzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8453732?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TeamSpen210",
            "html_url": "https://github.com/TeamSpen210",
            "followers_url": "https://api.github.com/users/TeamSpen210/followers",
            "following_url": "https://api.github.com/users/TeamSpen210/following{/other_user}",
            "gists_url": "https://api.github.com/users/TeamSpen210/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TeamSpen210/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TeamSpen210/subscriptions",
            "organizations_url": "https://api.github.com/users/TeamSpen210/orgs",
            "repos_url": "https://api.github.com/users/TeamSpen210/repos",
            "events_url": "https://api.github.com/users/TeamSpen210/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TeamSpen210/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-24T20:27:17Z",
          "updated_at": "2023-04-25T19:54:55Z",
          "author_association": "NONE",
          "body": "Since `ParamSpec.args`/`kwargs` are so similar, perhaps they could just use the same struct? Then `dealloc`, `traverse`, `richcompare` (changing it to check if `type(a) is type(b)`) and potentially the members array could be shared.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1520783913/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1520799514",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1520799514",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1520799514,
          "node_id": "IC_kwDOBN0Z8c5apY8a",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-24T20:42:23Z",
          "updated_at": "2023-04-24T20:42:23Z",
          "author_association": "MEMBER",
          "body": "Good point, I'll try that.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1520799514/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522002019",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522002019",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522002019,
          "node_id": "IC_kwDOBN0Z8c5at-hj",
          "user": {
            "login": "sunmy2019",
            "id": 59365878,
            "node_id": "MDQ6VXNlcjU5MzY1ODc4",
            "avatar_url": "https://avatars.githubusercontent.com/u/59365878?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sunmy2019",
            "html_url": "https://github.com/sunmy2019",
            "followers_url": "https://api.github.com/users/sunmy2019/followers",
            "following_url": "https://api.github.com/users/sunmy2019/following{/other_user}",
            "gists_url": "https://api.github.com/users/sunmy2019/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sunmy2019/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sunmy2019/subscriptions",
            "organizations_url": "https://api.github.com/users/sunmy2019/orgs",
            "repos_url": "https://api.github.com/users/sunmy2019/repos",
            "events_url": "https://api.github.com/users/sunmy2019/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sunmy2019/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-25T15:29:08Z",
          "updated_at": "2023-04-25T15:54:56Z",
          "author_association": "MEMBER",
          "body": "~~Looking into `test_embed` failure~~ Already fixed.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522002019/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522079207",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522079207",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522079207,
          "node_id": "IC_kwDOBN0Z8c5auRXn",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-25T16:22:46Z",
          "updated_at": "2023-04-25T16:22:46Z",
          "author_association": "MEMBER",
          "body": "I think this is now a near-complete implementation of the PEP with the adjustments in python/peps#3122. Tests passed on my previous push.\r\n\r\nThe only issue I know of is that type expressions in class scopes don't capture names defined in the class; Larry is working on a change that would allow us to handle that case.\r\n\r\nOtherwise:\r\n- We should add more test cases\r\n- We should run on the buildbots to look for refleaks",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522079207/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 2,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522116967",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522116967",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522116967,
          "node_id": "IC_kwDOBN0Z8c5aualn",
          "user": {
            "login": "sunmy2019",
            "id": 59365878,
            "node_id": "MDQ6VXNlcjU5MzY1ODc4",
            "avatar_url": "https://avatars.githubusercontent.com/u/59365878?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sunmy2019",
            "html_url": "https://github.com/sunmy2019",
            "followers_url": "https://api.github.com/users/sunmy2019/followers",
            "following_url": "https://api.github.com/users/sunmy2019/following{/other_user}",
            "gists_url": "https://api.github.com/users/sunmy2019/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sunmy2019/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sunmy2019/subscriptions",
            "organizations_url": "https://api.github.com/users/sunmy2019/orgs",
            "repos_url": "https://api.github.com/users/sunmy2019/repos",
            "events_url": "https://api.github.com/users/sunmy2019/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sunmy2019/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-25T16:52:51Z",
          "updated_at": "2023-04-25T16:55:49Z",
          "author_association": "MEMBER",
          "body": "I ran tests with ref leak. Looks like `_Py_clear_generic_types` are not called during the tests. In implementing #103541, we exposed an API in `_testcapi` for ref leak test.\r\n\r\nTests passed with ref leaked:\r\n```\r\ntest_type_aliases test_typing test_import\r\n```\r\nTests not passed:\r\n```\r\ntest_monitoring\r\n```\r\n(Some tests are skipped)\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522116967/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522132419",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522132419",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522132419,
          "node_id": "IC_kwDOBN0Z8c5aueXD",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-25T17:05:10Z",
          "updated_at": "2023-04-25T17:05:10Z",
          "author_association": "MEMBER",
          "body": "Thanks so much for the help! Do you have ideas on how to address this? I think it's fine that these types exist for the lifetime of the interpreter, so we should mark them specially.\r\n\r\nAlso, do you know what is wrong with `test_monitoring`?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522132419/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522149265",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522149265",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522149265,
          "node_id": "IC_kwDOBN0Z8c5auieR",
          "user": {
            "login": "sunmy2019",
            "id": 59365878,
            "node_id": "MDQ6VXNlcjU5MzY1ODc4",
            "avatar_url": "https://avatars.githubusercontent.com/u/59365878?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sunmy2019",
            "html_url": "https://github.com/sunmy2019",
            "followers_url": "https://api.github.com/users/sunmy2019/followers",
            "following_url": "https://api.github.com/users/sunmy2019/following{/other_user}",
            "gists_url": "https://api.github.com/users/sunmy2019/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sunmy2019/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sunmy2019/subscriptions",
            "organizations_url": "https://api.github.com/users/sunmy2019/orgs",
            "repos_url": "https://api.github.com/users/sunmy2019/repos",
            "events_url": "https://api.github.com/users/sunmy2019/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sunmy2019/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-25T17:19:48Z",
          "updated_at": "2023-04-25T17:20:03Z",
          "author_association": "MEMBER",
          "body": "> Also, do you know what is wrong with `test_monitoring`?\r\n\r\nIt's also failing on main (cef542c). I think it's irrelevant to our changes here. I'll open another issue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522149265/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522179615",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522179615",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522179615,
          "node_id": "IC_kwDOBN0Z8c5aup4f",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-25T17:47:13Z",
          "updated_at": "2023-04-25T17:47:13Z",
          "author_association": "MEMBER",
          "body": "> I ran tests with ref leak. Looks like `_Py_clear_generic_types` are not called during the tests.\r\n\r\nI think this can't be the problem, because these types are created during interpreter startup, so using them shouldn't cause a leak. The leak must be elsewhere.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522179615/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522355414",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522355414",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522355414,
          "node_id": "IC_kwDOBN0Z8c5avUzW",
          "user": {
            "login": "Eclips4",
            "id": 80244920,
            "node_id": "MDQ6VXNlcjgwMjQ0OTIw",
            "avatar_url": "https://avatars.githubusercontent.com/u/80244920?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Eclips4",
            "html_url": "https://github.com/Eclips4",
            "followers_url": "https://api.github.com/users/Eclips4/followers",
            "following_url": "https://api.github.com/users/Eclips4/following{/other_user}",
            "gists_url": "https://api.github.com/users/Eclips4/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Eclips4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Eclips4/subscriptions",
            "organizations_url": "https://api.github.com/users/Eclips4/orgs",
            "repos_url": "https://api.github.com/users/Eclips4/repos",
            "events_url": "https://api.github.com/users/Eclips4/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Eclips4/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-25T20:11:06Z",
          "updated_at": "2023-04-25T20:11:06Z",
          "author_association": "MEMBER",
          "body": "Seems that there's no more refleaks!\r\nGreat work. What's the next step of implementation?\r\nCan we re-write tests without an exec?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522355414/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522372535",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522372535",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522372535,
          "node_id": "IC_kwDOBN0Z8c5avY-3",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-25T20:26:33Z",
          "updated_at": "2023-04-25T20:26:33Z",
          "author_association": "MEMBER",
          "body": "There are more refleaks (test_typing leaks dozens of references); I've been staring at them for a while.\r\n\r\nSome of the tests need exec because they test a SyntaxError or need to run in a module scope. The next step is review, as well as SC approval.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522372535/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522556284",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522556284",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522556284,
          "node_id": "IC_kwDOBN0Z8c5awF18",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-25T23:55:14Z",
          "updated_at": "2023-04-25T23:55:14Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @JelleZijlstra for commit 27a8a4cc34d243e40d898d4ef93ae0fea351224e :robot:\n\nIf you want to schedule another build, you need to add the <kbd>:hammer: test-with-refleak-buildbots</kbd> label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522556284/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1522831646",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1522831646",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1522831646,
          "node_id": "IC_kwDOBN0Z8c5axJEe",
          "user": {
            "login": "sunmy2019",
            "id": 59365878,
            "node_id": "MDQ6VXNlcjU5MzY1ODc4",
            "avatar_url": "https://avatars.githubusercontent.com/u/59365878?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sunmy2019",
            "html_url": "https://github.com/sunmy2019",
            "followers_url": "https://api.github.com/users/sunmy2019/followers",
            "following_url": "https://api.github.com/users/sunmy2019/following{/other_user}",
            "gists_url": "https://api.github.com/users/sunmy2019/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sunmy2019/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sunmy2019/subscriptions",
            "organizations_url": "https://api.github.com/users/sunmy2019/orgs",
            "repos_url": "https://api.github.com/users/sunmy2019/repos",
            "events_url": "https://api.github.com/users/sunmy2019/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sunmy2019/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-26T06:01:28Z",
          "updated_at": "2023-04-26T06:33:21Z",
          "author_association": "MEMBER",
          "body": "For your reference, I run 27a8a4cc with my [ref-trace-facilities](https://discuss.python.org/t/enhance-ref-trace-facilities/25990).\r\n\r\n```\r\n./python -m test test_typing -R :\r\n\r\ntest_typing leaked [125, 124, 126, 124] references, sum=499\r\n```\r\nmy tracing facility collects ref change grouped by its type\r\n```\r\nref change of type builtin_function_or_method: +1\r\nref change of type function: +15\r\nref change of type type: +30\r\nref change of type wrapper_descriptor: +79\r\ntotal ref change +125\r\n```\r\n```\r\nref change of type function: +15\r\nref change of type type: +30\r\nref change of type wrapper_descriptor: +79\r\ntotal ref change +124\r\n```\r\n```\r\nref change of type function: +15\r\nref change of type method_descriptor: +1\r\nref change of type type: +30\r\nref change of type wrapper_descriptor: +79\r\ntotal ref change +126\r\n```\r\n```\r\nref change of type function: +15\r\nref change of type type: +30\r\nref change of type wrapper_descriptor: +79\r\ntotal ref change +124\r\n```\r\n\r\nAlso, the ref inc of `wrapper_descriptor` is from the same object:\r\n```\r\nref change of living 0x7f348c1002f0 (wrapper_descriptor): +79,  408 -> 487\r\nref change of living 0x7f348c1002f0 (wrapper_descriptor): +79,  487 -> 566\r\nref change of living 0x7f348c1002f0 (wrapper_descriptor): +79,  566 -> 645\r\nref change of living 0x7f348c1002f0 (wrapper_descriptor): +79,  645 -> 724\r\n```\r\nIt's qualname is `object.__setattr__`.\r\n\r\nThe same happens for the\r\n```\r\n0x7f348aeefdd0 (function) +15,\r\n0x5617249315a0 (type): +15, \r\n0x561724933210 (type): +15,\r\n```\r\nI cannot get the name of the function, but I do get the name of these `type` objects:\r\n```\r\ntyping.ParamSpecArgs\r\ntyping.ParamSpecKwargs\r\n```\r\n\r\n---\r\n\r\nAnother note is that `Py_SETREF` will not cause the sys total ref to change. It may cause false positives. \r\n\r\nI suggest strictly restricting the usage of SETREF as it will shadow many bugs and make it harder to trace.\r\n\r\n---\r\n\r\nI hope this info is helpful. I can look into it further if it doesn't ring a bell.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1522831646/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1523313759",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1523313759",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1523313759,
          "node_id": "IC_kwDOBN0Z8c5ay-xf",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-26T12:11:20Z",
          "updated_at": "2023-04-26T12:11:20Z",
          "author_association": "MEMBER",
          "body": "Thanks, that is indeed helpful. I found we don't DECREF the type in the dealloc methods for ParamSpecArgs/Kwargs, so that should take care of one leak.\r\n\r\nI am mystified by the wrapper_descriptor leak. None of my new classes even define a `__setattr__` method. I found last night that I could reproduce refleaks even on main on my own machine, so maybe some leaks aren't new to this PR. I triggered the refleak buildbots on #103866 to make sure.\r\n\r\nI tried to build your branch but failed. There are some nontrivial merge conflicts (probably from immortal objects being merged), and when I fixed those, the build failed because your new `cb.cpp` file isn't picked up by compilation.\r\n\r\nAre you sure about SETREF? That macro expands to DECREF plus some pointer juggling, so it should be fine. Perhaps you meant `Py_SET_REFCNT`.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1523313759/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1523331010",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1523331010",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1523331010,
          "node_id": "IC_kwDOBN0Z8c5azC_C",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-26T12:24:50Z",
          "updated_at": "2023-04-26T12:24:50Z",
          "author_association": "MEMBER",
          "body": "Also, when I triggered the refleak buildbots yesterday, I got refleaks on many files that don't even seem to be exercising the codepaths in this PR, such as `test_statistics` and `test_genericalias` (https://buildbot.python.org/all/#/builders/558/builds/1202/steps/5/logs/warnings__113_). Some of those may be easier to track down than the leak in `test_typing`, which is a huge file. If you can run your tool on some of these other files, it may tell us something useful.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1523331010/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1523338488",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1523338488",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1523338488,
          "node_id": "IC_kwDOBN0Z8c5azEz4",
          "user": {
            "login": "sunmy2019",
            "id": 59365878,
            "node_id": "MDQ6VXNlcjU5MzY1ODc4",
            "avatar_url": "https://avatars.githubusercontent.com/u/59365878?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sunmy2019",
            "html_url": "https://github.com/sunmy2019",
            "followers_url": "https://api.github.com/users/sunmy2019/followers",
            "following_url": "https://api.github.com/users/sunmy2019/following{/other_user}",
            "gists_url": "https://api.github.com/users/sunmy2019/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sunmy2019/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sunmy2019/subscriptions",
            "organizations_url": "https://api.github.com/users/sunmy2019/orgs",
            "repos_url": "https://api.github.com/users/sunmy2019/repos",
            "events_url": "https://api.github.com/users/sunmy2019/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sunmy2019/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-26T12:30:49Z",
          "updated_at": "2023-04-26T12:30:49Z",
          "author_association": "MEMBER",
          "body": "> Thanks, that is indeed helpful. I found we don't DECREF the type in the dealloc methods for ParamSpecArgs/Kwargs, so that should take care of one leak.\r\n\r\nGreat.\r\n\r\n> I am mystified by the wrapper_descriptor leak. None of my new classes even define a `__setattr__` method. I found last night that I could reproduce refleaks even on main on my own machine, so maybe some leaks aren't new to this PR. I triggered the refleak buildbots on #103866 to make sure.\r\n\r\nThis is interesting, I will look into it.\r\n\r\n> I tried to build your branch but failed. There are some nontrivial merge conflicts (probably from immortal objects being merged), and when I fixed those, the build failed because your new `cb.cpp` file isn't picked up by compilation.\r\n\r\nI currently build and link it by hand. I have noticed a lot of changes since immortal objects are introduced. I will fix that soon so that you can play with it.\r\n\r\nDo you have some ideas on how to add this cpp file to this project? I am not familiar with Autoconf.\r\n\r\n> Are you sure about SETREF? That macro expands to DECREF plus some pointer juggling, so it should be fine. Perhaps you meant `Py_SET_REFCNT`.\r\n\r\nSorry, I mixed up these two.\r\n\r\n\r\n---\r\n\r\nNew test case. I am running a single test in test_type_aliases:\r\n```py\r\n    def test_recursive_repr(self):\r\n        type Recursive = Recursive\r\n        self.assertEqual(repr(Recursive), \"<type alias Recursive: ...>\")\r\n```\r\n\r\nI got\r\n```\r\nref change of type code: +1\r\nref change of type function: +1\r\nref change of type type: +1\r\nref change of type typing.TypeAliasType: +1\r\n```\r\n\r\nThis is so weird. I tracked the `code` object, and found all of its ref count changes happen in `Python/bytecodes.c`.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1523338488/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1523363861",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1523363861",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1523363861,
          "node_id": "IC_kwDOBN0Z8c5azLAV",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-26T12:48:27Z",
          "updated_at": "2023-04-26T12:48:27Z",
          "author_association": "MEMBER",
          "body": "Thanks! I tracked down the TypeAlias leak; it's due to a missing `tp_clear` slot. The `repr()` triggers evaluation of the type alias, which ends up doing essentially `ta->value = ta`, and that reference cycle cannot be collected without a `tp_clear`. I'll push a fix in a moment. I think TypeVar objects will need a tp_clear for the same reason.\r\n\r\nI am not sure about the build process, sorry. I think we'd be hesitant to add a C++ file to the project, though maybe it's OK as a special debug option.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1523363861/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1523378689",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1523378689",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1523378689,
          "node_id": "IC_kwDOBN0Z8c5azOoB",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-26T12:58:35Z",
          "updated_at": "2023-04-26T12:58:35Z",
          "author_association": "MEMBER",
          "body": "And we got lots of refleaks on Carl's PR too: https://buildbot.python.org/all/#/builders/411/builds/1201/steps/5/logs/warnings__109_. Looking at the buildbot page, I noticed we're also getting these leaks on main: https://buildbot.python.org/all/#/builders/75/builds/745/steps/5/logs/warnings__111_. I'll open an issue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1523378689/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1523511091",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1523511091",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1523511091,
          "node_id": "IC_kwDOBN0Z8c5azu8z",
          "user": {
            "login": "sunmy2019",
            "id": 59365878,
            "node_id": "MDQ6VXNlcjU5MzY1ODc4",
            "avatar_url": "https://avatars.githubusercontent.com/u/59365878?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sunmy2019",
            "html_url": "https://github.com/sunmy2019",
            "followers_url": "https://api.github.com/users/sunmy2019/followers",
            "following_url": "https://api.github.com/users/sunmy2019/following{/other_user}",
            "gists_url": "https://api.github.com/users/sunmy2019/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sunmy2019/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sunmy2019/subscriptions",
            "organizations_url": "https://api.github.com/users/sunmy2019/orgs",
            "repos_url": "https://api.github.com/users/sunmy2019/repos",
            "events_url": "https://api.github.com/users/sunmy2019/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sunmy2019/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-26T14:23:03Z",
          "updated_at": "2023-04-26T14:23:03Z",
          "author_association": "MEMBER",
          "body": "@JelleZijlstra I have updated my branch. https://github.com/sunmy2019/cpython/tree/memory-tracking-demo\r\n\r\nAlso, I merge it into your branch. https://github.com/sunmy2019/cpython/tree/tvobject-refleak\r\n\r\nDetailed build guide here:\r\nhttps://github.com/sunmy2019/cpython/blob/memory-tracking-demo/README.md",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1523511091/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1523605663",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1523605663",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1523605663,
          "node_id": "IC_kwDOBN0Z8c5a0GCf",
          "user": {
            "login": "JelleZijlstra",
            "id": 906600,
            "node_id": "MDQ6VXNlcjkwNjYwMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JelleZijlstra",
            "html_url": "https://github.com/JelleZijlstra",
            "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
            "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
            "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
            "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
            "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
            "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-26T15:20:36Z",
          "updated_at": "2023-04-26T15:20:36Z",
          "author_association": "MEMBER",
          "body": "Thanks, I got it to build. With the fix in #103882 and the fixes I pushed to this branch most recently, I get no refleaks on test_typing, test_type_aliases, or test_type_params, so hopefully this PR is now clean.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1523605663/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1523620196",
          "html_url": "https://github.com/python/cpython/pull/103764#issuecomment-1523620196",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103764",
          "id": 1523620196,
          "node_id": "IC_kwDOBN0Z8c5a0Jlk",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-26T15:30:01Z",
          "updated_at": "2023-04-26T15:30:01Z",
          "author_association": "MEMBER",
          "body": "Hi @JelleZijlstra, I probably won't have the time to focus on reviewing this PR (another trip next week). It looks like you're getting great reviews already. I expect this will be a great addition to 3.12!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1523620196/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/124640",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/124640/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/124640/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/124640/events",
      "html_url": "https://github.com/python/cpython/pull/124640",
      "id": 2551659622,
      "node_id": "PR_kwDOBN0Z8c582rPx",
      "number": 124640,
      "title": "GH-91048: Add utils for capturing async call stack for asyncio programs and enable profiling",
      "user": {
        "login": "1st1",
        "id": 239003,
        "node_id": "MDQ6VXNlcjIzOTAwMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1st1",
        "html_url": "https://github.com/1st1",
        "followers_url": "https://api.github.com/users/1st1/followers",
        "following_url": "https://api.github.com/users/1st1/following{/other_user}",
        "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
        "organizations_url": "https://api.github.com/users/1st1/orgs",
        "repos_url": "https://api.github.com/users/1st1/repos",
        "events_url": "https://api.github.com/users/1st1/events{/privacy}",
        "received_events_url": "https://api.github.com/users/1st1/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 557226369,
          "node_id": "MDU6TGFiZWw1NTcyMjYzNjk=",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-asyncio",
          "name": "topic-asyncio",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 62,
      "created_at": "2024-09-26T22:52:13Z",
      "updated_at": "2025-01-24T13:55:35Z",
      "closed_at": "2025-01-22T16:25:30Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/124640",
        "html_url": "https://github.com/python/cpython/pull/124640",
        "diff_url": "https://github.com/python/cpython/pull/124640.diff",
        "patch_url": "https://github.com/python/cpython/pull/124640.patch",
        "merged_at": "2025-01-22T16:25:30Z"
      },
      "body": "This PR introduces low overhead utils to enable async stack reconstruction for running and suspended tasks and futures. The runtime overhead this PR adds is making tasks set & reset a reference to future/tasks they await on. Control flow primitives like `asyncio.TaskGroup`, `asyncio.gather()`, `asyncio.shield()` are also updated to perform this simple bookkeeping. \r\n\r\n### Remaining to-do for @pablogsal, @ambv, and myself\r\n\r\n- [ ] `swap_current_task` in `asynciomodule.c` needs to be updated to take care of the new `ts->asyncio_running_task`\r\n- [x] Add a few tests for eager tasks and how they would interact with this (e.g. running only eager tasks, running eager task within a task, running a task from an eager task from a task, etc.)\r\n- [x] `test_running_loop_within_a_loop` seg faults if the test is ran twice (I think), a repro is running `./python.exe -m test test_asyncio -R3:3`\r\n- [x] `-R3:3` reports refleaks ~, might be nothing, but needs to be checked~ (OK, definitely looks like there's a leak \"test_asyncio.test_unix_events leaked [492, 492, 492] references, sum=1476\", repro `./python.exe -m test test_asyncio.test_subprocess test_asyncio.test_taskgroups -R3:3`)\r\n- [x] Run full perf test again, we might have other regressions besides the already fixed `gather()`\r\n- [x] Cover both Python and C implementations (right now only C is being tested)\r\n\r\n### New APIs:\r\n\r\n* `asyncio.capture_call_graph(*, future=None, depth=1)` to capture the call stack for the current task or for the specified task or future\r\n* `asyncio.print_call_graph(*, future=None, file=None, depth=1)` to print the call stack for the current task or for the specified task or future\r\n* `asyncio.future_add_to_awaited_by()` and `asyncio.future_discard_from_awaited_by()` to enable \"stitching\" tasks and futures that are awaiting other tasks and futures.\r\n* `frame.f_generator` a getter to return the generator object associated with the frame or ``None``. The implementation is **maximally straightforward** and does not require any new fields in any of the internal interpreter structs.\r\n\r\n\r\n### New C APIs:\r\n\r\n* ~Coroutine and generator structs gain a new pointer `cr_task`. It is a *borrowed* pointer to the task that runs the coroutine. This is meant for external profilers to quickly find the associated task (an alternative to this would be a rather costly traversal of interpreter state to find the module state of asyncio, requiring to read many Python ``dict`` structs).~\r\n* ~A \"private\" C API function `void _PyCoro_SetTask(PyObject *coro, PyObject *task)` to set the `cr_task` field from `_asynciomodule.c`.~\r\n\r\nWe have a complete functional test for out of process introspection in `test_external_inspection.py` (sampling profilers and debuggers will follow the same approach).\r\n\r\n### Example\r\n\r\nThis example program:\r\n\r\n```python\r\nasync def deep():\r\n    await asyncio.sleep(0)\r\n    import pprint\r\n    pprint.pp(asyncio.capture_call_graph())\r\n\r\nasync def c1():\r\n    await asyncio.sleep(0)\r\n    await deep()\r\n\r\nasync def c2():\r\n    await asyncio.sleep(0)\r\n\r\nasync def main():\r\n    await asyncio.gather(c1(), c2())\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nwill print:\r\n\r\n```\r\nFrameCallGraphEntry(\r\n    future=<Task pending name='Task-2' ...>, \r\n    call_stack=[\r\n        FrameCallGraphEntry(\r\n            frame=..., \r\n        FrameCallGraphEntry(\r\n            frame=...)\r\n    ], \r\n    awaited_by=[\r\n        FrameCallGraphEntry(\r\n            future=<Task pending name='Task-1' ...>, \r\n            call_stack=[\r\n                FrameCallGraphEntry(\r\n                    frame=...)\r\n            ], \r\n            awaited_by=[]\r\n        )\r\n    ]\r\n)\r\n```\r\n\r\n<!-- gh-issue-number: gh-91048 -->\r\n* Issue: gh-91048\r\n<!-- /gh-issue-number -->\r\n\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\r\n\ud83d\udcda Documentation preview \ud83d\udcda: https://cpython-previews--124640.org.readthedocs.build/\r\n\r\n<!-- readthedocs-preview cpython-previews end -->",
      "closed_by": {
        "login": "ambv",
        "id": 55281,
        "node_id": "MDQ6VXNlcjU1Mjgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/55281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ambv",
        "html_url": "https://github.com/ambv",
        "followers_url": "https://api.github.com/users/ambv/followers",
        "following_url": "https://api.github.com/users/ambv/following{/other_user}",
        "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ambv/subscriptions",
        "organizations_url": "https://api.github.com/users/ambv/orgs",
        "repos_url": "https://api.github.com/users/ambv/repos",
        "events_url": "https://api.github.com/users/ambv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ambv/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/124640/reactions",
        "total_count": 3,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 3,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/124640/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2380116263",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2380116263",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2380116263,
          "node_id": "IC_kwDOBN0Z8c6N3bEn",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-09-27T21:45:06Z",
          "updated_at": "2024-09-27T21:45:06Z",
          "author_association": "MEMBER",
          "body": "I've implemented proof of concept out of process async stack reconstruction here: https://github.com/1st1/cpython/commit/7185f8d11556364be644c5071c28abe403f7f756 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2380116263/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2389384510",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2389384510",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2389384510,
          "node_id": "IC_kwDOBN0Z8c6Oax0-",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-02T18:19:27Z",
          "updated_at": "2024-10-02T18:19:41Z",
          "author_association": "MEMBER",
          "body": "@mpage \r\n> Thanks for doing this! Do you know how much overhead the awaiter tracking adds?\r\n\r\nI haven't measured, but I don't expect the overhead to be detectable at all. In the most common scenario the tracking is just assigning / resetting a pointer in Task/Future C structs.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2389384510/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2389584405",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2389584405",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2389584405,
          "node_id": "IC_kwDOBN0Z8c6ObioV",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-02T20:08:36Z",
          "updated_at": "2024-10-02T20:08:36Z",
          "author_association": "MEMBER",
          "body": "> @mpage \n> \n> > Thanks for doing this! Do you know how much overhead the awaiter tracking adds?\n> \n> \n> \n> I haven't measured, but I don't expect the overhead to be detectable at all. In the most common scenario the tracking is just assigning / resetting a pointer in Task/Future C structs.\n\nI ran some async benchmarks from pyperformance and a small echo tcp server and the Perf impact is below the noise.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2389584405/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2389791146",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2389791146",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2389791146,
          "node_id": "IC_kwDOBN0Z8c6OcVGq",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-02T22:24:01Z",
          "updated_at": "2024-10-02T22:24:01Z",
          "author_association": "MEMBER",
          "body": "@gvanrossum @ambv the PR is ready for your reviews.\r\n\r\nGuido, the implementation is along the lines of what we discussed at the sprint. I think the only change from what we had on the white board is adding \"cr_task\" borrowed ref to coroutine objects to allow external introspection for debuggers/profilers.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2389791146/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2389804080",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2389804080",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2389804080,
          "node_id": "IC_kwDOBN0Z8c6OcYQw",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-02T22:37:18Z",
          "updated_at": "2024-10-02T22:37:18Z",
          "author_association": "MEMBER",
          "body": "> @gvanrossum @ambv the PR is ready for your reviews.\r\n> \r\n> Guido, the implementation is along the lines of what we discussed at the sprint. I think the only change from what we had on the white board is adding \"cr_task\" borrowed ref to coroutine objects to allow external introspection for debuggers/profilers.\r\n\r\nThanks, let me put this in the queue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2389804080/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2390019318",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2390019318",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2390019318,
          "node_id": "IC_kwDOBN0Z8c6OdMz2",
          "user": {
            "login": "mpage",
            "id": 577841,
            "node_id": "MDQ6VXNlcjU3Nzg0MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/577841?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpage",
            "html_url": "https://github.com/mpage",
            "followers_url": "https://api.github.com/users/mpage/followers",
            "following_url": "https://api.github.com/users/mpage/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpage/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpage/subscriptions",
            "organizations_url": "https://api.github.com/users/mpage/orgs",
            "repos_url": "https://api.github.com/users/mpage/repos",
            "events_url": "https://api.github.com/users/mpage/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpage/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-02T23:56:48Z",
          "updated_at": "2024-10-02T23:56:48Z",
          "author_association": "CONTRIBUTOR",
          "body": "It'd be good to have @jbower-fb have a look at this. He's been working with our (Meta) profiler team to hash out a plan for a sustainable solution for profiling Python.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2390019318/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2402900029",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2402900029",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2402900029,
          "node_id": "IC_kwDOBN0Z8c6POVg9",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-09T17:29:18Z",
          "updated_at": "2024-10-09T17:29:18Z",
          "author_association": "MEMBER",
          "body": "> Thanks, let me put this in the queue.\r\n\r\nI'm sorry, please don't wait for me. I just have too many other distractions, and I can't find the time for this. Sorry again!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2402900029/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2409030885",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2409030885",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2409030885,
          "node_id": "IC_kwDOBN0Z8c6PluTl",
          "user": {
            "login": "kumaraditya303",
            "id": 59607654,
            "node_id": "MDQ6VXNlcjU5NjA3NjU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/59607654?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kumaraditya303",
            "html_url": "https://github.com/kumaraditya303",
            "followers_url": "https://api.github.com/users/kumaraditya303/followers",
            "following_url": "https://api.github.com/users/kumaraditya303/following{/other_user}",
            "gists_url": "https://api.github.com/users/kumaraditya303/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kumaraditya303/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kumaraditya303/subscriptions",
            "organizations_url": "https://api.github.com/users/kumaraditya303/orgs",
            "repos_url": "https://api.github.com/users/kumaraditya303/repos",
            "events_url": "https://api.github.com/users/kumaraditya303/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kumaraditya303/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-13T15:57:49Z",
          "updated_at": "2024-10-13T15:57:49Z",
          "author_association": "CONTRIBUTOR",
          "body": "I have some feedback:\r\n\r\n- This PR adds 2k+ worth of changes and adds a new feature to asyncio whose maintenance status is not good. My understanding is that this feature will be used by very few users, I am not sure how I would use this myself atm. As such this adds a **significant maintenance** overhead for asyncio.\r\n- IIUC this pr only supports tasks which inherit from the builtin asyncio task, and given that asyncio officially supports using custom task factory, I am sure later we will get requests to support other tasks implementations, how would that be handled?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2409030885/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 1,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2410921032",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2410921032",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2410921032,
          "node_id": "IC_kwDOBN0Z8c6Ps7xI",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-14T11:23:56Z",
          "updated_at": "2024-10-14T11:39:53Z",
          "author_association": "MEMBER",
          "body": "> * This PR adds 2k+ worth of changes\r\n\r\nThe PR has many changes, indeed but a huge chunk of them are tests.\r\n\r\n> and adds a new feature to asyncio whose maintenance status is not good. My understanding is that this feature will be used by very few users,\r\n\r\nThis PR adds the necessary infrastructure to enable in process and out-of process profiling for asyncio. Without this there is not possible to build reliable out-of-process profilers and to build in-process profilers you need tons of hacks including monkey patching. Once profilers will be available we do expect that most users of asyncio that want to profile will use transitively this feature. This is not just a few users.This is not just a \"nice to have\" is a fundamental prerequisite. \r\n\r\nThis also includes debuggers (in process like `pdb` and out-of process). Without this is not possible to offer a consistent view of an asyncio process and the task graph.\r\n\r\n>  I am not sure how I would use this myself atm. \r\n\r\nThis is infrastructure work for building profilers and debuggers so we don't expect most users will use this **directly** but through the profilers and debuggers that can be built with this (like `pdb`).\r\n\r\n> IIUC this pr only supports tasks which inherit from the builtin asyncio task, and given that asyncio officially supports using custom task factory, I am sure later we will get requests to support other tasks implementations, how would that be handled?\r\n\r\nI will left to @1st1 to explain, but the guest is that since profilers and unwinders need deep knowledge of the task structure there is not a \"generic\" API or implementation that other tasks that do not inherit from `asyncio.task`. ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2410921032/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2411537425",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2411537425",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2411537425,
          "node_id": "IC_kwDOBN0Z8c6PvSQR",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-14T15:04:35Z",
          "updated_at": "2024-10-14T15:04:35Z",
          "author_association": "MEMBER",
          "body": "@kumaraditya303\r\n\r\nHear hear.\r\n\r\n> This PR adds 2k+ worth of changes and adds a new feature to asyncio whose maintenance status is not good. My understanding is that this feature will be used by very few users, I am not sure how I would use this myself atm. As such this adds a significant maintenance overhead for asyncio.\r\n\r\nTo be fair, more than half of those 2k+ changes is docs and tests.  I agree it will be used by very few users developing locally, at least initially.  But it'll be used by every serious asyncio user in production, because this will be the easiest way to profile & introspect asyncio code.  I have had a lot of asyncio users reaching out to me over the years asking how to deal with profiling and I never had a good answer, hopefully with this PR we finally will.\r\n\r\nAs for maintenance overhead I can't disagree, every new feature adds overhead. To this I can say two things: (1) I plan to be more active going forward and help; (2) let's not stop the evolution of asyncio because of maintenance concerns; if we do that then it will just stagnate and rot.\r\n\r\n> IIUC this pr only supports tasks which inherit from the builtin asyncio task, and given that asyncio officially supports using custom task factory, I am sure later we will get requests to support other tasks implementations, how would that be handled?\r\n\r\nAdding support for third-party tasks will be fairly trivial. However, Guido and I discussed this at length and he convinced me to start with the support of built-in tasks. The reasoning here is that most users don't create their Task implementations from scratch (it's very hard to make your own Task as fast and as correct as `asyncio.Task`), they inherit their implementations from our types. Inheritance is supported.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2411537425/reactions",
            "total_count": 4,
            "+1": 4,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2417407549",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2417407549",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2417407549,
          "node_id": "IC_kwDOBN0Z8c6QFrY9",
          "user": {
            "login": "kumaraditya303",
            "id": 59607654,
            "node_id": "MDQ6VXNlcjU5NjA3NjU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/59607654?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kumaraditya303",
            "html_url": "https://github.com/kumaraditya303",
            "followers_url": "https://api.github.com/users/kumaraditya303/followers",
            "following_url": "https://api.github.com/users/kumaraditya303/following{/other_user}",
            "gists_url": "https://api.github.com/users/kumaraditya303/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kumaraditya303/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kumaraditya303/subscriptions",
            "organizations_url": "https://api.github.com/users/kumaraditya303/orgs",
            "repos_url": "https://api.github.com/users/kumaraditya303/repos",
            "events_url": "https://api.github.com/users/kumaraditya303/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kumaraditya303/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-16T16:59:36Z",
          "updated_at": "2024-10-16T16:59:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "> But it'll be used by every serious asyncio user in production, because this will be the easiest way to profile & introspect asyncio code. I have had a lot of asyncio users reaching out to me over the years asking how to deal with profiling and I never had a good answer, hopefully with this PR we finally will.\r\n\r\nThat's interesting as ever since I joined I haven't seen requests to add profiling to asyncio. \r\n\r\n> Adding support for third-party tasks will be fairly trivial. However, Guido and I discussed this at length and he convinced me to start with the support of built-in tasks. The reasoning here is that most users don't create their Task implementations from scratch (it's very hard to make your own Task as fast and as correct as asyncio.Task), they inherit their implementations from our types. Inheritance is supported.\r\n\r\nSure, we should document this properly if not done already",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2417407549/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2417454718",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2417454718",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2417454718,
          "node_id": "IC_kwDOBN0Z8c6QF25-",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-16T17:21:59Z",
          "updated_at": "2024-10-16T17:21:59Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nWhen you're done making the requested changes, leave the comment: `I have made the requested changes; please review again`.\n<!-- /changes-requested -->\n\nAnd if you don't make the requested changes, you will be poked with soft cushions!\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2417454718/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2417467709",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2417467709",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2417467709,
          "node_id": "IC_kwDOBN0Z8c6QF6E9",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-16T17:28:20Z",
          "updated_at": "2024-10-16T17:28:20Z",
          "author_association": "MEMBER",
          "body": "@kumaraditya303 \r\n\r\n>> But it'll be used by every serious asyncio user in production, because this will be the easiest way to profile & introspect asyncio code. I have had a lot of asyncio users reaching out to me over the years asking how to deal with profiling and I never had a good answer, hopefully with this PR we finally will.\r\n\r\n> That's interesting as ever since I joined I haven't seen requests to add profiling to asyncio.\r\n\r\nAnd that's why it's great that there are so many of us working on this!\r\n\r\nThis PR has its roots in Instagram/Meta wanting to profile their asyncio programs. @pablogsal indicates that as soon as this is available Bloomberg will benefit from it too. When I helped Microsoft implement support for Python in Azure cloud, the question of how to profile Python functions in the cloud was one of the biggest ones unanswered. And even in my own company, EdgeDB, I'd love to have an ability to profile our stack non-invasively. I hope this evidence illustrates why this PR isn't a gimmick.\r\n\r\nOn a side note, Kumar, I agree that we need to be conservative when we're adding new asyncio APIs, I'm with you. I believe the surface we need to support is already huge. On the other hand, tooling and instrumentation is one area where asyncio basically has nothing to offer and that's really bad, especially considering how instrumentable things like Rust's Tokio event loop are (and people do use that instrumentation daily). So expect to see more proposals and PRs to enhance our understanding of what asyncio programs doing so that people can optimize them.\r\n\r\n> Sure, we should document this properly if not done already\r\n\r\nThere's already a long comment in the code explaining the design space. This should be good enough for us to get back to this in the future in case we want to broaden the support of third-party tasks and futures.\r\n\r\n![CleanShot 2024-10-16 at 10 20 10@2x](https://github.com/user-attachments/assets/465a5536-a90c-4620-a315-c1ed487a1318)\r\n\r\nBut I'll restate, I have a feeling that nobody reimplements their tasks and futures from scratch simply because of how complex that task is. Extending `asyncio.Future` and `asyncio.Task` is fully supported today.\r\n\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2417467709/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2417506922",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2417506922",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2417506922,
          "node_id": "IC_kwDOBN0Z8c6QGDpq",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-16T17:47:35Z",
          "updated_at": "2024-10-16T17:47:35Z",
          "author_association": "MEMBER",
          "body": "@kumaraditya303 I believe I addressed your comments, except named tuples vs. dataclasses. See the comment. Please unblock the PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2417506922/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2417606306",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2417606306",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2417606306,
          "node_id": "IC_kwDOBN0Z8c6QGb6i",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-16T18:30:46Z",
          "updated_at": "2024-10-16T18:30:46Z",
          "author_association": "MEMBER",
          "body": "@kumaraditya303 Kumar, thanks for a good and thorough review!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2417606306/reactions",
            "total_count": 3,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 3,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2419008720",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2419008720",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2419008720,
          "node_id": "IC_kwDOBN0Z8c6QLyTQ",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-17T09:19:45Z",
          "updated_at": "2024-10-17T09:19:45Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nWhen you're done making the requested changes, leave the comment: `I have made the requested changes; please review again`.\n<!-- /changes-requested -->\n\nAnd if you don't make the requested changes, you will be put in the comfy chair!\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2419008720/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2419069487",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2419069487",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2419069487,
          "node_id": "IC_kwDOBN0Z8c6QMBIv",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-17T09:48:08Z",
          "updated_at": "2024-10-17T09:48:08Z",
          "author_association": "MEMBER",
          "body": "> Why is this one PR, not two?\nThe addition of data for external profilers seems unrelated to the generator and asyncio changes.\n\nBecause the change includes a test that exercises this design to implement an external profiler which is also the goal of this change. The offsets are added to make the test possible. ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2419069487/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2420002516",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2420002516",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2420002516,
          "node_id": "IC_kwDOBN0Z8c6QPk7U",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-17T16:31:26Z",
          "updated_at": "2024-10-17T16:31:26Z",
          "author_association": "MEMBER",
          "body": "> This adds overhead to all generators for the benefit of asyncio and external profilers, to the exclusion of other libraries and tools. I don't think this narrow use case justifies slowing down all generators.\r\n\r\nThe overhead is a slight memory overhead by adding one extra pointer to generators. I agree, it's non-zero and it's there. But, and it's an important \"but\", real world programs don't have millions of generators or coroutine objects, that's just not something people ever do. So this overhead won't be noticeable by anyone.\r\n\r\n> for the benefit of asyncio and external profilers, to the exclusion of other libraries and tools.\r\n\r\nI disagree here: other asynchronous libraries are welcome to use the same approach if they want. **Every async library** has a concept of a \"Task\", coroutines can't drive themselves.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2420002516/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2422065689",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2422065689",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2422065689,
          "node_id": "IC_kwDOBN0Z8c6QXcoZ",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-18T10:04:11Z",
          "updated_at": "2024-10-18T10:04:11Z",
          "author_association": "MEMBER",
          "body": "Other async libraries cannot use this approach, if the only way to do so is through a private CAPI function.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2422065689/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2422069669",
          "html_url": "https://github.com/python/cpython/pull/124640#issuecomment-2422069669",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/124640",
          "id": 2422069669,
          "node_id": "IC_kwDOBN0Z8c6QXdml",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-18T10:05:56Z",
          "updated_at": "2024-10-18T10:05:56Z",
          "author_association": "MEMBER",
          "body": "> real world programs don't have millions of generators or coroutine objects\r\n\r\nNot at once, probably yes.\r\nBut I can see a program creating millions of generators from generator expressions. They can be very short lived.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2422069669/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/5273",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/5273/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/5273/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/5273/events",
      "html_url": "https://github.com/python/cpython/pull/5273",
      "id": 290667563,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MTY0NDU0MTIw",
      "number": 5273,
      "title": "bpo-31333: Re-implement ABCMeta in C",
      "user": {
        "login": "ilevkivskyi",
        "id": 12005495,
        "node_id": "MDQ6VXNlcjEyMDA1NDk1",
        "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ilevkivskyi",
        "html_url": "https://github.com/ilevkivskyi",
        "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
        "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
        "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
        "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
        "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
        "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 120,
      "created_at": "2018-01-23T00:36:14Z",
      "updated_at": "2018-02-18T17:12:09Z",
      "closed_at": "2018-02-18T12:41:58Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/5273",
        "html_url": "https://github.com/python/cpython/pull/5273",
        "diff_url": "https://github.com/python/cpython/pull/5273.diff",
        "patch_url": "https://github.com/python/cpython/pull/5273.patch",
        "merged_at": "2018-02-18T12:41:58Z"
      },
      "body": "This implementation is fully functional but there are three remaining issues/questions that I hope we can resolve quickly:\r\n* One test still fails. This is because `six.with_metaclass` (used by `pip`) does some fragile \"magic\". With this PR it fails with `TypeError: type.__new__(metaclass) is not safe, use ABCMeta.__new__()`. I see two options here: (1) Try to somehow special-case `ABCMeta` to fix this; (2) Do nothing here, but instead contact `six` and `pip` maintainers so that hey can fix this.\r\n* What to do with private caches/registry? There are three options: (1) Make them fully internal (i.e. only visible in C code); (2) Expose them, but make them read-only, so that one can do `C._abc_cache.clear()`, but _not_ `C._abc_cache = \"Surprise!\"`; (3) Expose them, and make them writable. I currently go with option (2), which seems to be a reasonable compromise.\r\n* How to organize the caches? In this version I made both caches and registry just normal sets of weak references without callbacks. This is very simple in terms of implementation and fast, with a minor downside that dead references will stay in caches. I am open to alternative ideas here (note the main issue is that references should not be removed during iteration over the sets).\r\n\r\nI didn't do any careful benchmarking yet, but this this seems to give a decent speed-up for Python start-up time and to several ABC-related tests. For example, on my machine Python startup is 10% faster.\r\n\r\n@methane @serhiy-storchaka I will really appreciate your help/advise/review here.\r\n\r\n@ned-deily I know beta1 is very close, but I would like this to get in. I already discussed with @gvanrossum and he is OK with this getting into beta1.\r\n\r\n\n\n<!-- issue-number: bpo-31333 -->\nhttps://bugs.python.org/issue31333\n<!-- /issue-number -->\n",
      "closed_by": {
        "login": "ilevkivskyi",
        "id": 12005495,
        "node_id": "MDQ6VXNlcjEyMDA1NDk1",
        "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ilevkivskyi",
        "html_url": "https://github.com/ilevkivskyi",
        "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
        "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
        "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
        "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
        "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
        "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/5273/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/5273/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359626539",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359626539",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359626539,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTYyNjUzOQ==",
          "user": {
            "login": "ilevkivskyi",
            "id": 12005495,
            "node_id": "MDQ6VXNlcjEyMDA1NDk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilevkivskyi",
            "html_url": "https://github.com/ilevkivskyi",
            "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
            "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
            "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
            "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
            "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T00:37:00Z",
          "updated_at": "2018-01-23T00:37:00Z",
          "author_association": "MEMBER",
          "body": "(I will add a news item later.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359626539/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359628905",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359628905",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359628905,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTYyODkwNQ==",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T00:50:06Z",
          "updated_at": "2018-01-23T21:38:17Z",
          "author_association": "MEMBER",
          "body": "> * One test still fails. This is because `six.with_metaclass` (used by `pip`) does some fragile \"magic\". With this PR it fails with `TypeError: type.__new__(metaclass) is not safe, use ABCMeta.__new__()`. I see two options here: (1) Try to somehow special-case `ABCMeta` to fix this; (2) Do nothing here, but instead contact `six` and `pip` maintainers so that hey can fix this.\r\n\r\nWhat exact magic does six use?  This can actually be a serious issue and cause many breakages.\r\n\r\n> * What to do with private caches/registry? There are three options: (1) Make them fully internal (i.e. only visible in C code); (2) Expose them, but make them read-only, so that one can do `C._abc_cache.clear()`, but _not_ `C._abc_cache = \"Surprise!\"`; (3) Expose them, and make them writable. I currently go with option (2), which seems to be a reasonable compromise.\r\n\r\nI'd go with (1).  There're 0 reasons to use those private caches/registries directly. \r\n\r\n I had a similar problem problem in asyncio in 3.6, when I debated whether I want to expose private Task and Future attributes or not.  Turns out that we'll be hiding some of them in 3.7 because it's impossible to optimize/refactor code otherwise.\r\n\r\n> * How to organize the caches? In this version I made both caches and registry just normal sets of weak references without callbacks. This is very simple in terms of implementation and fast, with a minor downside that dead references will stay in caches. I am open to alternative ideas here (note the main issue is that references should not be removed during iteration over the sets).\r\n\r\nSounds like \"minor downside that dead references will stay in caches\" is a backwards-incompatible change.  Some ORMs (like the one we've developed at MagicStack) create virtual DB Model classes on the fly.  Some of them can be inherited from ABCMeta.  So I guess with this PR we'd be risking to have a memory leak in 3.7.\r\n\r\n----\r\n\r\nBTW, have you considered implementing caches and instance/subclass hooks in C, but implementing the actual ABCMeta class in pure Python?  That way ABCMeta methods would have nice C-accelerated versions, but the 'six' problem should go away.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359628905/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359643443",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359643443",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359643443,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTY0MzQ0Mw==",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T01:51:59Z",
          "updated_at": "2018-01-23T01:51:59Z",
          "author_association": "MEMBER",
          "body": "> How to organize the caches? In this version I made both caches and registry just normal sets of weak references without callbacks. \r\n\r\nWe can also use `WeakSet` and `WeakKeyDictionary` btw.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359643443/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359726997",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359726997",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359726997,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTcyNjk5Nw==",
          "user": {
            "login": "methane",
            "id": 199592,
            "node_id": "MDQ6VXNlcjE5OTU5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/methane",
            "html_url": "https://github.com/methane",
            "followers_url": "https://api.github.com/users/methane/followers",
            "following_url": "https://api.github.com/users/methane/following{/other_user}",
            "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
            "organizations_url": "https://api.github.com/users/methane/orgs",
            "repos_url": "https://api.github.com/users/methane/repos",
            "events_url": "https://api.github.com/users/methane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/methane/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T09:12:43Z",
          "updated_at": "2018-01-23T09:12:53Z",
          "author_association": "MEMBER",
          "body": "> We can also use WeakSet and WeakKeyDictionary btw.\r\n\r\nThey're implemented in Python and it's one of major reason ABC is slow.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359726997/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359730480",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359730480",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359730480,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTczMDQ4MA==",
          "user": {
            "login": "ilevkivskyi",
            "id": 12005495,
            "node_id": "MDQ6VXNlcjEyMDA1NDk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilevkivskyi",
            "html_url": "https://github.com/ilevkivskyi",
            "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
            "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
            "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
            "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
            "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T09:26:12Z",
          "updated_at": "2018-01-23T09:26:12Z",
          "author_association": "MEMBER",
          "body": "@1st1 \r\n> What exact magic does six use?\r\n\r\n`six` uses this code:\r\n```python\r\ndef with_metaclass(meta, *bases):\r\n    # ...\r\n    class metaclass(type):\r\n\r\n        def __new__(cls, name, this_bases, d):\r\n            return meta(name, bases, d)\r\n\r\n        @classmethod\r\n        def __prepare__(cls, name, this_bases):\r\n            return meta.__prepare__(name, bases)\r\nreturn type.__new__(metaclass, 'temporary_class', (), {})\r\n```\r\nThe problem is that it doesn't work with C-level metaclasses.\r\n\r\n> BTW, have you considered implementing caches and instance/subclass hooks in C, but implementing the actual ABCMeta class in pure Python? That way ABCMeta methods would have nice C-accelerated versions, but the 'six' problem should go away.\r\n\r\nThis actually sounds like a reasonable solution.\r\n\r\n> I'd go with (1). There're 0 reasons to use those private caches/registries directly.\r\nI had a similar problem problem in asyncio in 3.6, when I debated whether I want to expose private Task and Future attributes or not. Turns out that we'll be hiding some of them in 3.7 because it's impossible to optimize/refactor code otherwise.\r\n\r\nOK, I can hide them (we then just need to update code in `refleak.py` that explicitly reads them).\r\nHow do you propose to have the hidden C-level attributes for Python level class? Just have a single huge dictionary, so that it will work like this:\r\n```python\r\n# pseudo-code, will be in C\r\n_the_registry: Dict[WeakRef[type], Set[WeakRef[type]]] = {}\r\n...\r\ndef _abc_register(cls, subcls):\r\n    _registry = _the_registry[ref(cls)]\r\n    _registry.add(ref(subcls))\r\n    return subcls\r\n```\r\nor is there a better way?\r\n\r\n> Sounds like \"minor downside that dead references will stay in caches\" is a backwards-incompatible change...\r\n\r\nYes, I have a TODO about limiting cache growth in code, but if we are going to hide private cache attributes, then it is easy, we can just register callbacks since caches are never iterated in this code.\r\n\r\n> We can also use `WeakSet` and `WeakKeyDictionary` btw.\r\n\r\nAs @methane mentioned they are implemented in Python and also slow and overly general. As I said above, if we are going to hide the attributes, then we don't need this for caches. We only iterate over the registry and for it I can just use callbscks with a \"commit queue\" and an iteration guard (this is actually the idea behind `WeakSet`, but we can make it much simpler since we are doing very limited set of operations with the registry).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359730480/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359730734",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359730734",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359730734,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTczMDczNA==",
          "user": {
            "login": "ilevkivskyi",
            "id": 12005495,
            "node_id": "MDQ6VXNlcjEyMDA1NDk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilevkivskyi",
            "html_url": "https://github.com/ilevkivskyi",
            "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
            "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
            "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
            "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
            "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T09:27:13Z",
          "updated_at": "2018-01-23T09:27:13Z",
          "author_association": "MEMBER",
          "body": "@pppery Thanks for a review! Will fix this.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359730734/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359752410",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359752410",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359752410,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTc1MjQxMA==",
          "user": {
            "login": "methane",
            "id": 199592,
            "node_id": "MDQ6VXNlcjE5OTU5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/methane",
            "html_url": "https://github.com/methane",
            "followers_url": "https://api.github.com/users/methane/followers",
            "following_url": "https://api.github.com/users/methane/following{/other_user}",
            "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
            "organizations_url": "https://api.github.com/users/methane/orgs",
            "repos_url": "https://api.github.com/users/methane/repos",
            "events_url": "https://api.github.com/users/methane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/methane/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T10:48:25Z",
          "updated_at": "2018-01-23T10:48:25Z",
          "author_association": "MEMBER",
          "body": "Maybe, you need to update `setup.py` to compile _abc module.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359752410/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359753205",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359753205",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359753205,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTc1MzIwNQ==",
          "user": {
            "login": "ilevkivskyi",
            "id": 12005495,
            "node_id": "MDQ6VXNlcjEyMDA1NDk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilevkivskyi",
            "html_url": "https://github.com/ilevkivskyi",
            "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
            "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
            "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
            "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
            "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T10:51:29Z",
          "updated_at": "2018-01-23T10:51:29Z",
          "author_association": "MEMBER",
          "body": "> Maybe, you need to update `setup.py` to compile _abc module.\r\n\r\nI think it already compiles correctly locally (and also Travis compiles). I will check if something more needed on Windows.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359753205/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359753983",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359753983",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359753983,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTc1Mzk4Mw==",
          "user": {
            "login": "methane",
            "id": 199592,
            "node_id": "MDQ6VXNlcjE5OTU5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/methane",
            "html_url": "https://github.com/methane",
            "followers_url": "https://api.github.com/users/methane/followers",
            "following_url": "https://api.github.com/users/methane/following{/other_user}",
            "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
            "organizations_url": "https://api.github.com/users/methane/orgs",
            "repos_url": "https://api.github.com/users/methane/repos",
            "events_url": "https://api.github.com/users/methane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/methane/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T10:54:30Z",
          "updated_at": "2018-01-23T10:54:30Z",
          "author_association": "MEMBER",
          "body": "I use Linux and I need following patch to `import _abc`, but I don't know why.\r\n\r\n```\r\n--- a/setup.py\r\n+++ b/setup.py\r\n@@ -699,6 +699,8 @@ class PyBuildExt(build_ext):\r\n         exts.append( Extension('_opcode', ['_opcode.c']) )\r\n         # asyncio speedups\r\n         exts.append( Extension(\"_asyncio\", [\"_asynciomodule.c\"]) )\r\n+        # _abc speedups\r\n+        exts.append( Extension(\"_abc\", [\"_abc.c\"]) )\r\n         # _queue module\r\n         exts.append( Extension(\"_queue\", [\"_queuemodule.c\"]) )\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359753983/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359759379",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359759379",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359759379,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTc1OTM3OQ==",
          "user": {
            "login": "methane",
            "id": 199592,
            "node_id": "MDQ6VXNlcjE5OTU5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/methane",
            "html_url": "https://github.com/methane",
            "followers_url": "https://api.github.com/users/methane/followers",
            "following_url": "https://api.github.com/users/methane/following{/other_user}",
            "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
            "organizations_url": "https://api.github.com/users/methane/orgs",
            "repos_url": "https://api.github.com/users/methane/repos",
            "events_url": "https://api.github.com/users/methane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/methane/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T11:17:02Z",
          "updated_at": "2018-01-23T11:17:02Z",
          "author_association": "MEMBER",
          "body": "Oh, I need to `cp Modules/Setup.dist Modules/Setup` and `make Makefile`.\r\nAfter then, I succeeded to build _abc module with make.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359759379/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359762878",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359762878",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359762878,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTc2Mjg3OA==",
          "user": {
            "login": "ilevkivskyi",
            "id": 12005495,
            "node_id": "MDQ6VXNlcjEyMDA1NDk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilevkivskyi",
            "html_url": "https://github.com/ilevkivskyi",
            "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
            "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
            "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
            "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
            "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T11:32:33Z",
          "updated_at": "2018-01-23T11:32:33Z",
          "author_association": "MEMBER",
          "body": "@methane OK I will fix this anyway so that it is easier to compile (also there are entries for `_asyncio` and other modules so that probably it is a standard practice).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359762878/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359766496",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359766496",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359766496,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTc2NjQ5Ng==",
          "user": {
            "login": "methane",
            "id": 199592,
            "node_id": "MDQ6VXNlcjE5OTU5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/methane",
            "html_url": "https://github.com/methane",
            "followers_url": "https://api.github.com/users/methane/followers",
            "following_url": "https://api.github.com/users/methane/following{/other_user}",
            "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
            "organizations_url": "https://api.github.com/users/methane/orgs",
            "repos_url": "https://api.github.com/users/methane/repos",
            "events_url": "https://api.github.com/users/methane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/methane/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T11:48:58Z",
          "updated_at": "2018-01-23T11:48:58Z",
          "author_association": "MEMBER",
          "body": "> Yes, I have a TODO about limiting cache growth in code, but if we are going to hide private cache attributes, then it is easy, we can just register callbacks since caches are never iterated in this code.\r\n\r\n+1 to this.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359766496/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359860386",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359860386",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359860386,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTg2MDM4Ng==",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T17:06:56Z",
          "updated_at": "2018-01-23T20:32:29Z",
          "author_association": "MEMBER",
          "body": ">> BTW, have you considered implementing caches and instance/subclass hooks in C, but implementing the actual ABCMeta class in pure Python? That way ABCMeta methods would have nice C-accelerated versions, but the 'six' problem should go away.\r\n>\r\n> This actually sounds like a reasonable solution.\r\n\r\nLet's do it then.  It minimizes risks, because I suspect that `six` is not the only library that uses this pattern and I'd like us to avoid breaking the world.\r\n\r\n> OK, I can hide them (we then just need to update code in refleak.py that explicitly reads them).\r\nHow do you propose to have the hidden C-level attributes for Python level class? Just have a single huge dictionary, so that it will work like this:\r\n\r\nYes, that would work. In general, the idea is to:\r\n\r\n1. Have all the necessary datastructures defined and allocated in the `_abc` module.\r\n2. Expose the necessary functions to work with datastructures and reset them (for `refleak.py`).\r\n3. `abc.py` will implement two ABCMeta classes: one in pure Python; one in Python + C.\r\n4. unittests should test both implementations.  This way other Python implementations are happy; it's easier to track regressions; it's easy to quickly learn how ABCMeta works by exploring its pure Python implementation.\r\n\r\n>> Sounds like \"minor downside that dead references will stay in caches\" is a backwards-incompatible change...\r\n>\r\n> Yes, I have a TODO about limiting cache growth in code, but if we are going to hide private cache attributes, then it is easy, we can just register callbacks since caches are never iterated in this code.\r\n\r\nLet's make them private.  That seems to make a lot of decisions here simpler.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359860386/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/359877539",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-359877539",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 359877539,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTg3NzUzOQ==",
          "user": {
            "login": "ilevkivskyi",
            "id": 12005495,
            "node_id": "MDQ6VXNlcjEyMDA1NDk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilevkivskyi",
            "html_url": "https://github.com/ilevkivskyi",
            "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
            "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
            "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
            "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
            "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-23T18:03:26Z",
          "updated_at": "2018-01-23T18:03:26Z",
          "author_association": "MEMBER",
          "body": "@1st1 This sounds like a good plan. Will do this today/tomorrow.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/359877539/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/360010763",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-360010763",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 360010763,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDAxMDc2Mw==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-24T03:35:22Z",
          "updated_at": "2018-01-24T03:35:22Z",
          "author_association": "MEMBER",
          "body": "(Also breaking six is effectively breaking the world. :-)\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/360010763/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 2,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/360091872",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-360091872",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 360091872,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDA5MTg3Mg==",
          "user": {
            "login": "ilevkivskyi",
            "id": 12005495,
            "node_id": "MDQ6VXNlcjEyMDA1NDk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilevkivskyi",
            "html_url": "https://github.com/ilevkivskyi",
            "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
            "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
            "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
            "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
            "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-24T10:45:21Z",
          "updated_at": "2018-01-24T10:45:21Z",
          "author_association": "MEMBER",
          "body": "@methane Thank you for updates! Please let me know when you will have a pause, so that I can proceed with moving the class definition to Python level (keeping everything else in C, as @1st1 proposed), this will create merge conflicts if you are planning more updates.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/360091872/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/360093847",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-360093847",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 360093847,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDA5Mzg0Nw==",
          "user": {
            "login": "methane",
            "id": 199592,
            "node_id": "MDQ6VXNlcjE5OTU5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/methane",
            "html_url": "https://github.com/methane",
            "followers_url": "https://api.github.com/users/methane/followers",
            "following_url": "https://api.github.com/users/methane/following{/other_user}",
            "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
            "organizations_url": "https://api.github.com/users/methane/orgs",
            "repos_url": "https://api.github.com/users/methane/repos",
            "events_url": "https://api.github.com/users/methane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/methane/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-24T10:53:07Z",
          "updated_at": "2018-01-24T10:56:19Z",
          "author_association": "MEMBER",
          "body": "@ilevkivskyi Hi! I stop now.\r\n\r\nBTW, how do you plan to keep internal state?\r\n\r\nMy idea is subclassing (if possible) or composition.\r\nThis is rough sketch of composition:\r\n\r\n```\r\nclass ABCMeta(type):\r\n    def __new__(mcls, name, bases, namespace, **kwargs):\r\n        cls = super().__new__(mcls, name, bases, namespace, **kwargs)\r\n        _abc.compute_abstracts(cls)\r\n        cls._abc_impl = _abc.abc_impl()\r\n        return cls\r\n    def register(cls, subclass):\r\n        return cls._abc_impl.register(cls, subclass)\r\n...\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/360093847/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/360097011",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-360097011",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 360097011,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDA5NzAxMQ==",
          "user": {
            "login": "ilevkivskyi",
            "id": 12005495,
            "node_id": "MDQ6VXNlcjEyMDA1NDk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12005495?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ilevkivskyi",
            "html_url": "https://github.com/ilevkivskyi",
            "followers_url": "https://api.github.com/users/ilevkivskyi/followers",
            "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions",
            "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs",
            "repos_url": "https://api.github.com/users/ilevkivskyi/repos",
            "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-24T11:05:23Z",
          "updated_at": "2018-01-24T11:05:23Z",
          "author_association": "MEMBER",
          "body": "@methane I am leaning more towards the idea I proposed above with a global registry dictionary (unless you think it will be inefficient for some reasons).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/360097011/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/360114381",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-360114381",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 360114381,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDExNDM4MQ==",
          "user": {
            "login": "methane",
            "id": 199592,
            "node_id": "MDQ6VXNlcjE5OTU5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/methane",
            "html_url": "https://github.com/methane",
            "followers_url": "https://api.github.com/users/methane/followers",
            "following_url": "https://api.github.com/users/methane/following{/other_user}",
            "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
            "organizations_url": "https://api.github.com/users/methane/orgs",
            "repos_url": "https://api.github.com/users/methane/repos",
            "events_url": "https://api.github.com/users/methane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/methane/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-24T12:23:48Z",
          "updated_at": "2018-01-24T12:23:48Z",
          "author_association": "MEMBER",
          "body": "OK, please ping me when you're ready for next review.\r\nI really love this pull request.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/360114381/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/360115753",
          "html_url": "https://github.com/python/cpython/pull/5273#issuecomment-360115753",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/5273",
          "id": 360115753,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDExNTc1Mw==",
          "user": {
            "login": "methane",
            "id": 199592,
            "node_id": "MDQ6VXNlcjE5OTU5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/methane",
            "html_url": "https://github.com/methane",
            "followers_url": "https://api.github.com/users/methane/followers",
            "following_url": "https://api.github.com/users/methane/following{/other_user}",
            "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
            "organizations_url": "https://api.github.com/users/methane/orgs",
            "repos_url": "https://api.github.com/users/methane/repos",
            "events_url": "https://api.github.com/users/methane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/methane/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-01-24T12:29:58Z",
          "updated_at": "2018-01-24T12:29:58Z",
          "author_association": "MEMBER",
          "body": "I noticed refleak run only with debug build.\r\nSo there is option that expose registry/cache only when Py_DEBUG is enabled.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/360115753/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/119827",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/119827/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/119827/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/119827/events",
      "html_url": "https://github.com/python/cpython/pull/119827",
      "id": 2327188921,
      "node_id": "PR_kwDOBN0Z8c5xF5s2",
      "number": 119827,
      "title": "gh-119127: functools.partial placeholders",
      "user": {
        "login": "dg-pb",
        "id": 3577712,
        "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dg-pb",
        "html_url": "https://github.com/dg-pb",
        "followers_url": "https://api.github.com/users/dg-pb/followers",
        "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
        "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
        "organizations_url": "https://api.github.com/users/dg-pb/orgs",
        "repos_url": "https://api.github.com/users/dg-pb/repos",
        "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dg-pb/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 614560066,
          "node_id": "MDU6TGFiZWw2MTQ1NjAwNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/sprint",
          "name": "sprint",
          "color": "5319e7",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": {
        "login": "rhettinger",
        "id": 1623689,
        "node_id": "MDQ6VXNlcjE2MjM2ODk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rhettinger",
        "html_url": "https://github.com/rhettinger",
        "followers_url": "https://api.github.com/users/rhettinger/followers",
        "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
        "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
        "organizations_url": "https://api.github.com/users/rhettinger/orgs",
        "repos_url": "https://api.github.com/users/rhettinger/repos",
        "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rhettinger/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "rhettinger",
          "id": 1623689,
          "node_id": "MDQ6VXNlcjE2MjM2ODk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rhettinger",
          "html_url": "https://github.com/rhettinger",
          "followers_url": "https://api.github.com/users/rhettinger/followers",
          "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
          "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
          "organizations_url": "https://api.github.com/users/rhettinger/orgs",
          "repos_url": "https://api.github.com/users/rhettinger/repos",
          "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rhettinger/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 61,
      "created_at": "2024-05-31T07:54:40Z",
      "updated_at": "2024-10-03T04:23:32Z",
      "closed_at": "2024-09-26T01:04:39Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/119827",
        "html_url": "https://github.com/python/cpython/pull/119827",
        "diff_url": "https://github.com/python/cpython/pull/119827.diff",
        "patch_url": "https://github.com/python/cpython/pull/119827.patch",
        "merged_at": "2024-09-26T01:04:38Z"
      },
      "body": "As I already had implementation I though PR might be helpful for others to see and evaluate.\r\n\r\nFrom all the different extensions of `functools.partial` I think this one is the best. It is relatively simple and exposes all missing functionality. Other `partial` extensions that I have seen lack functionality and would not provide complete argument ordering capabilities and/or are too complicated in relation to what they offer.\r\n\r\nImplementation can be summarised as follows:\r\na) Trailing placeholders are not allowed. (Makes things simpler)\r\nb) Throws exception if not all placeholders are filled on call\r\nc) retains optimization benefits of application on other `partial` instances.\r\n\r\nPerformance penalty compared to current `functools.partial` is minimal for extension class. + 20-30 ns for initialisation and <4 ns when called with or without placeholders.\r\n\r\nTo put it simply, new functionality extends `functools.partial` so that it has flexibility of `lambda` / `def` approach (in terms of argument ordering), but call overhead is 2x smaller.\r\n\r\nThe way I see it is that this could only be justified if this extension provided completeness and no new functionality is going to be needed anywhere near in the future. I have thought about it and tried various alternatives and I think there is a good chance that this is the case. Personally, I don't think I would ever need anything more from `partial` class.\r\n\r\nCurrent implementation functions reliably.\r\n\r\n## Benchmark\r\n\r\nThere is nothing new here in terms of performance. The performance after this PR will be (almost) the same as the performance of `partial` until now. `Placeholders` only provide flexibility for taking advantage of performance benefits where it is important.\r\n\r\nSo far I have identified 2 such cases:\r\n1. More flexible predicate construction for functions in `operator` module. This allows for new strategies in making performant `iterator` recipes.\r\n2. `Partializing` input target function. Examples of this are optimizers and similar. I.e. cases where the function will be called over and over within the routine with number of arguments. But the input target function needs partial substitution for positionals and keywords.\r\n\r\nGood example of this is `scipy.optimize.minimize`.\r\n\r\nIts signature is: `scipy.optimize.minimize(fun, x0, args=(), ...)`\r\n\r\nNote, it does not have `kwds`. Why? I don't know. But good reason for it could be:\r\n\r\n```python\r\nfun = lambda x: f(x, **kwds)\r\n```\r\n\r\nwill need to expand `**kwds` on every call (even if it is empty), while `partial` will make the most optimal call. (see benchmarks below). So the `minimize` function can leave out `kwds` given there is a good way to source callable with already substituted keywords.\r\n\r\nThis extension allows pre-substituting both positionals and keywords. This allows optimizer signature to leave out both `kwds` and `args` resulting in simpler interface `scipy.optimize.minimize(fun, x0, ...)` and gaining slightly better performance - function calls are at the center of such problems after all.\r\n\r\n### Benchmark Results for `__call__`\r\n\r\n<details><summary>Code for Cases</summary>\r\n<p>\r\n\r\n```python\r\ndct = {'a': 1}\r\nkwds = {'c': 1, 'd': 2}\r\nkwds_empty = {}\r\nargs1 = (1,)\r\nargs3 = (1, 2, 4)\r\n\r\nopr_sub = opr.sub\r\nopr_contains = opr.contains\r\n\r\nopr_sub_lambda = lambda b: opr_sub(1, b)\r\nopr_sub_partial = ftl.partial(opr_sub, 1)\r\n\r\nopr_contains_lambda = lambda b: opr_contains(dct, b)\r\nopr_contains_partial = ftl.partial(opr_contains, dct)\r\n\r\n\r\ndef pos2(a, b):\r\n    pass\r\n\r\ndef pos6(a, b, c, d, e, f):\r\n    pass\r\n\r\ndef pos2kw2(a, b, c=1, d=2):\r\n    pass\r\n\r\n\r\npos2_lambda = lambda b: pos2(1, b)\r\npos2_partial = ftl.partial(pos2, 1)\r\n\r\npos6_lambda = lambda b, c, d: pos6(1, 2, 3, b, c, d)\r\npos6_partial = ftl.partial(pos6, 1, 2, 3)\r\n\r\npos2kw2_kw_lambda = lambda b: pos2kw2(1, b, **kwds)\r\npos2kw2_kw_partial = ftl.partial(pos2kw2, 1, **kwds)\r\n\r\npos2kw2_kwe_lambda = lambda b: pos2kw2(1, b, **kwds_empty)\r\npos2kw2_kwe_partial = ftl.partial(pos2kw2, 1, **kwds_empty)\r\n\r\nopr_sub_partial_ph = ftl.partial(opr_sub, PH, 1)\r\nopr_contains_partial_ph = ftl.partial(opr_contains, PH, 'a')\r\npos2_partial_ph = ftl.partial(pos2, PH, 1)\r\npos6_partial_ph = ftl.partial(pos6, PH, 2, PH, 4, PH, 6)\r\npos2kw2_kw_partial_ph = ftl.partial(pos2kw2, PH, 1, **kwds)\r\npos2kw2_kwe_partial_ph = ftl.partial(pos2kw2, PH, 1, **kwds_empty)\r\n\r\n# Placeholder versions\r\nfrom functools import Placeholder as PH\r\nopr_sub_partial_ph = ftl.partial(opr_sub, PH, 1)\r\nopr_contains_partial_ph = ftl.partial(opr_contains, PH, 'a')\r\npos2_partial_ph = ftl.partial(pos2, PH, 1)\r\npos6_partial_ph = ftl.partial(pos6, PH, 2, PH, 4, PH, 6)\r\npos2kw2_kw_partial_ph = ftl.partial(pos2kw2, PH, 1, **kwds)\r\npos2kw2_kwe_partial_ph = ftl.partial(pos2kw2, PH, 1, **kwds_empty)\r\n```\r\n</p>\r\n</details> \r\n\r\n\r\n<details><summary>CPython Results</summary>\r\n<p>\r\n\r\n```\r\nC Implementation\r\n----------------\r\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n    \u2503   5 repeats, 1,000,000 times     \u2503\r\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503    Units: ns    lambda   partial \u2503\r\n    \u2503              \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503      opr_sub \u2503  50 \u00b1 4    40 \u00b1 2 \u2503\r\n    \u2503 opr_contains \u2503  53 \u00b1 3    43 \u00b1 3 \u2503\r\n    \u2503         pos2 \u2503  50 \u00b1 1    64 \u00b1 1 \u2503\r\n    \u2503 pos2(*args1) \u2503  69 \u00b1 5    73 \u00b1 5 \u2503\r\n    \u2503         pos6 \u2503  58 \u00b1 1   103 \u00b1 5 \u2503\r\n    \u2503 pos6(*args3) \u2503  77 \u00b1 3    99 \u00b1 5 \u2503\r\n    \u2503   pos2kw2_kw \u2503 240 \u00b1 4   259 \u00b1 7 \u2503\r\n    \u2503  pos2kw2_kwe \u2503 134 \u00b1 6    69 \u00b1 3 \u2503\r\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\r\n    With Placeholders\r\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n    \u2503           5 repeats, 1,000,000 times              \u2503\r\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503    Units: ns     lambda    partial   Placeholders \u2503\r\n    \u2503              \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503      opr_sub \u2503  50 \u00b1  2    39 \u00b1  1        44 \u00b1  4 \u2503\r\n    \u2503 opr_contains \u2503  61 \u00b1  2    44 \u00b1  2        49 \u00b1  2 \u2503\r\n    \u2503         pos2 \u2503  54 \u00b1  2    58 \u00b1  3        64 \u00b1  2 \u2503\r\n    \u2503 pos2(*args1) \u2503  67 \u00b1  3    72 \u00b1  9        69 \u00b1  3 \u2503\r\n    \u2503         pos6 \u2503  63 \u00b1  3   102 \u00b1  3        99 \u00b1  2 \u2503\r\n    \u2503 pos6(*args3) \u2503  75 \u00b1  3   101 \u00b1  2        94 \u00b1  4 \u2503\r\n    \u2503   pos2kw2_kw \u2503 242 \u00b1  7   259 \u00b1 10       260 \u00b1  7 \u2503\r\n    \u2503  pos2kw2_kwe \u2503 131 \u00b1  4    64 \u00b1  1        69 \u00b1  2 \u2503\r\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\r\n\r\n\r\nPython Implementation\r\n---------------------\r\n    Current\r\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n    \u2503    5 repeats, 1,000,000 times      \u2503\r\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503    Units: ns     lambda    partial \u2503\r\n    \u2503              \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503      opr_sub \u2503  48 \u00b1  1   373 \u00b1 13 \u2503\r\n    \u2503 opr_contains \u2503  51 \u00b1  1   377 \u00b1 12 \u2503\r\n    \u2503         pos2 \u2503  51 \u00b1  4   378 \u00b1  5 \u2503\r\n    \u2503 pos2(*args1) \u2503  63 \u00b1  5   354 \u00b1  7 \u2503\r\n    \u2503         pos6 \u2503  59 \u00b1  1   437 \u00b1  5 \u2503\r\n    \u2503 pos6(*args3) \u2503  75 \u00b1  2   410 \u00b1  7 \u2503\r\n    \u2503   pos2kw2_kw \u2503 239 \u00b1  4   517 \u00b1  5 \u2503\r\n    \u2503  pos2kw2_kwe \u2503 133 \u00b1  3   408 \u00b1 49 \u2503\r\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\r\n    With Placeholders\r\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n    \u2503           5 repeats, 1,000,000 times              \u2503\r\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503    Units: ns     lambda    partial   Placeholders \u2503\r\n    \u2503              \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503      opr_sub \u2503  49 \u00b1  1   392 \u00b1 13       547 \u00b1 12 \u2503\r\n    \u2503 opr_contains \u2503  54 \u00b1  2   393 \u00b1  9       605 \u00b1 78 \u2503\r\n    \u2503         pos2 \u2503  55 \u00b1  9   398 \u00b1  7       544 \u00b1  5 \u2503\r\n    \u2503 pos2(*args1) \u2503  66 \u00b1  2   373 \u00b1  5       533 \u00b1  8 \u2503\r\n    \u2503         pos6 \u2503  58 \u00b1  5   462 \u00b1  4       652 \u00b1  3 \u2503\r\n    \u2503 pos6(*args3) \u2503  74 \u00b1  2   428 \u00b1 11       635 \u00b1  9 \u2503\r\n    \u2503   pos2kw2_kw \u2503 240 \u00b1  5   533 \u00b1  4       696 \u00b1 10 \u2503\r\n    \u2503  pos2kw2_kwe \u2503 134 \u00b1  2   406 \u00b1  4       555 \u00b1  3 \u2503\r\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\n<details><summary>PyPy Results</summary>\r\n<p>\r\n\r\n```\r\nPyPy\r\n----\r\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n    \u2503     5 repeats, 10,000 times        \u2503\r\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503    Units: ns     lambda    partial \u2503\r\n    \u2503              \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503      opr_sub \u2503 122 \u00b1 15   266 \u00b1 70 \u2503\r\n    \u2503 opr_contains \u2503 147 \u00b1  7   248 \u00b1 64 \u2503\r\n    \u2503         pos2 \u2503 114 \u00b1 17   204 \u00b1 49 \u2503\r\n    \u2503 pos2(*args1) \u2503 156 \u00b1 24   202 \u00b1 28 \u2503\r\n    \u2503         pos6 \u2503 124 \u00b1 14   268 \u00b1 39 \u2503\r\n    \u2503 pos6(*args3) \u2503 147 \u00b1 36   225 \u00b1 21 \u2503\r\n    \u2503   pos2kw2_kw \u2503 259 \u00b1 17   436 \u00b1 66 \u2503\r\n    \u2503  pos2kw2_kwe \u2503 180 \u00b1 14   243 \u00b1 43 \u2503\r\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\r\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n    \u2503   5 repeats, 1,000,000 times     \u2503\r\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503     Units: ns   lambda   partial \u2503\r\n    \u2503               \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503       opr_sub \u2503  1 \u00b1 0     3 \u00b1 1 \u2503\r\n    \u2503  opr_contains \u2503 13 \u00b1 0    16 \u00b1 2 \u2503\r\n    \u2503          pos2 \u2503  1 \u00b1 0     3 \u00b1 1 \u2503\r\n    \u2503  pos2(*args1) \u2503  2 \u00b1 0     2 \u00b1 0 \u2503\r\n    \u2503          pos6 \u2503  1 \u00b1 0     2 \u00b1 0 \u2503\r\n    \u2503  pos6(*args3) \u2503  2 \u00b1 0     2 \u00b1 0 \u2503\r\n    \u2503    pos2kw2_kw \u2503 42 \u00b1 1    72 \u00b1 2 \u2503\r\n    \u2503   pos2kw2_kwe \u2503  2 \u00b1 0     2 \u00b1 0 \u2503\r\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\r\n\r\nPyPy Placeholder\r\n----------------\r\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n    \u2503             5 repeats, 10,000 times                 \u2503\r\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503    Units: ns      lambda     partial   Placeholders \u2503\r\n    \u2503              \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503      opr_sub \u2503 114 \u00b1   5   256 \u00b1  82      719 \u00b1 170 \u2503\r\n    \u2503 opr_contains \u2503 142 \u00b1   7   538 \u00b1 536      787 \u00b1 145 \u2503\r\n    \u2503         pos2 \u2503 125 \u00b1  19   239 \u00b1  54      679 \u00b1 116 \u2503\r\n    \u2503 pos2(*args1) \u2503 130 \u00b1  30   199 \u00b1  17      638 \u00b1  48 \u2503\r\n    \u2503         pos6 \u2503 115 \u00b1  16   237 \u00b1  43      785 \u00b1 176 \u2503\r\n    \u2503 pos6(*args3) \u2503 138 \u00b1  25   214 \u00b1  14      703 \u00b1  19 \u2503\r\n    \u2503   pos2kw2_kw \u2503 260 \u00b1  24   382 \u00b1  67      850 \u00b1  92 \u2503\r\n    \u2503  pos2kw2_kwe \u2503 179 \u00b1  28   223 \u00b1  44      661 \u00b1  32 \u2503\r\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\r\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n    \u2503          5 repeats, 1,000,000 times             \u2503\r\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503    Units: ns    lambda   partial   Placeholders \u2503\r\n    \u2503              \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\r\n    \u2503      opr_sub \u2503  1 \u00b1  0    3 \u00b1  1       156 \u00b1  4 \u2503\r\n    \u2503 opr_contains \u2503 13 \u00b1  0   15 \u00b1  1       173 \u00b1  3 \u2503\r\n    \u2503         pos2 \u2503  2 \u00b1  0    3 \u00b1  1       154 \u00b1  7 \u2503\r\n    \u2503 pos2(*args1) \u2503  2 \u00b1  0    2 \u00b1  0       148 \u00b1  3 \u2503\r\n    \u2503         pos6 \u2503  2 \u00b1  0    3 \u00b1  1       200 \u00b1  2 \u2503\r\n    \u2503 pos6(*args3) \u2503  2 \u00b1  0    3 \u00b1  0       217 \u00b1 39 \u2503\r\n    \u2503   pos2kw2_kw \u2503 43 \u00b1  1   71 \u00b1  1       240 \u00b1  2 \u2503\r\n    \u2503  pos2kw2_kwe \u2503  2 \u00b1  0    2 \u00b1  0       149 \u00b1  2 \u2503\r\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\r\n```\r\n</p>\r\n</details> \r\n\r\nSetup:\r\n* First 2 columns are identical calls - one using `lambda` other `partial`.\r\n* 3rd column is using placeholder to expose 1st argument as opposed to 2nd (or different places for 6-arg case).\r\n\r\nCPython:\r\n* There is negligible impact on `__call__`. Run times are very close of current and new version with Placeholders.\r\n* It can be seen that run times are not impacted by placeholder usage in any significant way.\r\n* `pos2kw2_kwe` (empty `kwds`) is much faster of `partial` call. `pos2kw2_kw` (non-empty `kwds`) is currently slower, however https://github.com/python/cpython/pull/120783 will likely to improve its speed so that it outperforms lambda.\r\n\r\nPyPy:\r\n* Usage of `Placeholders` results in very poor performance. However, this has no material implication as `lambda` is more performant than `partial` in all cases and is an optimal choice.\r\n\r\n### Benchmark Results for `__new__`\r\n\r\n```bash\r\nINIT='import functools as ftl; g = lambda a, b, c, d, e, f: (a, b, c, d, e, f);'\r\n\r\n# CURRENT\r\n$PY_MAIN -m timeit -s $INIT 'ftl.partial(g, 0, 1, 2)'   # 160\r\n\r\n# PLACEHOLDERS\r\nINIT2=\"$INIT PH=ftl.Placeholder;\"\r\n$PY_MAIN -m timeit -s $INIT2 'ftl.partial(g, 0, 1, 2)'              # 170\r\n$PY_MAIN -m timeit -s $INIT2 'ftl.partial(g, 0, 1, 2, 3, 4, 5)'     # 190\r\n$PY_MAIN -m timeit -s $INIT2 'ftl.partial(g, PH, 1, PH, 3, PH, 5)'  # 200\r\n```\r\n\r\n* There is small performance decrease for initialization without placeholders.\r\n* Initializing it with placeholders is slower for the same number of arguments (excluding placeholders). \r\n* But it is not much slower if placeholders are counted as arguments.\r\n\r\n# To sum up\r\n\r\nThis extension:\r\n1. allows extracting current performance benefits of `partial` to few more important (at least from my POV) cases.\r\n2. seems to allow for certain simplifications to happen by bringing it more in line with `lambda/def` behaviour. Thus, allowing `partial` to be used for `partialmethod` application which allows for some simplifications in handling these in other parts of the library - i.e. `inspect`.\r\n\r\n<!-- gh-issue-number: gh-119127 -->\r\n* Issue: gh-119127\r\n<!-- /gh-issue-number -->\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\r\n\ud83d\udcda Documentation preview \ud83d\udcda: https://cpython-previews--119827.org.readthedocs.build/\r\n\r\n<!-- readthedocs-preview cpython-previews end -->",
      "closed_by": {
        "login": "rhettinger",
        "id": 1623689,
        "node_id": "MDQ6VXNlcjE2MjM2ODk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rhettinger",
        "html_url": "https://github.com/rhettinger",
        "followers_url": "https://api.github.com/users/rhettinger/followers",
        "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
        "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
        "organizations_url": "https://api.github.com/users/rhettinger/orgs",
        "repos_url": "https://api.github.com/users/rhettinger/repos",
        "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rhettinger/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/119827/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/119827/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2155989107",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2155989107",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2155989107,
          "node_id": "IC_kwDOBN0Z8c6Agchz",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-08T10:59:01Z",
          "updated_at": "2024-06-08T11:00:00Z",
          "author_association": "CONTRIBUTOR",
          "body": "> I personally would advocate for `PLACEHOLDER` instead of `Placeholder` to stress that 1) this is not a global constant, just a module constant, 2) this is not a class, 3) this is named similarly to `dataclasses.KW_ONLY`.\r\n\r\nIf this was python implementation only, I would agree, but C implementation closely follows `None` and other global constants. I think it would be more correct to follow that pattern given its nature and in turn emulate it as closely in python implementation as possible.\r\n\r\nC implementation:\r\n```python\r\ntype(Placeholder)() is Placeholder\r\n# same as None\r\ntype(None)() is None\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2155989107/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2155989979",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2155989979",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2155989979,
          "node_id": "IC_kwDOBN0Z8c6Agcvb",
          "user": {
            "login": "picnixz",
            "id": 10796600,
            "node_id": "MDQ6VXNlcjEwNzk2NjAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/picnixz",
            "html_url": "https://github.com/picnixz",
            "followers_url": "https://api.github.com/users/picnixz/followers",
            "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
            "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
            "organizations_url": "https://api.github.com/users/picnixz/orgs",
            "repos_url": "https://api.github.com/users/picnixz/repos",
            "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/picnixz/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-08T11:01:55Z",
          "updated_at": "2024-06-08T11:01:55Z",
          "author_association": "MEMBER",
          "body": "If this renders like that, I think you can ignore my comments on the uppercasing then. Nonetheless, you should definitely document the new sentinel in the `functools` module, the same way it is done for `None` (I assume). ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2155989979/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2155991161",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2155991161",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2155991161,
          "node_id": "IC_kwDOBN0Z8c6AgdB5",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-08T11:05:55Z",
          "updated_at": "2024-06-08T11:12:38Z",
          "author_association": "CONTRIBUTOR",
          "body": "> If this renders like that, I think you can ignore my comments on the uppercasing then. Nonetheless, you should definitely document the new sentinel in the `functools` module, the same way it is done for `None` (I assume).\r\n\r\nI will think about it a bit more. UPPERCASE has its benefits of being distinct. E.g. my own sentinels:\r\n```python\r\nAUTO\r\nNULL\r\nEMPTY\r\n```\r\nIt is hard to miss them and they have a solid look of C constants. Also, syntax highlighting will not kick in for CamelCase (at least for a while).\r\n\r\nWill let it sit for a while, see what others think. Thank you.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2155991161/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2156038670",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2156038670",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2156038670,
          "node_id": "IC_kwDOBN0Z8c6AgooO",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-08T13:32:03Z",
          "updated_at": "2024-06-08T13:32:03Z",
          "author_association": "CONTRIBUTOR",
          "body": "I thought about it and I am leaning to leave it with CamelCase. I think everyone can just assign it to whatever they like, be it `_`, `PH` or `PLACEHOLDER`. And for actual definition probably best to leave it in harmony with similar implementations.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2156038670/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2171027792",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2171027792",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2171027792,
          "node_id": "IC_kwDOBN0Z8c6BZ0FQ",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-16T03:13:23Z",
          "updated_at": "2024-06-16T03:13:23Z",
          "author_association": "CONTRIBUTOR",
          "body": "One more use case:\r\n```python\r\npredicate = itl.partial(isinstance, Placeholder, str)\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2171027792/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2172559069",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2172559069",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2172559069,
          "node_id": "IC_kwDOBN0Z8c6Bfp7d",
          "user": {
            "login": "picnixz",
            "id": 10796600,
            "node_id": "MDQ6VXNlcjEwNzk2NjAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/picnixz",
            "html_url": "https://github.com/picnixz",
            "followers_url": "https://api.github.com/users/picnixz/followers",
            "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
            "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
            "organizations_url": "https://api.github.com/users/picnixz/orgs",
            "repos_url": "https://api.github.com/users/picnixz/repos",
            "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/picnixz/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-17T07:57:27Z",
          "updated_at": "2024-06-18T08:13:53Z",
          "author_association": "MEMBER",
          "body": "> predicate = itl.partial(isinstance, Placeholder, str)\r\n\r\nActually, all the \"good\" usecases, IMO, boil down to a *right* partialization instead of a left partialization as I said in https://github.com/python/cpython/issues/119127#issuecomment-2155982139.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2172559069/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2172920956",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2172920956",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2172920956,
          "node_id": "IC_kwDOBN0Z8c6BhCR8",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-17T09:50:39Z",
          "updated_at": "2024-06-17T09:50:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > predicate = itl.partial(isinstance, Placeholder, str)\r\n> \r\n> Actually, all the \"good\" usecases, IMO, boil down to a _right_ partialization instead of a left partialization as I said in [#119127 (comment)](https://github.com/python/cpython/issues/119127#issuecomment-2155982139).\r\n\r\nWould you be kind to provide some support for your statement?\r\n\r\n\"all\" is a strong word. Such statement should come with some measurable comparison between left and right usecases in \"goodness\" and \"quantity\" at the very least.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2172920956/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2172962624",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2172962624",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2172962624,
          "node_id": "IC_kwDOBN0Z8c6BhMdA",
          "user": {
            "login": "picnixz",
            "id": 10796600,
            "node_id": "MDQ6VXNlcjEwNzk2NjAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/picnixz",
            "html_url": "https://github.com/picnixz",
            "followers_url": "https://api.github.com/users/picnixz/followers",
            "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
            "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
            "organizations_url": "https://api.github.com/users/picnixz/orgs",
            "repos_url": "https://api.github.com/users/picnixz/repos",
            "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/picnixz/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-17T10:10:31Z",
          "updated_at": "2024-06-18T08:13:58Z",
          "author_association": "MEMBER",
          "body": "From what I've seen in the discussion (issue and discourse), all the (non-trivial) examples are actually examples of right partialization (be it by yours or Raymond's). Most of the time, the issue with `partial` is when you cannot use keyword arguments because they are either pos-only or they have non-meaningful names.\r\n\r\nI do not have the numbers, nor will I bother to find them, but I'm pretty sure that I can replace 'all' by 'almost all' if you think it's a too strong word. While partialization in some arbitrary place would be useful, e.g., `f(x, y, z, t)` and you want to bind `x=1, y=2, t=3` so that you have something like `f_z = partial(f, 1, 2, _, 3)`, I think it would conceptually be simpler in this case to write a two-line function instead (for clarity and to explain the constants), those cases are (in the examples that are shown) rarer. So, I think that adding `rpartial` with a simpler logic would just solve most of the examples.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2172962624/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2173065020",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2173065020",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2173065020,
          "node_id": "IC_kwDOBN0Z8c6Bhlc8",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-17T10:49:23Z",
          "updated_at": "2024-06-17T10:49:23Z",
          "author_association": "CONTRIBUTOR",
          "body": "`rpartial` would mean 1 more Python class and 1 more C class.\r\n\r\nIt would be at least twice as much code + one more class which needs to be kept in sync between 2 implementations. The simplicity of implementation would be offset by the complexity introduced by amount of code added.\r\n\r\nAlso, the total flexibility of `partial` + `rpartial` would still be less than `partial+Placeholder`. `Placeholder` will cover 99% of use-cases, while `partial+rpartial` maybe would amount to around 90%. So there would still be a portion of unsatisfied users which would result in reoccurring posts from time to time with references to external packages that are able to handle cases that standard library can not.\r\n\r\nReadability of `Placeholders` is also better than `rpartial`, because when you look at definition:\r\n```python\r\nfunc = lambda: a, b, c, d\r\npartial(func, _, 1, _, 2)\r\n```\r\nYou can see the order and unfilled places and directly compare with partialized function to work out where goes what.\r\n\r\nIn contrast with `rpartial`, where one would need to count the number of arguments from the right and see what is left.\r\n\r\nSo I don't really see an argument for `rpartial` from any POV.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2173065020/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2173125139",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2173125139",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2173125139,
          "node_id": "IC_kwDOBN0Z8c6Bh0IT",
          "user": {
            "login": "picnixz",
            "id": 10796600,
            "node_id": "MDQ6VXNlcjEwNzk2NjAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/picnixz",
            "html_url": "https://github.com/picnixz",
            "followers_url": "https://api.github.com/users/picnixz/followers",
            "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
            "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
            "organizations_url": "https://api.github.com/users/picnixz/orgs",
            "repos_url": "https://api.github.com/users/picnixz/repos",
            "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/picnixz/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-17T11:21:40Z",
          "updated_at": "2024-06-26T07:50:01Z",
          "author_association": "MEMBER",
          "body": "I don't think it's hard to maintain since partials are not needed to be affected a lot. While I agree that it's somewhat a code duplication, I would be glad to have just `rpartial` without bothering about my placeholders. Also, the duplication is quite simple to avoid since you just need to generate code depending on the direction of the arguments being filled so it's not really an issue IMO (right partialization can be regarded as a left partialization of a function with its arguments filled in reverse order).\r\n\r\n> will cover 99% of use-cases, while partial+rpartial maybe would amount to around 90%. So there would still be a portion of unsatisfied users which would result in reoccurring posts from time to time with references to external packages that are able to handle cases that standard library can \r\n\r\nWell... I can ask you also to give me numbers for those 9% additional cases but I'd just say that you cannot satisfy every user. Some could just say \"but this does not support well default values!\" (rpartial wouldn't either but is it only 1% of those non-covered cases?).\r\n\r\n> Readability of Placeholders is also better than rpartial, because when you look at definition:\r\n\r\nYour definition is not a right partialization so it cannot be compared... I just wanted to highlight that most, if not all examples, actually require a right partialization support rather than a generic one. This is the only thing I wanted to stress.\r\n\r\n> In contrast with rpartial, where one would need to count the number of arguments from the right and see what is left.\r\n\r\nWell... you are assuming that your definition and your partialization are close to each other which is not necessarily the case. The example of `divmod` where you bind the divisor, of `bin_8b` where you bind the format or `isinstance` where you bind the type could all be written without using the placeholder. For instance,\r\n\r\n```python\r\nis_int = rpartial(isinstance, int)\r\n```\r\n\r\nis clearer (for me) than \r\n\r\n```python\r\nis_int = partial(isinstance, PLACEHOLDER, int)\r\n```\r\n\r\nWhile I don't reject the idea of a placeholder nor a generic partial (I would be more interested in a singledispatch where I can choose which argument to dispatch over but that's another question), I would prefer not using placeholders if I could. \r\n\r\nNow, other languages have kind of a similar interface. For Java, you have a `bindTo`, where only the first argument are bound. For C++ you have `std::bind_front` and `std::bind_back` (equivalent of `lpartial` and `rpartial`) but you also support `std::bind` for arbitrary binding (though you can even *reorder* the arguments call order). For Javascript, you only have left partialization using `bind` but you have `lodash` with `partialRight` and `bind` (the first is only for right partialization, the second is like the C++ bind). And for Scala you only have arbitrary binding. So The fact that a right partialization exists in languages is also an indication of some user needs, so we could also have both a `partial` and `rpartial` and a generic `bind_func` like in C++ where you would use placeholders as well, but only if needs arise. ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2173125139/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2174476530",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2174476530",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2174476530,
          "node_id": "IC_kwDOBN0Z8c6Bm-Dy",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-17T21:41:55Z",
          "updated_at": "2024-06-17T21:41:55Z",
          "author_association": "CONTRIBUTOR",
          "body": "1. You fail to digest what I have said\r\n2. The type and quality of argumentation you are trying to have here is appropriate on discourse at the initial stages, not when the PR is almost done.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2174476530/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2174537262",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2174537262",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2174537262,
          "node_id": "IC_kwDOBN0Z8c6BnM4u",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-17T22:24:23Z",
          "updated_at": "2024-06-17T22:27:51Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Also, the duplication is quite simple to avoid since you just need to generate code depending on the direction of the arguments being filled so it's not really an issue IMO.\r\n\r\nExplain how would you avoid duplication. Please be concrete, not at the contemplation level.\r\n\r\n> I just wanted to highlight that most, if not all examples, actually require a right partialization support rather than a generic one.\r\n\r\nYou have not taken into account cases that were not presented here and cases that would spontaneously arise once the utility is at disposal. Finally, why have less flexibility if you can have more?\r\n\r\n> is clearer (for me) than\r\n\r\n```python\r\npartial(isinstance, _, int)\r\n```\r\nto me is clearer. It does not require 2-directional thinking. Signatures are written from left to right. `rpartial` introduces a need to think about order from right to left in addition.\r\n\r\nAll in all, your position is a radical challenge to what has been done so far. Which I wouldn't mind if you either:\r\n1. Wrote a PM so we can have a chat without spamming PR so I can address your concerns. You surely understand that I have thought about this much more than you did by now.\r\n2. Brought this up in discourse\r\n3. Wrote here, but after a proper preparation and a case with at least a fraction of substance that has been put forward so far to make this happen\r\n\r\nThe way you are doing this is unnecessarily disruptive at the very least.\r\n\r\nAnd from the position that I am in is simply disrespectful.\r\n\r\nFinally, `rpartial` is a valid idea, but I have gone with this one. \r\n\r\nDo you want me to discard this and you want to implement `rpartial`? What is your angle here? What are you trying to achieve?\r\n\r\nIn short, what do you want?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2174537262/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2175482730",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2175482730",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2175482730,
          "node_id": "IC_kwDOBN0Z8c6Bqztq",
          "user": {
            "login": "picnixz",
            "id": 10796600,
            "node_id": "MDQ6VXNlcjEwNzk2NjAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/picnixz",
            "html_url": "https://github.com/picnixz",
            "followers_url": "https://api.github.com/users/picnixz/followers",
            "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
            "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
            "organizations_url": "https://api.github.com/users/picnixz/orgs",
            "repos_url": "https://api.github.com/users/picnixz/repos",
            "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/picnixz/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-18T08:13:29Z",
          "updated_at": "2024-06-18T08:13:29Z",
          "author_association": "MEMBER",
          "body": "I'm not trying to disparage your work and would be happy if your PR gets into stdlib, but I also wanted to suggest another line of direction either as an alternative or for future work. Anyway, to reduce the noise on that PR, I'll mark my comments as off-topic.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2175482730/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2179510900",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2179510900",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2179510900,
          "node_id": "IC_kwDOBN0Z8c6B6LJ0",
          "user": {
            "login": "rhettinger",
            "id": 1623689,
            "node_id": "MDQ6VXNlcjE2MjM2ODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhettinger",
            "html_url": "https://github.com/rhettinger",
            "followers_url": "https://api.github.com/users/rhettinger/followers",
            "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
            "organizations_url": "https://api.github.com/users/rhettinger/orgs",
            "repos_url": "https://api.github.com/users/rhettinger/repos",
            "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhettinger/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-19T22:07:31Z",
          "updated_at": "2024-06-19T22:07:31Z",
          "author_association": "CONTRIBUTOR",
          "body": "The PR is looking pretty good at this point. Some of the variable names seem a bit gross, but that is minor.  Also, I'm reconsidering whether having a \"rough code equivalent\" in the docs is still a good idea.  For documentation purposes, a few informative example will likely communicate better than this snarl of code.\r\n\r\nThis PR needs a more detailed review than I can give it right now. @serhiy-storchaka Do you have time to comb through this one?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2179510900/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2179936177",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2179936177",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2179936177,
          "node_id": "IC_kwDOBN0Z8c6B7y-x",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-20T06:44:20Z",
          "updated_at": "2024-06-20T06:44:20Z",
          "author_association": "MEMBER",
          "body": "I did not follow the discussion on the Discourse, but is it settled? Are you fine with this, Raymond?\r\n\r\nBefore diving in the details:\r\n\r\n* `partialmethod()` should be updated as well.\r\n* The `inspect` module should be updated to support `partial()` and `partialmethod()` with a placeholder.\r\n\r\nIn the current version of the PR the pickle support is changed in incompatible way. If there are no placeholders, pickles should be compatible across versions.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2179936177/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2180683652",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2180683652",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2180683652,
          "node_id": "IC_kwDOBN0Z8c6B-peE",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-20T13:23:56Z",
          "updated_at": "2024-06-20T13:24:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "Standardised variable naming a bit. Now it is as follows:\r\n* without prefix or with `new_` prefix means it is from callee arguments. `new_` is needed in C initializer as `args` without prefix includes `func`\r\n* `pto_` prefix means it is of `partial object`. Which is `func` in initializer (if it is `partial`) and `self` in `__call__`.\r\n* `tot_` prefix means it is total. I.e. `pto_* + new_*`\r\n* `nargskw` means total number of arguments and keyword arguments. E.g. `tot_nargskw` in C `__call__` means final total number of arguments and keywords that will be sourced to `func`\r\n* Exposed variable for placeholder count is `placeholder_count`. Non-exposed variable is named `phcount`.\r\n\r\nI think this improved general consistency and solved few issues, such as:\r\n* `nargs` variable meant \"number of arguments\" in one place and \"new arguments\" in another.\r\n* `total_nargs` meant `nargs + len(kw)`, while it somewhat suggested to be `nargs + pto_nargs`.\r\n\r\nIt is not perfect, but I think it is a bit better now.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2180683652/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2180903180",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2180903180",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2180903180,
          "node_id": "IC_kwDOBN0Z8c6B_fEM",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-20T14:50:36Z",
          "updated_at": "2024-06-20T14:51:23Z",
          "author_association": "CONTRIBUTOR",
          "body": "Factored out merging logic so it can be used for both `partial` and `partialmethod`.\r\n\r\nAlso, made them use the same `__repr__`. However, it turned out that they are not equivalent.\r\n\r\n`repr(partialmethod(func)) -> partialmethod(func, , )`\r\nwhile\r\n`repr(partial(func)) -> partial(func)`\r\n\r\nthe one of `partialmethod` isn't very \"nice\".\r\n\r\nThere was only one test that needed fixing. However, if backwards compatibility is an issue here, let me know I will roll-back. I am not sure how much `repr` should be depended on.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2180903180/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2184991275",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2184991275",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2184991275,
          "node_id": "IC_kwDOBN0Z8c6CPFIr",
          "user": {
            "login": "dg-pb",
            "id": 3577712,
            "node_id": "MDQ6VXNlcjM1Nzc3MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3577712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dg-pb",
            "html_url": "https://github.com/dg-pb",
            "followers_url": "https://api.github.com/users/dg-pb/followers",
            "following_url": "https://api.github.com/users/dg-pb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dg-pb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dg-pb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dg-pb/subscriptions",
            "organizations_url": "https://api.github.com/users/dg-pb/orgs",
            "repos_url": "https://api.github.com/users/dg-pb/repos",
            "events_url": "https://api.github.com/users/dg-pb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dg-pb/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-23T13:32:25Z",
          "updated_at": "2024-06-23T13:32:50Z",
          "author_association": "CONTRIBUTOR",
          "body": "I have a working and simplified implementation of https://github.com/python/cpython/pull/120783 adapted to this `Placeholder` version. \r\n\r\nI can either update this PR with it or issue a separate one after. Whichever is more convenient.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2184991275/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2185338066",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2185338066",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2185338066,
          "node_id": "IC_kwDOBN0Z8c6CQZzS",
          "user": {
            "login": "rhettinger",
            "id": 1623689,
            "node_id": "MDQ6VXNlcjE2MjM2ODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhettinger",
            "html_url": "https://github.com/rhettinger",
            "followers_url": "https://api.github.com/users/rhettinger/followers",
            "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
            "organizations_url": "https://api.github.com/users/rhettinger/orgs",
            "repos_url": "https://api.github.com/users/rhettinger/repos",
            "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhettinger/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-23T22:08:33Z",
          "updated_at": "2024-06-23T22:08:33Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Are you fine with this, Raymond?\r\n\r\nYes, I've exercised the API quite a bit and am fine with it.  The core concept is sound, `square = partial(pow, Placeholder, 2)`.  This will address an irritating limitation without adding much cognitive or computing overhead.\r\n\r\nAll that is left is tweaking the PR to make it clean as possible before landing.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2185338066/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2187367113",
          "html_url": "https://github.com/python/cpython/pull/119827#issuecomment-2187367113",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/119827",
          "id": 2187367113,
          "node_id": "IC_kwDOBN0Z8c6CYJLJ",
          "user": {
            "login": "rhettinger",
            "id": 1623689,
            "node_id": "MDQ6VXNlcjE2MjM2ODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1623689?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhettinger",
            "html_url": "https://github.com/rhettinger",
            "followers_url": "https://api.github.com/users/rhettinger/followers",
            "following_url": "https://api.github.com/users/rhettinger/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhettinger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhettinger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhettinger/subscriptions",
            "organizations_url": "https://api.github.com/users/rhettinger/orgs",
            "repos_url": "https://api.github.com/users/rhettinger/repos",
            "events_url": "https://api.github.com/users/rhettinger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhettinger/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-06-24T20:41:14Z",
          "updated_at": "2024-06-24T20:41:14Z",
          "author_association": "CONTRIBUTOR",
          "body": "If you want to leave out `partialmethod`, I don't think that has to be done at the same time or at all.   AFAICT it is very rarely used and doesn't warrant bogging down this one PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2187367113/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/122542",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/122542/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/122542/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/122542/events",
      "html_url": "https://github.com/python/cpython/pull/122542",
      "id": 2441353736,
      "node_id": "PR_kwDOBN0Z8c53D6z-",
      "number": 122542,
      "title": "gh-55454: Add IMAP4 IDLE support to imaplib",
      "user": {
        "login": "foresto",
        "id": 322134,
        "node_id": "MDQ6VXNlcjMyMjEzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/foresto",
        "html_url": "https://github.com/foresto",
        "followers_url": "https://api.github.com/users/foresto/followers",
        "following_url": "https://api.github.com/users/foresto/following{/other_user}",
        "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
        "organizations_url": "https://api.github.com/users/foresto/orgs",
        "repos_url": "https://api.github.com/users/foresto/repos",
        "events_url": "https://api.github.com/users/foresto/events{/privacy}",
        "received_events_url": "https://api.github.com/users/foresto/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 41,
      "created_at": "2024-08-01T03:13:13Z",
      "updated_at": "2025-02-07T03:36:20Z",
      "closed_at": "2025-02-07T03:15:11Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/122542",
        "html_url": "https://github.com/python/cpython/pull/122542",
        "diff_url": "https://github.com/python/cpython/pull/122542.diff",
        "patch_url": "https://github.com/python/cpython/pull/122542.patch",
        "merged_at": "2025-02-07T03:15:11Z"
      },
      "body": "This extends imaplib with support for the rfc2177 IMAP IDLE command, as requested in #55454.  It allows events to be pushed to a client as they occur, rather than having to continually poll for mailbox changes.\r\n\r\nThe interface is a new idle() method, which returns an iterable context manager.  Entering the context starts IDLE mode, during which events (untagged responses) can be retrieved using the iteration protocol. Exiting the context sends DONE to the server, ending IDLE mode.\r\n\r\nAn optional time limit for the IDLE session is supported, for use with servers that impose an inactivity timeout.\r\n\r\nThe context manager also offers a burst() method, designed for programs wishing to process events in batch rather than one at a time.\r\n\r\nNotable differences from other implementations:\r\n\r\n- It's an extension to imaplib, rather than a replacement.\r\n- It doesn't introduce additional threads.\r\n- It doesn't impose new requirements on the use of imaplib's existing methods.\r\n- It passes the unit tests in CPython's test/test_imaplib.py module (and adds new ones).\r\n- It works on Windows, Linux, and other unix-like systems.\r\n- It makes IDLE available on all of imaplib's client variants (including IMAP4_stream).\r\n- The interface is pythonic and easy to use.\r\n\r\nCaveats:\r\n\r\n- Due to a Windows limitation, the special case of IMAP4_stream running on Windows lacks a duration/timeout feature. (This is the stdin/stdout pipe connection variant; timeouts work fine for socket-based connections, even on Windows.) I have documented it where appropriate.\r\n\r\n- The file-like imaplib instance attributes are changed from buffered to unbuffered mode. This could potentially break any client code that uses those objects directly without expecting partial reads/writes. However, they are undocumented. As such, I think (and PEP 8 confirms) that they are fair game for changes. https://peps.python.org/pep-0008/#public-and-internal-interfaces\r\n\r\nUsage examples:\r\n\r\nhttps://github.com/python/cpython/issues/55454#issuecomment-2227543041\r\n\r\nRecent discussion:\r\n\r\nhttps://discuss.python.org/t/gauging-interest-in-my-imap4-idle-implementation-for-imaplib/59272\r\n\r\nEarlier requests and suggestions:\r\n\r\nhttps://github.com/python/cpython/issues/55454\r\n\r\nhttps://mail.python.org/archives/list/python-ideas@python.org/thread/C4TVEYL5IBESQQPPS5GBR7WFBXCLQMZ2/\r\n\r\n<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\ngh-NNNNN: Summary of the changes made\r\n```\r\n\r\nWhere: gh-NNNNN refers to the GitHub issue number.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `main`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `main`.\r\n\r\n-->\r\n\r\n\r\n<!-- gh-issue-number: gh-55454 -->\r\n* Issue: gh-55454\r\n<!-- /gh-issue-number -->\r\n\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\r\n\ud83d\udcda Documentation preview \ud83d\udcda: https://cpython-previews--122542.org.readthedocs.build/\r\n\r\n<!-- readthedocs-preview cpython-previews end -->",
      "closed_by": {
        "login": "gvanrossum",
        "id": 2894642,
        "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gvanrossum",
        "html_url": "https://github.com/gvanrossum",
        "followers_url": "https://api.github.com/users/gvanrossum/followers",
        "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
        "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
        "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
        "repos_url": "https://api.github.com/users/gvanrossum/repos",
        "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/122542/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/122542/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2261877868",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2261877868",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2261877868,
          "node_id": "IC_kwDOBN0Z8c6G0YRs",
          "user": {
            "login": "ghost",
            "id": 10137,
            "node_id": "MDQ6VXNlcjEwMTM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following{/other_user}",
            "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-08-01T03:13:16Z",
          "updated_at": "2024-08-01T03:15:29Z",
          "author_association": "NONE",
          "body": "All commit authors signed the Contributor License Agreement. <br/> [![CLA signed](https://cpython-clabot.herokuapp.com/cla-signed.svg)](https://cpython-clabot.herokuapp.com/signed-contributor-license-agreement?version=96a49432-b8b1-11ec-9bf5-bfe9ad6c72c4)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2261877868/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2323416052",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2323416052",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2323416052,
          "node_id": "IC_kwDOBN0Z8c6KfIP0",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-09-01T16:27:30Z",
          "updated_at": "2024-09-01T16:27:30Z",
          "author_association": "CONTRIBUTOR",
          "body": "Can someone find time for a code review?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2323416052/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2359104910",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2359104910",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2359104910,
          "node_id": "IC_kwDOBN0Z8c6MnRWO",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-09-18T18:06:31Z",
          "updated_at": "2024-09-18T18:06:31Z",
          "author_association": "CONTRIBUTOR",
          "body": "@mcepl Did you see my last comment? Have you had a chance to finish reviewing?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2359104910/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2366977072",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2366977072",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2366977072,
          "node_id": "IC_kwDOBN0Z8c6NFTQw",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-09-22T21:41:01Z",
          "updated_at": "2024-09-22T21:41:01Z",
          "author_association": "MEMBER",
          "body": "I think this also needs a \"What's new in Python 3.14\" entry.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2366977072/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2377935038",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2377935038",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2377935038,
          "node_id": "IC_kwDOBN0Z8c6NvGi-",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-09-26T21:04:37Z",
          "updated_at": "2024-09-26T21:05:08Z",
          "author_association": "CONTRIBUTOR",
          "body": "@ZeroIntensity wrote:\r\n\r\n> I think this also needs a \"What's new in Python 3.14\" entry.\r\n\r\nIs that not what [this is](https://github.com/python/cpython/pull/122542/files#diff-24e6cbe61d91e61059c44a7cf5f712499a11eb47a82d5f1a8db16ec7f9023c31)?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2377935038/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2377937216",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2377937216",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2377937216,
          "node_id": "IC_kwDOBN0Z8c6NvHFA",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-09-26T21:05:59Z",
          "updated_at": "2024-09-26T21:05:59Z",
          "author_association": "MEMBER",
          "body": "It is, I wrote that comment before you added it (or maybe I missed it).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2377937216/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2377942150",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2377942150",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2377942150,
          "node_id": "IC_kwDOBN0Z8c6NvISG",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-09-26T21:09:04Z",
          "updated_at": "2024-09-26T21:09:04Z",
          "author_association": "CONTRIBUTOR",
          "body": "> It is, I wrote that comment before you added it (or maybe I missed it).\r\n\r\nAh, gotcha. I thought for a moment that you meant some other place for What's New entries that I hadn't found yet. The bit I linked has been in this PR the whole time. :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2377942150/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2377945116",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2377945116",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2377945116,
          "node_id": "IC_kwDOBN0Z8c6NvJAc",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-09-26T21:10:52Z",
          "updated_at": "2024-09-26T21:10:52Z",
          "author_association": "MEMBER",
          "body": "> The bit I linked has been in this PR the whole time.\n\nAh, my bad. I have a tendency to get the what's new and news entries mixed up.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2377945116/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2415840989",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2415840989",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2415840989,
          "node_id": "IC_kwDOBN0Z8c6P_s7d",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-16T06:28:48Z",
          "updated_at": "2024-10-16T06:28:48Z",
          "author_association": "CONTRIBUTOR",
          "body": "@gpshead are you still here?\r\n\r\nShould I be looking for another core developer to move this forward?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2415840989/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2417783548",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2417783548",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2417783548,
          "node_id": "IC_kwDOBN0Z8c6QHHL8",
          "user": {
            "login": "gpshead",
            "id": 68491,
            "node_id": "MDQ6VXNlcjY4NDkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gpshead",
            "html_url": "https://github.com/gpshead",
            "followers_url": "https://api.github.com/users/gpshead/followers",
            "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
            "organizations_url": "https://api.github.com/users/gpshead/orgs",
            "repos_url": "https://api.github.com/users/gpshead/repos",
            "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gpshead/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-16T19:40:48Z",
          "updated_at": "2024-10-16T19:40:48Z",
          "author_association": "MEMBER",
          "body": "I won't have time to get to this one.  Perhaps @encukou or @serhiy-storchaka could?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2417783548/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2418243275",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2418243275",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2418243275,
          "node_id": "IC_kwDOBN0Z8c6QI3bL",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-17T00:30:53Z",
          "updated_at": "2024-10-17T00:30:53Z",
          "author_association": "MEMBER",
          "body": "@malemburg was also the one that approved this on DPO, he might want a look.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2418243275/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2489396448",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2489396448",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2489396448,
          "node_id": "IC_kwDOBN0Z8c6UYSzg",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-20T19:35:10Z",
          "updated_at": "2024-11-20T19:35:10Z",
          "author_association": "CONTRIBUTOR",
          "body": "@serhiy-storchaka Are you still planning to do the core review for this? I appreciate it. :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2489396448/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2510223668",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2510223668",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2510223668,
          "node_id": "IC_kwDOBN0Z8c6Vnvk0",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-12-01T19:44:13Z",
          "updated_at": "2024-12-01T19:44:13Z",
          "author_association": "MEMBER",
          "body": "@ZeroIntensity how well did you review this? If you think you understand the implementation and agree with it, I can rubber-stamp it. OTOH if @serhiy-storchaka is still planning to review this (as he indicated a few months ago) I'd rather wait for his opinion, he's extremely thorough.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2510223668/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2510225864",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2510225864",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2510225864,
          "node_id": "IC_kwDOBN0Z8c6VnwHI",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-12-01T19:50:14Z",
          "updated_at": "2024-12-01T19:50:14Z",
          "author_association": "MEMBER",
          "body": "My original review was pretty thorough, but I didn't do a second pass over once the requested changes had been addressed. I'll re-review it one more time to make sure, but I'm quite sure that the implementation works and is properly tested.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2510225864/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2510231248",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2510231248",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2510231248,
          "node_id": "IC_kwDOBN0Z8c6VnxbQ",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-12-01T20:06:42Z",
          "updated_at": "2024-12-01T20:06:42Z",
          "author_association": "CONTRIBUTOR",
          "body": "Suggestions committed, @gvanrossum. Thanks for the kind words, and for your help in getting this done.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2510231248/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2510353789",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2510353789",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2510353789,
          "node_id": "IC_kwDOBN0Z8c6VoPV9",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-12-02T00:57:57Z",
          "updated_at": "2024-12-02T00:57:57Z",
          "author_association": "CONTRIBUTOR",
          "body": "I don't know why CI is suddenly failing since Guido merged main into this branch. The imaplib module hasn't changed in seven months, and the CI error output is useless:\r\n\r\n![empty-ci-error](https://github.com/user-attachments/assets/f44e6208-681c-477e-9506-8c6240c69f1d)\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2510353789/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2512668898",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2512668898",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2512668898,
          "node_id": "IC_kwDOBN0Z8c6VxEji",
          "user": {
            "login": "vadmium",
            "id": 1024659,
            "node_id": "MDQ6VXNlcjEwMjQ2NTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1024659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vadmium",
            "html_url": "https://github.com/vadmium",
            "followers_url": "https://api.github.com/users/vadmium/followers",
            "following_url": "https://api.github.com/users/vadmium/following{/other_user}",
            "gists_url": "https://api.github.com/users/vadmium/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vadmium/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vadmium/subscriptions",
            "organizations_url": "https://api.github.com/users/vadmium/orgs",
            "repos_url": "https://api.github.com/users/vadmium/repos",
            "events_url": "https://api.github.com/users/vadmium/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vadmium/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-12-02T20:04:26Z",
          "updated_at": "2024-12-02T20:04:26Z",
          "author_association": "MEMBER",
          "body": "Looks like the IMAP4.file attribute is no longer really used. I wonder if it should it be removed. Any external code using it would probably already be broken by the separate __readbuf_ buffering anyway.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2512668898/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2513887068",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2513887068",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2513887068,
          "node_id": "IC_kwDOBN0Z8c6V1t9c",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-12-03T08:45:52Z",
          "updated_at": "2024-12-03T08:45:52Z",
          "author_association": "MEMBER",
          "body": "Sorry, I've had other things to do during these two months and just forgot about this PR. I'll try to get the review done by the end of the week, but I don't have access to my computer right now. Please don't hesitate to ping me if I'm late.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2513887068/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2526883534",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2526883534",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2526883534,
          "node_id": "IC_kwDOBN0Z8c6WnS7O",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-12-09T04:47:22Z",
          "updated_at": "2024-12-09T05:04:29Z",
          "author_association": "CONTRIBUTOR",
          "body": "@vadmium wrote:\r\n\r\n> I wonder if providing a lower-level method, that either returns a single response or times out and say returns None, might cover more use cases? The two higher-level features (_dur_ time limit and _burst_ collecting) could be implemented in terms of it:\r\n\r\nThis is what `_pop()` does. In an early draft, it was a public method and `burst()` didn't exist. I eventually hid it away as an implementation detail, mainly because it made the client code for collecting response bursts less intuitive to read than I would like, and more complicated to teach/explain/document. (The same was true for non-burst use, although less so.)\r\n\r\n> There is an example specifying int for idle(dur=. . .), while burst(interval=. . .) defaults to float. It would be good to explicitly say what types are allowed for each parameter.\r\n\r\nDone in bdde9438449.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2526883534/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2529748630",
          "html_url": "https://github.com/python/cpython/pull/122542#issuecomment-2529748630",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/122542",
          "id": 2529748630,
          "node_id": "IC_kwDOBN0Z8c6WyOaW",
          "user": {
            "login": "foresto",
            "id": 322134,
            "node_id": "MDQ6VXNlcjMyMjEzNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/322134?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/foresto",
            "html_url": "https://github.com/foresto",
            "followers_url": "https://api.github.com/users/foresto/followers",
            "following_url": "https://api.github.com/users/foresto/following{/other_user}",
            "gists_url": "https://api.github.com/users/foresto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/foresto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/foresto/subscriptions",
            "organizations_url": "https://api.github.com/users/foresto/orgs",
            "repos_url": "https://api.github.com/users/foresto/repos",
            "events_url": "https://api.github.com/users/foresto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/foresto/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-12-09T23:11:41Z",
          "updated_at": "2024-12-09T23:11:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "@vadmium wrote:\r\n\r\n> Looks like the IMAP4.file attribute is no longer really used. I wonder if it should it be removed. Any external code using it would probably already be broken by the separate *_readbuf* buffering anyway.\r\n\r\nI noticed that, too. I generally don't like to remove things that someone might be using in the wild (even undocumented ones), but now that you mention it, the new buffering introduced here could cause subtle errors for anyone doing that, and removing the attribute would make them obvious errors instead.\r\n\r\nI'm inclined to do it. Can anyone think of a good reason not to?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2529748630/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/121339",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/121339/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/121339/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/121339/events",
      "html_url": "https://github.com/python/cpython/pull/121339",
      "id": 2388919594,
      "node_id": "PR_kwDOBN0Z8c50V6j-",
      "number": 121339,
      "title": "gh-102471, PEP 757: Add PyLong import and export API",
      "user": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 85,
      "created_at": "2024-07-03T15:28:00Z",
      "updated_at": "2025-02-26T11:42:22Z",
      "closed_at": "2024-12-13T13:24:48Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/121339",
        "html_url": "https://github.com/python/cpython/pull/121339",
        "diff_url": "https://github.com/python/cpython/pull/121339.diff",
        "patch_url": "https://github.com/python/cpython/pull/121339.patch",
        "merged_at": "2024-12-13T13:24:48Z"
      },
      "body": "Add PyLong_Export() and PyLong_Import() functions and PyLong_LAYOUT structure.\r\n\r\n<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\ngh-NNNNN: Summary of the changes made\r\n```\r\n\r\nWhere: gh-NNNNN refers to the GitHub issue number.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `main`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `main`.\r\n\r\n-->\r\n\n\n<!-- gh-issue-number: gh-102471 -->\n* Issue: gh-102471\n<!-- /gh-issue-number -->\n\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\n\ud83d\udcda Documentation preview \ud83d\udcda: https://cpython-previews--121339.org.readthedocs.build/\n\r\n<!-- readthedocs-preview cpython-previews end -->",
      "closed_by": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/121339/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/121339/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2206570659",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2206570659",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2206570659,
          "node_id": "IC_kwDOBN0Z8c6DhZij",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-03T15:31:47Z",
          "updated_at": "2024-07-03T15:49:47Z",
          "author_association": "MEMBER",
          "body": "cc @skirpichev @casevh",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2206570659/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2207182217",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2207182217",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2207182217,
          "node_id": "IC_kwDOBN0Z8c6Dju2J",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-03T20:22:27Z",
          "updated_at": "2024-07-03T20:22:27Z",
          "author_association": "MEMBER",
          "body": "See also issue https://github.com/python/cpython/issues/111415",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2207182217/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2208030167",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2208030167",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2208030167,
          "node_id": "IC_kwDOBN0Z8c6Dm93X",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T03:27:09Z",
          "updated_at": "2024-07-04T03:27:09Z",
          "author_association": "CONTRIBUTOR",
          "body": "CC @tornaria, as Sage people might be interested in this feature.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2208030167/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2208126358",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2208126358",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2208126358,
          "node_id": "IC_kwDOBN0Z8c6DnVWW",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T05:06:03Z",
          "updated_at": "2024-07-04T05:06:03Z",
          "author_association": "CONTRIBUTOR",
          "body": "CC @oscarbenjamin, you may want this for python-flint",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2208126358/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2208268426",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2208268426",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2208268426,
          "node_id": "IC_kwDOBN0Z8c6Dn4CK",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T07:08:41Z",
          "updated_at": "2024-07-04T07:08:41Z",
          "author_association": "MEMBER",
          "body": "I updated my PR:\r\n\r\n* Use -1 for little endian and +1 for big endian.\r\n* Rename PyUnstable_LongExport to PyUnstable_Long_DigitArray.\r\n* Add \"always succeed\" mention in the doc.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2208268426/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2208730660",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2208730660",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2208730660,
          "node_id": "IC_kwDOBN0Z8c6Dpo4k",
          "user": {
            "login": "oscarbenjamin",
            "id": 1159732,
            "node_id": "MDQ6VXNlcjExNTk3MzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/oscarbenjamin",
            "html_url": "https://github.com/oscarbenjamin",
            "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
            "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
            "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
            "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
            "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
            "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T11:23:49Z",
          "updated_at": "2024-07-04T11:23:49Z",
          "author_association": "CONTRIBUTOR",
          "body": "> CC @oscarbenjamin, you may want this for python-flint\r\n\r\nAbsolutely. Currently python-flint uses a hex-string as an intermediate format when converting between large int and `fmpz` so anything more direct is an improvement. I expect that python-flint would use `mpz_import/mpz_export` just like gmpy2.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2208730660/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2208916944",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2208916944",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2208916944,
          "node_id": "IC_kwDOBN0Z8c6DqWXQ",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T12:56:16Z",
          "updated_at": "2024-07-04T12:56:16Z",
          "author_association": "MEMBER",
          "body": "@skirpichev: I added a PyLongWriter API similar to what @encukou proposed.\r\n\r\nExample:\r\n\r\n```c\r\nPyLongObject *\r\n_PyLong_FromDigits(int negative, Py_ssize_t digit_count, digit *digits)\r\n{\r\n    PyLongWriter *writer = PyLongWriter_Create();\r\n    if (writer == NULL) {\r\n        return NULL;\r\n    }\r\n\r\n    if (negative) {\r\n        PyLongWriter_SetSign(writer, -1);\r\n    }\r\n\r\n    Py_digit *writer_digits = PyLongWriter_AllocDigits(writer, digit_count);\r\n    if (writer_digits == NULL) {\r\n        goto error;\r\n    }\r\n    memcpy(writer_digits, digits, digit_count * sizeof(digit));\r\n\r\n    return (PyLongObject*)PyLongWriter_Finish(writer);\r\n\r\nerror:\r\n    PyLongWriter_Discard(writer);\r\n    return NULL;\r\n}\r\n```\r\n\r\nThe `PyLongWriter_Finish()` function normalizes the number and gets a small number if needed. Example:\r\n\r\n```py\r\n>>> import _testcapi; _testcapi.pylong_import(0, [100, 0, 0]) is 100\r\nTrue\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2208916944/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2208930622",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2208930622",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2208930622,
          "node_id": "IC_kwDOBN0Z8c6DqZs-",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T13:00:48Z",
          "updated_at": "2024-07-04T13:00:48Z",
          "author_association": "MEMBER",
          "body": "I mark the PR as a draft until we agree on the API.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2208930622/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2208977650",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2208977650",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2208977650,
          "node_id": "IC_kwDOBN0Z8c6DqlLy",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T13:20:48Z",
          "updated_at": "2024-07-04T13:20:48Z",
          "author_association": "CONTRIBUTOR",
          "body": ">  I added a PyLongWriter API similar to what @encukou proposed.\r\n\r\nYes, that looks better and should fix speed regression.  I'll try to benchmark that, perhaps tomorrow.\r\n\r\nBut cost is 5 (!) public functions and one new struct, additionally to ``PyUnstable_Long_Import()``, which will be a more slow API.  Correct?  C.f. just one function in [above](https://github.com/python/cpython/pull/121339#discussion_r1665029240) proposal.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2208977650/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2208996910",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2208996910",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2208996910,
          "node_id": "IC_kwDOBN0Z8c6Dqp4u",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T13:31:12Z",
          "updated_at": "2024-07-04T13:31:12Z",
          "author_association": "MEMBER",
          "body": "I updated the PR to remove the `PyUnstable_` prefix, replace it with the `PyLong` prefix.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2208996910/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209024275",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209024275",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209024275,
          "node_id": "IC_kwDOBN0Z8c6DqwkT",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T13:38:57Z",
          "updated_at": "2024-07-04T13:38:57Z",
          "author_association": "MEMBER",
          "body": "> But cost is 5 (!) public functions and one new struct, additionally to PyUnstable_Long_Import(), which will be a more slow API. Correct? C.f. just one function in https://github.com/python/cpython/pull/121339#discussion_r1665029240 proposal.\r\n\r\nMy concern is to avoid the problem https://github.com/capi-workgroup/api-evolution/issues/36 : avoid exposing `_PyLong_New()` object until it's fully initialized. The \"writer\" API hides the implementation details but also makes sure that the object is not \"leaked\" to Python before it's fully initialized and valid. By the way, the implementation uses functions which are only safe if the object cannot be seen in Python: if Py_REFCNT(obj) is 1.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209024275/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209037747",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209037747",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209037747,
          "node_id": "IC_kwDOBN0Z8c6Dqz2z",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T13:43:25Z",
          "updated_at": "2024-07-04T13:43:25Z",
          "author_association": "MEMBER",
          "body": "@skirpichev: Would it be useful to add a `PyLongWriter_SetValue(PyLongWriter *writer, long value)` function? It would be similar to `PyLong_FromLong(long value)` (but may be less efficient), so I'm not sure if it's relevant.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209037747/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209085864",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209085864",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209085864,
          "node_id": "IC_kwDOBN0Z8c6Dq_mo",
          "user": {
            "login": "oscarbenjamin",
            "id": 1159732,
            "node_id": "MDQ6VXNlcjExNTk3MzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/oscarbenjamin",
            "html_url": "https://github.com/oscarbenjamin",
            "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
            "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
            "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
            "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
            "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
            "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T14:05:17Z",
          "updated_at": "2024-07-04T14:05:17Z",
          "author_association": "CONTRIBUTOR",
          "body": "This all seems a bit surprisingly complicated for what is needed here. What about having three functions:\r\n```\r\nPyLong_FromLimbs(plimbs, sign, num_limbs, limb_bits, bits_per_limb)\r\nPyLong_ToLimbsGetSize(pylong, num_limbs, limb_bits, bits_per_limb)\r\nPyLong_ToLimbs(plimbs, &sign, pylong, num_limbs, limb_bits, bits_per_limb)\r\n```\r\nThen `PyLong_FromLimbs` reads the limbs from `plimbs` and returns a PyLong. The `PyLong_ToLimbs_GetSize` function calculates how many limbs are needed so that you can allocate `plimbs` before calling `PyLong_ToLimbs`.\r\n\r\nOn a 64 bit machine for CPython format `limb_bits` would be 32 and `bits_per_limb` would be 30. For GMP both would be 64.\r\n\r\nI can't imagine why CPython and e.g. GMP would use different endianness.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209085864/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209092095",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209092095",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209092095,
          "node_id": "IC_kwDOBN0Z8c6DrBH_",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T14:08:29Z",
          "updated_at": "2024-07-04T14:08:29Z",
          "author_association": "MEMBER",
          "body": "@skirpichev: I rewrote `PyLongWriter` API to make it simpler and avoid PyMem_Malloc/PyMem_Free():\r\n\r\n```c\r\nPyLongObject *\r\n_PyLong_FromDigits(int negative, Py_ssize_t digit_count, digit *digits)\r\n{\r\n    Py_digit *writer_digits;\r\n    PyLongWriter *writer = PyLongWriter_Create(digit_count, &writer_digits);\r\n    if (writer == NULL) {\r\n        return NULL;\r\n    }\r\n    memcpy(writer_digits, digits, digit_count * sizeof(digit));\r\n    if (negative) {\r\n        PyLongWriter_SetNegative(writer);\r\n    }\r\n\r\n    return (PyLongObject*)PyLongWriter_Finish(writer);\r\n}\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209092095/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209096257",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209096257",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209096257,
          "node_id": "IC_kwDOBN0Z8c6DrCJB",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T14:10:38Z",
          "updated_at": "2024-07-04T14:10:38Z",
          "author_association": "MEMBER",
          "body": "> PyLong_FromLimbs(plimbs, sign, num_limbs, limb_bits, bits_per_limb)\r\n> PyLong_ToLimbs(plimbs, &sign, pylong, num_limbs, limb_bits, bits_per_limb)\r\n\r\nI have no idea how to implement an import/export function which takes arbitrary *limb_bits* and *bits_per_limb* arguments. Python native format is 30-bit digit and 4 bytes per digit (or 15-bit digit and 2 bytes per digit).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209096257/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209107176",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209107176",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209107176,
          "node_id": "IC_kwDOBN0Z8c6DrEzo",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T14:16:31Z",
          "updated_at": "2024-07-04T14:16:31Z",
          "author_association": "CONTRIBUTOR",
          "body": "> My concern is to avoid the problem https://github.com/capi-workgroup/api-evolution/issues/36 : avoid exposing _PyLong_New() object until it's fully initialized.\r\n\r\nBut _PyLong_New() doesn't create of incompletely initialized object.  Yes, it's a garbage - but a correct integer object.  And in my proposal we don't expose this helper directly - it will be wrapped by PyLong_Import().\r\n\r\nI worry that the writer API is overkill to solve slight performance regression.  It happens for 2-10 digits, speed regression up to 20%.  We have a quick path for small integers (long-sized) and for big ones (>~10) - creation of a temporary array is not a bottleneck.\r\n\r\n> Would it be useful to add a PyLongWriter_SetValue(PyLongWriter *writer, long value) function?\r\n\r\nI doubt this will be more efficient than the current solution:\r\n```c\r\n    if (mpz_fits_slong_p(obj->z)) {\r\n        return PyLong_FromLong(mpz_get_si(obj->z));\r\n    }\r\n```\r\n\r\n> I rewrote PyLongWriter API to make it simpler and avoid PyMem_Malloc/PyMem_Free():\r\n\r\nThanks, that's more closer to my proposal!\r\n\r\nI doubt, that PyLongWriter_SetNegative() is useful: you can include sign in PyLongWriter_Create().  In this way you proposal will match mine (up to function names and a new struct:))\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209107176/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209114412",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209114412",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209114412,
          "node_id": "IC_kwDOBN0Z8c6DrGks",
          "user": {
            "login": "oscarbenjamin",
            "id": 1159732,
            "node_id": "MDQ6VXNlcjExNTk3MzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1159732?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/oscarbenjamin",
            "html_url": "https://github.com/oscarbenjamin",
            "followers_url": "https://api.github.com/users/oscarbenjamin/followers",
            "following_url": "https://api.github.com/users/oscarbenjamin/following{/other_user}",
            "gists_url": "https://api.github.com/users/oscarbenjamin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/oscarbenjamin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/oscarbenjamin/subscriptions",
            "organizations_url": "https://api.github.com/users/oscarbenjamin/orgs",
            "repos_url": "https://api.github.com/users/oscarbenjamin/repos",
            "events_url": "https://api.github.com/users/oscarbenjamin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/oscarbenjamin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T14:20:20Z",
          "updated_at": "2024-07-04T14:20:20Z",
          "author_association": "CONTRIBUTOR",
          "body": "> I have no idea how to implement an import/export function which takes arbitrary _limb_bits_ and _bits_per_limb_ arguments.\r\n\r\nThe `limb_bits` argument only needs to be 32 or 64. The `bits_per_limb` is almost always the same as `limb_bits` unless it is like CPython's format where `limb_bits` is 32 and `bits_per_limb` is 30.\r\n\r\nI don't know of cases that actually need to have `bits_per_limb` different from `limb_bits` (apart from CPython) so maybe `bits_per_limb` is actually not needed and can be presumed equal to `limb_bits`. I think gmpy2 and python-flint only need to be able to do:\r\n```c\r\n/* 64 bit build: */\r\npylong = PyLong_FromLimbs(plimbs, sign, num_limbs, 64, 64)\r\n/* 32 bit build: */\r\npylong = PyLong_FromLimbs(plimbs, sign, num_limbs, 32, 32)\r\n```\r\nMaybe then all that is needed is 32 and 64 bit versions of the three functions and `limb_bits` and `bits_per_limb` can be dropped.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209114412/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209179079",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209179079",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209179079,
          "node_id": "IC_kwDOBN0Z8c6DrWXH",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T14:55:57Z",
          "updated_at": "2024-07-04T14:55:57Z",
          "author_association": "MEMBER",
          "body": "> I doubt, that PyLongWriter_SetNegative() is useful: you can include sign in PyLongWriter_Create(). In this way you proposal will match mine (up to function names and a new struct:))\r\n\r\nOk, done.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209179079/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209184102",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209184102",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209184102,
          "node_id": "IC_kwDOBN0Z8c6DrXlm",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T14:59:04Z",
          "updated_at": "2024-07-04T14:59:04Z",
          "author_association": "CONTRIBUTOR",
          "body": "> The bits_per_limb is almost always the same as limb_bits unless it is like CPython's format\r\n\r\n...or libtommath.  It's like CPython's format, but...  Not the same.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209184102/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2209202996",
          "html_url": "https://github.com/python/cpython/pull/121339#issuecomment-2209202996",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/121339",
          "id": 2209202996,
          "node_id": "IC_kwDOBN0Z8c6DrcM0",
          "user": {
            "login": "zooba",
            "id": 1693688,
            "node_id": "MDQ6VXNlcjE2OTM2ODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zooba",
            "html_url": "https://github.com/zooba",
            "followers_url": "https://api.github.com/users/zooba/followers",
            "following_url": "https://api.github.com/users/zooba/following{/other_user}",
            "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
            "organizations_url": "https://api.github.com/users/zooba/orgs",
            "repos_url": "https://api.github.com/users/zooba/repos",
            "events_url": "https://api.github.com/users/zooba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zooba/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-07-04T15:09:14Z",
          "updated_at": "2024-07-04T15:09:14Z",
          "author_association": "MEMBER",
          "body": "> I have no idea how to implement an import/export function which takes arbitrary _limb_bits_ and _bits_per_limb_ arguments. Python native format is 30-bit digit and 4 bytes per digit (or 15-bit digit and 2 bytes per digit).\r\n\r\nYeah, we don't want to be writing conversions besides the one that we need for whatever our native format happens to be.\r\n\r\nI like Victor's current proposal to provide a non-PyObject pointer (the \"writer\") and the direct memory to write into. If we also return the specification of our native format, then the caller can do the conversion to fill out our raw memory. (If you want faster code then start by assuming we won't change the format, hard code it, and use the returned format to assert that assumption is still correct.)\r\n\r\nWe need to balance the ability to efficiently do unusual things like this with our ability to make common things more efficient. This kind of API flies right in the face of that, so we want to be cautious about locking ourselves into a design that hurts everyone else.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2209202996/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/93823",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/93823/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/93823/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/93823/events",
      "html_url": "https://github.com/python/cpython/pull/93823",
      "id": 1271339576,
      "node_id": "PR_kwDOBN0Z8c45qTLB",
      "number": 93823,
      "title": "gh-83638: Add sqlite3.Connection.autocommit for PEP 249 compliant behaviour",
      "user": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 36,
      "created_at": "2022-06-14T20:42:14Z",
      "updated_at": "2022-11-13T22:58:50Z",
      "closed_at": "2022-11-12T22:44:42Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/93823",
        "html_url": "https://github.com/python/cpython/pull/93823",
        "diff_url": "https://github.com/python/cpython/pull/93823.diff",
        "patch_url": "https://github.com/python/cpython/pull/93823.patch",
        "merged_at": "2022-11-12T22:44:42Z"
      },
      "body": "Resolves #83638\r\n\r\n### TODO\r\n\r\n- [x] Wait for PEP-249 amendments to land\r\n- [x] Reflow and reindent doc changes\n\n<!-- gh-issue-number: gh-83638 -->\n* Issue: gh-83638\n<!-- /gh-issue-number -->\n",
      "closed_by": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/93823/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/93823/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1156133560",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1156133560",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1156133560,
          "node_id": "IC_kwDOBN0Z8c5E6TK4",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-15T08:05:28Z",
          "updated_at": "2022-06-15T08:30:49Z",
          "author_association": "CONTRIBUTOR",
          "body": "@zzzeek, @maggyero, I'd appreciate your review on this, if only by building and testing it, and/or taking a look at the added tests.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1156133560/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1156135543",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1156135543",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1156135543,
          "node_id": "IC_kwDOBN0Z8c5E6Tp3",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-15T08:07:13Z",
          "updated_at": "2022-06-15T08:07:13Z",
          "author_association": "CONTRIBUTOR",
          "body": "@AlexWaygood would you mind taking a look at the doc changes?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1156135543/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1156152572",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1156152572",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1156152572,
          "node_id": "IC_kwDOBN0Z8c5E6Xz8",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-15T08:22:12Z",
          "updated_at": "2022-06-15T09:47:42Z",
          "author_association": "CONTRIBUTOR",
          "body": "For external reviewers, here's some help on how to get started reviewing this PR:\r\n\r\n- Rationale / proposed solution\r\n    - First, read up on the discussions in the linked issue, and those linked from that issue\r\n    - Are there holes or inconsistencies in the proposed solution?\r\n    - Does the proposed solution actually solve the problem?\r\n- Implementation\r\n    - Does the implementation align with the proposed solution?\r\n    - Does the implementation align with PEP 249?\r\n    - Are there logical inconsistencies in the implementation?\r\n- Tests:\r\n    - Do the added tests test the actual implementation?\r\n    - Could the added tests be more specific?\r\n    - Are there missing corner cases?\r\n    - Are there superfluous tests?\r\n    - How is the code coverage? Are there uncovered functions/lines/branches?\r\n- Docs:\r\n    - Are the added docs helpful for the average user? (Too technical? Missing examples?)\r\n    - Are the added docs aligned with the actual implementation\r\n    - Are there spelling/syntax errors?\r\n    - Is the NEWS entry understandable for the average user? Does it explain the change in a concise way?\r\n    - Can the What's New entry be improved?\r\n- Backwards compatibility\r\n    - Does the proposed solution follow [PEP 387](https://peps.python.org/pep-0387/)?\r\n    - Could we add more emphasis on the deprecation notices?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1156152572/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1156356722",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1156356722",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1156356722,
          "node_id": "IC_kwDOBN0Z8c5E7Jpy",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-15T11:31:53Z",
          "updated_at": "2022-06-15T11:31:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "cc. @bitdancer ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1156356722/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1156634174",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1156634174",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1156634174,
          "node_id": "IC_kwDOBN0Z8c5E8NY-",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-15T15:42:30Z",
          "updated_at": "2022-06-15T15:42:30Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks, Alex! \ud83d\ude80 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1156634174/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 1,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1159147583",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1159147583",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1159147583,
          "node_id": "IC_kwDOBN0Z8c5FFzA_",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-17T18:50:03Z",
          "updated_at": "2022-06-17T18:50:03Z",
          "author_association": "CONTRIBUTOR",
          "body": "I'm marking this as draft, as I want to land a couple of other cleanups to the sqlite3 docs before requesting further reviews.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1159147583/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1173196523",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1173196523",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1173196523,
          "node_id": "IC_kwDOBN0Z8c5F7Y7r",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-03T23:39:06Z",
          "updated_at": "2022-07-03T23:39:06Z",
          "author_association": "CONTRIBUTOR",
          "body": "I need to resolve #94538 in order to proceed with this PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1173196523/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1190850093",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1190850093",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1190850093,
          "node_id": "IC_kwDOBN0Z8c5G-u4t",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-20T22:59:45Z",
          "updated_at": "2022-07-20T22:59:45Z",
          "author_association": "CONTRIBUTOR",
          "body": "> I need to resolve #94538 in order to proceed with this PR.\r\n\r\nEven though that PR has landed, more AC changes are required in order to optimise the relayed call from `sqlite3.connect` to `sqlite3.Connection.__init__`. Going for the slow path for now: `Py_BuildValue` and `PyObject_Call`.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1190850093/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1192904634",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1192904634",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1192904634,
          "node_id": "IC_kwDOBN0Z8c5HGke6",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-22T20:16:25Z",
          "updated_at": "2022-07-23T22:02:47Z",
          "author_association": "CONTRIBUTOR",
          "body": "~On hold until #95132 is resolved.~ => resolved",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1192904634/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1211055269",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1211055269",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1211055269,
          "node_id": "IC_kwDOBN0Z8c5ILzyl",
          "user": {
            "login": "AlexWaygood",
            "id": 66076021,
            "node_id": "MDQ6VXNlcjY2MDc2MDIx",
            "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AlexWaygood",
            "html_url": "https://github.com/AlexWaygood",
            "followers_url": "https://api.github.com/users/AlexWaygood/followers",
            "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
            "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
            "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
            "repos_url": "https://api.github.com/users/AlexWaygood/repos",
            "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-10T17:51:52Z",
          "updated_at": "2022-08-10T17:51:52Z",
          "author_association": "MEMBER",
          "body": "Oh, is ```:pep:`249`-compliant``` invalid ReST markup? That's a shame, it's better grammatically :(",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1211055269/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1214827363",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1214827363",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1214827363,
          "node_id": "IC_kwDOBN0Z8c5IaMtj",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-15T09:42:28Z",
          "updated_at": "2022-08-15T09:42:28Z",
          "author_association": "CONTRIBUTOR",
          "body": "I believe the added docs are in a pretty good shape now. I'll try to get MAL to do a review of the semantics of setting the autocommit attribute.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1214827363/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1295448806",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1295448806",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1295448806,
          "node_id": "IC_kwDOBN0Z8c5NNvrm",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-10-28T20:45:49Z",
          "updated_at": "2022-10-28T20:48:16Z",
          "author_association": "CONTRIBUTOR",
          "body": "@malemburg, there is one corner case that just came to mind. Consider the following code:\r\n\r\n```python\r\nimport sqlite3\r\ncx = sqlite3.connect(\":memory:\", autocommit=False)\r\ncx.execute(\"create table t(t unique)\")\r\ndata = [(1,), (2,), (2,), (3,)]\r\ntry:\r\n    cx.executemany(\"insert or rollback into t values(?)\", data)\r\nexcept sqlite3.IntegrityError:\r\n    pass\r\nassert cx.in_transaction is True  # this will fail\r\n```\r\n\r\nWe _can_ guard against this by checking for `SQLITE_CONSTRAINT` result codes in `_pysqlite_query_execute()` and implicitly open a new transaction if the existing one was closed by the implicit rollback. _But_, I don't think it is worth it; I prefer to keep the `autocommit` implementation as straight-forward as possible. If users _want_ to shoot themselves in the foot, the may just as well do so.\r\n\r\nTaking this thought a little bit further; executing `INSERT OR ROLLBACK` while in `autocommit=False` mode makes as little sense as executing any other explicit transaction control in that mode. So, let's not guard against it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1295448806/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1295462463",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1295462463",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1295462463,
          "node_id": "IC_kwDOBN0Z8c5NNzA_",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-10-28T21:00:59Z",
          "updated_at": "2022-10-28T21:00:59Z",
          "author_association": "CONTRIBUTOR",
          "body": "All right, I think I'm ready to land this PR soon. I'll go over it a few times more myself the next days; will probably merge it on Sunday or Monday.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1295462463/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1295772855",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1295772855",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1295772855,
          "node_id": "IC_kwDOBN0Z8c5NO-y3",
          "user": {
            "login": "malemburg",
            "id": 6735498,
            "node_id": "MDQ6VXNlcjY3MzU0OTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6735498?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/malemburg",
            "html_url": "https://github.com/malemburg",
            "followers_url": "https://api.github.com/users/malemburg/followers",
            "following_url": "https://api.github.com/users/malemburg/following{/other_user}",
            "gists_url": "https://api.github.com/users/malemburg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/malemburg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/malemburg/subscriptions",
            "organizations_url": "https://api.github.com/users/malemburg/orgs",
            "repos_url": "https://api.github.com/users/malemburg/repos",
            "events_url": "https://api.github.com/users/malemburg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/malemburg/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-10-29T08:36:28Z",
          "updated_at": "2022-10-29T08:36:28Z",
          "author_association": "MEMBER",
          "body": "> Taking this thought a little bit further; executing `INSERT OR ROLLBACK` while in `autocommit=False` mode makes as little sense as executing any other explicit transaction control in that mode. So, let's not guard against it.\r\n\r\nThis is a general problem with exposing separate transaction APIs in DB-API modules: it is often still possible to use transaction statements in the executed SQL. Doing so will usually cause problems and is discouraged. There's nothing the modules can do and usually nothing the underlying database libraries can do either. The ODBC spec is full of warnings about this.\r\n\r\nIf programmers choose to mix the APIs with SQL transaction statements, they are on thin ice. We can warn about this, but that's it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1295772855/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1295773881",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1295773881",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1295773881,
          "node_id": "IC_kwDOBN0Z8c5NO_C5",
          "user": {
            "login": "malemburg",
            "id": 6735498,
            "node_id": "MDQ6VXNlcjY3MzU0OTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6735498?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/malemburg",
            "html_url": "https://github.com/malemburg",
            "followers_url": "https://api.github.com/users/malemburg/followers",
            "following_url": "https://api.github.com/users/malemburg/following{/other_user}",
            "gists_url": "https://api.github.com/users/malemburg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/malemburg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/malemburg/subscriptions",
            "organizations_url": "https://api.github.com/users/malemburg/orgs",
            "repos_url": "https://api.github.com/users/malemburg/repos",
            "events_url": "https://api.github.com/users/malemburg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/malemburg/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-10-29T08:42:08Z",
          "updated_at": "2022-10-29T09:08:50Z",
          "author_association": "MEMBER",
          "body": "BTW: I have started the `Connection.autocommit` discussion on DB-SIG. We'll have to see where things land, but there is concern about making the attribute writable. The main concern is that this may result in a network roundtrip, which would be impossible to handle in an async implementation (you can only await co-routines, not attribute access).\r\n\r\nThis is not relevant for SQLite (there is no network I/O to consider), but we may end up adding a new standard extension method e.g. `.set_autocommit() `to adjust the setting and only document the attribute` .autocommit` for querying the current state, leaving the writable semantics intentionally undocumented.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1295773881/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1295936161",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1295936161",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1295936161,
          "node_id": "IC_kwDOBN0Z8c5NPmqh",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-10-29T18:53:53Z",
          "updated_at": "2022-10-29T18:53:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "> BTW: I have started the `Connection.autocommit` discussion on DB-SIG. We'll have to see where things land, but there is concern about making the attribute writable. The main concern is that this may result in a network roundtrip, which would be impossible to handle in an async implementation (you can only await co-routines, not attribute access).\r\n> \r\n> This is not relevant for SQLite (there is no network I/O to consider), but we may end up adding a new standard extension method e.g. `.set_autocommit() `to adjust the setting and only document the attribute` .autocommit` for querying the current state, leaving the writable semantics intentionally undocumented.\r\n\r\nThanks, yes I'm following the discussion. I'll hold this PR a little bit further, in case the `autocommit` attribute ends up being read-only in PEP-249. We're far from the feature freeze, so I have no problems with leaving this open until things are settled. OTOH, we can of course merge now and just make the needed adaptions, as long as we are in the alpha phase.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1295936161/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1295942632",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1295942632",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1295942632,
          "node_id": "IC_kwDOBN0Z8c5NPoPo",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-10-29T19:15:31Z",
          "updated_at": "2022-10-30T21:26:37Z",
          "author_association": "CONTRIBUTOR",
          "body": "> If programmers choose to mix the APIs with SQL transaction statements, they are on thin ice. We can warn about this, but that's it.\r\n\r\n+1 -- I think we should warn about this in the docs. (I'll save that for another PR.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1295942632/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1296342111",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1296342111",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1296342111,
          "node_id": "IC_kwDOBN0Z8c5NRJxf",
          "user": {
            "login": "CAM-Gerlach",
            "id": 17051931,
            "node_id": "MDQ6VXNlcjE3MDUxOTMx",
            "avatar_url": "https://avatars.githubusercontent.com/u/17051931?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CAM-Gerlach",
            "html_url": "https://github.com/CAM-Gerlach",
            "followers_url": "https://api.github.com/users/CAM-Gerlach/followers",
            "following_url": "https://api.github.com/users/CAM-Gerlach/following{/other_user}",
            "gists_url": "https://api.github.com/users/CAM-Gerlach/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CAM-Gerlach/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CAM-Gerlach/subscriptions",
            "organizations_url": "https://api.github.com/users/CAM-Gerlach/orgs",
            "repos_url": "https://api.github.com/users/CAM-Gerlach/repos",
            "events_url": "https://api.github.com/users/CAM-Gerlach/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CAM-Gerlach/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-10-30T20:16:34Z",
          "updated_at": "2022-10-30T20:16:34Z",
          "author_association": "MEMBER",
          "body": "Would a real warning be feasible? E.g. checking the input SQL queries for the `ROLLBACK`, `BEGIN`, `COMMIT`, etc keywords (as relevant)? Or would that be either out of scope or not practical here?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1296342111/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1296346323",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1296346323",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1296346323,
          "node_id": "IC_kwDOBN0Z8c5NRKzT",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-10-30T20:39:23Z",
          "updated_at": "2022-10-30T20:39:23Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Would a real warning be feasible? E.g. checking the input SQL queries for the `ROLLBACK`, `BEGIN`, `COMMIT`, etc keywords (as relevant)? Or would that be either out of scope or not practical here?\r\n\r\nI consider it not practical. The SQL dialect of SQLite is an evolving thing; there would always be a chance that we'd not catch a future variant of a transaction control query. Also, I really don't want to add an SQL parser to the sqlite3 module (added complexity, performance penalty, ...).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1296346323/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1296352593",
          "html_url": "https://github.com/python/cpython/pull/93823#issuecomment-1296352593",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/93823",
          "id": 1296352593,
          "node_id": "IC_kwDOBN0Z8c5NRMVR",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-10-30T21:14:53Z",
          "updated_at": "2022-10-30T21:14:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "@CAM-Gerlach, thanks for your thorough review. I agree with most of your remarks. I agree it is a good thing to update the tutorial and the doctests according to the new recommendations, but I'll save that for a future PR (in time for 3.12 release of course).\r\n\r\nAs I mentioned in an earlier comment (and now on the issue), I don't think it is wise to deprecate anything (related to this feature) in 3.12. I've removed deprecation notices from the docs in this PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1296352593/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/108382",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/108382/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/108382/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/108382/events",
      "html_url": "https://github.com/python/cpython/pull/108382",
      "id": 1864070516,
      "node_id": "PR_kwDOBN0Z8c5YoyRC",
      "number": 108382,
      "title": "gh-108277: Add wrapper for timerfd_create, timerfd_settime, and timerfd_gettime to os module",
      "user": {
        "login": "m-tmatma",
        "id": 5567450,
        "node_id": "MDQ6VXNlcjU1Njc0NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m-tmatma",
        "html_url": "https://github.com/m-tmatma",
        "followers_url": "https://api.github.com/users/m-tmatma/followers",
        "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
        "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
        "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
        "repos_url": "https://api.github.com/users/m-tmatma/repos",
        "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 41,
      "created_at": "2023-08-23T21:54:34Z",
      "updated_at": "2023-10-08T21:45:35Z",
      "closed_at": "2023-10-07T17:33:22Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/108382",
        "html_url": "https://github.com/python/cpython/pull/108382",
        "diff_url": "https://github.com/python/cpython/pull/108382.diff",
        "patch_url": "https://github.com/python/cpython/pull/108382.patch",
        "merged_at": "2023-10-07T17:33:22Z"
      },
      "body": "Add wrapper for timerfd system calls.\r\n\r\n<!-- gh-issue-number: gh-108277 -->\r\n* Issue: gh-108277\r\n<!-- /gh-issue-number -->\r\n\r\nNote: local test\r\n\r\n```\r\npython3 Tools/clinic/clinic.py -f Modules/posixmodule.c &&  \\\r\nautoconf -i && \\\r\n./configure && \\\r\nmake regen-configure && \\\r\nmake -j4 regen-all   && \\\r\nmake regen-stdlib-module-names &&  \\\r\nmake test TESTOPTS=\"-v test_os\" && \\\r\nmake -C Doc venv && make -C Doc html\r\n```\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\r\n:books: Documentation preview :books:: https://cpython-previews--108382.org.readthedocs.build/\r\n\r\n<!-- readthedocs-preview cpython-previews end -->\r\n\r\n- https://cpython-previews--108382.org.readthedocs.build/en/108382/library/os.html\r\n- https://cpython-previews--108382.org.readthedocs.build/en/108382/whatsnew/3.13.html",
      "closed_by": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/108382/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/108382/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1690696579",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1690696579",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1690696579,
          "node_id": "IC_kwDOBN0Z8c5kxfuD",
          "user": {
            "login": "ghost",
            "id": 10137,
            "node_id": "MDQ6VXNlcjEwMTM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following{/other_user}",
            "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-23T21:54:36Z",
          "updated_at": "2023-09-06T20:07:26Z",
          "author_association": "NONE",
          "body": "All commit authors signed the Contributor License Agreement. <br/> [![CLA signed](https://cpython-clabot.herokuapp.com/cla-signed.svg)](https://cpython-clabot.herokuapp.com/signed-contributor-license-agreement?version=96a49432-b8b1-11ec-9bf5-bfe9ad6c72c4)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1690696579/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1690696631",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1690696631",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1690696631,
          "node_id": "IC_kwDOBN0Z8c5kxfu3",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-23T21:54:39Z",
          "updated_at": "2023-08-30T08:57:29Z",
          "author_association": "NONE",
          "body": "Most changes to Python [require a NEWS entry](https://devguide.python.org/committing/#updating-news-and-what-s-new-in-python).\n\nPlease add it using the [blurb_it](https://blurb-it.herokuapp.com) web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1690696631/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1690697843",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1690697843",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1690697843,
          "node_id": "IC_kwDOBN0Z8c5kxgBz",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-23T21:55:56Z",
          "updated_at": "2023-08-30T08:57:22Z",
          "author_association": "NONE",
          "body": "Most changes to Python [require a NEWS entry](https://devguide.python.org/committing/#updating-news-and-what-s-new-in-python).\n\nPlease add it using the [blurb_it](https://blurb-it.herokuapp.com) web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1690697843/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1690699595",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1690699595",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1690699595,
          "node_id": "IC_kwDOBN0Z8c5kxgdL",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-23T21:57:45Z",
          "updated_at": "2023-08-30T08:57:16Z",
          "author_association": "NONE",
          "body": "Most changes to Python [require a NEWS entry](https://devguide.python.org/committing/#updating-news-and-what-s-new-in-python).\n\nPlease add it using the [blurb_it](https://blurb-it.herokuapp.com) web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1690699595/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1695056193",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1695056193",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1695056193,
          "node_id": "IC_kwDOBN0Z8c5lCIFB",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-28T05:55:17Z",
          "updated_at": "2023-08-28T05:55:17Z",
          "author_association": "MEMBER",
          "body": "Please add also an entry in the What's New file.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1695056193/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1695358448",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1695358448",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1695358448,
          "node_id": "IC_kwDOBN0Z8c5lDR3w",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-28T09:30:05Z",
          "updated_at": "2023-08-28T09:30:05Z",
          "author_association": "CONTRIBUTOR",
          "body": "Just a heads-up, @m-tmatma: please don't force-push; instead, `git merge --no-ff main`. It makes for a better review experience, since both CI runs and comments can be tied to specific commits.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1695358448/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1695413785",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1695413785",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1695413785,
          "node_id": "IC_kwDOBN0Z8c5lDfYZ",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-28T10:09:11Z",
          "updated_at": "2023-08-28T10:09:11Z",
          "author_association": "CONTRIBUTOR",
          "body": "@erlend-aasland \r\n\r\n> Just a heads-up, @m-tmatma: please don't force-push; instead, `git merge --no-ff main`. It makes for a better review experience, since both CI runs and comments can be tied to specific commits.\r\n\r\nSorry, I thought force-push is a manner to contribute.\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1695413785/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1695437551",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1695437551",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1695437551,
          "node_id": "IC_kwDOBN0Z8c5lDlLv",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-28T10:26:32Z",
          "updated_at": "2023-08-28T10:26:32Z",
          "author_association": "CONTRIBUTOR",
          "body": "@serhiy-storchaka\r\n\r\n> Please add also an entry in the What's New file.\r\n\r\nAdded.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1695437551/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1695446434",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1695446434",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1695446434,
          "node_id": "IC_kwDOBN0Z8c5lDnWi",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-28T10:33:42Z",
          "updated_at": "2023-08-28T10:33:42Z",
          "author_association": "CONTRIBUTOR",
          "body": "@serhiy-storchaka \r\n\r\n> In general LGTM, but we must first discuss what exactly we want to get.\r\n\r\nIs this the right place to discuss?\r\n\r\nhttps://discuss.python.org/c/core-dev/23",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1695446434/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1698751731",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1698751731",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1698751731,
          "node_id": "IC_kwDOBN0Z8c5lQOTz",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-30T08:46:32Z",
          "updated_at": "2023-08-30T08:46:32Z",
          "author_association": "MEMBER",
          "body": "> Is this the right place to discuss?\r\n> https://discuss.python.org/c/core-dev/23\r\n\r\nYes, it is, but since we already attracted the attention of our main expert for time functions (@vstinner), there may be no longer a need in it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1698751731/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1699897600",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1699897600",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1699897600,
          "node_id": "IC_kwDOBN0Z8c5lUmEA",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-30T21:51:52Z",
          "updated_at": "2023-08-30T21:51:52Z",
          "author_association": "CONTRIBUTOR",
          "body": "@AA-Turner \r\nCould you re-review?\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1699897600/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1704072865",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1704072865",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1704072865,
          "node_id": "IC_kwDOBN0Z8c5lkhah",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-03T09:47:33Z",
          "updated_at": "2023-09-03T09:47:33Z",
          "author_association": "CONTRIBUTOR",
          "body": "@AA-Turner \r\n> On API usage, I think all the functions should have _fd_ as positional only and the other arguments as kwonly, eg `def timerfd_settime(fd, /, *, flags, interval, initial_expiration)`. I also think _flags_ should default to 0 at least for timer creation.\r\n\r\nChanged to your suggestion.\r\n\r\n\r\n> What happens if a negative number is passed to settime? This should be documented.\r\n\r\nDocumented.\r\nIt raise an exception.\r\n\r\n> I also think we should try to abstract away from C a little more, the manpage can talk about the gory details.\r\n\r\nImproved.\r\n\r\n> I've pushed a commit with an intitial docs review, feel free to revert / ask on any parts!\r\n\r\nThank you.\r\nI also updated the document.\r\n\r\nPlease re-review again.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1704072865/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1712495303",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1712495303",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1712495303,
          "node_id": "IC_kwDOBN0Z8c5mEprH",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-09T12:03:02Z",
          "updated_at": "2023-09-09T12:03:02Z",
          "author_association": "CONTRIBUTOR",
          "body": "@AA-Turner \r\nPlease re-review.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1712495303/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1722818496",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1722818496",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1722818496,
          "node_id": "IC_kwDOBN0Z8c5msB_A",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-18T06:27:09Z",
          "updated_at": "2023-09-18T06:27:09Z",
          "author_association": "CONTRIBUTOR",
          "body": "@AA-Turner \r\nCould you re-review?\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1722818496/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1732296591",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1732296591",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1732296591,
          "node_id": "IC_kwDOBN0Z8c5nQL-P",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-23T12:17:27Z",
          "updated_at": "2023-09-23T12:17:48Z",
          "author_association": "CONTRIBUTOR",
          "body": "The message I wrote has disappeared after I had pushed.\r\nSo I re-send.\r\n\r\n> https://github.com/python/cpython/pull/108382#discussion_r1334888781\r\n> For example, setting an interval of 2 seconds via this function and 2**9 seconds via :func:`timerfd_settime_ns` will make the actual interval of the timer file descriptor **4 seconds**, not 2.\r\n\r\n@AA-Turner\r\nWhat do you mean?\r\nI'm not sure what is your concerns.\r\n\r\nSetting an interval of 2 seconds via timerfd_settime will make the time file descriptor in every 2 seconds.\r\n\r\nSetting an interval of 2**9 seconds(you mean 512 seconds?) via timerfd_settime_ns will make the time file descriptor in every 512 seconds.\r\n\r\nAnd the original comment no longer exists on the lastest branch.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1732296591/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1732308617",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1732308617",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1732308617,
          "node_id": "IC_kwDOBN0Z8c5nQO6J",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-23T12:35:02Z",
          "updated_at": "2023-09-23T12:35:02Z",
          "author_association": "CONTRIBUTOR",
          "body": "@AA-Turner \r\n\r\nhttps://github.com/python/cpython/pull/108382#discussion_r1334883496\r\n\r\n> You marked this \"resolved\", but the examples remain in-line. Is there a comment I missed?\r\n\r\nWhich thread are you talking about?\r\n\r\n(I'm writing as new thread because I can't reply to your comment now on GitHub)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1732308617/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1732313547",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1732313547",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1732313547,
          "node_id": "IC_kwDOBN0Z8c5nQQHL",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-23T13:01:15Z",
          "updated_at": "2023-09-23T13:01:15Z",
          "author_association": "CONTRIBUTOR",
          "body": "@AA-Turner \r\nThis PR has a lot of comments and it seems some of messages were lost or can't be accessed.\r\nSo it's difficult to track and discuss.\r\n\r\nI'd like to suggest to create a new PR based on this branch.\r\nWhat do you think?\r\n\r\n@serhiy-storchaka @erlend-aasland @corona10\r\n\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1732313547/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1732428371",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1732428371",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1732428371,
          "node_id": "IC_kwDOBN0Z8c5nQsJT",
          "user": {
            "login": "AA-Turner",
            "id": 9087854,
            "node_id": "MDQ6VXNlcjkwODc4NTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9087854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AA-Turner",
            "html_url": "https://github.com/AA-Turner",
            "followers_url": "https://api.github.com/users/AA-Turner/followers",
            "following_url": "https://api.github.com/users/AA-Turner/following{/other_user}",
            "gists_url": "https://api.github.com/users/AA-Turner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AA-Turner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AA-Turner/subscriptions",
            "organizations_url": "https://api.github.com/users/AA-Turner/orgs",
            "repos_url": "https://api.github.com/users/AA-Turner/repos",
            "events_url": "https://api.github.com/users/AA-Turner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AA-Turner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-23T23:04:41Z",
          "updated_at": "2023-09-23T23:06:17Z",
          "author_association": "MEMBER",
          "body": "GitHub's review interface can get a bit broken... Below I've written a mailing list style response:\r\n\r\n>> These two examples feel out-of-place in the documentation for timerfd_create specifically. How about adding a new subheading for timer file descriptions (to include all 5 functions / 4 flags) and put the examples in the introduction to this new subsection?\r\n> \r\n> I don't have enough knowledge on rst. Could you suggest it concretely?\r\n\r\nI've pushed a commit adding the new subsection. There's a comment in an example I don't understand, I've marked it with \"XXX\". It might also be worth adding an example showing the \"proper\" way of using a timerfd with a `while True:` and a `break` clause, I don't know what you think?\r\n\r\n----\r\n\r\n>>  This behaviour is surprising. I'd expect that using the nanosecond version of the function overrides any previous values, and vice-versa with the float version of the function -- but it seems their values are combined. I think users should be warned of this behaviour.\r\n>\r\n> I'm not sure what is your concerns.\r\n>\r\n> Setting an interval of 2 seconds via timerfd_settime will make the time file descriptor in every 2 seconds.\r\n>\r\n> Setting an interval of 2**9 seconds(you mean 512 seconds?) via timerfd_settime_ns will make the time file descriptor in every 512 seconds.\r\n\r\nI unhelpfully got the numbers wrong, I meant $2 \\cdot 10^9$ nanoseconds (two seconds in nanoseconds). Basically if I run the following, I think currently I will get a timer that fires every 4 seconds, which I think is a misleading (easily misused) API:\r\n\r\n```python\r\nimport os,time\r\nfd = os.timerfd_create(time.CLOCK_REALTIME)\r\nos.timerfd_settime(fd, initial=0, interval=2)  # set a 2 second interval\r\n...  # lots of code, I now want to change the settings of the timerfd\r\nos.timerfd_settime_ns(fd, initial=0, interval=2 * 10**9)  # but now the interval is 2.0 seconds + 2*10**9 nanoseconds == 4.0 seconds?!?!\r\n```\r\n\r\nTo me, they feel like orthagonal APIs -- you can set the time with a float (simple API, 2.5 == 2.5 seconds), or to avoid float precision issues you can use nanoseconds -- I would be surprised as a reader to learn that they are additive and persistent. Hence why I strongly think that if you don't agree to changing the behaviour (my preference), we add a **big red warning** in the docs for the reader.\r\n\r\n-----\r\n\r\n>>>> Is there any way to query the internal clock given an arbitrary timerfd?\r\n>>> I think there is no such operation.\r\n>>\r\n>> Should we add one?\r\n>\r\n> You mean we should save the internal clock inside and return the saved value if requested?\r\n\r\nYes, I think given some operations rely on the internal clock, and you might not be the one creating the timerfd, there should be some ability to try and find out what the internal clock is. (If this only works for file descriptors created by Python I think that's manageable)\r\n\r\n-----\r\n\r\n>>> ```rst\r\n>>> If it is set as a flag, :func:`read` doesn't block, but if there is no timer expiration,\r\n>>> :func:`read` raises :class:`OSError` with ``errno`` is set to :const:`errno.EAGAIN`.\r\n>>> ```\r\n>>\r\n>> \"no timer expiration\" -- does this mean if the timer won't expire, or if there hasn't been an expiration since the last call to read?\r\n>\r\n>  Yes. Exactly.\r\n\r\nI don't understand this response sorry -- I intended the question as \"either X or Y\" and you responded \"both\"! (If it is both, could we clarify this in the docs?)\r\n\r\n----\r\n\r\n>>> ```diff\r\n>>> -.. function:: timerfd_settime(fd, /, *, flags=flags, initial=0.0, interval=0.0)\r\n>>> +.. function:: timerfd_settime(fd, flags=0, /, *, initial=0.0, interval=0.0)\r\n>>> ```\r\n>>\r\n>> Why did we revert to having flags pos-only?\r\n>\r\n>  I changed keyword arg, but as I said earlier, I coudn't make it dual arg for pos/keywork. If you can, please share the concrete way or push the branch directly.\r\n\r\nI'll have a look. I think we could make it pos-or-keyword if needed.\r\n\r\n-----\r\n\r\n>> Can we provide an example of what would cause a discontinuous system clock change? I'm unsure if we should list something that does not cause a discontinuous change.\r\n>\r\n> man7.org/linux/man-pages/man2/timerfd_create.2.html\r\n\r\nAhh, so it's if the user changes the time? Could we add a link in the docs to somewhere in the Linux manual where this is described, if possible please?\r\n\r\n-------\r\n\r\nA final thought I had -- we note in the docs that users must call ``os.close``. Would it be possible in the current implementation to emit a ``ResourceWarning`` on Python shutdown (or some other appropriate place) if we have dangling timerfds? If this should be done as a later improvement rather than in this PR then happy to capture this point on the issue rather than here, I don't think it's a blocking suggestion.\r\n\r\nA\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1732428371/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1732514294",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1732514294",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1732514294,
          "node_id": "IC_kwDOBN0Z8c5nRBH2",
          "user": {
            "login": "m-tmatma",
            "id": 5567450,
            "node_id": "MDQ6VXNlcjU1Njc0NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567450?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-tmatma",
            "html_url": "https://github.com/m-tmatma",
            "followers_url": "https://api.github.com/users/m-tmatma/followers",
            "following_url": "https://api.github.com/users/m-tmatma/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-tmatma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-tmatma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-tmatma/subscriptions",
            "organizations_url": "https://api.github.com/users/m-tmatma/orgs",
            "repos_url": "https://api.github.com/users/m-tmatma/repos",
            "events_url": "https://api.github.com/users/m-tmatma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-tmatma/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-24T08:00:30Z",
          "updated_at": "2023-09-24T08:00:30Z",
          "author_association": "CONTRIBUTOR",
          "body": "@AA-Turner \r\n\r\nI'll answer some of questions for now.\r\n\r\n> > > These two examples feel out-of-place in the documentation for timerfd_create specifically. How about adding a new subheading for timer file descriptions (to include all 5 functions / 4 flags) and put the examples in the introduction to this new subsection?\r\n> > \r\n> > \r\n> > I don't have enough knowledge on rst. Could you suggest it concretely?\r\n> \r\n> I've pushed a commit adding the new subsection. There's a comment in an example I don't understand, I've marked it with \"XXX\". It might also be worth adding an example showing the \"proper\" way of using a timerfd with a `while True:` and a `break` clause, I don't know what you think?\r\n\r\nUpdated sample code.\r\n\r\n> > > > ```\r\n> > > > If it is set as a flag, :func:`read` doesn't block, but if there is no timer expiration,\r\n> > > > :func:`read` raises :class:`OSError` with ``errno`` is set to :const:`errno.EAGAIN`.\r\n> > > > ```\r\n> > > \r\n> > > \r\n> > > \"no timer expiration\" -- does this mean if the timer won't expire, or if there hasn't been an expiration since the last call to read?\r\n> > \r\n> > \r\n> > Yes. Exactly.\r\n> \r\n> I don't understand this response sorry -- I intended the question as \"either X or Y\" and you responded \"both\"! (If it is both, could we clarify this in the docs?)\r\n\r\nSorry, I misunderstood the question.\r\nMade it clear.\r\n\r\n> > \r\n> > I changed keyword arg, but as I said earlier, I coudn't make it dual arg for pos/keywork. If you can, please share the concrete way or push the branch directly.\r\n> \r\n> I'll have a look. I think we could make it pos-or-keyword if needed.\r\n\r\nThank you.\r\n\r\n> > > Can we provide an example of what would cause a discontinuous system clock change? I'm unsure if we should list something that does not cause a discontinuous change.\r\n> > \r\n> > \r\n> > man7.org/linux/man-pages/man2/timerfd_create.2.html\r\n> \r\n> Ahh, so it's if the user changes the time? Could we add a link in the docs to somewhere in the Linux manual where this is described, if possible please?\r\n\r\nAdded document.\r\n\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1732514294/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1732516958",
          "html_url": "https://github.com/python/cpython/pull/108382#issuecomment-1732516958",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/108382",
          "id": 1732516958,
          "node_id": "IC_kwDOBN0Z8c5nRBxe",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-24T08:13:00Z",
          "updated_at": "2023-09-24T08:13:00Z",
          "author_association": "MEMBER",
          "body": "> This PR has a lot of comments and it seems some of messages were lost or can't be accessed.\r\n> So it's difficult to track and discuss.\r\n\r\nYou can find all messages in your mailbox. For now, the thread contains 197 messages.\r\n\r\nAlso, on the \"Files changed\" tab you can find \"Conversations\" menu. It currently contains 14 unresolved conversations and 63 resolved conversations.\r\n\r\nSuch large number of messages makes difficult following the discussion. To make it easier I suggest to post your comments in batches. From the \"Files changed\" tab you can add new comments and reply to old comments, but press \"Start a review\" instead of \"Add single comment\", and then press \"Finish your review\" at top left corner after adding all comments. You can freely edit and remove your comments before finishing your review if you found that other comment answers your question or that there is better place for your comment.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1732516958/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/102256",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/102256/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/102256/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/102256/events",
      "html_url": "https://github.com/python/cpython/pull/102256",
      "id": 1599803136,
      "node_id": "PR_kwDOBN0Z8c5KwuMF",
      "number": 102256,
      "title": "gh-102255: Improve build support on xbox",
      "user": {
        "login": "maxbachmann",
        "id": 44199644,
        "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maxbachmann",
        "html_url": "https://github.com/maxbachmann",
        "followers_url": "https://api.github.com/users/maxbachmann/followers",
        "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
        "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
        "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
        "repos_url": "https://api.github.com/users/maxbachmann/repos",
        "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
        "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018672955,
          "node_id": "LA_kwDOBN0Z8c7viBU7",
          "url": "https://api.github.com/repos/python/cpython/labels/extension-modules",
          "name": "extension-modules",
          "color": "09fc59",
          "default": false,
          "description": "C modules in the Modules dir"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 12,
      "created_at": "2023-02-25T19:11:36Z",
      "updated_at": "2023-03-09T21:10:36Z",
      "closed_at": "2023-03-09T21:09:13Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/102256",
        "html_url": "https://github.com/python/cpython/pull/102256",
        "diff_url": "https://github.com/python/cpython/pull/102256.diff",
        "patch_url": "https://github.com/python/cpython/pull/102256.patch",
        "merged_at": "2023-03-09T21:09:13Z"
      },
      "body": "<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\ngh-NNNNN: Summary of the changes made\r\n```\r\n\r\nWhere: gh-NNNNN refers to the GitHub issue number.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `main`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `main`.\r\n\r\n-->\r\n\n\n<!-- gh-issue-number: gh-102255 -->\n* Issue: gh-102255\n<!-- /gh-issue-number -->\n",
      "closed_by": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/102256/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/102256/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1445369665",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1445369665",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1445369665,
          "node_id": "IC_kwDOBN0Z8c5WJpdB",
          "user": {
            "login": "maxbachmann",
            "id": 44199644,
            "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
            "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbachmann",
            "html_url": "https://github.com/maxbachmann",
            "followers_url": "https://api.github.com/users/maxbachmann/followers",
            "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
            "repos_url": "https://api.github.com/users/maxbachmann/repos",
            "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-02-26T14:03:10Z",
          "updated_at": "2023-02-26T14:03:10Z",
          "author_association": "CONTRIBUTOR",
          "body": "With this patchset I am now able to compile + link python 3.11 on the xbox.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1445369665/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1446913218",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1446913218",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1446913218,
          "node_id": "IC_kwDOBN0Z8c5WPiTC",
          "user": {
            "login": "maxbachmann",
            "id": 44199644,
            "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
            "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbachmann",
            "html_url": "https://github.com/maxbachmann",
            "followers_url": "https://api.github.com/users/maxbachmann/followers",
            "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
            "repos_url": "https://api.github.com/users/maxbachmann/repos",
            "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-02-27T19:15:45Z",
          "updated_at": "2023-02-27T19:15:45Z",
          "author_association": "CONTRIBUTOR",
          "body": "The missing `os._path_splitroot` breaks `_bootstrap_external.py`",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1446913218/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1452712783",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1452712783",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1452712783,
          "node_id": "IC_kwDOBN0Z8c5WlqNP",
          "user": {
            "login": "maxbachmann",
            "id": 44199644,
            "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
            "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbachmann",
            "html_url": "https://github.com/maxbachmann",
            "followers_url": "https://api.github.com/users/maxbachmann/followers",
            "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
            "repos_url": "https://api.github.com/users/maxbachmann/repos",
            "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-02T23:20:20Z",
          "updated_at": "2023-03-02T23:20:20Z",
          "author_association": "CONTRIBUTOR",
          "body": "It is completely unclear to me how this commit leads to an assertion error",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1452712783/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1456360904",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1456360904",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1456360904,
          "node_id": "IC_kwDOBN0Z8c5Wzk3I",
          "user": {
            "login": "zooba",
            "id": 1693688,
            "node_id": "MDQ6VXNlcjE2OTM2ODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zooba",
            "html_url": "https://github.com/zooba",
            "followers_url": "https://api.github.com/users/zooba/followers",
            "following_url": "https://api.github.com/users/zooba/following{/other_user}",
            "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
            "organizations_url": "https://api.github.com/users/zooba/orgs",
            "repos_url": "https://api.github.com/users/zooba/repos",
            "events_url": "https://api.github.com/users/zooba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zooba/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-06T15:36:05Z",
          "updated_at": "2023-03-06T15:36:05Z",
          "author_association": "MEMBER",
          "body": "This looks like it's ready, or very close. @maxbachmann, @eryksun is there anything left to do here? I don't mind it being done in future PRs if they're necessary.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1456360904/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1456390778",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1456390778",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1456390778,
          "node_id": "IC_kwDOBN0Z8c5WzsJ6",
          "user": {
            "login": "maxbachmann",
            "id": 44199644,
            "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
            "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbachmann",
            "html_url": "https://github.com/maxbachmann",
            "followers_url": "https://api.github.com/users/maxbachmann/followers",
            "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
            "repos_url": "https://api.github.com/users/maxbachmann/repos",
            "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-06T15:52:18Z",
          "updated_at": "2023-03-06T15:52:18Z",
          "author_association": "CONTRIBUTOR",
          "body": "I am done with everything I planned for this PR. As suggested by @eryksun I plan to extend the `sys` module to retrieve the api partition. I will add this in a separate PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1456390778/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1456408898",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1456408898",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1456408898,
          "node_id": "IC_kwDOBN0Z8c5WzwlC",
          "user": {
            "login": "zooba",
            "id": 1693688,
            "node_id": "MDQ6VXNlcjE2OTM2ODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zooba",
            "html_url": "https://github.com/zooba",
            "followers_url": "https://api.github.com/users/zooba/followers",
            "following_url": "https://api.github.com/users/zooba/following{/other_user}",
            "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
            "organizations_url": "https://api.github.com/users/zooba/orgs",
            "repos_url": "https://api.github.com/users/zooba/repos",
            "events_url": "https://api.github.com/users/zooba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zooba/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-06T16:01:47Z",
          "updated_at": "2023-03-06T16:01:47Z",
          "author_association": "MEMBER",
          "body": "> I plan to extend the `sys` module to retrieve the api partition. I will add this in a separate PR.\r\n\r\nGive that a new issue as well. We really ought to add the platform to `sys.implementation` as well, since currently it's a bit weird to check for 32-bit vs 64-bit vs ARM64 as well (`sys.winver` is the only way). I assume that would be where the API partition is indicated, too.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1456408898/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1461985807",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1461985807",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1461985807,
          "node_id": "IC_kwDOBN0Z8c5XJCIP",
          "user": {
            "login": "zooba",
            "id": 1693688,
            "node_id": "MDQ6VXNlcjE2OTM2ODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zooba",
            "html_url": "https://github.com/zooba",
            "followers_url": "https://api.github.com/users/zooba/followers",
            "following_url": "https://api.github.com/users/zooba/following{/other_user}",
            "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
            "organizations_url": "https://api.github.com/users/zooba/orgs",
            "repos_url": "https://api.github.com/users/zooba/repos",
            "events_url": "https://api.github.com/users/zooba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zooba/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-09T12:40:27Z",
          "updated_at": "2023-03-09T12:40:27Z",
          "author_association": "MEMBER",
          "body": "Okay, thanks for holding. What I'm hearing from my colleagues at Microsoft is that the `PathCch*` APIs are implemented in the Xbox OS, just not exposed through the partition or their import lib. It sounds like both of these will be fixed for an update later this year, at which point our original code will be fine. The only restriction seems to be that the APIs are not implemented on Win7, so even though games are meant to be compatible all the way back, if we were to use the API then it would not work.\r\n\r\nUntil the GDK update arrives, it _seems_ like we can probably use code like what we used to have to load the API dynamically (from `getpathp.c` in the 3.7 branch):\r\n\r\n```\r\nstatic int _PathCchCombineEx_Initialized = 0;\r\ntypedef HRESULT(__stdcall *PPathCchCombineEx) (PWSTR pszPathOut, size_t cchPathOut,\r\n                                               PCWSTR pszPathIn, PCWSTR pszMore,\r\n                                               unsigned long dwFlags);\r\nstatic PPathCchCombineEx _PathCchCombineEx;\r\n\r\n\r\nstatic void\r\njoin(wchar_t *buffer, const wchar_t *stuff)\r\n{\r\n    if (_PathCchCombineEx_Initialized == 0) {\r\n        HMODULE pathapi = LoadLibraryExW(L\"api-ms-win-core-path-l1-1-0.dll\", NULL,\r\n                                         LOAD_LIBRARY_SEARCH_SYSTEM32);\r\n        if (pathapi) {\r\n            _PathCchCombineEx = (PPathCchCombineEx)GetProcAddress(pathapi, \"PathCchCombineEx\");\r\n        }\r\n        else {\r\n            _PathCchCombineEx = NULL;\r\n        }\r\n        _PathCchCombineEx_Initialized = 1;\r\n    }\r\n\r\n\r\n    if (_PathCchCombineEx) {\r\n        if (FAILED(_PathCchCombineEx(buffer, MAXPATHLEN+1, buffer, stuff, 0))) {\r\n            Py_FatalError(\"buffer overflow in getpathp.c's join()\");\r\n        }\r\n    } else {\r\n        if (!PathCombineW(buffer, buffer, stuff)) {\r\n            Py_FatalError(\"buffer overflow in getpathp.c's join()\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n@maxbachmann Would you be able to give this approach a try and see if it works? Unfortunately, I don't think there's any way to detect the version of the games SDK involved, so we'd just have to keep this until we assume everyone's on the fixed update.\r\n\r\nIf it helps (and I suspect it won't), it also ought to be okay to temporarily define the PARTITION constants needed when including `pathcch.h`. It's more likely going to be better to _exclude_ the include statement in GAMES when we're defining a GetProcAddress wrapper, since that way we can define our own `PathCchCombineEx` implementation and it shouldn't collide with the real one until we choose to let it. You can probably even keep the existing implementation as a fallback for the (hopefully rare) cases where games may be running on Win7, but I'm happy to defer to you on that one, as you've likely got a better view of the gamedev landscape than I do.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1461985807/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1462142963",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1462142963",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1462142963,
          "node_id": "IC_kwDOBN0Z8c5XJofz",
          "user": {
            "login": "maxbachmann",
            "id": 44199644,
            "node_id": "MDQ6VXNlcjQ0MTk5NjQ0",
            "avatar_url": "https://avatars.githubusercontent.com/u/44199644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxbachmann",
            "html_url": "https://github.com/maxbachmann",
            "followers_url": "https://api.github.com/users/maxbachmann/followers",
            "following_url": "https://api.github.com/users/maxbachmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxbachmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxbachmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxbachmann/subscriptions",
            "organizations_url": "https://api.github.com/users/maxbachmann/orgs",
            "repos_url": "https://api.github.com/users/maxbachmann/repos",
            "events_url": "https://api.github.com/users/maxbachmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxbachmann/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-09T14:18:53Z",
          "updated_at": "2023-03-09T14:18:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Okay, thanks for holding. What I'm hearing from my colleagues at Microsoft is that the PathCch* APIs are implemented in the Xbox OS, just not exposed through the partition or their import lib. It sounds like both of these will be fixed for an update later this year, at which point our original code will be fine. \r\n\r\nYes I did read in the developer forums, that there is already an implementation as well. Great to hear that they are likely going to get exposed at some point.\r\n\r\n> Would you be able to give this approach a try and see if it works? Unfortunately, I don't think there's any way to detect the version of the games SDK involved, so we'd just have to keep this until we assume everyone's on the fixed update.\r\n\r\njust gave this a quick test and it works both on the Xbox One and Xbox Scarlett.\r\n\r\n> You can probably even keep the existing implementation as a fallback for the (hopefully rare) cases where games may be running on Win7, but I'm happy to defer to you on that one, as you've likely got a better view of the gamedev landscape than I do.\r\n\r\nI do not think we need to take Windows 7 into consideration here:\r\n1) Cpython overall does not support Windows 7 anymore\r\n2) when building games for the PC you can always build against the desktop partition. Right now you only really need to use the games partition on the xbox, which does not use Windows 7 anyways.\r\n3) even on PC the share of Windows 7 users is really slim. According to the current steam hardware survey around 1.5% of Windows users is on Windows 7: https://store.steampowered.com/hwsurvey/directx/",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1462142963/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 1,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1462382256",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1462382256",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1462382256,
          "node_id": "IC_kwDOBN0Z8c5XKi6w",
          "user": {
            "login": "zooba",
            "id": 1693688,
            "node_id": "MDQ6VXNlcjE2OTM2ODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zooba",
            "html_url": "https://github.com/zooba",
            "followers_url": "https://api.github.com/users/zooba/followers",
            "following_url": "https://api.github.com/users/zooba/following{/other_user}",
            "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
            "organizations_url": "https://api.github.com/users/zooba/orgs",
            "repos_url": "https://api.github.com/users/zooba/repos",
            "events_url": "https://api.github.com/users/zooba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zooba/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-09T16:38:51Z",
          "updated_at": "2023-03-09T16:38:51Z",
          "author_association": "MEMBER",
          "body": "!buildbot .*Windows.*",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1462382256/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1462382316",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1462382316",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1462382316,
          "node_id": "IC_kwDOBN0Z8c5XKi7s",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-09T16:38:54Z",
          "updated_at": "2023-03-09T16:38:54Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @zooba for commit 331b1f4289914c281c27f0974770bc572e31b7e3 :robot:\n\nThe command will test the builders whose names match following regular expression: `.*Windows.*`\n\nThe builders matched are:\n- `AMD64 Windows10 PR`\n- `ARM64 Windows Non-Debug PR`\n- `AMD64 Windows10 Pro PR`\n- `ARM64 Windows PR`\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1462382316/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1462384515",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1462384515",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1462384515,
          "node_id": "IC_kwDOBN0Z8c5XKjeD",
          "user": {
            "login": "zooba",
            "id": 1693688,
            "node_id": "MDQ6VXNlcjE2OTM2ODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zooba",
            "html_url": "https://github.com/zooba",
            "followers_url": "https://api.github.com/users/zooba/followers",
            "following_url": "https://api.github.com/users/zooba/following{/other_user}",
            "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
            "organizations_url": "https://api.github.com/users/zooba/orgs",
            "repos_url": "https://api.github.com/users/zooba/repos",
            "events_url": "https://api.github.com/users/zooba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zooba/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-09T16:40:11Z",
          "updated_at": "2023-03-09T16:40:11Z",
          "author_association": "MEMBER",
          "body": "There we go. I expect there'll be no buildbot issues, but worth double checking (there are some unrelated stack issues, so may still fail, but we can ignore those).\r\n\r\nOther than that, I'm happy to merge this whenever. @eryksun I'll wait for a positive signal from you.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1462384515/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1462829757",
          "html_url": "https://github.com/python/cpython/pull/102256#issuecomment-1462829757",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/102256",
          "id": 1462829757,
          "node_id": "IC_kwDOBN0Z8c5XMQK9",
          "user": {
            "login": "zooba",
            "id": 1693688,
            "node_id": "MDQ6VXNlcjE2OTM2ODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zooba",
            "html_url": "https://github.com/zooba",
            "followers_url": "https://api.github.com/users/zooba/followers",
            "following_url": "https://api.github.com/users/zooba/following{/other_user}",
            "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
            "organizations_url": "https://api.github.com/users/zooba/orgs",
            "repos_url": "https://api.github.com/users/zooba/repos",
            "events_url": "https://api.github.com/users/zooba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zooba/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-09T21:10:35Z",
          "updated_at": "2023-03-09T21:10:35Z",
          "author_association": "MEMBER",
          "body": "Thanks @maxbachmann! This was a huge effort, but I think it's worth it. Don't shy away from adjusting things we decided here if it seems important - nothing we changed should count as a public API change, so we can revert or modify if needed.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1462829757/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/10016",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/10016/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/10016/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/10016/events",
      "html_url": "https://github.com/python/cpython/pull/10016",
      "id": 372260998,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjI0NTA2NTk5",
      "number": 10016,
      "title": "bpo-37800: Clean up importlib documentation for some module attributes",
      "user": {
        "login": "geryogam",
        "id": 33548838,
        "node_id": "MDQ6VXNlcjMzNTQ4ODM4",
        "avatar_url": "https://avatars.githubusercontent.com/u/33548838?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/geryogam",
        "html_url": "https://github.com/geryogam",
        "followers_url": "https://api.github.com/users/geryogam/followers",
        "following_url": "https://api.github.com/users/geryogam/following{/other_user}",
        "gists_url": "https://api.github.com/users/geryogam/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/geryogam/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/geryogam/subscriptions",
        "organizations_url": "https://api.github.com/users/geryogam/orgs",
        "repos_url": "https://api.github.com/users/geryogam/repos",
        "events_url": "https://api.github.com/users/geryogam/events{/privacy}",
        "received_events_url": "https://api.github.com/users/geryogam/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 667924166,
          "node_id": "MDU6TGFiZWw2Njc5MjQxNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/skip%20news",
          "name": "skip news",
          "color": "000000",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 54,
      "created_at": "2018-10-20T23:02:30Z",
      "updated_at": "2021-11-16T21:42:54Z",
      "closed_at": "2021-11-16T19:59:45Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/10016",
        "html_url": "https://github.com/python/cpython/pull/10016",
        "diff_url": "https://github.com/python/cpython/pull/10016.diff",
        "patch_url": "https://github.com/python/cpython/pull/10016.patch",
        "merged_at": "2021-11-16T19:59:45Z"
      },
      "body": "<!-- issue-number: [bpo-37800](https://bugs.python.org/issue37800) -->\r\nhttps://bugs.python.org/issue37800\r\n<!-- /issue-number -->\n\nAutomerge-Triggered-By: GH:brettcannon",
      "closed_by": {
        "login": "miss-islington",
        "id": 31488909,
        "node_id": "MDQ6VXNlcjMxNDg4OTA5",
        "avatar_url": "https://avatars.githubusercontent.com/u/31488909?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/miss-islington",
        "html_url": "https://github.com/miss-islington",
        "followers_url": "https://api.github.com/users/miss-islington/followers",
        "following_url": "https://api.github.com/users/miss-islington/following{/other_user}",
        "gists_url": "https://api.github.com/users/miss-islington/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/miss-islington/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/miss-islington/subscriptions",
        "organizations_url": "https://api.github.com/users/miss-islington/orgs",
        "repos_url": "https://api.github.com/users/miss-islington/repos",
        "events_url": "https://api.github.com/users/miss-islington/events{/privacy}",
        "received_events_url": "https://api.github.com/users/miss-islington/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/10016/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/10016/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/431654982",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-431654982",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 431654982,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTY1NDk4Mg==",
          "user": {
            "login": "orlnub123",
            "id": 30984274,
            "node_id": "MDQ6VXNlcjMwOTg0Mjc0",
            "avatar_url": "https://avatars.githubusercontent.com/u/30984274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/orlnub123",
            "html_url": "https://github.com/orlnub123",
            "followers_url": "https://api.github.com/users/orlnub123/followers",
            "following_url": "https://api.github.com/users/orlnub123/following{/other_user}",
            "gists_url": "https://api.github.com/users/orlnub123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/orlnub123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/orlnub123/subscriptions",
            "organizations_url": "https://api.github.com/users/orlnub123/orgs",
            "repos_url": "https://api.github.com/users/orlnub123/repos",
            "events_url": "https://api.github.com/users/orlnub123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/orlnub123/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-10-21T09:58:48Z",
          "updated_at": "2018-10-21T10:02:18Z",
          "author_association": "CONTRIBUTOR",
          "body": "There seems to be some misconceptions here, a ModuleSpec object is different from the attributes set on modules. Those attributes do get set (or not set) based on the ModuleSpec object but the docs aren't referring to them.\r\n\r\nI think the confusion aroused from the format in which the docs present this information. The module's attributes don't exactly reflect the ModuleSpecs' from which they originate from as you've said, yet the docs act like they do. If there is a change to be had, I'd suggest clarifying that they aren't always equal or, if the behavior of `__loader__` for namespace packages changes, that they aren't always defined.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/431654982/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/431658949",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-431658949",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 431658949,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTY1ODk0OQ==",
          "user": {
            "login": "geryogam",
            "id": 33548838,
            "node_id": "MDQ6VXNlcjMzNTQ4ODM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/33548838?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/geryogam",
            "html_url": "https://github.com/geryogam",
            "followers_url": "https://api.github.com/users/geryogam/followers",
            "following_url": "https://api.github.com/users/geryogam/following{/other_user}",
            "gists_url": "https://api.github.com/users/geryogam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/geryogam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/geryogam/subscriptions",
            "organizations_url": "https://api.github.com/users/geryogam/orgs",
            "repos_url": "https://api.github.com/users/geryogam/repos",
            "events_url": "https://api.github.com/users/geryogam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/geryogam/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-10-21T10:55:51Z",
          "updated_at": "2018-10-21T15:09:50Z",
          "author_association": "CONTRIBUTOR",
          "body": "@orlnub123 I disagree here. The values of the attributes of a module and the attributes of its `__spec__` attribute  are equivalent, it is just that there are not synchronized, as the [documentation](https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec) already states clearly:\r\n\r\n> Note however that while the values are usually equivalent, they can differ since there is no synchronization between the two objects. Thus it is possible to update the module\u2019s \\_\\_path\\_\\_ at runtime, and this will not be automatically reflected in \\_\\_spec\\_\\_.submodule_search_locations.\r\n\r\nTry to import a namespace package and you will see that both `package.__spec__.loader` and `package.__loader__` attributes are not `None`, contrary to what the documentation states.\r\n\r\nAnd you can verify my three other claims as well.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/431658949/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/431664961",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-431664961",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 431664961,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTY2NDk2MQ==",
          "user": {
            "login": "orlnub123",
            "id": 30984274,
            "node_id": "MDQ6VXNlcjMwOTg0Mjc0",
            "avatar_url": "https://avatars.githubusercontent.com/u/30984274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/orlnub123",
            "html_url": "https://github.com/orlnub123",
            "followers_url": "https://api.github.com/users/orlnub123/followers",
            "following_url": "https://api.github.com/users/orlnub123/following{/other_user}",
            "gists_url": "https://api.github.com/users/orlnub123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/orlnub123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/orlnub123/subscriptions",
            "organizations_url": "https://api.github.com/users/orlnub123/orgs",
            "repos_url": "https://api.github.com/users/orlnub123/repos",
            "events_url": "https://api.github.com/users/orlnub123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/orlnub123/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-10-21T12:32:19Z",
          "updated_at": "2018-10-21T12:32:19Z",
          "author_association": "CONTRIBUTOR",
          "body": "My bad, I didn't know the spec's loader got mutated which is a bit intriguing to be honest. I do agree that they are equivalent after learning about that, guess I had some misconceptions of my own.\r\n\r\nI still do think there is some confusion. Where the docs state that they can be set to `None`, it's referring to the attributes on the spec. For example if the spec sets submodule_search_locations to `None`, the corresponding module's `__path__` attribute doesn't get defined. That doesn't mean you can return a spec which doesn't have a submodule_search_locations attribute defined, that would lead to an error.\r\n\r\nOne thing I did notice that is indeed wrong is that the ModuleSpec's parent attribute never returns `None`. According to [PEP 366](https://www.python.org/dev/peps/pep-0366/) setting it to `None` is fine, as the import system corrects it later on. This makes me question whether the docs are there to help you create your own arbitrary spec object, or to specifically document the ModuleSpec.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/431664961/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/431681645",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-431681645",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 431681645,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTY4MTY0NQ==",
          "user": {
            "login": "geryogam",
            "id": 33548838,
            "node_id": "MDQ6VXNlcjMzNTQ4ODM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/33548838?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/geryogam",
            "html_url": "https://github.com/geryogam",
            "followers_url": "https://api.github.com/users/geryogam/followers",
            "following_url": "https://api.github.com/users/geryogam/following{/other_user}",
            "gists_url": "https://api.github.com/users/geryogam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/geryogam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/geryogam/subscriptions",
            "organizations_url": "https://api.github.com/users/geryogam/orgs",
            "repos_url": "https://api.github.com/users/geryogam/repos",
            "events_url": "https://api.github.com/users/geryogam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/geryogam/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-10-21T16:12:35Z",
          "updated_at": "2018-10-21T16:20:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "@orlnub123 My bad too, my claims for the `submodule_search_locations` and the `cached` attributes were wrong. I only checked the representation of the `module.__spec__` attribute, which does not display its `None` attributes, so I thought there were not set, but calling explicitly `module.__spec__. submodule_search_locations` and `module.__spec__.cached` does yield `None` (not an `AttributeError`). I have updated the pull request and its description accordingly.\r\nMy other claims for the `loader` and the `parent` attributes still hold true.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/431681645/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/431690644",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-431690644",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 431690644,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTY5MDY0NA==",
          "user": {
            "login": "orlnub123",
            "id": 30984274,
            "node_id": "MDQ6VXNlcjMwOTg0Mjc0",
            "avatar_url": "https://avatars.githubusercontent.com/u/30984274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/orlnub123",
            "html_url": "https://github.com/orlnub123",
            "followers_url": "https://api.github.com/users/orlnub123/followers",
            "following_url": "https://api.github.com/users/orlnub123/following{/other_user}",
            "gists_url": "https://api.github.com/users/orlnub123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/orlnub123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/orlnub123/subscriptions",
            "organizations_url": "https://api.github.com/users/orlnub123/orgs",
            "repos_url": "https://api.github.com/users/orlnub123/repos",
            "events_url": "https://api.github.com/users/orlnub123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/orlnub123/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-10-21T18:09:40Z",
          "updated_at": "2018-10-21T18:09:40Z",
          "author_association": "CONTRIBUTOR",
          "body": "The loader attribute is a bit of an edge case. You _would_ initially set it to `None` when creating the spec for namespace packages [as talked about in PEP 451](https://www.python.org/dev/peps/pep-0451/#namespace-packages), but it would then get mutated to a non-none value after module creation. I don't think removing any mention about this would be a good idea.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/431690644/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/431693013",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-431693013",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 431693013,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTY5MzAxMw==",
          "user": {
            "login": "geryogam",
            "id": 33548838,
            "node_id": "MDQ6VXNlcjMzNTQ4ODM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/33548838?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/geryogam",
            "html_url": "https://github.com/geryogam",
            "followers_url": "https://api.github.com/users/geryogam/followers",
            "following_url": "https://api.github.com/users/geryogam/following{/other_user}",
            "gists_url": "https://api.github.com/users/geryogam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/geryogam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/geryogam/subscriptions",
            "organizations_url": "https://api.github.com/users/geryogam/orgs",
            "repos_url": "https://api.github.com/users/geryogam/repos",
            "events_url": "https://api.github.com/users/geryogam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/geryogam/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-10-21T18:39:08Z",
          "updated_at": "2018-10-21T18:39:19Z",
          "author_association": "CONTRIBUTOR",
          "body": "@orlnub123 Thank you for the PEP reference. I have just emailed the author Eric Snow so that he could give us his thought.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/431693013/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/439728579",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-439728579",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 439728579,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTcyODU3OQ==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-11-18T21:45:40Z",
          "updated_at": "2018-11-18T21:45:40Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/439728579/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/441814550",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-441814550",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 441814550,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTgxNDU1MA==",
          "user": {
            "login": "geryogam",
            "id": 33548838,
            "node_id": "MDQ6VXNlcjMzNTQ4ODM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/33548838?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/geryogam",
            "html_url": "https://github.com/geryogam",
            "followers_url": "https://api.github.com/users/geryogam/followers",
            "following_url": "https://api.github.com/users/geryogam/following{/other_user}",
            "gists_url": "https://api.github.com/users/geryogam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/geryogam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/geryogam/subscriptions",
            "organizations_url": "https://api.github.com/users/geryogam/orgs",
            "repos_url": "https://api.github.com/users/geryogam/repos",
            "events_url": "https://api.github.com/users/geryogam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/geryogam/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2018-11-26T21:58:03Z",
          "updated_at": "2018-11-26T21:58:03Z",
          "author_association": "CONTRIBUTOR",
          "body": "@warsaw Thank you for the review. I have updated the pull request.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/441814550/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/482317135",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-482317135",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 482317135,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MjMxNzEzNQ==",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2019-04-11T21:15:50Z",
          "updated_at": "2019-04-11T21:15:50Z",
          "author_association": "MEMBER",
          "body": "@warsaw are you available to review again?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/482317135/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/487226605",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-487226605",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 487226605,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzIyNjYwNQ==",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2019-04-26T23:01:19Z",
          "updated_at": "2019-04-26T23:01:19Z",
          "author_association": "MEMBER",
          "body": "While we wait to hear back from @warsaw , one comment I have is there seems to be a loss of detail on the `ModuleSpec` docs but an increase on the `load_module()` docs which is actually the reverse of how I would expect it to go (especially since `load_module()` is deprecated).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/487226605/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/488391565",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-488391565",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 488391565,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODM5MTU2NQ==",
          "user": {
            "login": "warsaw",
            "id": 210184,
            "node_id": "MDQ6VXNlcjIxMDE4NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/210184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/warsaw",
            "html_url": "https://github.com/warsaw",
            "followers_url": "https://api.github.com/users/warsaw/followers",
            "following_url": "https://api.github.com/users/warsaw/following{/other_user}",
            "gists_url": "https://api.github.com/users/warsaw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/warsaw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/warsaw/subscriptions",
            "organizations_url": "https://api.github.com/users/warsaw/orgs",
            "repos_url": "https://api.github.com/users/warsaw/repos",
            "events_url": "https://api.github.com/users/warsaw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/warsaw/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-05-01T19:40:17Z",
          "updated_at": "2019-05-01T19:40:17Z",
          "author_association": "MEMBER",
          "body": "I don't think we need a news item for this, so I added the `skip news` label.  Any objections?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/488391565/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/497875031",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-497875031",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 497875031,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ5Nzg3NTAzMQ==",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2019-05-31T22:08:04Z",
          "updated_at": "2019-05-31T22:08:04Z",
          "author_association": "MEMBER",
          "body": "@warsaw none from me.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/497875031/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/497876339",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-497876339",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 497876339,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ5Nzg3NjMzOQ==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-05-31T22:13:36Z",
          "updated_at": "2019-05-31T22:13:36Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/497876339/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/502148673",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-502148673",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 502148673,
          "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjE0ODY3Mw==",
          "user": {
            "login": "geryogam",
            "id": 33548838,
            "node_id": "MDQ6VXNlcjMzNTQ4ODM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/33548838?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/geryogam",
            "html_url": "https://github.com/geryogam",
            "followers_url": "https://api.github.com/users/geryogam/followers",
            "following_url": "https://api.github.com/users/geryogam/following{/other_user}",
            "gists_url": "https://api.github.com/users/geryogam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/geryogam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/geryogam/subscriptions",
            "organizations_url": "https://api.github.com/users/geryogam/orgs",
            "repos_url": "https://api.github.com/users/geryogam/repos",
            "events_url": "https://api.github.com/users/geryogam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/geryogam/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-06-14T15:15:42Z",
          "updated_at": "2019-06-14T15:15:42Z",
          "author_association": "CONTRIBUTOR",
          "body": "I have made the requested changes; please review again.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/502148673/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/502148694",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-502148694",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 502148694,
          "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjE0ODY5NA==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-06-14T15:15:46Z",
          "updated_at": "2019-06-14T15:15:46Z",
          "author_association": "NONE",
          "body": "Thanks for making the requested changes!\n\n@warsaw, @brettcannon: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/502148694/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/502313341",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-502313341",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 502313341,
          "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjMxMzM0MQ==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-06-14T23:51:18Z",
          "updated_at": "2019-06-14T23:51:18Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/502313341/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/507047485",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-507047485",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 507047485,
          "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzA0NzQ4NQ==",
          "user": {
            "login": "geryogam",
            "id": 33548838,
            "node_id": "MDQ6VXNlcjMzNTQ4ODM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/33548838?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/geryogam",
            "html_url": "https://github.com/geryogam",
            "followers_url": "https://api.github.com/users/geryogam/followers",
            "following_url": "https://api.github.com/users/geryogam/following{/other_user}",
            "gists_url": "https://api.github.com/users/geryogam/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/geryogam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/geryogam/subscriptions",
            "organizations_url": "https://api.github.com/users/geryogam/orgs",
            "repos_url": "https://api.github.com/users/geryogam/repos",
            "events_url": "https://api.github.com/users/geryogam/events{/privacy}",
            "received_events_url": "https://api.github.com/users/geryogam/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-06-30T15:59:04Z",
          "updated_at": "2019-06-30T15:59:04Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks for reviewing this @ericsnowcurrently.\r\nI have made the requested changes; please review again.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/507047485/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/507047489",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-507047489",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 507047489,
          "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzA0NzQ4OQ==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-06-30T15:59:07Z",
          "updated_at": "2019-06-30T15:59:07Z",
          "author_association": "NONE",
          "body": "Thanks for making the requested changes!\n\n@warsaw, @brettcannon, @ericsnowcurrently: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/507047489/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/511021987",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-511021987",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 511021987,
          "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTAyMTk4Nw==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-07-12T20:25:01Z",
          "updated_at": "2019-07-12T20:25:01Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/511021987/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/511022069",
          "html_url": "https://github.com/python/cpython/pull/10016#issuecomment-511022069",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/10016",
          "id": 511022069,
          "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTAyMjA2OQ==",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-07-12T20:25:20Z",
          "updated_at": "2019-07-12T20:25:20Z",
          "author_association": "MEMBER",
          "body": "Also, keep in mind that I wrote a lot of the text that you are changing. :)  I admit it isn't perfect, so I welcome the help.  Just know that some of the text was very carefully worded.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/511022069/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/104642",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/104642/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/104642/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/104642/events",
      "html_url": "https://github.com/python/cpython/pull/104642",
      "id": 1716585575,
      "node_id": "PR_kwDOBN0Z8c5Q23Wp",
      "number": 104642,
      "title": "gh-103921: Document PEP 695",
      "user": {
        "login": "JelleZijlstra",
        "id": 906600,
        "node_id": "MDQ6VXNlcjkwNjYwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JelleZijlstra",
        "html_url": "https://github.com/JelleZijlstra",
        "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
        "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
        "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
        "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
        "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
        "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 667924166,
          "node_id": "MDU6TGFiZWw2Njc5MjQxNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/skip%20news",
          "name": "skip news",
          "color": "000000",
          "default": false,
          "description": null
        },
        {
          "id": 4030784939,
          "node_id": "LA_kwDOBN0Z8c7wQOWr",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-typing",
          "name": "topic-typing",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2023-05-19T04:23:26Z",
      "updated_at": "2023-05-27T10:05:50Z",
      "closed_at": "2023-05-26T17:48:18Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/104642",
        "html_url": "https://github.com/python/cpython/pull/104642",
        "diff_url": "https://github.com/python/cpython/pull/104642.diff",
        "patch_url": "https://github.com/python/cpython/pull/104642.patch",
        "merged_at": "2023-05-26T17:48:18Z"
      },
      "body": "\r\n<!-- gh-issue-number: gh-103921 -->\r\n* Issue: gh-103921\r\n<!-- /gh-issue-number -->\r\n\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\r\n:books: Documentation preview :books:: https://cpython-previews--104642.org.readthedocs.build/\r\n\r\n<!-- readthedocs-preview cpython-previews end -->",
      "closed_by": {
        "login": "JelleZijlstra",
        "id": 906600,
        "node_id": "MDQ6VXNlcjkwNjYwMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/906600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JelleZijlstra",
        "html_url": "https://github.com/JelleZijlstra",
        "followers_url": "https://api.github.com/users/JelleZijlstra/followers",
        "following_url": "https://api.github.com/users/JelleZijlstra/following{/other_user}",
        "gists_url": "https://api.github.com/users/JelleZijlstra/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JelleZijlstra/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JelleZijlstra/subscriptions",
        "organizations_url": "https://api.github.com/users/JelleZijlstra/orgs",
        "repos_url": "https://api.github.com/users/JelleZijlstra/repos",
        "events_url": "https://api.github.com/users/JelleZijlstra/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JelleZijlstra/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/104642/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/104642/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1554332832",
          "html_url": "https://github.com/python/cpython/pull/104642#issuecomment-1554332832",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/104642",
          "id": 1554332832,
          "node_id": "IC_kwDOBN0Z8c5cpTyg",
          "user": {
            "login": "hugovk",
            "id": 1324225,
            "node_id": "MDQ6VXNlcjEzMjQyMjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hugovk",
            "html_url": "https://github.com/hugovk",
            "followers_url": "https://api.github.com/users/hugovk/followers",
            "following_url": "https://api.github.com/users/hugovk/following{/other_user}",
            "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions",
            "organizations_url": "https://api.github.com/users/hugovk/orgs",
            "repos_url": "https://api.github.com/users/hugovk/repos",
            "events_url": "https://api.github.com/users/hugovk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hugovk/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-05-19T10:01:42Z",
          "updated_at": "2023-05-19T10:01:42Z",
          "author_association": "MEMBER",
          "body": "You could add this PEP to the release highlights: https://docs.python.org/3.12/whatsnew/3.12.html#summary-release-highlights",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1554332832/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1564724156",
          "html_url": "https://github.com/python/cpython/pull/104642#issuecomment-1564724156",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/104642",
          "id": 1564724156,
          "node_id": "IC_kwDOBN0Z8c5dQ8u8",
          "user": {
            "login": "miss-islington",
            "id": 31488909,
            "node_id": "MDQ6VXNlcjMxNDg4OTA5",
            "avatar_url": "https://avatars.githubusercontent.com/u/31488909?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/miss-islington",
            "html_url": "https://github.com/miss-islington",
            "followers_url": "https://api.github.com/users/miss-islington/followers",
            "following_url": "https://api.github.com/users/miss-islington/following{/other_user}",
            "gists_url": "https://api.github.com/users/miss-islington/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/miss-islington/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/miss-islington/subscriptions",
            "organizations_url": "https://api.github.com/users/miss-islington/orgs",
            "repos_url": "https://api.github.com/users/miss-islington/repos",
            "events_url": "https://api.github.com/users/miss-islington/events{/privacy}",
            "received_events_url": "https://api.github.com/users/miss-islington/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-05-26T17:48:21Z",
          "updated_at": "2023-05-26T17:48:21Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks @JelleZijlstra for the PR \ud83c\udf2e\ud83c\udf89.. I'm working now to backport this PR to: 3.12.\n\ud83d\udc0d\ud83c\udf52\u26cf\ud83e\udd16 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1564724156/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1564724381",
          "html_url": "https://github.com/python/cpython/pull/104642#issuecomment-1564724381",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/104642",
          "id": 1564724381,
          "node_id": "IC_kwDOBN0Z8c5dQ8yd",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-05-26T17:48:32Z",
          "updated_at": "2023-05-26T17:48:32Z",
          "author_association": "NONE",
          "body": "[GH-104989](https://github.com/python/cpython/pull/104989) is a backport of this pull request to the [3.12 branch](https://github.com/python/cpython/tree/3.12).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1564724381/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1564724962",
          "html_url": "https://github.com/python/cpython/pull/104642#issuecomment-1564724962",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/104642",
          "id": 1564724962,
          "node_id": "IC_kwDOBN0Z8c5dQ87i",
          "user": {
            "login": "carljm",
            "id": 61586,
            "node_id": "MDQ6VXNlcjYxNTg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/61586?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/carljm",
            "html_url": "https://github.com/carljm",
            "followers_url": "https://api.github.com/users/carljm/followers",
            "following_url": "https://api.github.com/users/carljm/following{/other_user}",
            "gists_url": "https://api.github.com/users/carljm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/carljm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/carljm/subscriptions",
            "organizations_url": "https://api.github.com/users/carljm/orgs",
            "repos_url": "https://api.github.com/users/carljm/repos",
            "events_url": "https://api.github.com/users/carljm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/carljm/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-05-26T17:49:05Z",
          "updated_at": "2023-05-26T17:49:05Z",
          "author_association": "MEMBER",
          "body": "\ud83c\udf89 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1564724962/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1564725831",
          "html_url": "https://github.com/python/cpython/pull/104642#issuecomment-1564725831",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/104642",
          "id": 1564725831,
          "node_id": "IC_kwDOBN0Z8c5dQ9JH",
          "user": {
            "login": "AlexWaygood",
            "id": 66076021,
            "node_id": "MDQ6VXNlcjY2MDc2MDIx",
            "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AlexWaygood",
            "html_url": "https://github.com/AlexWaygood",
            "followers_url": "https://api.github.com/users/AlexWaygood/followers",
            "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
            "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
            "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
            "repos_url": "https://api.github.com/users/AlexWaygood/repos",
            "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-05-26T17:50:08Z",
          "updated_at": "2023-05-26T17:50:08Z",
          "author_association": "MEMBER",
          "body": "\ud83e\udd73\ud83d\ude80",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1564725831/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1565134811",
          "html_url": "https://github.com/python/cpython/pull/104642#issuecomment-1565134811",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/104642",
          "id": 1565134811,
          "node_id": "IC_kwDOBN0Z8c5dSg_b",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-05-27T01:26:03Z",
          "updated_at": "2023-05-27T01:26:03Z",
          "author_association": "NONE",
          "body": "[GH-105007](https://github.com/python/cpython/pull/105007) is a backport of this pull request to the [3.11 branch](https://github.com/python/cpython/tree/3.11).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1565134811/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/19474",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/19474/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/19474/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/19474/events",
      "html_url": "https://github.com/python/cpython/pull/19474",
      "id": 598306476,
      "node_id": "MDExOlB1bGxSZXF1ZXN0NDAyMjE2ODc5",
      "number": 19474,
      "title": "gh-84436: Implement Immortal Objects",
      "user": {
        "login": "eduardo-elizondo",
        "id": 5315899,
        "node_id": "MDQ6VXNlcjUzMTU4OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eduardo-elizondo",
        "html_url": "https://github.com/eduardo-elizondo",
        "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
        "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
        "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
        "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
        "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
        "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 107,
      "created_at": "2020-04-11T16:51:06Z",
      "updated_at": "2025-05-01T19:45:46Z",
      "closed_at": "2023-04-22T19:39:38Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/19474",
        "html_url": "https://github.com/python/cpython/pull/19474",
        "diff_url": "https://github.com/python/cpython/pull/19474.diff",
        "patch_url": "https://github.com/python/cpython/pull/19474.patch",
        "merged_at": "2023-04-22T19:39:38Z"
      },
      "body": "This is the implementation of [PEP683](https://peps.python.org/pep-0683/)\r\n\r\n## Motivation\r\n\r\nThe PR introduces the ability to immortalize instances in CPython which bypasses reference counting. Tagging objects as immortal allows up to skip certain operations when we know that the object will be around for the entire execution of the runtime. \r\n\r\nNote that this by itself will bring a performance regression to the runtime due to the extra reference count checks. However, this brings the ability of having truly immutable objects that are useful in other contexts such as immutable data sharing between sub-interpreters.\r\n\r\n<!-- issue-number: [bpo-40255](https://bugs.python.org/issue40255) -->\r\nhttps://bugs.python.org/issue40255\r\n<!-- /issue-number -->\r\n<!-- gh-issue-number: gh-84436 -->\r\n* Issue: gh-84436\r\n<!-- /gh-issue-number -->",
      "closed_by": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/19474/reactions",
        "total_count": 30,
        "+1": 11,
        "-1": 0,
        "laugh": 0,
        "hooray": 8,
        "confused": 0,
        "heart": 4,
        "rocket": 7,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/19474/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/612506337",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-612506337",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 612506337,
          "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjUwNjMzNw==",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-04-11T20:22:32Z",
          "updated_at": "2020-04-11T20:22:47Z",
          "author_association": "CONTRIBUTOR",
          "body": "This is ready to review, the CI is finally green. Really no idea why the newly added GC tests are failing on Windows and unfortunately I don't have a Windows machine to debug this.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/612506337/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/612506560",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-612506560",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 612506560,
          "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjUwNjU2MA==",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-04-11T20:23:49Z",
          "updated_at": "2020-04-11T20:23:49Z",
          "author_association": "CONTRIBUTOR",
          "body": "Looping in @carljm and @DinoV who have pointed out some of the issues with immortal instances in the permanent generation participating in a GC collection (i.e dicts). Let me know if you have some other thoughts or ideas on this!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/612506560/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/612506742",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-612506742",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 612506742,
          "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjUwNjc0Mg==",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-04-11T20:24:58Z",
          "updated_at": "2020-04-11T20:25:10Z",
          "author_association": "CONTRIBUTOR",
          "body": "Also looping in @vstinner. Finally got around upstreaming this patch since you recently wrote about this on your [C-API Improvement Docs](https://github.com/vstinner/misc/blob/master/cpython/pep-opaque-c-api.rst#fork-and-copy-on-read-problem)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/612506742/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/613622345",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-613622345",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 613622345,
          "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzYyMjM0NQ==",
          "user": {
            "login": "nascheme",
            "id": 690853,
            "node_id": "MDQ6VXNlcjY5MDg1Mw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/690853?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nascheme",
            "html_url": "https://github.com/nascheme",
            "followers_url": "https://api.github.com/users/nascheme/followers",
            "following_url": "https://api.github.com/users/nascheme/following{/other_user}",
            "gists_url": "https://api.github.com/users/nascheme/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nascheme/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nascheme/subscriptions",
            "organizations_url": "https://api.github.com/users/nascheme/orgs",
            "repos_url": "https://api.github.com/users/nascheme/repos",
            "events_url": "https://api.github.com/users/nascheme/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nascheme/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-04-14T18:57:46Z",
          "updated_at": "2020-04-14T18:57:46Z",
          "author_association": "MEMBER",
          "body": "My first reaction is that this shouldn't become part of the default build because most Python users will not make use of it and then it becomes pure extra overhead.  However, I know for some people that it is a useful feature (e.g. pre-fork server architecture that exploits copy-on-write OS memory management).  I would use it myself since I write web applications with that style.\r\n\r\nWould it be okay to make this a compile time option, disabled by default?  I think in general it is a bad idea to have too many of those types of build options.  It makes code maintenance and testing more difficult.  Some example build variations from the past that caused issues: thread/no-threads, Unicode width, various debug options (@vstinner removed some of those). So, I'm not super excited about introducing a new build option.\r\n\r\nIs it possible we can leverage this extra status bit on objects to recover the lost performance somehow?  A couple years ago I did a \"tagged pointer\" experiment that used a similar bit.  In that case, small integers became one machine word in size and also become immortal.\r\n\r\nAnother thought: when you did your testing, were any objects made immortal?  I would imagine that, by default, you could make everything immortal after initial interpreter startup.  You are paying for an extra test+branch in INCREF and DECREF but for many objects (e.g. None, True, False, types) you avoid dirtying the memory/cache with writes to the reference count.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/613622345/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/613637628",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-613637628",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 613637628,
          "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzYzNzYyOA==",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-04-14T19:28:34Z",
          "updated_at": "2020-04-14T19:36:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "@nascheme you should definitely join the conversation happening in the bug report of this PR https://bugs.python.org/issue40255\r\n\r\n> However, I know for some people that it is a useful feature\r\n\r\nExactly, this change might be a feature for CPython power users\r\n\r\n\r\n> Would it be okay to make this a compile time option, disabled by default? \r\n\r\nYeah, that's probably the best option. That's also the consensus in the bug report thread (if the change is approved)\r\n\r\n> I think in general it is a bad idea to have too many of those types of build options.\r\n\r\nYeah that's one of the drawbacks. That being said, I can help with setting up the travis build to integrate this change if needed (cc @vstinner).\r\n\r\n> Is it possible we can leverage this extra status bit on objects to recover the lost performance somehow?\r\n\r\nWe can indeed, I think somebody also mentioned that in the bug report. A potentially good place could be `main.c:pymain_main` right after `pymain_main`. Let me explore that and push that change if it looks like performance a improvement!\r\n\r\nIn theory we could optimize even further to reduce the perf cost. By leveraging saturated adds and conditional moves we could remove the branching instruction. I haven't explored this further since the current PR was good enough. Personally, I favor the current PR, but this could be changed to:\r\n\r\n```\r\n/* Branch-less incref saturated at PY_SSIZE_T_MAX */\r\n#define _Py_INC_REF(op) ({\r\n    __asm__ (\r\n        \"addq $0x1, %[refcnt]\"\r\n        \"cmovoq  %[refcnt_max], %[refcnt]\"\r\n        : [refcnt] \"+r\" (((PyObject *)op)->ob_refcnt)\r\n        : [refcnt_max] \"r\" (PY_SSIZE_T_MAX)\r\n    );})\r\n\r\n/* Branch-less decref saturated at PY_SSIZE_T_MAX */\r\n#define _Py_DEC_REF(op) ({\r\n    Py_ssize_t tmp = ((PyObject *)op)->ob_refcnt;\r\n    __asm__ (\r\n        \"subq $0x1, %[refcnt]\"\r\n        \"addq $0x1, %[tmp]\"\r\n        \"cmovoq  %[refcnt_max], %[refcnt]\"\r\n        : [refcnt] \"+r\" (((PyObject *)op)->ob_refcnt), [tmp] \"+r\" (tmp)\r\n        : [refcnt_max] \"r\" (PY_SSIZE_T_MAX)\r\n    );})\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/613637628/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/613653174",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-613653174",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 613653174,
          "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzY1MzE3NA==",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-04-14T20:03:37Z",
          "updated_at": "2020-04-14T20:03:47Z",
          "author_association": "MEMBER",
          "body": "> Yeah that's one of the drawbacks. That being said, I can help with setting up the travis build to integrate this change if needed (cc @vstinner).\r\n\r\nNot only that, we would need specialized buildbots to test the code base with this option activated in a bunch of supported platforms and that raises the maintainance costs.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/613653174/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/613698524",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-613698524",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 613698524,
          "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzY5ODUyNA==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-04-14T21:48:43Z",
          "updated_at": "2020-04-14T21:48:43Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/613698524/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/614414324",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-614414324",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 614414324,
          "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDQxNDMyNA==",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-04-16T04:51:42Z",
          "updated_at": "2020-04-16T04:52:03Z",
          "author_association": "CONTRIBUTOR",
          "body": "Note: The PR still needs some cleanups and a couple of tests need fixes. Shouldn't be too hard but I'm first waiting to get a resolution on the bug report.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/614414324/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/689788288",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-689788288",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 689788288,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTc4ODI4OA==",
          "user": {
            "login": "ydshieh",
            "id": 2521628,
            "node_id": "MDQ6VXNlcjI1MjE2Mjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2521628?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ydshieh",
            "html_url": "https://github.com/ydshieh",
            "followers_url": "https://api.github.com/users/ydshieh/followers",
            "following_url": "https://api.github.com/users/ydshieh/following{/other_user}",
            "gists_url": "https://api.github.com/users/ydshieh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ydshieh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ydshieh/subscriptions",
            "organizations_url": "https://api.github.com/users/ydshieh/orgs",
            "repos_url": "https://api.github.com/users/ydshieh/repos",
            "events_url": "https://api.github.com/users/ydshieh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ydshieh/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-09-09T20:01:01Z",
          "updated_at": "2020-09-09T20:08:43Z",
          "author_association": "NONE",
          "body": "I hope this could be merged into cpython soon! Great work, @eduardo-elizondo , thanks",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/689788288/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/689861277",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-689861277",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 689861277,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTg2MTI3Nw==",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-09-09T22:43:37Z",
          "updated_at": "2020-09-09T22:43:37Z",
          "author_association": "MEMBER",
          "body": "FYI I wrote a proof-of-concept of tagged pointers for CPython and so I also had to modify Py_INCREF and Py_DECREF to add an \"if\": https://github.com/vstinner/cpython/pull/6\r\n\r\nPy_INCREF and Py_DECREF do nothing on tagged pointers (if the tag is not zero).\r\n\r\nA quick benchmark shows that my hack makes Python up to 1.1x slower on some benchmarks.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/689861277/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/780894957",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-780894957",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 780894957,
          "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDg5NDk1Nw==",
          "user": {
            "login": "ydshieh",
            "id": 2521628,
            "node_id": "MDQ6VXNlcjI1MjE2Mjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2521628?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ydshieh",
            "html_url": "https://github.com/ydshieh",
            "followers_url": "https://api.github.com/users/ydshieh/followers",
            "following_url": "https://api.github.com/users/ydshieh/following{/other_user}",
            "gists_url": "https://api.github.com/users/ydshieh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ydshieh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ydshieh/subscriptions",
            "organizations_url": "https://api.github.com/users/ydshieh/orgs",
            "repos_url": "https://api.github.com/users/ydshieh/repos",
            "events_url": "https://api.github.com/users/ydshieh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ydshieh/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-02-17T22:25:00Z",
          "updated_at": "2021-02-17T22:25:00Z",
          "author_association": "NONE",
          "body": "It seems to me that this PR is very unlikely to be merged into CPython. It is quite sad to see this happens, because this PR address a very important memory issue that happens when we use multiprocessing and want to rely on copy-on-write.\r\n\r\nFrom my own experience, a server serving requests could be down due to the memory issue in 3 days - even if the backend operations are read-only (20 processes use all the > 100GB memory at the end).\r\n\r\nI still hope new CPython version could address this memory issue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/780894957/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/996031984",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-996031984",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 996031984,
          "node_id": "IC_kwDOBN0Z8c47Xj3w",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-12-16T17:34:46Z",
          "updated_at": "2021-12-16T21:28:14Z",
          "author_association": "CONTRIBUTOR",
          "body": "Given the renewed interested of Immortal Instances in [faster cpython](https://github.com/faster-cpython/ideas/issues/14) (hey @ericsnowcurrently!), I\u2019ve updated this PR with a bunch of improvements over the first version to reach as much performance parity as possible. Feel free to patch this PR locally to test it out, it should work as is.\r\n\r\nI do want to highlight that while we won\u2019t reach perf parity on *all* benchmarks with this PR, it will open up a bunch of other performance optimization opportunities which at the end of the day, might end up making the runtime faster overall. Sometimes we have to take a step backwards to take two steps forward!\r\n\r\n## Improvements\r\nThis change improves on the original PR by marking as immortal the following static types:\u2028\r\n* Py_True, Py_False, Py_None\r\n* All small integers\r\n* All cpython static types initialized with: PyVarObject_HEAD_INIT. To ease up review I modified `PyVarObject_HEAD_INIT` directly but the final solution will require a `PyVarObject_IMMORTAL_HEAD_INIT`.\r\n\r\nThe second improvement was to immortalize the entire heap that exists after runtime startup. This is done by calling the new C-API: `PyGC_ImmortalizeHeap` which moves all the currently existing objects in the GC generations to the permanent generation. By doing this, I was able to greatly reduce the perf delta that the original PR had.\r\n\r\n## Benchmarks\r\nI ran these tests in a host that was a close as possible to a \u2018lab-like\u2019 environment which achieved a very consistent time results. Though I don't fully trust my machine so I would appreciate a run with the python speed machines.\r\n\r\n_Command:_\r\nPYTHONHASHSEED=0 perf stat --event task-clock --repeat 100 taskset --cpu-list 11 ./python /root/benchmarks/nqueens.py\r\n\r\n_Master:_\r\n* unpack_sequence: 17.80ms\r\n* pidigits: 300.60ms\r\n* nqueens: 154.85ms\r\n* deltablue: 946.17ms\r\n* richards: 845.05ms\r\n* fannkuch: 617.74ms\r\n\r\n_Immortal Instances PR-19474:_\r\n* unpack_sequence: 17.43 (-2.07%)\r\n* pidigits: 296.98 (-1.20%)\r\n* nqueens: 154.73 (+0.0%)\r\n* deltablue: 949.05ms (+0.3%)\r\n* richards: 850.19 (+0.5%)\r\n* fannkuch: 642.14 (+3.9%)\r\n\r\n## Future Improvements\r\nBased on the learnings here, we can assume that the more instances we immortalize, the better performance we'll get. This opens up the following performance optimizations:\r\n* _Immortal Heap Types and Intern Strings_: Other rarely deallocated instances such as heap types and interned strings can also be immortalized. This will reduce their overall memory management cost and hence, improving perf.\r\n* _Large Applications_: Move GC Gen2 instances that reach past the threshold to the permanent generation. Large applications spend a significant amount of time just doing the garbage collection cycle check. Simply moving these instances to the permanent generation will greatly reduce the cost of `PyGC_Collect` while also benefiting from immortalizing those instances.\r\n\r\nAll of these could be optional and enabled at runtime so that application owners can determine what works best for their system.\r\n\r\n## Memory Considerations\r\nImmortalizing non-static objects after runtime startup means that they will now live forever, increasing the memory cost. I compared the peak RSS of doing running `print(\u201cfoo\u201d)` by doing: `/usr/bin/time -v ./python printfoo.py`. This PR increased the peak RSS from 8.4Mb to 8.6Mb.\r\n\r\n## Runtime Shutdown and Tests\r\nThis PR now alters the runtime shutdown behavior. More specifically, this makes some modules unavailable in `__del__` during runtime shutdown. This affected about 15 tests whose asserts are now slightly different.\r\n\r\nFor now, I just added `skipIf` in these tests. I\u2019d like to hear more from the core devs before deciding how to deal with these. An important consideration is that even the docs clarify that `__del__` at runtime shutdown has some undefined behavior so maybe we can just make the tests pass under the new behavior?\r\n\r\nSeparate from this PR, we might be able to create a topological disorder of modules. This will give us more consistency in the destruction order at runtime shutdown. This can be done by splitting the module weaklist into a user weaklist and a stdlib weaklist where we first destroy user defined modules to guarantee the availability of stdlib modules during runtime shutdown. While that might make the runtime shutdown a bit more predictable, this current PR change will nonetheless change the existing behavior.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/996031984/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/996066117",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-996066117",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 996066117,
          "node_id": "IC_kwDOBN0Z8c47XsNF",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-12-16T18:21:27Z",
          "updated_at": "2021-12-16T18:21:27Z",
          "author_association": "MEMBER",
          "body": "> The third and final change was to do the branchless add (thanks @tiran), this was exactly what I needed! Though the branchless subtract was actually a regression. Presumably because now immortal instances only need one check to jump out of the decref function.\r\n\r\nDoes my idea actually work? Awesome! I was not sure that the trick has a measurable impact on performance. I'm only familiar with the concept of branchless bitwise operations in the context of constant timing cryptographic algorithms.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/996066117/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/996103573",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-996103573",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 996103573,
          "node_id": "IC_kwDOBN0Z8c47X1WV",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-12-16T19:14:05Z",
          "updated_at": "2021-12-16T19:15:50Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Does my idea actually work? \r\n\r\nYeah! It was mostly on fannkuch where it reduced the delta by almost one percentage point. Most of the other ones that I tested were relatively the same.\r\n\r\nUpon further inspection though, I decided to revert back to the branched version. I had an assumption that `x += 0` would not trigger a Copy on Write (since you are not modifying the underlying memory space). But it does trigger it, defeating the whole advantage applications that could use Copy on Write.\r\n\r\nGiven that most of the other benchmarks were relatively the same and it was just a small percentage win on fannkuch, I decided to keep the branched version.\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/996103573/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/996156876",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-996156876",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 996156876,
          "node_id": "IC_kwDOBN0Z8c47YCXM",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-12-16T20:06:11Z",
          "updated_at": "2021-12-16T20:06:11Z",
          "author_association": "MEMBER",
          "body": "> Given the renewed interested of Immortal Instances in [faster cpython](https://github.com/faster-cpython/ideas/issues/14) (hey @ericsnowcurrently!), I\u2019ve updated this PR with a bunch of improvements over the first version to reach as much performance parity as possible. Feel free to patch this PR locally to test it out, it should work as is.\r\n\r\nAwesome!  Thanks for doing this!\r\n\r\n> I do want to highlight that while we won\u2019t reach perf parity on _all_ benchmarks with this PR, it will open up a bunch of other performance optimization opportunities which at the end of the day, might end up making the runtime faster overall. Sometimes we have to take a step backwards to take two steps forward!\r\n\r\n+1\r\n\r\n> the final solution will require a `PyVarObject_IMMORTAL_HEAD_INIT`.\r\n\r\nYeah, I set up for something similar in #24828.\r\n \r\n> The second improvement was to immortalize the entire heap that exists after runtime startup. This is done by calling the new C-API: `PyGC_ImmortalizeHeap` which moves all the currently existing objects in the GC generations to the permanent generation. By doing this, I was able to greatly reduce the perf delta that the original PR had.\r\n\r\nFYI, a number of us are working on interpreter isolation and eliminating global state.  A big part of that involves pulling all the global objects into `_PyRuntimeState` and `PyInterpreterState`.  Related to that, I'm also working on statically allocating as much of that as possible, whereas nearly all those global (or per-interpreter) objects are heap-allocated currently.  So we wouldn't need to walk the heap to mark those as immortal.  There will still be a bunch of other heap-allocated objects though (e.g. from the import system).\r\n \r\n> ## Benchmarks\r\n> I ran these tests in a host that was a close as possible to a \u2018lab-like\u2019 environment which achieved a very consistent time results. Though I don't fully trust my machine so I would appreciate a run with the python speed machines.\r\n\r\nThose results look promising. \ud83d\ude42  I'm hoping to run the full pyperformance benchmark suite on this too in the next couple days, though it's tricky because the latest pyperformance release breaks when running CPython main (for now) without manual intervention.\r\n \r\n> ## Future Improvements\r\n> * _Immortal Heap Types and Intern Strings_: Other rarely deallocated instances such as heap types and interned strings can also be immortalized. This will reduce their overall memory management cost and hence, improving perf.\r\n\r\n+1\r\n\r\n> * _Large Applications_: Move GC Gen2 instances that reach past the threshold to the permanent generation. Large applications spend a significant amount of time just doing the garbage collection cycle check. Simply moving these instances to the permanent generation will greatly reduce the cost of `PyGC_Collect` while also benefiting from immortalizing those instances.\r\n\r\nSounds interesting.  I'd have to defer to @pablogsal and other GC experts for a deeper analysis. \ud83d\ude42\r\n \r\n> ## Memory Considerations\r\n> Immortalizing non-static objects after runtime startup means that they will now live forever, increasing the memory cost.\r\n\r\nYeah, that's definitely a concern.  We'd need to be particularly careful about what is immortalized.\r\n\r\n> ## Runtime Shutdown and Tests\r\n> This PR now alters the runtime shutdown behavior. More specifically, this makes some modules unavailable in `__del__` during runtime shutdown.\r\n\r\nIs that the only change to shutdown?\r\n\r\n> Separate from this PR, we might be able to create a topological disorder of modules. This will give us more consistency in the destruction order at runtime shutdown. This can be done by splitting the module weaklist into a user weaklist and a stdlib weaklist where we first destroy user defined modules to guarantee the availability of stdlib modules during runtime shutdown. While that might make the runtime shutdown a bit more predictable, this current PR change will nonetheless change the existing behavior.\r\n\r\n  FYI, anything that makes finalization more consistent and more thorough is welcome. \ud83d\ude42",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/996156876/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/996746350",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-996746350",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 996746350,
          "node_id": "IC_kwDOBN0Z8c47aSRu",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-12-17T14:03:26Z",
          "updated_at": "2021-12-17T14:03:26Z",
          "author_association": "MEMBER",
          "body": "Would it be possible to extract the essence of this PR, the immortal objects, and drop the new API for making objects immortal?\r\n\r\nCould you also drop all the `#ifdef Py_IMMORTAL_OBJECTS`?\r\nIf we are going to have immortal objects, we are likely to depend on `Py_None`, etc being immutable (and thus immortal) for correctness, so it cannot be optional.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/996746350/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/997065971",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-997065971",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 997065971,
          "node_id": "IC_kwDOBN0Z8c47bgTz",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-12-17T22:23:40Z",
          "updated_at": "2021-12-17T23:13:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Would it be possible to extract the essence of this PR, the immortal objects, and drop the new API for making objects immortal?\r\n\r\nSure! With dropping the API, you mean the exposed API in managed code right?\r\n\r\nThere's also the exposed C-API `PyGC_ImmortalizeHeap` which is needed to immortalize the entire heap after the runtime startup. This is needed to reduce the performance gap. I'll update the PR by removing the API in managed code but keeping the C-API.\r\n\r\nThough if it helps, I could also split this up in the following manner:\r\nPR 1) Introduce the core instance immortalization change (this will have a significant performance regression)\r\nPR 2) Improve performance by immortalizing the heap after runtime startup\r\nPR 3) ... keep adding incremental changes to reduce the performance gap",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/997065971/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/997068849",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-997068849",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 997068849,
          "node_id": "IC_kwDOBN0Z8c47bhAx",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-12-17T22:30:34Z",
          "updated_at": "2021-12-17T22:30:34Z",
          "author_association": "CONTRIBUTOR",
          "body": ">  I'm hoping to run the full pyperformance benchmark suite on this too in the next couple days\r\n\r\nYeah, let me know how it looks like on your end! I tried as much as possible to reduce noise but it's still really hard to get consistent results, specially with deltas on the millisecond range. I wish we had an automated github check to run all the benchmarks in critical PRs like this one :)\r\n\r\n> Is that the only change to shutdown?\r\n\r\nYes! Outside from immortal objects having different refcounts now, the only difference is the behavior of `__del__` functions during runtime shutdown. \r\n\r\n> anything that makes finalization more consistent and more thorough is welcome.\r\n\r\nFor sure! For what it's worth, I think right now the runtime shutdown works just fine. But if we are to live in a world where some modules might be immortal, we might need to have non-refcount based heuristic to determine the destruction order. I'll look into this if we get this PR through! ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/997068849/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/997172668",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-997172668",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 997172668,
          "node_id": "IC_kwDOBN0Z8c47b6W8",
          "user": {
            "login": "methane",
            "id": 199592,
            "node_id": "MDQ6VXNlcjE5OTU5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/199592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/methane",
            "html_url": "https://github.com/methane",
            "followers_url": "https://api.github.com/users/methane/followers",
            "following_url": "https://api.github.com/users/methane/following{/other_user}",
            "gists_url": "https://api.github.com/users/methane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/methane/subscriptions",
            "organizations_url": "https://api.github.com/users/methane/orgs",
            "repos_url": "https://api.github.com/users/methane/repos",
            "events_url": "https://api.github.com/users/methane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/methane/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-12-18T08:59:47Z",
          "updated_at": "2021-12-18T09:00:55Z",
          "author_association": "MEMBER",
          "body": "> Sure! With dropping the API, you mean the exposed API in managed code right?\r\n> \r\n> There's also the exposed C-API `PyGC_ImmortalizeHeap` which is needed to immortalize the entire heap after the runtime startup.\r\n\r\nPlease remove it too. We are discussing about immoratalizing immutable objects (bool, small ints, static type objects, interned strings) in the mailing list. So please focus on just immutable objects at first.\r\n\r\nThere are several problems in `PyGC_ImmortalizeHeap` at first glance, but I want to discuss it in separated thread. This thread and PR is too long already.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/997172668/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/997277365",
          "html_url": "https://github.com/python/cpython/pull/19474#issuecomment-997277365",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/19474",
          "id": 997277365,
          "node_id": "IC_kwDOBN0Z8c47cT61",
          "user": {
            "login": "eduardo-elizondo",
            "id": 5315899,
            "node_id": "MDQ6VXNlcjUzMTU4OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5315899?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eduardo-elizondo",
            "html_url": "https://github.com/eduardo-elizondo",
            "followers_url": "https://api.github.com/users/eduardo-elizondo/followers",
            "following_url": "https://api.github.com/users/eduardo-elizondo/following{/other_user}",
            "gists_url": "https://api.github.com/users/eduardo-elizondo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eduardo-elizondo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eduardo-elizondo/subscriptions",
            "organizations_url": "https://api.github.com/users/eduardo-elizondo/orgs",
            "repos_url": "https://api.github.com/users/eduardo-elizondo/repos",
            "events_url": "https://api.github.com/users/eduardo-elizondo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eduardo-elizondo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2021-12-18T19:59:39Z",
          "updated_at": "2021-12-18T19:59:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "@methane done! I've boiled down the change to the absolute minimum to just include the immortalization of static objects.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/997277365/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/133911",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/133911/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/133911/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/133911/events",
      "html_url": "https://github.com/python/cpython/pull/133911",
      "id": 3055477441,
      "node_id": "PR_kwDOBN0Z8c6Vwjtg",
      "number": 133911,
      "title": "gh-132983: Add documentation for compression.zstd",
      "user": {
        "login": "emmatyping",
        "id": 9504279,
        "node_id": "MDQ6VXNlcjk1MDQyNzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emmatyping",
        "html_url": "https://github.com/emmatyping",
        "followers_url": "https://api.github.com/users/emmatyping/followers",
        "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
        "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
        "organizations_url": "https://api.github.com/users/emmatyping/orgs",
        "repos_url": "https://api.github.com/users/emmatyping/repos",
        "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
        "received_events_url": "https://api.github.com/users/emmatyping/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 667924166,
          "node_id": "MDU6TGFiZWw2Njc5MjQxNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/skip%20news",
          "name": "skip news",
          "color": "000000",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 7,
      "created_at": "2025-05-12T02:47:40Z",
      "updated_at": "2025-05-21T14:52:02Z",
      "closed_at": "2025-05-21T14:18:21Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/133911",
        "html_url": "https://github.com/python/cpython/pull/133911",
        "diff_url": "https://github.com/python/cpython/pull/133911.diff",
        "patch_url": "https://github.com/python/cpython/pull/133911.patch",
        "merged_at": "2025-05-21T14:18:21Z"
      },
      "body": "This PR adds docs for the `compression` and `compression.zstd` modules.\r\n\r\n<!-- gh-issue-number: gh-132983 -->\r\n* Issue: gh-132983\r\n<!-- /gh-issue-number -->\r\n\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\r\n\ud83d\udcda Documentation preview \ud83d\udcda: https://cpython-previews--133911.org.readthedocs.build/en/133911/library/compression.zstd.html\r\n\r\n<!-- readthedocs-preview cpython-previews end -->",
      "closed_by": {
        "login": "gpshead",
        "id": 68491,
        "node_id": "MDQ6VXNlcjY4NDkx",
        "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gpshead",
        "html_url": "https://github.com/gpshead",
        "followers_url": "https://api.github.com/users/gpshead/followers",
        "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
        "organizations_url": "https://api.github.com/users/gpshead/orgs",
        "repos_url": "https://api.github.com/users/gpshead/repos",
        "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gpshead/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/133911/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/133911/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2873722154",
          "html_url": "https://github.com/python/cpython/pull/133911#issuecomment-2873722154",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133911",
          "id": 2873722154,
          "node_id": "IC_kwDOBN0Z8c6rSYUq",
          "user": {
            "login": "AA-Turner",
            "id": 9087854,
            "node_id": "MDQ6VXNlcjkwODc4NTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9087854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AA-Turner",
            "html_url": "https://github.com/AA-Turner",
            "followers_url": "https://api.github.com/users/AA-Turner/followers",
            "following_url": "https://api.github.com/users/AA-Turner/following{/other_user}",
            "gists_url": "https://api.github.com/users/AA-Turner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AA-Turner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AA-Turner/subscriptions",
            "organizations_url": "https://api.github.com/users/AA-Turner/orgs",
            "repos_url": "https://api.github.com/users/AA-Turner/repos",
            "events_url": "https://api.github.com/users/AA-Turner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AA-Turner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-12T19:14:22Z",
          "updated_at": "2025-05-12T19:14:22Z",
          "author_association": "MEMBER",
          "body": "cc @python/proofreaders, I think the text here could benefit from a close reading, Stan has already noted several English grammar/syntax points.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2873722154/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2873737109",
          "html_url": "https://github.com/python/cpython/pull/133911#issuecomment-2873737109",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133911",
          "id": 2873737109,
          "node_id": "IC_kwDOBN0Z8c6rSb-V",
          "user": {
            "login": "StanFromIreland",
            "id": 89152624,
            "node_id": "MDQ6VXNlcjg5MTUyNjI0",
            "avatar_url": "https://avatars.githubusercontent.com/u/89152624?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/StanFromIreland",
            "html_url": "https://github.com/StanFromIreland",
            "followers_url": "https://api.github.com/users/StanFromIreland/followers",
            "following_url": "https://api.github.com/users/StanFromIreland/following{/other_user}",
            "gists_url": "https://api.github.com/users/StanFromIreland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/StanFromIreland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/StanFromIreland/subscriptions",
            "organizations_url": "https://api.github.com/users/StanFromIreland/orgs",
            "repos_url": "https://api.github.com/users/StanFromIreland/repos",
            "events_url": "https://api.github.com/users/StanFromIreland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/StanFromIreland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-12T19:21:15Z",
          "updated_at": "2025-05-12T19:21:15Z",
          "author_association": "MEMBER",
          "body": "> @python/proofreaders\r\n\r\nAre there any active members, out of curiosity? I do not know of any nor have seen any around.\r\n\r\n> I think the text here could benefit from a close reading\r\n\r\nI will go through it again later.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2873737109/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2873778551",
          "html_url": "https://github.com/python/cpython/pull/133911#issuecomment-2873778551",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133911",
          "id": 2873778551,
          "node_id": "IC_kwDOBN0Z8c6rSmF3",
          "user": {
            "login": "bskinn",
            "id": 11325439,
            "node_id": "MDQ6VXNlcjExMzI1NDM5",
            "avatar_url": "https://avatars.githubusercontent.com/u/11325439?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bskinn",
            "html_url": "https://github.com/bskinn",
            "followers_url": "https://api.github.com/users/bskinn/followers",
            "following_url": "https://api.github.com/users/bskinn/following{/other_user}",
            "gists_url": "https://api.github.com/users/bskinn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bskinn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bskinn/subscriptions",
            "organizations_url": "https://api.github.com/users/bskinn/orgs",
            "repos_url": "https://api.github.com/users/bskinn/repos",
            "events_url": "https://api.github.com/users/bskinn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bskinn/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-12T19:39:17Z",
          "updated_at": "2025-05-12T19:39:17Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > @python/proofreaders\n> \n> Are there any active members, out of curiosity? I do not know of any nor have seen any around.\n> \n\n:raising_hand: \n\nI at least look at all pings to the group. Will usually weigh in if I have time, and as long as no one else has beaten me to what I'd have to say.\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2873778551/reactions",
            "total_count": 4,
            "+1": 4,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2873834326",
          "html_url": "https://github.com/python/cpython/pull/133911#issuecomment-2873834326",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133911",
          "id": 2873834326,
          "node_id": "IC_kwDOBN0Z8c6rSztW",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-12T20:04:09Z",
          "updated_at": "2025-05-12T20:04:09Z",
          "author_association": "MEMBER",
          "body": "@StanFromIreland \r\n\r\n> Please settle on gaps between descriptions for the file, currently it seems random, some parts use two and others one.\r\n\r\nI use one for items within a class, two for at the module level, but that's probably too complicated and I should probably just choose two lines.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2873834326/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2874398534",
          "html_url": "https://github.com/python/cpython/pull/133911#issuecomment-2874398534",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133911",
          "id": 2874398534,
          "node_id": "IC_kwDOBN0Z8c6rU9dG",
          "user": {
            "login": "mwichmann",
            "id": 1242215,
            "node_id": "MDQ6VXNlcjEyNDIyMTU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1242215?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mwichmann",
            "html_url": "https://github.com/mwichmann",
            "followers_url": "https://api.github.com/users/mwichmann/followers",
            "following_url": "https://api.github.com/users/mwichmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/mwichmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mwichmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mwichmann/subscriptions",
            "organizations_url": "https://api.github.com/users/mwichmann/orgs",
            "repos_url": "https://api.github.com/users/mwichmann/repos",
            "events_url": "https://api.github.com/users/mwichmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mwichmann/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-12T22:54:53Z",
          "updated_at": "2025-05-12T22:54:53Z",
          "author_association": "NONE",
          "body": "> > @python/proofreaders\r\n> \r\n> Are there any active members, out of curiosity? I do not know of any nor have seen any around.\r\n\r\nThere are, but we don't get explicitly called on very often, it seems...",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2874398534/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2898143837",
          "html_url": "https://github.com/python/cpython/pull/133911#issuecomment-2898143837",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133911",
          "id": 2898143837,
          "node_id": "IC_kwDOBN0Z8c6svipd",
          "user": {
            "login": "miss-islington-app[bot]",
            "id": 148139692,
            "node_id": "BOT_kgDOCNRurA",
            "avatar_url": "https://avatars.githubusercontent.com/in/409059?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/miss-islington-app%5Bbot%5D",
            "html_url": "https://github.com/apps/miss-islington-app",
            "followers_url": "https://api.github.com/users/miss-islington-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/miss-islington-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/miss-islington-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/miss-islington-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/miss-islington-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/miss-islington-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/miss-islington-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/miss-islington-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/miss-islington-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-21T14:18:24Z",
          "updated_at": "2025-05-21T14:18:24Z",
          "author_association": "NONE",
          "body": "Thanks @emmatyping for the PR, and @gpshead for merging it \ud83c\udf2e\ud83c\udf89.. I'm working now to backport this PR to: 3.14.\n\ud83d\udc0d\ud83c\udf52\u26cf\ud83e\udd16 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2898143837/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 409059,
            "client_id": "Iv1.cb0f11c301bf5e8e",
            "slug": "miss-islington-app",
            "node_id": "A_kwHOABdI3c4ABj3j",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "Miss Islington App",
            "description": "\ud83d\udc0d\ud83c\udf52\u26cf\ufe0f\ud83e\udd16 - A bot for the python/CPython repository. \"I'm not a witch!\"",
            "external_url": "https://python.org/",
            "html_url": "https://github.com/apps/miss-islington-app",
            "created_at": "2023-10-16T18:23:39Z",
            "updated_at": "2023-10-16T18:24:17Z",
            "permissions": {
              "checks": "write",
              "contents": "write",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "check_run",
              "pull_request",
              "status"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2898144770",
          "html_url": "https://github.com/python/cpython/pull/133911#issuecomment-2898144770",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133911",
          "id": 2898144770,
          "node_id": "IC_kwDOBN0Z8c6svi4C",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-21T14:18:37Z",
          "updated_at": "2025-05-21T14:18:37Z",
          "author_association": "NONE",
          "body": "[GH-134425](https://github.com/python/cpython/pull/134425) is a backport of this pull request to the [3.14 branch](https://github.com/python/cpython/tree/3.14).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2898144770/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/131282",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/131282/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/131282/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/131282/events",
      "html_url": "https://github.com/python/cpython/pull/131282",
      "id": 2922043000,
      "node_id": "PR_kwDOBN0Z8c6OxSkP",
      "number": 131282,
      "title": "gh-100926: Move ctype's pointers cache to StgInfo",
      "user": {
        "login": "sergey-miryanov",
        "id": 67315,
        "node_id": "MDQ6VXNlcjY3MzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sergey-miryanov",
        "html_url": "https://github.com/sergey-miryanov",
        "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
        "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
        "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
        "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
        "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
        "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2211400743,
          "node_id": "MDU6TGFiZWwyMjExNDAwNzQz",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-ctypes",
          "name": "topic-ctypes",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 61,
      "created_at": "2025-03-15T12:08:19Z",
      "updated_at": "2025-05-10T17:06:59Z",
      "closed_at": "2025-05-02T17:06:38Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/131282",
        "html_url": "https://github.com/python/cpython/pull/131282",
        "diff_url": "https://github.com/python/cpython/pull/131282.diff",
        "patch_url": "https://github.com/python/cpython/pull/131282.patch",
        "merged_at": "2025-05-02T17:06:38Z"
      },
      "body": "This is a bit straightfoward. \r\nI keep the global cache for manually registered pairs of pointers and classes, particularly for comtypes (gh-124520, PyCSimpleTypeAsMetaclassTest).\n\n<!-- gh-issue-number: gh-100926 -->\n* Issue: gh-100926\n<!-- /gh-issue-number -->\n",
      "closed_by": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/131282/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/131282/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2728527499",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2728527499",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2728527499,
          "node_id": "IC_kwDOBN0Z8c6iogaL",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-17T08:11:40Z",
          "updated_at": "2025-03-17T08:11:40Z",
          "author_association": "CONTRIBUTOR",
          "body": "> IMO, this needs a NEWS blurb. I'd even add a What's New entry -- `_pointer_type_cache` is nominally internal API, but it's been there for a long time and people are using it.\r\n\r\nThanks! I'll add both entries later today.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2728527499/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2730496098",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2730496098",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2730496098,
          "node_id": "IC_kwDOBN0Z8c6iwBBi",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-17T18:36:23Z",
          "updated_at": "2025-03-17T18:36:23Z",
          "author_association": "CONTRIBUTOR",
          "body": "I have added news and whatsnew entries, but I believe we should update them after we decided what to do with _ctypes_ptrtype_cache behaviour.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2730496098/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2733873922",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2733873922",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2733873922,
          "node_id": "IC_kwDOBN0Z8c6i85sC",
          "user": {
            "login": "encukou",
            "id": 302922,
            "node_id": "MDQ6VXNlcjMwMjkyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/encukou",
            "html_url": "https://github.com/encukou",
            "followers_url": "https://api.github.com/users/encukou/followers",
            "following_url": "https://api.github.com/users/encukou/following{/other_user}",
            "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
            "organizations_url": "https://api.github.com/users/encukou/orgs",
            "repos_url": "https://api.github.com/users/encukou/repos",
            "events_url": "https://api.github.com/users/encukou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/encukou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-18T16:18:27Z",
          "updated_at": "2025-03-18T16:18:27Z",
          "author_association": "MEMBER",
          "body": "As far as I can see, this numeric ID key is only used for a check, and I think that it's OK to remove a check for obsolete functionality from a deprecated function.\r\n\r\nThe feature is \"incomplete pointers\" -- ones that were created with a name, but weren't assigned an underlying type yet. See `test_ctypes.test_incomplete.py` for the intended usage. That test references \"the tutorial\", but the current tutorial doesn't include this -- instead, you can create [incomplete *structs*](https://docs.python.org/3/library/ctypes.html#incomplete-types) for this use case.\r\nBack when ctypes was an independent project, this [started working in ctypes 0.6.3](https://svn.python.org/projects/ctypes/tags/release_0_6_3/ctypes/docs/tutorial.stx) (2003) and [was made obsolete in 0.9.5](https://svn.python.org/projects/ctypes/tags/release_0_9_5/ctypes/ANNOUNCE) (2005). `ctypes` was added to Python 2.5 (2006), without `SetPointerType` mentioned in docs.\r\n\r\n---\r\n\r\nWhat I'm a bit worried about is the duplication between `_pointer_type_cache` and `info->pointer_type`. Which one should have priority? When one is updated, should the other one be updated too?\r\nWhat kind of relationship is *expected* and/or *guaranteed* are between `info->proto` (`ptr_type._type_`) and `info->pointer_type`?\r\n\r\nShould we expose the pointer type as a Python attribute?\r\nIf we do, with a setter to allow registration, could `_pointer_type_cache` be turned into a deprecated proxy for that? Something like:\r\n\r\n```py\r\n        class PointerTypeCache:\r\n            def __setitem__(self, cls, pointer_type):\r\n                cls.pointer_type = pointer_type\r\n\r\n            def __getitem__(self, cls):\r\n                try:\r\n                    return cls.pointer_type\r\n                except AttributeError:\r\n                    raise KeyError(cls)\r\n\r\n            def __contains__(self, cls):\r\n                return hasattr(cls, 'pointer_type')\r\n\r\n        _pointer_type_cache = PointerTypeCache()\r\n```\r\n\r\nWould having all the info in one place be worth that?\r\n\r\nOr am I overthinking it, and we should fix the immediate issue and merge this PR as is?\r\nEntirely possible, but I'd like to have solid understanding first.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2733873922/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2734508735",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2734508735",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2734508735,
          "node_id": "IC_kwDOBN0Z8c6i_Uq_",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-18T19:34:43Z",
          "updated_at": "2025-03-18T19:34:43Z",
          "author_association": "CONTRIBUTOR",
          "body": "\r\n> What I'm a bit worried about is the duplication between `_pointer_type_cache` and `info->pointer_type`. Which one should have priority? When one is updated, should the other one be updated too? What kind of relationship is _expected_ and/or _guaranteed_ are between `info->proto` (`ptr_type._type_`) and `info->pointer_type`?\r\n\r\nAFAIU, if we introduce `info->pointer_type` then the only use for `_pointer_type_cache` is a manual registration like for `comtypes`, where `POINTER` for non-ctypes type created and registered in the cache. And for incomplete types as well. So, since we create `POINTER` type from our factory, it doesn't matter how `_pointer_type_cache` and `info->pointer_type` are related. They store _different_ data. Also, I expect that ctypes `POINTER` types will not be registered in `_pointer_type_cache` and I see the only way to control this is to deprecate `_pointer_type_cache` and add a registration function, that should check where to store the `POINTER` type (like `register_pointer_type(type, pointer_type)` and if `type` is a non-ctypes then register their pointer in `_pointer_type_cache`, also same for incomplete types). So, I expect no regular ctypes pointer types will be stored in `_pointer_type_cache`.\r\n\r\nI'm not that familiar with `info->proto` and `ptr_type._type_`. I need to dig deeper to answer this.\r\n\r\n> \r\n> Should we expose the pointer type as a Python attribute? If we do, with a setter to allow registration, could `_pointer_type_cache` be turned into a deprecated proxy for that? Something like:\r\n\r\nIf we allow to poison regular Python classes with our `pointer_type` attribute, then it is worth idea.  But this is will not work for incomplete types (cause `cls` will be `str` for all of them), we should strictly check that `cls` is not a builtin type and so on. I'm not sure it will be an easy way to go :)\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2734508735/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2734923800",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2734923800",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2734923800,
          "node_id": "IC_kwDOBN0Z8c6jA6AY",
          "user": {
            "login": "neonene",
            "id": 53406459,
            "node_id": "MDQ6VXNlcjUzNDA2NDU5",
            "avatar_url": "https://avatars.githubusercontent.com/u/53406459?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/neonene",
            "html_url": "https://github.com/neonene",
            "followers_url": "https://api.github.com/users/neonene/followers",
            "following_url": "https://api.github.com/users/neonene/following{/other_user}",
            "gists_url": "https://api.github.com/users/neonene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/neonene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neonene/subscriptions",
            "organizations_url": "https://api.github.com/users/neonene/orgs",
            "repos_url": "https://api.github.com/users/neonene/repos",
            "events_url": "https://api.github.com/users/neonene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/neonene/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-18T23:06:37Z",
          "updated_at": "2025-03-18T23:06:37Z",
          "author_association": "CONTRIBUTOR",
          "body": "Just in my gut feeling, but would the following make sense?\r\n\r\n* Enhance `PyCPointerType.set_type()` (currently used in the deprecated `SetPointerType()`) to store `pointer_type` in stginfo. \r\n\r\n* Make `_pointer_type_cache` a dict subclass, where the `__setitem__()` uses the `set_type()`.  The dict would be like `{None: c_void_p}`.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2734923800/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2735638667",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2735638667",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2735638667,
          "node_id": "IC_kwDOBN0Z8c6jDoiL",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-19T07:55:06Z",
          "updated_at": "2025-03-19T07:55:06Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Just in my gut feeling, but would the following make sense?\r\n> \r\n> * Enhance `PyCPointerType.set_type()` (currently used in the deprecated `SetPointerType()`) to store `pointer_type` in stginfo.\r\n> * Make `_pointer_type_cache` a dict subclass, where the `__setitem__()` uses the `set_type()`.  The dict would be like `{None: c_void_p}`.\r\n\r\nYeah, this is like @encukou proposed for PointerTypeCache with addition of mapping interface that would be useful for introspection for example. But please see my reply about incomplete types and non-ctypes types above.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2735638667/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2735831975",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2735831975",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2735831975,
          "node_id": "IC_kwDOBN0Z8c6jEXun",
          "user": {
            "login": "encukou",
            "id": 302922,
            "node_id": "MDQ6VXNlcjMwMjkyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/encukou",
            "html_url": "https://github.com/encukou",
            "followers_url": "https://api.github.com/users/encukou/followers",
            "following_url": "https://api.github.com/users/encukou/following{/other_user}",
            "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
            "organizations_url": "https://api.github.com/users/encukou/orgs",
            "repos_url": "https://api.github.com/users/encukou/repos",
            "events_url": "https://api.github.com/users/encukou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/encukou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-19T09:11:53Z",
          "updated_at": "2025-03-19T09:11:53Z",
          "author_association": "MEMBER",
          "body": "As far as I can see, only three kinds of keys are acceptable in `_pointer_type_cache`:\r\n- a ctypes type, which do have stginfo. Note that this includes comtypes (those inherit from ctypes)\r\n- an *integer* -- the `id` of an incomplete pointer. AFAICS, such an entry in `_pointer_type_cache` is only used as a \u201cflag\u201d to allow `SetPointerType` to work; this info might as well be stored in stginfo instead. (I imagine it's equivalent to `info->proto == NULL`, but I haven't checked for further complications.)\r\n- None, a special case that can be handled elsewhere\r\n\r\nIs there a use case for putting something else in `_pointer_type_cache`? If we can't find one, let's not support it. We don't want to break comtypes and such (i.e. users who don't have another way of doing what they need), but on the other hand, `_pointer_type_cache` *is* an internal implementation detail that's subject to change.\r\n\r\n> Make _pointer_type_cache a dict subclass\r\n\r\nA dict-*like* object, please. Subclassing `dict` is too fragile, plus this proxy this can't support iteration.\r\n\r\n---\r\n\r\nThere's one more aspect to think about: the registration that comtypes does isn't really the right thing for comtypes to do.\r\n\r\ncomtypes needs to add some functionality to all of its types, so it defines subclasses of the ctypes (meta)classes. But, it also wants to add some functionality to *pointers* to its types, and pointers are normally created on demand.\r\nSo, for every type ctypes defines, it also defines a pointer type, and registers that. It only does that for one \u201clevel\u201d though: a pointer to a *pointer* to a comtype is a plain old ctypes pointer. comtypes could register another level, but not infintely many of them.\r\nIMO, the proper solution here would be to add a `make_pointer_type` method to the metaclasses, which comtypes could override, so that its pointer types are created on demand using the regular mechanism.\r\nThis would make registration unnecessary for comtypes.\r\n\r\nI can't rule out another use case for registration, but I don't see one. Perhaps we can deprecate `_pointer_type_cache` and plan to remove it entirely unless someone speaks up.\r\n(Deprecation/removal would also be easier if it becomes a simple proxy for `set_type` & co., rather than a source of truth.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2735831975/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2735926139",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2735926139",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2735926139,
          "node_id": "IC_kwDOBN0Z8c6jEut7",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-19T09:37:47Z",
          "updated_at": "2025-03-19T09:37:47Z",
          "author_association": "CONTRIBUTOR",
          "body": "I'm very new to the internals of ctypes, but I agree with three of the use cases of `_pointer_type_cache` that you mentioned. \r\nOne comment: I may not have checked correctly. I remember that when I analyzed `PyCSimpleTypeAsMetaclassTest`, I saw that a non-ctypes `cls` was passed to `POINTER`.\r\nAs far as I can tell, this is because the code `ptr_bases = (self, POINTER(bases[0])` called with CtBase that hasn't StgInfo. I'm not sure that I understand how we can replace this with regular pointer type creation and avoid registration.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2735926139/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2736442712",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2736442712",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2736442712,
          "node_id": "IC_kwDOBN0Z8c6jGs1Y",
          "user": {
            "login": "encukou",
            "id": 302922,
            "node_id": "MDQ6VXNlcjMwMjkyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/encukou",
            "html_url": "https://github.com/encukou",
            "followers_url": "https://api.github.com/users/encukou/followers",
            "following_url": "https://api.github.com/users/encukou/following{/other_user}",
            "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
            "organizations_url": "https://api.github.com/users/encukou/orgs",
            "repos_url": "https://api.github.com/users/encukou/repos",
            "events_url": "https://api.github.com/users/encukou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/encukou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-19T12:22:14Z",
          "updated_at": "2025-03-19T12:22:14Z",
          "author_association": "MEMBER",
          "body": "Ah! Looks like you're correct, thanks!\r\n\r\nI'm not on a Windows box now to check.\r\nI believe `CtBase` mirrors comtypes' `IUnknown`, which has [an interesting comment](https://github.com/enthought/comtypes/blob/d0295c4e947bc9838f34e070b4c1fd8bb1cc8b36/comtypes/_post_coinit/unknwn.py#L353-L371):\r\n```\r\n        `IUnknown` behaves as a ctypes type, and `POINTER` can take it.\r\n        This behavior is defined by some metaclasses in runtime.\r\n```\r\n\r\nSo, IUnknown is a ctypes type in spirit, but not in reality :)\r\n\r\nWe could expose `info->pointer_type` as a reserved Python attribute `__pointer_type__`, and for classes without `stginfo`, look up the attribute. Do you think that's worth pursuing?\r\nI don't think we need to worry builtin types (and others that disable setting attributes).\r\n\r\nSome concerns about having `_pointer_type_cache` store only the manually registered types:\r\n\r\n- lookups in `_pointer_type_cache`, as a way to check if a pointer type is assigned (without creating the type if it's not), stop working.\r\n- iteration over `_pointer_type_cache` will give fewer results.\r\n\r\nBut, given that it is an internal implementation detail, perhaps that's acceptable.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2736442712/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2737704307",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2737704307",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2737704307,
          "node_id": "IC_kwDOBN0Z8c6jLg1z",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-19T18:53:58Z",
          "updated_at": "2025-03-19T18:53:58Z",
          "author_association": "CONTRIBUTOR",
          "body": "> So, IUnknown is a ctypes type in spirit, but not in reality :)\r\nGood summary!\r\n\r\n> We could expose `info->pointer_type` as a reserved Python attribute `__pointer_type__`, and for classes without `stginfo`, look up the attribute. Do you think that's worth pursuing? I don't think we need to worry builtin types (and others that disable setting attributes).\r\n\r\nI think it is a worth idea. In such approach we can avoid manual registration for non-ctypes types. \r\nBut we still need registration for incomplete types, and I believe we should extend behavior of `pointer.set_type(cls)` for such types as @neonene suggested above.\r\n\r\n> Some concerns about having `_pointer_type_cache` store only the manually registered types:\r\n> \r\n> * lookups in `_pointer_type_cache`, as a way to check if a pointer type is assigned (without creating the type if it's not), stop working.\r\n\r\nMaybe it is worth to add some auxiliary functions like `get_pointer_type(cls) -> POINTER|None` or `has_pointer_type(cls) -> bool`?\r\n\r\n> * iteration over `_pointer_type_cache` will give fewer results.\r\n\r\nI believe it is ok, otherwise we still face unlimited growth of type's cache in some scenarios. Moreover, I prefer explicit registration so the user will know what is happening and have control over it.\r\n \r\n\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2737704307/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2738680014",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2738680014",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2738680014,
          "node_id": "IC_kwDOBN0Z8c6jPPDO",
          "user": {
            "login": "junkmd",
            "id": 45822440,
            "node_id": "MDQ6VXNlcjQ1ODIyNDQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/45822440?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/junkmd",
            "html_url": "https://github.com/junkmd",
            "followers_url": "https://api.github.com/users/junkmd/followers",
            "following_url": "https://api.github.com/users/junkmd/following{/other_user}",
            "gists_url": "https://api.github.com/users/junkmd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/junkmd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/junkmd/subscriptions",
            "organizations_url": "https://api.github.com/users/junkmd/orgs",
            "repos_url": "https://api.github.com/users/junkmd/repos",
            "events_url": "https://api.github.com/users/junkmd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/junkmd/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-20T00:42:37Z",
          "updated_at": "2025-03-20T00:42:37Z",
          "author_association": "CONTRIBUTOR",
          "body": "Hello, `comtypes` maintainer here.\r\n\r\nPlease feel free to let me know if there's anything I can do.\r\nI've been busy lately, so I'm not sure how much time I can allocate, but I'll do my best to help maintain the OSS projects.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2738680014/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2742655950",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2742655950",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2742655950,
          "node_id": "IC_kwDOBN0Z8c6jeZvO",
          "user": {
            "login": "neonene",
            "id": 53406459,
            "node_id": "MDQ6VXNlcjUzNDA2NDU5",
            "avatar_url": "https://avatars.githubusercontent.com/u/53406459?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/neonene",
            "html_url": "https://github.com/neonene",
            "followers_url": "https://api.github.com/users/neonene/followers",
            "following_url": "https://api.github.com/users/neonene/following{/other_user}",
            "gists_url": "https://api.github.com/users/neonene/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/neonene/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neonene/subscriptions",
            "organizations_url": "https://api.github.com/users/neonene/orgs",
            "repos_url": "https://api.github.com/users/neonene/repos",
            "events_url": "https://api.github.com/users/neonene/events{/privacy}",
            "received_events_url": "https://api.github.com/users/neonene/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-21T08:23:18Z",
          "updated_at": "2025-03-21T13:29:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "In my understanding of the discussion, this PR should remove `_pointer_type_cache`, `POINTER()`, and `pointer()` from `_ctypes`, and re-implement them purely, which could resolve the non-ctypes type's issue dedicatedly.  My rough image is:\r\n\r\n<details>\r\n\r\n```py\r\nfrom _ctypes import _Pointer\r\n\r\nCType_Type = type(_Pointer).__base__\r\n\r\nclass PointerTypeCache:\r\n    def __setitem__(self, cls, pointer_type):\r\n        if cls is None:\r\n            ...\r\n        if isinstance(cls, CType_Type):\r\n            assert cls.__pointer_type__ is pointer_type\r\n            return\r\n        cls.__pointer_type__ = pointer_type\r\n    ...\r\n\r\ndef POINTER(cls):\r\n    if cls is None:\r\n        ...\r\n    try:\r\n        return cls.__pointer_type__\r\n    except AttributeError:\r\n        pass\r\n    if isinstance(cls, str):\r\n        return type(f'LP_{cls}', (_Pointer,), {})\r\n    elif isinstance(cls, CType_Type):\r\n        return type(f'LP_{cls.__name__}', (_Pointer,), {'_type_': cls})\r\n    else:\r\n        raise TypeError('must be a ctypes type')\r\n```\r\n</details>\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2742655950/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2743203592",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2743203592",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2743203592,
          "node_id": "IC_kwDOBN0Z8c6jgfcI",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-21T12:17:25Z",
          "updated_at": "2025-03-21T12:17:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "@neonene Thanks! Sorry, I have been a bit busy lately.\r\nIt looks reasonable!\r\n\r\nAlso, I just realized that the previous implementation returns different types for incomplete pointer types. So, no reason to cache them :)\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2743203592/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2744380073",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2744380073",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2744380073,
          "node_id": "IC_kwDOBN0Z8c6jk-qp",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-21T20:26:11Z",
          "updated_at": "2025-03-21T20:26:11Z",
          "author_association": "CONTRIBUTOR",
          "body": "Need cleanup and some new tests.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2744380073/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2744384905",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2744384905",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2744384905,
          "node_id": "IC_kwDOBN0Z8c6jk_2J",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-21T20:29:03Z",
          "updated_at": "2025-03-21T20:29:03Z",
          "author_association": "CONTRIBUTOR",
          "body": "@junkmd please take a look at changes in PyCSimpleTypeAsMetaclassTest. I believe we will stick with this solution.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2744384905/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2745421797",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2745421797",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2745421797,
          "node_id": "IC_kwDOBN0Z8c6jo8_l",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-22T19:32:48Z",
          "updated_at": "2025-03-22T19:32:48Z",
          "author_association": "CONTRIBUTOR",
          "body": "> It seems that there are issues with `safearray`, as evidenced by the crash in `test_safearray.SafeArrayTestCase.test_VT_BOOL`. Additionally, some failures, such as in `test_dict.Test.test_dict`, are unclear in terms of their cause.\r\n\r\nThanks, I will take a look into this.\r\n\r\n> Simply changing `ctypes._pointer_type_cache[typ] = ptrtype` to `typ.__pointer_type__ = ptrtype` might break some metaprogramming techniques.\r\n\r\nI thought about removing `_pointer_type_cache` as it can lead to large memory consumption. As discussed above we were trying to find a _good_ replacement for the global cache and avoid the need for registration. Could you elaborate a bit more on what is a MP techniques you mentioned?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2745421797/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2745576585",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2745576585",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2745576585,
          "node_id": "IC_kwDOBN0Z8c6jpiyJ",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-22T20:21:56Z",
          "updated_at": "2025-03-22T20:21:56Z",
          "author_association": "CONTRIBUTOR",
          "body": "@junkmd can you explain how POINTER and `_iid_` are bound together?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2745576585/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2746365256",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2746365256",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2746365256,
          "node_id": "IC_kwDOBN0Z8c6jsjVI",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-23T18:53:41Z",
          "updated_at": "2025-03-23T18:53:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "Unfortunately, I was not able to run comtypes tests on this branch \ud83d\ude22 \r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2746365256/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2749333399",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2749333399",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2749333399,
          "node_id": "IC_kwDOBN0Z8c6j33-X",
          "user": {
            "login": "sergey-miryanov",
            "id": 67315,
            "node_id": "MDQ6VXNlcjY3MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/67315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sergey-miryanov",
            "html_url": "https://github.com/sergey-miryanov",
            "followers_url": "https://api.github.com/users/sergey-miryanov/followers",
            "following_url": "https://api.github.com/users/sergey-miryanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/sergey-miryanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sergey-miryanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sergey-miryanov/subscriptions",
            "organizations_url": "https://api.github.com/users/sergey-miryanov/orgs",
            "repos_url": "https://api.github.com/users/sergey-miryanov/repos",
            "events_url": "https://api.github.com/users/sergey-miryanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sergey-miryanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-24T20:35:50Z",
          "updated_at": "2025-03-24T20:35:50Z",
          "author_association": "CONTRIBUTOR",
          "body": "Need update of news and docs.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2749333399/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2749731847",
          "html_url": "https://github.com/python/cpython/pull/131282#issuecomment-2749731847",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/131282",
          "id": 2749731847,
          "node_id": "IC_kwDOBN0Z8c6j5ZQH",
          "user": {
            "login": "junkmd",
            "id": 45822440,
            "node_id": "MDQ6VXNlcjQ1ODIyNDQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/45822440?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/junkmd",
            "html_url": "https://github.com/junkmd",
            "followers_url": "https://api.github.com/users/junkmd/followers",
            "following_url": "https://api.github.com/users/junkmd/following{/other_user}",
            "gists_url": "https://api.github.com/users/junkmd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/junkmd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/junkmd/subscriptions",
            "organizations_url": "https://api.github.com/users/junkmd/orgs",
            "repos_url": "https://api.github.com/users/junkmd/repos",
            "events_url": "https://api.github.com/users/junkmd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/junkmd/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-25T00:34:06Z",
          "updated_at": "2025-03-25T00:34:06Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Unfortunately, I was not able to run comtypes tests on this branch \ud83d\ude22\r\n\r\nI tested it this way using GHA workflow dispatch in my project.\r\nThe test results in my previous comment were also obtained in the same manner.\r\nI hope this helps.\r\n\r\n```\r\n\r\nname: Test comtypes with latest CPython\r\non:\r\n  workflow_dispatch:\r\n\r\njobs:\r\n  build:\r\n    runs-on: windows-latest\r\n    steps:\r\n      - name: Checkout\r\n        uses: actions/checkout@v4\r\n      - name: Download and Extract CPython Zip\r\n        run: |\r\n          $url = \"https://github.com/sergey-miryanov/cpython/archive/refs/heads/gh-100926-ctypes-pointers-cache.zip\"\r\n          $output = \"cpython.zip\"\r\n          Invoke-WebRequest -Uri $url -OutFile $output\r\n          Expand-Archive -Path $output -DestinationPath .\r\n          Rename-Item -Path \"cpython-gh-100926-ctypes-pointers-cache\" -NewName \"cpython\"\r\n      - name: Build CPython\r\n        working-directory: ./cpython\r\n        run: PCbuild\\build.bat -p x64 -c Release\r\n      - name: Download comtypes branch as zip\r\n        run: |\r\n          $repo_owner = \"junkmd\"\r\n          $repo_name = \"comtypes\"\r\n          $branch_name = \"cpython-gh-100926\"\r\n          $zip_url = \"https://github.com/$repo_owner/$repo_name/archive/refs/heads/$branch_name.zip\"\r\n          $output_zip = \"comtypes_branch.zip\"\r\n          Invoke-WebRequest -Uri $zip_url -OutFile $output_zip\r\n      - name: Extract comtypes branch\r\n        run: |\r\n          $output_zip = \"comtypes_branch.zip\"\r\n          $destination_path = \".\"\r\n          Expand-Archive -Path $output_zip -DestinationPath $destination_path\r\n      - name: Rename comtypes extracted directory\r\n        run: |\r\n          $extracted_dir = Get-ChildItem -Path \".\" | Where-Object {$_.Name -like \"comtypes-cpython-gh-100926\"}\r\n          if ($extracted_dir) {\r\n            Rename-Item -Path $extracted_dir.FullName -NewName \"comtypes\"\r\n          } else {\r\n            Write-Error \"Could not find the extracted comtypes directory.\"\r\n            exit 1\r\n          }\r\n      - name: Unittest\r\n        working-directory: ./comtypes\r\n        run: |\r\n          ..\\cpython\\PCbuild\\amd64\\python.exe -m unittest discover -v -s ./comtypes/test -t comtypes\\test\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2749731847/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/103083",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/103083/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/103083/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/103083/events",
      "html_url": "https://github.com/python/cpython/pull/103083",
      "id": 1644094015,
      "node_id": "PR_kwDOBN0Z8c5NE6a-",
      "number": 103083,
      "title": "GH-103082: Implementation of PEP 669: Low Impact Monitoring for CPython",
      "user": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 48,
      "created_at": "2023-03-28T14:34:41Z",
      "updated_at": "2023-04-12T13:33:41Z",
      "closed_at": "2023-04-12T11:04:56Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/103083",
        "html_url": "https://github.com/python/cpython/pull/103083",
        "diff_url": "https://github.com/python/cpython/pull/103083.diff",
        "patch_url": "https://github.com/python/cpython/pull/103083.patch",
        "merged_at": "2023-04-12T11:04:56Z"
      },
      "body": "This implements PEP 669.\r\nThere are a couple of things missing, but no harm in early review.\r\n\r\n\r\n<!-- gh-issue-number: gh-103082 -->\r\n* Issue: gh-103082\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "markshannon",
        "id": 9448417,
        "node_id": "MDQ6VXNlcjk0NDg0MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markshannon",
        "html_url": "https://github.com/markshannon",
        "followers_url": "https://api.github.com/users/markshannon/followers",
        "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
        "organizations_url": "https://api.github.com/users/markshannon/orgs",
        "repos_url": "https://api.github.com/users/markshannon/repos",
        "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markshannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/103083/reactions",
        "total_count": 2,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 2,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/103083/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1487353098",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1487353098",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1487353098,
          "node_id": "IC_kwDOBN0Z8c5YpzUK",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-28T17:45:54Z",
          "updated_at": "2023-03-28T17:45:54Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @markshannon for commit b39edd311ea0e5bf2963a4b307480e6b6cc47d4d :robot:\n\nIf you want to schedule another build, you need to add the <kbd>:hammer: test-with-refleak-buildbots</kbd> label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1487353098/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1490376105",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1490376105",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1490376105,
          "node_id": "IC_kwDOBN0Z8c5Y1VWp",
          "user": {
            "login": "drdavella",
            "id": 2458487,
            "node_id": "MDQ6VXNlcjI0NTg0ODc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2458487?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/drdavella",
            "html_url": "https://github.com/drdavella",
            "followers_url": "https://api.github.com/users/drdavella/followers",
            "following_url": "https://api.github.com/users/drdavella/following{/other_user}",
            "gists_url": "https://api.github.com/users/drdavella/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/drdavella/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/drdavella/subscriptions",
            "organizations_url": "https://api.github.com/users/drdavella/orgs",
            "repos_url": "https://api.github.com/users/drdavella/repos",
            "events_url": "https://api.github.com/users/drdavella/events{/privacy}",
            "received_events_url": "https://api.github.com/users/drdavella/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-30T14:10:17Z",
          "updated_at": "2023-03-30T14:10:17Z",
          "author_association": "NONE",
          "body": "Hello, I am following this PEP from a distance. I think it is a very exciting and interesting proposal. I am particularly interested in the ability to enhance per-opcode instrumentation.\r\n\r\nOne thing I have noticed with the existing implementation of opcode tracing is that it does not appear to provide any information to the callback about either the operands or the result of the operation being performed. There are some tools that would be benefit greatly from access to this information (e.g. tools that perform dataflow analysis).\r\n\r\nIn principle, it seems like at least some of this information is accessible via the reference to the stack that belongs to the frame object. However, it is not exposed as part of the public API either in the Python code or in the underlying structure. I am wondering whether it would be reasonable to make this information public (even if read-only). In the new implementation, now that the per-opcode event appears to be triggered _prior_ to opcode dispatch, it seems like at least the operands could easily be passed to the callback.\r\n\r\nAlong similar lines, I am wondering whether there would be any appetite for providing an interface to actually override the handlers for certain opcodes. Of particular interest would be opcodes that implement basic operations like `BINARY_OP` and `FORMAT_VALUE`. I believe that this could be done in a way that imposes zero cost on uninstrumented code. There is some precedent for this kind of thing in interpreter implementations for other languages and it would be extremely valuable for certain kinds of monitoring tools.\r\n\r\nI realize this may not be the proper forum for these questions, so please feel free to redirect me. I am wondering whether either of these proposals would be candidates for another PEP (which I would be willing to author). I am also potentially interested in helping with the implementation for any/all of the above.\r\n\r\nThank you!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1490376105/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1490390408",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1490390408",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1490390408,
          "node_id": "IC_kwDOBN0Z8c5Y1Y2I",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-30T14:18:11Z",
          "updated_at": "2023-03-30T14:18:11Z",
          "author_association": "MEMBER",
          "body": "@drdavella Could you comment on the discussion over at https://discuss.python.org/t/pep-669-low-impact-monitoring-for-cpython/13018/48. Your comments are appreciated, but commenting on the issue makes it hard to follow code review, if it get mixed up with more general discussion. Thanks.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1490390408/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1490390520",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1490390520",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1490390520,
          "node_id": "IC_kwDOBN0Z8c5Y1Y34",
          "user": {
            "login": "drdavella",
            "id": 2458487,
            "node_id": "MDQ6VXNlcjI0NTg0ODc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2458487?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/drdavella",
            "html_url": "https://github.com/drdavella",
            "followers_url": "https://api.github.com/users/drdavella/followers",
            "following_url": "https://api.github.com/users/drdavella/following{/other_user}",
            "gists_url": "https://api.github.com/users/drdavella/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/drdavella/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/drdavella/subscriptions",
            "organizations_url": "https://api.github.com/users/drdavella/orgs",
            "repos_url": "https://api.github.com/users/drdavella/repos",
            "events_url": "https://api.github.com/users/drdavella/events{/privacy}",
            "received_events_url": "https://api.github.com/users/drdavella/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-30T14:18:14Z",
          "updated_at": "2023-03-30T14:18:14Z",
          "author_association": "NONE",
          "body": "Sorry but one additional question: do you expect this feature to be backported to earlier versions?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1490390520/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1490407865",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1490407865",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1490407865,
          "node_id": "IC_kwDOBN0Z8c5Y1dG5",
          "user": {
            "login": "drdavella",
            "id": 2458487,
            "node_id": "MDQ6VXNlcjI0NTg0ODc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2458487?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/drdavella",
            "html_url": "https://github.com/drdavella",
            "followers_url": "https://api.github.com/users/drdavella/followers",
            "following_url": "https://api.github.com/users/drdavella/following{/other_user}",
            "gists_url": "https://api.github.com/users/drdavella/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/drdavella/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/drdavella/subscriptions",
            "organizations_url": "https://api.github.com/users/drdavella/orgs",
            "repos_url": "https://api.github.com/users/drdavella/repos",
            "events_url": "https://api.github.com/users/drdavella/events{/privacy}",
            "received_events_url": "https://api.github.com/users/drdavella/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-30T14:29:00Z",
          "updated_at": "2023-03-30T14:29:00Z",
          "author_association": "NONE",
          "body": "@markshannon no problem, thanks for the reply! I posted the same question there but it looks like I need a moderator to approve before it shows up.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1490407865/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1490687419",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1490687419",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1490687419,
          "node_id": "IC_kwDOBN0Z8c5Y2hW7",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-30T17:43:42Z",
          "updated_at": "2023-03-30T17:43:42Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @markshannon for commit d0139e940b4919ae610146aa818d8f83ba0d05e8 :robot:\n\nIf you want to schedule another build, you need to add the <kbd>:hammer: test-with-refleak-buildbots</kbd> label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1490687419/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1491986356",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1491986356",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1491986356,
          "node_id": "IC_kwDOBN0Z8c5Y7ee0",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-31T14:10:18Z",
          "updated_at": "2023-03-31T14:10:18Z",
          "author_association": "MEMBER",
          "body": "[Latest benchmarks](https://github.com/faster-cpython/benchmarking/tree/main/results/bm-20230325-3.12.0a6%2B-662c16c)\r\n1.6% faster overall.\r\n1.2% slower on coverage.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1491986356/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1492284235",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1492284235",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1492284235,
          "node_id": "IC_kwDOBN0Z8c5Y8nNL",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-03-31T17:09:19Z",
          "updated_at": "2023-03-31T17:09:19Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @markshannon for commit fdb486026511eda234537e9d3d21a25f6007547b :robot:\n\nIf you want to schedule another build, you need to add the <kbd>:hammer: test-with-refleak-buildbots</kbd> label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1492284235/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1494264072",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1494264072",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1494264072,
          "node_id": "IC_kwDOBN0Z8c5ZEKkI",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-03T12:48:56Z",
          "updated_at": "2023-04-03T12:48:56Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @markshannon for commit 97ec1c5498b54e4aaaf09de5f407af443271f14c :robot:\n\nIf you want to schedule another build, you need to add the <kbd>:hammer: test-with-refleak-buildbots</kbd> label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1494264072/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1494530067",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1494530067",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1494530067,
          "node_id": "IC_kwDOBN0Z8c5ZFLgT",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-03T15:23:35Z",
          "updated_at": "2023-04-03T15:23:35Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @markshannon for commit e40a68f367c73685247fe066a3d1b76c602c8b00 :robot:\n\nIf you want to schedule another build, you need to add the <kbd>:hammer: test-with-refleak-buildbots</kbd> label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1494530067/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1495900921",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1495900921",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1495900921,
          "node_id": "IC_kwDOBN0Z8c5ZKaL5",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-04T12:38:04Z",
          "updated_at": "2023-04-04T12:38:04Z",
          "author_association": "MEMBER",
          "body": "@erlend-aasland Thanks for the review.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1495900921/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1496509585",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1496509585",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1496509585,
          "node_id": "IC_kwDOBN0Z8c5ZMuyR",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-04T19:50:00Z",
          "updated_at": "2023-04-04T19:50:00Z",
          "author_association": "MEMBER",
          "body": "I'd like to invite @nedbat to review this PR, in particular, to see if it breaks or improves anything related to coverage.py. Ned, I know that you're busy, but your early feedback is really important here!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1496509585/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1496574400",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1496574400",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1496574400,
          "node_id": "IC_kwDOBN0Z8c5ZM-nA",
          "user": {
            "login": "nedbat",
            "id": 23789,
            "node_id": "MDQ6VXNlcjIzNzg5",
            "avatar_url": "https://avatars.githubusercontent.com/u/23789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nedbat",
            "html_url": "https://github.com/nedbat",
            "followers_url": "https://api.github.com/users/nedbat/followers",
            "following_url": "https://api.github.com/users/nedbat/following{/other_user}",
            "gists_url": "https://api.github.com/users/nedbat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nedbat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nedbat/subscriptions",
            "organizations_url": "https://api.github.com/users/nedbat/orgs",
            "repos_url": "https://api.github.com/users/nedbat/repos",
            "events_url": "https://api.github.com/users/nedbat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nedbat/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-04T20:37:03Z",
          "updated_at": "2023-04-04T20:37:49Z",
          "author_association": "MEMBER",
          "body": "Thanks for the ping.  I don't know that I'll be able to review the code, but I ran the coverage.py test suite with it, and everything passed, so \"first do no harm\" checks out.  We should talk about what else I can do here.  I don't know what effort would be required to try to take advantage of the new changes.\r\n```\r\n% tox -e anypy -r\r\nROOT: tox-gh won't override envlist because tox is not running in GitHub Actions\r\n.pkg: remove tox env folder .tox/.pkg\r\nanypy: install_deps> python -m pip install -U -r requirements/pip.pip -r requirements/pytest.pip\r\n.pkg-cpython312: remove tox env folder .tox/.pkg-cpython312\r\n.pkg-cpython312: install_requires> python -I -m pip install setuptools\r\n.pkg-cpython312: _optional_hooks> python /usr/local/virtualenvs/coverage/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n.pkg-cpython312: get_requires_for_build_editable> python /usr/local/virtualenvs/coverage/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n.pkg-cpython312: install_requires_for_build_editable> python -I -m pip install wheel\r\n.pkg-cpython312: build_editable> python /usr/local/virtualenvs/coverage/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\nanypy: install_package_deps> python -m pip install -U 'tomli; python_full_version <= \"3.11.0a6\"'\r\nanypy: install_package> python -m pip install -U --force-reinstall --no-deps .tox/.tmp/package/11/coverage-7.2.3a0.dev1-0.editable-cp312-cp312-macosx_13_0_x86_64.whl\r\nanypy: commands[0]> python igor.py zip_mods\r\nanypy: commands[1]> python setup.py --quiet build_ext --inplace\r\nanypy: commands[2]> python -m pip install -q -e .\r\nanypy: commands[3]> python igor.py test_with_tracer c\r\n=== CPython 3.12.0a6+ (rev 44a031e255) with C tracer (.tox/anypy/bin/python) ===\r\nbringing up nodes...\r\n.......................................................................................................................................................... [ 11%]\r\n...................................................................s....................s..........s.s..ss.................ss....s........................ [ 23%]\r\n.........................................................................................s................................................................ [ 34%]\r\n.....................................................................................s..........................................s......................... [ 46%]\r\n.......................................................................................................................................................... [ 57%]\r\n........................................................................................................................................................s. [ 69%]\r\n............s......s............................s................................................................................................ss....... [ 80%]\r\n.....................s.......................................................s............................................................................ [ 92%]\r\n.....................................................................................................                                                      [100%]\r\n1313 passed, 20 skipped in 34.40s\r\nanypy: commands[4]> python igor.py remove_extension\r\nanypy: commands[5]> python igor.py test_with_tracer py\r\n=== CPython 3.12.0a6+ (rev 44a031e255) with Python tracer (.tox/anypy/bin/python) ===\r\nbringing up nodes...\r\n.......................................................................................................................................................... [ 11%]\r\n.........................................................................s................s.........................s...ss..s......s..s.............s..... [ 23%]\r\n...........................................s.......s....................................ss......sss...........s........................................... [ 34%]\r\n...................................................................................s...................................................................... [ 46%]\r\n.................................................................ss.............s.......................................................................... [ 57%]\r\n...................s....................................................................ssss.............s.sss...........................................s [ 69%]\r\nss.s........................sssss............................................................................................................s............ [ 80%]\r\n....................................s......................................................................................................s.s............ [ 92%]\r\n..............................................................................................ss....                                                       [100%]\r\n1288 passed, 45 skipped in 35.28s\r\n.pkg-cpython312: _exit> python /usr/local/virtualenvs/coverage/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n  anypy: OK (97.89=setup[18.80]+cmd[0.55,1.33,6.01,35.33,0.21,35.66] seconds)\r\n  congratulations :) (99.97 seconds)\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1496574400/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1497330325",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1497330325",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1497330325,
          "node_id": "IC_kwDOBN0Z8c5ZP3KV",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-05T11:27:16Z",
          "updated_at": "2023-04-05T11:27:16Z",
          "author_association": "MEMBER",
          "body": "@gvanrossum \r\n> All in all I really like the experience of tracing using this new API!\r\n\r\nThanks\r\n\r\n> The PEP is pretty terse: This will need user documentation as part of the library reference; maybe even a tutorial. (Not in this PR of course, but let's please keep the issue open or create a separate doc issue.)\r\n\r\nI've updated the issue to mention documentation\r\nI'll add your comments on usability to that\r\n\r\n> dis.dis(code, adaptive=True) shows the RESERVED and CACHE opcodes following any INSTRUMENTED opcodes (even though show_caches defaults to False).\r\n\r\nI didn't really give this much thought. As soon as you set `adaptive = True`, you are asking to see what is happening internally, so it would misleading if we hid the INSTRUMENTED opcodes.\r\nIf you think we should also show the underlying instruction, could you make an issue for that (I don't want to add that complexity to this PR).\r\n\r\n> I found it a little inconvenient that instruction_offset is measured in instructions, not in bytes (I was using dis to see what I was getting). There was a lot of instr*2 in my code.\r\n\r\nSure, we can change the offsets to be bytecode offsets. It would be more consistent with everything else.\r\n\r\n> The naming of the CALL and RETURN/RAISE events is a bit confusing -- we have CALL (universal), C_RETURN/PY_RETURN (per language), but then C_RAISE and RAISE -- why isn't the latter PY_RAISE, just for consistency?\r\n\r\nThe `RAISE` event occurs if an exception is raised, it doesn't matter how. So it can be from a `raise` statement or from a builtin function.\r\n\r\nIf `CALL` is universal, so it can be disabled. If you only saw `C_CALL` events for calling builtins, then it would be impossible to disable the event if the call only went to Python functions.\r\n\r\n`C_RAISE` exists (even though `RAISE` exists as well) for profilers and similar to balance the entries to builtin functions with the exits. Each `CALL` event to a builtin will be matched with either a `C_RETURN` or `C_RAISE`.\r\n\r\n> I see that the PEP prescribes that INSTRUCTION events are reported before LINE events on the same instruction. I found this confusing. Is it too late to change this around? Since a line can contain many instructions, it would appear more useful to see the LINE event first, so I can e.g. just do print(\"LINE\", lineno) in the LINE callback and print all instructions that are logically part of the line following that point.\r\n\r\nI don't think there is a natural or correct order of events here. There is no guarantee that the compiler will put the line event on the instruction you expect.\r\n\r\nFor example:\r\n```Py\r\ndef f():\r\n   a = 1\r\n   pass\r\n   return 2\r\n```\r\nCould (and probably should) be compiled as:\r\n```\r\n  1           0 RESUME                   0\r\n  2           2 LOAD_CONST               1 (1)\r\n  3           4 STORE_FAST               0 (a)\r\n  4           8 RETURN_CONST             2 (2)\r\n```\r\n\r\n> How do I retrieve additional arguments if there are more than 1?\r\n\r\nYou don't. The first argument is only provided to support the strange behavior of `sys.setprofile()` and `sys.setprofile()` when calling a method descriptor.\r\n\r\nWould it be useful to do so?\r\nIt would add quite a lot of overhead to `CALL` instrumentation as we would need to bundle all the positional arguments into a tuple, and all the named arguments into a dict.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1497330325/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1497615368",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1497615368",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1497615368,
          "node_id": "IC_kwDOBN0Z8c5ZQ8wI",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-05T14:45:45Z",
          "updated_at": "2023-04-05T14:45:45Z",
          "author_association": "MEMBER",
          "body": "I should say that I'm not surprised this works on coverage, thanks to @nedbat's tireless efforts to make sure every corner case of tracing was tested for PEP 626. Thanks to Ned, we have a pretty solid set of tests for line tracing. The tests for `sys.settrace()` found far more issues than the tests for `sys.monitoring` that I added.\r\nThanks @nedbat",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1497615368/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1498202293",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1498202293",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1498202293,
          "node_id": "IC_kwDOBN0Z8c5ZTMC1",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-05T21:49:10Z",
          "updated_at": "2023-04-05T21:49:10Z",
          "author_association": "MEMBER",
          "body": "@fabioz Just an FYI that this is about to land. Are you interested in trying this out?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1498202293/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1498233090",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1498233090",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1498233090,
          "node_id": "IC_kwDOBN0Z8c5ZTTkC",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-05T22:21:12Z",
          "updated_at": "2023-04-05T22:21:12Z",
          "author_association": "MEMBER",
          "body": "@markshannon \r\n\r\n> @gvanrossum\r\n> > dis.dis(code, adaptive=True) shows the RESERVED and CACHE opcodes following any INSTRUMENTED opcodes (even though show_caches defaults to False).\r\n> \r\n> I didn't really give this much thought. As soon as you set `adaptive = True`, you are asking to see what is happening internally, so it would misleading if we hid the INSTRUMENTED opcodes. If you think we should also show the underlying instruction, could you make an issue for that (I don't want to add that complexity to this PR).\r\n\r\nI don't want to hide the INSTRUMENTED opcodes (or even show the original opcodes), but I'd like to hide the RESERVED/CACHED opcodes unless show_caches=True is also passed. But I just realized that dis doesn't have the information needed to even show the underlying instruction -- I guess it'd have to be passed both the adaptive and the original bytecode arrays. Given this, I don't care enough to even file that issue. :-)\r\n\r\n> > The naming of the CALL and RETURN/RAISE events is a bit confusing -- we have CALL (universal), C_RETURN/PY_RETURN (per language), but then C_RAISE and RAISE -- why isn't the latter PY_RAISE, just for consistency?\r\n> \r\n> The `RAISE` event occurs if an exception is raised, it doesn't matter how. So it can be from a `raise` statement or from a builtin function.\r\n> \r\n> If `CALL` is universal, so it can be disabled. If you only saw `C_CALL` events for calling builtins, then it would be impossible to disable the event if the call only went to Python functions.\r\n> \r\n> `C_RAISE` exists (even though `RAISE` exists as well) for profilers and similar to balance the entries to builtin functions with the exits. Each `CALL` event to a builtin will be matched with either a `C_RETURN` or `C_RAISE`.\r\n\r\nOkay, I think I follow this now. It's definitely worth calling out these subtleties in the user docs -- it's much easier to remember if you know the underlying model.\r\n\r\n> > I see that the PEP prescribes that INSTRUCTION events are reported before LINE events on the same instruction. I found this confusing. Is it too late to change this around? Since a line can contain many instructions, it would appear more useful to see the LINE event first, so I can e.g. just do print(\"LINE\", lineno) in the LINE callback and print all instructions that are logically part of the line following that point.\r\n> \r\n> I don't think there is a natural or correct order of events here. There is no guarantee that the compiler will put the line event on the instruction you expect.\r\n> \r\n> For example:\r\n> \r\n> ```python\r\n> def f():\r\n>    a = 1\r\n>    pass\r\n>    return 2\r\n> ```\r\n> \r\n> Could (and probably should) be compiled as:\r\n> \r\n> ```\r\n>   1           0 RESUME                   0\r\n>   2           2 LOAD_CONST               1 (1)\r\n>   3           4 STORE_FAST               0 (a)\r\n>   4           8 RETURN_CONST             2 (2)\r\n> ```\r\n\r\nI don't understand why in that example the line number for the STORE_FAST shouldn't be the same as that for the LOAD_CONST. Maybe you copied/pasted the wrong function? The key point seems to be your assertion \"There is no guarantee that the compiler will put the line event on the instruction you expect.\" Maybe not in obscure corner cases, like situations where there is code emitted that doesn't naturally belong to a given line, like the `__exit__` calling logic or the `except *` cleanup. But for the example I gave it's pretty cut and dry. Even (especially?) if the compiler doesn't do what you expect, it might be nice to be able to *tell* what the compiler did by tracing the instruction sequence.\r\n\r\nI suspect that the reason has more to do with how it's implemented -- I'm still trying to understand how INSTRUMENTED_INSTRUCTION ends up calling INSTRUMENTED_LINE (if it even does so).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1498233090/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1498787115",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1498787115",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1498787115,
          "node_id": "IC_kwDOBN0Z8c5ZVa0r",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-06T09:50:07Z",
          "updated_at": "2023-04-06T09:50:07Z",
          "author_association": "MEMBER",
          "body": "> I don't understand why in that example the line number for the STORE_FAST shouldn't be the same as that for the LOAD_CONST. Maybe you copied/pasted the wrong function? \r\n\r\nNo copy and paste error. That is a correct translation of the function. And that's the point: it is correct and does not conform to your intuition of the sequencing of line events and instructions. \r\nSee PEP 626 for what defines \"correct\" here.\r\n\r\n> it might be nice to be able to tell what the compiler did by tracing the instruction sequence.\r\n\r\n`dis` is a much better way to do that.\r\n\r\n\r\n\r\n\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1498787115/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1499736692",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1499736692",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1499736692,
          "node_id": "IC_kwDOBN0Z8c5ZZCp0",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-06T23:14:17Z",
          "updated_at": "2023-04-06T23:14:17Z",
          "author_association": "MEMBER",
          "body": "> > I don't understand why in that example the line number for the STORE_FAST shouldn't be the same as that for the LOAD_CONST. Maybe you copied/pasted the wrong function?\r\n> \r\n> No copy and paste error. That is a correct translation of the function. And that's the point: it is correct and does not conform to your intuition of the sequencing of line events and instructions. See PEP 626 for what defines \"correct\" here.\r\n> \r\n> > it might be nice to be able to tell what the compiler did by tracing the instruction sequence.\r\n> \r\n> `dis` is a much better way to do that.\r\n\r\nSo assuming the compiler is allowed to translate it that way, I still think the instrumentation should report the lineno before the first instruction considered to be part of that line. Then the LINE callback can assign the line number to some variable inside the debugger and the INSTRUCTION callback can safely assume that that line number is the best estimate of the line to which the instruction belongs (according to the compiler).\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1499736692/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1500076194",
          "html_url": "https://github.com/python/cpython/pull/103083#issuecomment-1500076194",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/103083",
          "id": 1500076194,
          "node_id": "IC_kwDOBN0Z8c5ZaVii",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-04-07T08:39:59Z",
          "updated_at": "2023-04-07T08:39:59Z",
          "author_association": "MEMBER",
          "body": "> Then the LINE callback can assign the line number to some variable inside the debugger and the INSTRUCTION callback can safely assume that that line number is the best estimate of the line to which the instruction belongs (according to the compiler).\r\n\r\nThat seems awfully complicated. You'll need to maintain a stack of line numbers to handle calls, handle every call/return call/raise, send/yield, etc pair.\r\n`frame.f_lineno` has the line number, if you need it.\r\n\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1500076194/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/44470",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/44470/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/44470/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/44470/events",
      "html_url": "https://github.com/python/cpython/issues/44470",
      "id": 1198820210,
      "node_id": "MDU6SXNzdWUxMTk4ODIwMjEw",
      "number": 44470,
      "title": "Py_Finalize() doesn't clear all Python objects at exit",
      "user": {
        "login": "643190f8-1196-46ee-bc5d-5687e07c3393",
        "id": 92819883,
        "node_id": "M_kgDOBYhRqw",
        "avatar_url": "https://avatars.githubusercontent.com/u/92819883?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393",
        "html_url": "https://github.com/kylotan",
        "followers_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/followers",
        "following_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/following{/other_user}",
        "gists_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/subscriptions",
        "organizations_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/orgs",
        "repos_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/repos",
        "events_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/events{/privacy}",
        "received_events_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018993468,
          "node_id": "LA_kwDOBN0Z8c7vjPk8",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-subinterpreters",
          "name": "topic-subinterpreters",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 188,
      "created_at": "2007-01-15T10:26:05Z",
      "updated_at": "2022-09-19T21:49:28Z",
      "closed_at": "2022-01-27T13:42:43Z",
      "author_association": "MANNEQUIN",
      "type": null,
      "active_lock_reason": null,
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [1635741](https://bugs.python.org/issue1635741)\n--- | :---\nNosy | @amauryfa, @orsenthil, @vstinner, @tiran, @phsilva, @encukou, @ambv, @ericsnowcurrently, @serhiy-storchaka, @phmc, @DimitrisJim, @corona10, @miss-islington, @shihai1991, @erlend-aasland, @koubaa, @h-vetinari, @csabesz88, @kumaraditya303, @CharlieZhao95\nPRs | <li>python/cpython#17835</li><li>python/cpython#17883</li><li>python/cpython#18030</li><li>python/cpython#18032</li><li>python/cpython#18049</li><li>python/cpython#18050</li><li>python/cpython#18065</li><li>python/cpython#18066</li><li>python/cpython#18358</li><li>python/cpython#18365</li><li>python/cpython#18374</li><li>python/cpython#18404</li><li>python/cpython#18486</li><li>python/cpython#18608</li><li>python/cpython#18613</li><li>python/cpython#19012</li><li>python/cpython#19015</li><li>python/cpython#19018</li><li>python/cpython#19022</li><li>python/cpython#19021</li><li>python/cpython#19044</li><li>python/cpython#19057</li><li>python/cpython#19069</li><li>python/cpython#19071</li><li>python/cpython#19074</li><li>python/cpython#19084</li><li>python/cpython#19100</li><li>python/cpython#19107</li><li>python/cpython#19122</li><li>python/cpython#19128</li><li>python/cpython#19135</li><li>python/cpython#19140</li><li>python/cpython#19150</li><li>python/cpython#19151</li><li>python/cpython#19242</li><li>python/cpython#19243</li><li>python/cpython#19252</li><li>python/cpython#19307</li><li>python/cpython#19382</li><li>python/cpython#19459</li><li>python/cpython#19798</li><li>python/cpython#19822</li><li>python/cpython#19907</li><li>python/cpython#19923</li><li>python/cpython#20540</li><li>python/cpython#20763</li><li>python/cpython#20808</li><li>python/cpython#20848</li><li>python/cpython#20920</li><li>python/cpython#21087</li><li>python/cpython#21168</li><li>python/cpython#21189</li><li>python/cpython#21269</li><li>python/cpython#21270</li><li>python/cpython#21294</li><li>python/cpython#21319</li><li>python/cpython#21371</li><li>python/cpython#21375</li><li>python/cpython#21378</li><li>python/cpython#21418</li><li>python/cpython#21605</li><li>python/cpython#21818</li><li>python/cpython#21855</li><li>python/cpython#21856</li><li>python/cpython#21896</li><li>python/cpython#21902</li><li>python/cpython#21985</li><li>python/cpython#21986</li><li>python/cpython#21995</li><li>python/cpython#22003</li><li>python/cpython#22049</li><li>python/cpython#22050</li><li>python/cpython#22051</li><li>python/cpython#22131</li><li>python/cpython#22134</li><li>python/cpython#22139</li><li>python/cpython#22145</li><li>python/cpython#22148</li><li>python/cpython#22149</li><li>python/cpython#22164</li><li>python/cpython#22165</li><li>python/cpython#22220</li><li>python/cpython#22222</li><li>python/cpython#22240</li><li>python/cpython#22242</li><li>python/cpython#22328</li><li>python/cpython#22415</li><li>python/cpython#22478</li><li>python/cpython#22489</li><li>python/cpython#22490</li><li>python/cpython#22712</li><li>python/cpython#22713</li><li>python/cpython#22838</li><li>python/cpython#22880</li><li>python/cpython#23091</li><li>python/cpython#23122</li><li>python/cpython#23146</li><li>python/cpython#23147</li><li>python/cpython#23148</li><li>python/cpython#23151</li><li>python/cpython#23170</li><li>python/cpython#23139</li><li>python/cpython#23188</li><li>python/cpython#23234</li><li>python/cpython#23236</li><li>python/cpython#23304</li><li>python/cpython#23358</li><li>python/cpython#23359</li><li>python/cpython#23360</li><li>python/cpython#23361</li><li>python/cpython#23376</li><li>python/cpython#23377</li><li>python/cpython#23378</li><li>python/cpython#23379</li><li>python/cpython#23381</li><li>python/cpython#23390</li><li>python/cpython#23393</li><li>python/cpython#23398</li><li>python/cpython#23401</li><li>python/cpython#23402</li><li>python/cpython#23404</li><li>python/cpython#23406</li><li>python/cpython#23409</li><li>python/cpython#23462</li><li>python/cpython#23443</li><li>python/cpython#23443</li><li>python/cpython#23535</li><li>python/cpython#23598</li><li>python/cpython#23793</li><li>python/cpython#23811</li><li>python/cpython#23972</li><li>python/cpython#24095</li><li>python/cpython#24175</li><li>python/cpython#24205</li><li>python/cpython#30522</li><li>python/cpython#30525</li><li>python/cpython#30744</li><li>python/cpython#31555</li><li>python/cpython#31560</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = <Date 2022-01-27.13:42:43.202>\ncreated_at = <Date 2007-01-15.10:26:05.000>\nlabels = ['expert-subinterpreters', 'interpreter-core', '3.11', 'performance']\ntitle = \"Py_Finalize() doesn't clear all Python objects at exit\"\nupdated_at = <Date 2022-02-25.11:34:18.230>\nuser = 'https://bugs.python.org/kylotan'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-02-25.11:34:18.230>\nactor = 'vstinner'\nassignee = 'none'\nclosed = True\nclosed_date = <Date 2022-01-27.13:42:43.202>\ncloser = 'vstinner'\ncomponents = ['Interpreter Core', 'Subinterpreters']\ncreation = <Date 2007-01-15.10:26:05.000>\ncreator = 'kylotan'\ndependencies = []\nfiles = []\nhgrepos = []\nissue_num = 1635741\nkeywords = ['patch']\nmessage_count = 185.0\nmessages = ['61054', '110895', '111024', '130729', '248761', '355187', '355189', '355191', '355193', '355194', '355201', '359342', '359482', '359830', '360063', '361427', '361428', '361466', '361798', '362068', '362124', '362143', '362144', '362195', '363935', '363936', '363937', '363940', '363941', '364234', '364330', '364379', '364463', '364521', '364609', '364656', '364833', '364836', '364845', '364871', '364883', '364906', '364909', '364951', '364952', '364968', '364971', '364972', '364973', '364975', '364987', '365008', '365017', '365043', '365386', '365388', '365484', '365584', '365611', '367686', '367796', '368096', '368318', '370561', '370763', '371119', '371569', '371683', '372061', '372077', '372096', '372102', '372103', '372797', '372912', '372938', '372942', '375169', '375272', '375286', '375287', '375288', '375290', '375311', '375567', '376218', '376221', '376240', '376288', '376360', '376461', '376474', '376477', '376480', '376493', '376500', '376552', '376554', '376555', '376556', '376566', '376567', '376571', '376572', '376616', '376687', '376993', '377253', '377364', '377365', '377523', '378115', '378685', '379280', '379287', '379667', '380216', '380270', '380280', '380317', '380318', '380331', '380332', '380340', '380346', '380351', '380733', '380758', '380854', '380857', '381124', '381300', '381317', '381318', '381351', '381352', '381376', '381379', '381391', '381392', '381395', '381396', '381400', '381411', '381423', '381426', '381431', '381432', '381434', '381476', '381477', '381571', '381572', '383155', '383168', '383276', '383283', '383285', '383287', '383454', '383636', '383785', '383799', '383801', '383844', '383847', '383880', '384039', '384042', '384326', '384352', '384646', '384978', '384987', '385010', '388728', '410809', '411116', '411278', '411311', '411872', '411961', '411997', '413938', '413979']\nnosy_count = 26.0\nnosy_names = ['amaury.forgeotdarc', 'orsenthil', 'kylotan', 'vstinner', 'christian.heimes', 'tlesher', 'phsilva', 'petr.viktorin', 'ysj.ray', 'santoso.wijaya', 'lukasz.langa', 'python-dev', 'eric.snow', 'serhiy.storchaka', 'pconnell', 'isoschiz', 'Jim Fasarakis-Hilliard', 'corona10', 'miss-islington', 'shihai1991', 'erlendaasland', 'koubaa', 'h-vetinari', 'TCsaba', 'kumaraditya', 'CharlieZhao']\npr_nums = ['17835', '17883', '18030', '18032', '18049', '18050', '18065', '18066', '18358', '18365', '18374', '18404', '18486', '18608', '18613', '19012', '19015', '19018', '19022', '19021', '19044', '19057', '19069', '19071', '19074', '19084', '19100', '19107', '19122', '19128', '19135', '19140', '19150', '19151', '19242', '19243', '19252', '19307', '19382', '19459', '19798', '19822', '19907', '19923', '20540', '20763', '20808', '20848', '20920', '21087', '21168', '21189', '21269', '21270', '21294', '21319', '21371', '21375', '21378', '21418', '21605', '21818', '21855', '21856', '21896', '21902', '21985', '21986', '21995', '22003', '22049', '22050', '22051', '22131', '22134', '22139', '22145', '22148', '22149', '22164', '22165', '22220', '22222', '22240', '22242', '22328', '22415', '22478', '22489', '22490', '22712', '22713', '22838', '22880', '23091', '23122', '23146', '23147', '23148', '23151', '23170', '23139', '23188', '23234', '23236', '23304', '23358', '23359', '23360', '23361', '23376', '23377', '23378', '23379', '23381', '23390', '23393', '23398', '23401', '23402', '23404', '23406', '23409', '23462', '23443', '23443', '23535', '23598', '23793', '23811', '23972', '24095', '24175', '24205', '30522', '30525', '30744', '31555', '31560']\npriority = 'normal'\nresolution = 'fixed'\nstage = 'resolved'\nstatus = 'closed'\nsuperseder = None\ntype = 'resource usage'\nurl = 'https://bugs.python.org/issue1635741'\nversions = ['Python 3.11']\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/44470/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/44470/timeline",
      "performed_via_github_app": null,
      "state_reason": "completed",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027499",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027499",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027499,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc0OTk=",
          "user": {
            "login": "643190f8-1196-46ee-bc5d-5687e07c3393",
            "id": 92819883,
            "node_id": "M_kgDOBYhRqw",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819883?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393",
            "html_url": "https://github.com/kylotan",
            "followers_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/followers",
            "following_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/following{/other_user}",
            "gists_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/subscriptions",
            "organizations_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/orgs",
            "repos_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/repos",
            "events_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/events{/privacy}",
            "received_events_url": "https://api.github.com/users/643190f8-1196-46ee-bc5d-5687e07c3393/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2007-01-15T10:26:05Z",
          "updated_at": "2007-01-15T10:26:05Z",
          "author_association": "MANNEQUIN",
          "body": "This C code:\n\n```c\n#include <Python.h>\nint main(int argc, char *argv[])\n{\n    Py_Initialize(); Py_Finalize();\n    Py_Initialize(); Py_Finalize();\n    Py_Initialize(); Py_Finalize();\n    Py_Initialize(); Py_Finalize();\n    Py_Initialize(); Py_Finalize();\n    Py_Initialize(); Py_Finalize();\n    Py_Initialize(); Py_Finalize();\n}\n```\n\n\nProduces this output:\n[7438 refs]\n[7499 refs]\n[7550 refs]\n[7601 refs]\n[7652 refs]\n[7703 refs]\n[7754 refs]\n\nA similar program configured to call the Py_Initialize()/Py_Finalize() 1000 times ends up with:\n...\n[58295 refs]\n[58346 refs]\n[58397 refs]\n\nThis is with a fresh debug build of Python 2.5.0 on Windows XP, using Visual C++ 2003.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027499/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027501",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027501",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027501,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MDE=",
          "user": {
            "login": "83d2e70e-e599-4a04-b820-3814bbdb9bef",
            "id": 92799458,
            "node_id": "M_kgDOBYgB4g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799458?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef",
            "html_url": "https://github.com/BreamoreBoy",
            "followers_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/followers",
            "following_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/following{/other_user}",
            "gists_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/subscriptions",
            "organizations_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/orgs",
            "repos_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/repos",
            "events_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/events{/privacy}",
            "received_events_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-07-20T13:41:15Z",
          "updated_at": "2010-07-20T13:41:15Z",
          "author_association": "MANNEQUIN",
          "body": "Does the title of this issue accurately reflect the current status of the Python interpreter?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027501/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027503",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027503",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027503,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MDM=",
          "user": {
            "login": "amauryfa",
            "id": 645208,
            "node_id": "MDQ6VXNlcjY0NTIwOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/645208?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/amauryfa",
            "html_url": "https://github.com/amauryfa",
            "followers_url": "https://api.github.com/users/amauryfa/followers",
            "following_url": "https://api.github.com/users/amauryfa/following{/other_user}",
            "gists_url": "https://api.github.com/users/amauryfa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/amauryfa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/amauryfa/subscriptions",
            "organizations_url": "https://api.github.com/users/amauryfa/orgs",
            "repos_url": "https://api.github.com/users/amauryfa/repos",
            "events_url": "https://api.github.com/users/amauryfa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/amauryfa/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-07-21T09:20:21Z",
          "updated_at": "2010-07-21T09:20:21Z",
          "author_association": "CONTRIBUTOR",
          "body": "Yes, some objects are not cleaned in finalization.\nThis is not a problem in usual cases though, when the interpreter is\nstarted only once.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027503/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027505",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027505",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027505,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MDU=",
          "user": {
            "login": "09aa2b3e-3f5a-4c34-93c0-4a96363de691",
            "id": 101776114,
            "node_id": "M_kgDOBhD68g",
            "avatar_url": "https://avatars.githubusercontent.com/u/101776114?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691",
            "html_url": "https://github.com/ysjray",
            "followers_url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691/followers",
            "following_url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691/following{/other_user}",
            "gists_url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691/subscriptions",
            "organizations_url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691/orgs",
            "repos_url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691/repos",
            "events_url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691/events{/privacy}",
            "received_events_url": "https://api.github.com/users/09aa2b3e-3f5a-4c34-93c0-4a96363de691/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-03-13T07:12:37Z",
          "updated_at": "2011-03-13T07:12:37Z",
          "author_association": "MANNEQUIN",
          "body": "> Does the title of this issue accurately reflect the current status of the Python interpreter?\r\n\r\nYes, here is the running result on current 3.3 latest code:\r\n[37182 refs]\r\n[39415 refs]\r\n[41607 refs]\r\n[43799 refs]\r\n[45991 refs]\r\n[48183 refs]\r\n[50375 refs]\r\n\r\n\r\nThis seems to be a known bug that Py_Finalize() doesn't free all objects according doc http://docs.python.org/dev/c-api/init.html?highlight=py_finalize#Py_Finalize",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027505/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027506",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027506",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027506,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MDY=",
          "user": {
            "login": "5d7fef82-ac8c-48c9-826f-a144dc718b10",
            "id": 101776408,
            "node_id": "M_kgDOBhD8GA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101776408?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10",
            "html_url": "https://github.com/AlexBudovski",
            "followers_url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10/followers",
            "following_url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10/following{/other_user}",
            "gists_url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10/subscriptions",
            "organizations_url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10/orgs",
            "repos_url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10/repos",
            "events_url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10/events{/privacy}",
            "received_events_url": "https://api.github.com/users/5d7fef82-ac8c-48c9-826f-a144dc718b10/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-08-18T06:20:56Z",
          "updated_at": "2015-08-18T06:20:56Z",
          "author_association": "MANNEQUIN",
          "body": "Interestingly enough, some of the leaked memory came from the finalize routine itself! Here's one example:\r\n\r\n0:004\\> !heap -p -a 0x000000DB144346F0\r\n    address 000000db144346f0 found in\r\n    \\_HEAP @ db0cae0000\r\n              HEAP_ENTRY Size Prev Flags            UserPtr UserSize - state\r\n        000000db14434690 030a 0000  [00]   000000db144346c0    03074 - (busy)\r\n        7ffc55628b04 ntdll!RtlpCallInterceptRoutine+0x0000000000000040\r\n        7ffc555f9f36 ntdll!RtlAllocateHeap+0x0000000000079836\r\n        7ffc2a60c4da ucrtbased!calloc_base+0x000000000000123a\r\n        7ffc2a60c27d ucrtbased!calloc_base+0x0000000000000fdd\r\n        7ffc2a60f34f ucrtbased!malloc_dbg+0x000000000000002f\r\n        7ffc2a60fdde ucrtbased!malloc+0x000000000000001e\r\n        5a5e6ef9 python36_d!_PyMem_RawMalloc+0x0000000000000029\r\n        5a5e78c7 python36_d!_PyMem_DebugAlloc+0x0000000000000087\r\n        5a5e5e6f python36_d!_PyMem_DebugMalloc+0x000000000000001f\r\n        5a5e7230 python36_d!PyMem_Malloc+0x0000000000000030\r\n        5a582047 python36_d!new_keys_object+0x0000000000000077\r\n        5a57f7c5 python36_d!dictresize+0x0000000000000085\r\n        5a57a4b2 python36_d!PyDict_Merge+0x0000000000000112\r\n        5a57bf33 python36_d!PyDict_Update+0x0000000000000023\r\n        5a75fb1d python36_d!PyImport_Cleanup+0x000000000000045d\r\n        5a778f9e python36_d!Py_Finalize+0x000000000000005e",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027506/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027509",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027509",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027509,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MDk=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-10-23T00:11:30Z",
          "updated_at": "2019-10-23T00:11:30Z",
          "author_association": "MEMBER",
          "body": "I tested on the master branch of Python:\r\n\\---\r\n```c\n#include <Python.h>\r\n\r\nvoid func()\r\n{\r\n    Py_Initialize(); Py_Finalize();\r\n    Py_ssize_t cnt = _Py_GetRefTotal();\r\n    printf(\"sys.gettotalrefcount(): %zd\\n\", cnt);\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    Py_SetProgramName(L\"./_testembed\");\r\n    for (int i=0; i < 10; i++) {\r\n        func();\r\n    }\r\n}\n```\n\r\n---\r\n\r\nEach iteration leaks around 5,000 Python objects:\r\n\\---\r\nsys.gettotalrefcount(): 15113\r\nsys.gettotalrefcount(): 19527\r\nsys.gettotalrefcount(): 23941\r\nsys.gettotalrefcount(): 28355\r\nsys.gettotalrefcount(): 32769\r\nsys.gettotalrefcount(): 37183\r\nsys.gettotalrefcount(): 41597\r\nsys.gettotalrefcount(): 46011\r\nsys.gettotalrefcount(): 50425\r\nsys.gettotalrefcount(): 54839\r\n\\---",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027509/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027510",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027510",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027510,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MTA=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-10-23T00:13:00Z",
          "updated_at": "2019-10-23T00:13:00Z",
          "author_association": "MEMBER",
          "body": "I marked bpo-6741 as a duplicate of this issue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027510/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027511",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027511",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027511,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MTE=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-10-23T00:16:01Z",
          "updated_at": "2019-10-23T00:16:01Z",
          "author_association": "MEMBER",
          "body": "I marked bpo-26888 as a duplicate of this issue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027511/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027512",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027512",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027512,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MTI=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-10-23T00:17:07Z",
          "updated_at": "2019-10-23T00:17:07Z",
          "author_association": "MEMBER",
          "body": "I marked bpo-21387 as a duplicate of this issue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027512/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027514",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027514",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027514,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MTQ=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-10-23T00:19:27Z",
          "updated_at": "2019-10-23T00:19:27Z",
          "author_association": "MEMBER",
          "body": "One part of this issue is that all C extensions of the stdlib should be updated to implement the PEP-489 \"Multi-phase extension module initialization\".",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027514/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027515",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027515",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027515,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MTU=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-10-23T00:32:01Z",
          "updated_at": "2019-10-23T00:32:01Z",
          "author_association": "MEMBER",
          "body": "I marked bpo-32026 as a duplicate of this issue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027515/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027517",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027517",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027517,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MTc=",
          "user": {
            "login": "shihai1991",
            "id": 9103416,
            "node_id": "MDQ6VXNlcjkxMDM0MTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9103416?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shihai1991",
            "html_url": "https://github.com/shihai1991",
            "followers_url": "https://api.github.com/users/shihai1991/followers",
            "following_url": "https://api.github.com/users/shihai1991/following{/other_user}",
            "gists_url": "https://api.github.com/users/shihai1991/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shihai1991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shihai1991/subscriptions",
            "organizations_url": "https://api.github.com/users/shihai1991/orgs",
            "repos_url": "https://api.github.com/users/shihai1991/repos",
            "events_url": "https://api.github.com/users/shihai1991/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shihai1991/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-01-05T13:30:21Z",
          "updated_at": "2020-01-05T13:30:21Z",
          "author_association": "MEMBER",
          "body": "One part of this issue is that all C extensions of the stdlib should be updated to implement the PEP-489 \"Multi-phase extension module initialization\".\r\n> I try to port \\_json extension module to multiphase initialization module, but the baseline(using victor's code) in my vm not changed\\~",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027517/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027518",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027518",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027518,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MTg=",
          "user": {
            "login": "shihai1991",
            "id": 9103416,
            "node_id": "MDQ6VXNlcjkxMDM0MTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9103416?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shihai1991",
            "html_url": "https://github.com/shihai1991",
            "followers_url": "https://api.github.com/users/shihai1991/followers",
            "following_url": "https://api.github.com/users/shihai1991/following{/other_user}",
            "gists_url": "https://api.github.com/users/shihai1991/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shihai1991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shihai1991/subscriptions",
            "organizations_url": "https://api.github.com/users/shihai1991/orgs",
            "repos_url": "https://api.github.com/users/shihai1991/repos",
            "events_url": "https://api.github.com/users/shihai1991/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shihai1991/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-01-07T00:41:22Z",
          "updated_at": "2020-01-07T00:41:22Z",
          "author_association": "MEMBER",
          "body": "Compare to \\_Py_ForgetReference(), \\_Py_INC_REFTOTAL in \\_Py_NewReference() looks redundant.\r\n\r\nREF: https://github.com/python/cpython/blob/master/Include/object.h#L442\r\n\r\nmaster brach baseline in my vm:\r\n```\r\nsys.gettotalrefcount(): 18049\r\nsys.gettotalrefcount(): 22463\r\n```\r\n\r\nafter [PR17883](https://github.com/python/cpython/pull/17883)\r\n```\r\nsys.gettotalrefcount(): 17589\r\nsys.gettotalrefcount(): 22000\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027518/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027520",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027520",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027520,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MjA=",
          "user": {
            "login": "shihai1991",
            "id": 9103416,
            "node_id": "MDQ6VXNlcjkxMDM0MTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9103416?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shihai1991",
            "html_url": "https://github.com/shihai1991",
            "followers_url": "https://api.github.com/users/shihai1991/followers",
            "following_url": "https://api.github.com/users/shihai1991/following{/other_user}",
            "gists_url": "https://api.github.com/users/shihai1991/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shihai1991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shihai1991/subscriptions",
            "organizations_url": "https://api.github.com/users/shihai1991/orgs",
            "repos_url": "https://api.github.com/users/shihai1991/repos",
            "events_url": "https://api.github.com/users/shihai1991/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shihai1991/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-01-12T03:11:46Z",
          "updated_at": "2020-01-12T03:11:46Z",
          "author_association": "MEMBER",
          "body": "FWIW, i counted the difference of each file's refs after `Py_Finalize()`.\r\n\r\n[('[Objects/dictobject.c](https://github.com/python/cpython/blob/main/Objects/dictobject.c)', 21434), ('[Python/marshal.c](https://github.com/python/cpython/blob/main/Python/marshal.c)', 8135), ('[Objects/codeobject.c](https://github.com/python/cpython/blob/main/Objects/codeobject.c)', 6245), ('[Objects/listobject.c](https://github.com/python/cpython/blob/main/Objects/listobject.c)', 6037), ('[Objects/tupleobject.c](https://github.com/python/cpython/blob/main/Objects/tupleobject.c)', 4169), ('[Objects/boolobject.c](https://github.com/python/cpython/blob/main/Objects/boolobject.c)', 2433), ('[Objects/object.c](https://github.com/python/cpython/blob/main/Objects/object.c)', 2364), ('[Objects/unicodeobject.c](https://github.com/python/cpython/blob/main/Objects/unicodeobject.c)', 1541), ('[Objects/longobject.c](https://github.com/python/cpython/blob/main/Objects/longobject.c)', 1387), ('[Objects/funcobject.c](https://github.com/python/cpython/blob/main/Objects/funcobject.c)', 528), ('[Objects/classobject.c](https://github.com/python/cpython/blob/main/Objects/classobject.c)', 528), ('[Objects/abstract.c](https://github.com/python/cpython/blob/main/Objects/abstract.c)', 463), ('[Python/structmember.c](https://github.com/python/cpython/blob/main/Python/structmember.c)', 369), ('./Include/objimpl.h', 277), ('[Objects/stringlib/partition.h](https://github.com/python/cpython/blob/main/Objects/stringlib/partition.h)', 273), ('[Python/import.c](https://github.com/python/cpython/blob/main/Python/import.c)', 259), ('[Python/codecs.c](https://github.com/python/cpython/blob/main/Python/codecs.c)', 197), ('./Modules/signalmodule.c', 61), ('./Modules/_threadmodule.c', 59), ('[Objects/exceptions.c](https://github.com/python/cpython/blob/main/Objects/exceptions.c)', 15), ('[Objects/bytesobject.c](https://github.com/python/cpython/blob/main/Objects/bytesobject.c)', 5), ('./Modules/_weakref.c', 4), ('[Python/_warnings.c](https://github.com/python/cpython/blob/main/Python/_warnings.c)', 3), ('./Modules/timemodule.c', 1), ('./Modules/_codecsmodule.c', 1), ('[Objects/bytearrayobject.c](https://github.com/python/cpython/blob/main/Objects/bytearrayobject.c)', 1), ('[Python/compile.c](https://github.com/python/cpython/blob/main/Python/compile.c)', 1), ('[Objects/sliceobject.c](https://github.com/python/cpython/blob/main/Objects/sliceobject.c)', 0), ('[Objects/memoryobject.c](https://github.com/python/cpython/blob/main/Objects/memoryobject.c)', 0), ('[Python/context.c](https://github.com/python/cpython/blob/main/Python/context.c)', -1), ('[Objects/clinic/longobject.c.h](https://github.com/python/cpython/blob/main/Objects/clinic/longobject.c.h)', -1), ('[Objects/enumobject.c](https://github.com/python/cpython/blob/main/Objects/enumobject.c)', -1), ('[Modules/gcmodule.c](https://github.com/python/cpython/blob/main/Modules/gcmodule.c)', -1), ('[Objects/namespaceobject.c](https://github.com/python/cpython/blob/main/Objects/namespaceobject.c)', -1), ('[Objects/stringlib/unicode_format.h](https://github.com/python/cpython/blob/main/Objects/stringlib/unicode_format.h)', -2), ('[Objects/rangeobject.c](https://github.com/python/cpython/blob/main/Objects/rangeobject.c)', -3), ('[Python/pystate.c](https://github.com/python/cpython/blob/main/Python/pystate.c)', -4), ('[Objects/fileobject.c](https://github.com/python/cpython/blob/main/Objects/fileobject.c)', -14), ('./Modules/_io/clinic/bufferedio.c.h', -17), ('./Modules/_io/iobase.c', -21), ('[Python/modsupport.c](https://github.com/python/cpython/blob/main/Python/modsupport.c)', -28), ('./Modules/_io/fileio.c', -28), ('[Python/pylifecycle.c](https://github.com/python/cpython/blob/main/Python/pylifecycle.c)', -37), ('./Modules/_io/textio.c', -39), ('[Objects/genobject.c](https://github.com/python/cpython/blob/main/Objects/genobject.c)', -53), ('[Objects/weakrefobject.c](https://github.com/python/cpython/blob/main/Objects/weakrefobject.c)', -54), ('./Modules/_io/bufferedio.c', -56), ('./Python/sysmodule.c', -68), ('./Modules/_io/_iomodule.c', -82), ('[Python/errors.c](https://github.com/python/cpython/blob/main/Python/errors.c)', -90), ('[Objects/descrobject.c](https://github.com/python/cpython/blob/main/Objects/descrobject.c)', -110), ('[Objects/structseq.c](https://github.com/python/cpython/blob/main/Objects/structseq.c)', -113), ('[Python/bltinmodule.c](https://github.com/python/cpython/blob/main/Python/bltinmodule.c)', -118), ('[Objects/setobject.c](https://github.com/python/cpython/blob/main/Objects/setobject.c)', -339), ('[Objects/moduleobject.c](https://github.com/python/cpython/blob/main/Objects/moduleobject.c)', -454), ('./Modules/posixmodule.c', -614), ('./Modules/_abc.c', -664), ('[Objects/call.c](https://github.com/python/cpython/blob/main/Objects/call.c)', -755), ('[Objects/typeobject.c](https://github.com/python/cpython/blob/main/Objects/typeobject.c)', -2035), ('[Objects/frameobject.c](https://github.com/python/cpython/blob/main/Objects/frameobject.c)', -6538), ('[Python/ceval.c](https://github.com/python/cpython/blob/main/Python/ceval.c)', -7857), ('./Include/object.h', -48292)]",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027520/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027521",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027521",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027521,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MjE=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-01-15T16:32:55Z",
          "updated_at": "2020-01-15T16:32:55Z",
          "author_association": "MEMBER",
          "body": "\nNew changeset ed154c387efc5f978ec97900ec9e0ec6631d5498 by Victor Stinner (Hai Shi) in branch 'master':\nbpo-1635741: Port \\_json extension module to multiphase initialization (PEP-489) (GH-17835)\nhttps://github.com/python/cpython/commit/ed154c387efc5f978ec97900ec9e0ec6631d5498\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027521/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027522",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027522",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027522,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MjI=",
          "user": {
            "login": "shihai1991",
            "id": 9103416,
            "node_id": "MDQ6VXNlcjkxMDM0MTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9103416?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shihai1991",
            "html_url": "https://github.com/shihai1991",
            "followers_url": "https://api.github.com/users/shihai1991/followers",
            "following_url": "https://api.github.com/users/shihai1991/following{/other_user}",
            "gists_url": "https://api.github.com/users/shihai1991/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shihai1991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shihai1991/subscriptions",
            "organizations_url": "https://api.github.com/users/shihai1991/orgs",
            "repos_url": "https://api.github.com/users/shihai1991/repos",
            "events_url": "https://api.github.com/users/shihai1991/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shihai1991/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-02-05T13:15:21Z",
          "updated_at": "2020-02-05T13:15:21Z",
          "author_association": "MEMBER",
          "body": "i thinkt that not checking `PyModule_AddObject()`'s result may cause this probleam too.\r\n\r\n1) python-ast.c have one question, i fix it in [PR18358](https://github.com/python/cpython/pull/18358).\r\n2) most of the questions in extension module, for example: https://github.com/python/cpython/blob/master/Modules/gcmodule.c#L2019-L2022",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027522/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027524",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027524",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027524,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MjQ=",
          "user": {
            "login": "shihai1991",
            "id": 9103416,
            "node_id": "MDQ6VXNlcjkxMDM0MTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9103416?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shihai1991",
            "html_url": "https://github.com/shihai1991",
            "followers_url": "https://api.github.com/users/shihai1991/followers",
            "following_url": "https://api.github.com/users/shihai1991/following{/other_user}",
            "gists_url": "https://api.github.com/users/shihai1991/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shihai1991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shihai1991/subscriptions",
            "organizations_url": "https://api.github.com/users/shihai1991/orgs",
            "repos_url": "https://api.github.com/users/shihai1991/repos",
            "events_url": "https://api.github.com/users/shihai1991/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shihai1991/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-02-05T13:17:36Z",
          "updated_at": "2020-02-05T13:17:36Z",
          "author_association": "MEMBER",
          "body": "update the above info:\r\n1) python-ast.c have one question, i fix it in [PR18365](https://github.com/python/cpython/pull/18365).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027524/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027525",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027525",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027525,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MjU=",
          "user": {
            "login": "shihai1991",
            "id": 9103416,
            "node_id": "MDQ6VXNlcjkxMDM0MTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9103416?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shihai1991",
            "html_url": "https://github.com/shihai1991",
            "followers_url": "https://api.github.com/users/shihai1991/followers",
            "following_url": "https://api.github.com/users/shihai1991/following{/other_user}",
            "gists_url": "https://api.github.com/users/shihai1991/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shihai1991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shihai1991/subscriptions",
            "organizations_url": "https://api.github.com/users/shihai1991/orgs",
            "repos_url": "https://api.github.com/users/shihai1991/repos",
            "events_url": "https://api.github.com/users/shihai1991/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shihai1991/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-02-06T01:21:01Z",
          "updated_at": "2020-02-06T01:21:01Z",
          "author_association": "MEMBER",
          "body": "> 1) python-ast.c have one question, i fix it in [PR18365](https://github.com/python/cpython/pull/18365).\r\n> 2) most of the questions in extension module, for example: https://github.com/python/cpython/blob/master/Modules/gcmodule.c#L2019-L2022\r\n\r\nbrandt does relevant work already in [PR17276](https://github.com/python/cpython/pull/17276)\u3001[PR38823](https://github.com/python/cpython/pull/38823).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027525/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027526",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027526",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027526,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1MjY=",
          "user": {
            "login": "miss-islington",
            "id": 31488909,
            "node_id": "MDQ6VXNlcjMxNDg4OTA5",
            "avatar_url": "https://avatars.githubusercontent.com/u/31488909?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/miss-islington",
            "html_url": "https://github.com/miss-islington",
            "followers_url": "https://api.github.com/users/miss-islington/followers",
            "following_url": "https://api.github.com/users/miss-islington/following{/other_user}",
            "gists_url": "https://api.github.com/users/miss-islington/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/miss-islington/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/miss-islington/subscriptions",
            "organizations_url": "https://api.github.com/users/miss-islington/orgs",
            "repos_url": "https://api.github.com/users/miss-islington/repos",
            "events_url": "https://api.github.com/users/miss-islington/events{/privacy}",
            "received_events_url": "https://api.github.com/users/miss-islington/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-02-11T11:16:45Z",
          "updated_at": "2020-02-11T11:16:45Z",
          "author_association": "CONTRIBUTOR",
          "body": "\nNew changeset 1ea45ae257971ee7b648e3b031603a31fc059f81 by Hai Shi in branch 'master':\nbpo-1635741: Port \\_codecs extension module to multiphase initialization (PEP-489) (GH-18065)\nhttps://github.com/python/cpython/commit/1ea45ae257971ee7b648e3b031603a31fc059f81\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027526/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027527",
          "html_url": "https://github.com/python/cpython/issues/44470#issuecomment-1094027527",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/44470",
          "id": 1094027527,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTQwMjc1Mjc=",
          "user": {
            "login": "shihai1991",
            "id": 9103416,
            "node_id": "MDQ6VXNlcjkxMDM0MTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9103416?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shihai1991",
            "html_url": "https://github.com/shihai1991",
            "followers_url": "https://api.github.com/users/shihai1991/followers",
            "following_url": "https://api.github.com/users/shihai1991/following{/other_user}",
            "gists_url": "https://api.github.com/users/shihai1991/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shihai1991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shihai1991/subscriptions",
            "organizations_url": "https://api.github.com/users/shihai1991/orgs",
            "repos_url": "https://api.github.com/users/shihai1991/repos",
            "events_url": "https://api.github.com/users/shihai1991/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shihai1991/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-02-16T12:56:28Z",
          "updated_at": "2020-02-16T12:56:28Z",
          "author_association": "MEMBER",
          "body": "Leave a note for myself:\r\nI check the remaining object roughly(though dump_refs function), most of remaining object is 'str', such as:\r\n'0x7f779cf88880 [13] str'-\\>'0x7f779cf88880 [26] str'\r\n\r\nSo far, I don't know which file and fileno create those object. MAYBE I need find a hack way to sign this mallocing operation?(not sure)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1094027527/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126555",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126555/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126555/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126555/events",
      "html_url": "https://github.com/python/cpython/pull/126555",
      "id": 2642087697,
      "node_id": "PR_kwDOBN0Z8c6BPIkC",
      "number": 126555,
      "title": "gh-126554: ctypes: Correctly handle NULL dlsym values",
      "user": {
        "login": "grgalex",
        "id": 62315387,
        "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grgalex",
        "html_url": "https://github.com/grgalex",
        "followers_url": "https://api.github.com/users/grgalex/followers",
        "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
        "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
        "organizations_url": "https://api.github.com/users/grgalex/orgs",
        "repos_url": "https://api.github.com/users/grgalex/repos",
        "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
        "received_events_url": "https://api.github.com/users/grgalex/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2211400743,
          "node_id": "MDU6TGFiZWwyMjExNDAwNzQz",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-ctypes",
          "name": "topic-ctypes",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "encukou",
          "id": 302922,
          "node_id": "MDQ6VXNlcjMwMjkyMg==",
          "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/encukou",
          "html_url": "https://github.com/encukou",
          "followers_url": "https://api.github.com/users/encukou/followers",
          "following_url": "https://api.github.com/users/encukou/following{/other_user}",
          "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
          "organizations_url": "https://api.github.com/users/encukou/orgs",
          "repos_url": "https://api.github.com/users/encukou/repos",
          "events_url": "https://api.github.com/users/encukou/events{/privacy}",
          "received_events_url": "https://api.github.com/users/encukou/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 47,
      "created_at": "2024-11-07T20:20:48Z",
      "updated_at": "2024-12-09T14:16:10Z",
      "closed_at": "2024-11-15T10:05:51Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/126555",
        "html_url": "https://github.com/python/cpython/pull/126555",
        "diff_url": "https://github.com/python/cpython/pull/126555.diff",
        "patch_url": "https://github.com/python/cpython/pull/126555.patch",
        "merged_at": "2024-11-15T10:05:51Z"
      },
      "body": "For dlsym(), a return value of NULL does not necessarily indicate an error [1].\r\n\r\nTherefore, to avoid using stale (or NULL) dlerror() values, we must:\r\n\r\n 1. clear the previous error state by calling dlerror()\r\n 2. call dlsym()\r\n 3. call dlerror()\r\n\r\nIf the return value of dlerror() is not NULL, an error occured.\r\n\r\nIn our case of ctypes, I understand that we subjectively treat a NULL return value from dlsym() as an error, so we must format a special string for that.\r\n\r\n[1] https://man7.org/linux/man-pages/man3/dlsym.3.html\r\n\r\n<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\ngh-NNNNN: Summary of the changes made\r\n```\r\n\r\nWhere: gh-NNNNN refers to the GitHub issue number.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `main`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `main`.\r\n\r\n-->\r\n\r\n\r\n<!-- gh-issue-number: gh-126554 -->\r\n* Issue: gh-126554\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126555/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 1,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126555/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2463137612",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2463137612",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2463137612,
          "node_id": "IC_kwDOBN0Z8c6S0H9M",
          "user": {
            "login": "ghost",
            "id": 10137,
            "node_id": "MDQ6VXNlcjEwMTM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following{/other_user}",
            "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-07T20:20:52Z",
          "updated_at": "2024-11-08T13:16:14Z",
          "author_association": "NONE",
          "body": "All commit authors signed the Contributor License Agreement. <br/> [![CLA signed](https://cpython-clabot.herokuapp.com/cla-signed.svg)](https://cpython-clabot.herokuapp.com/signed-contributor-license-agreement?version=96a49432-b8b1-11ec-9bf5-bfe9ad6c72c4)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2463137612/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2463137642",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2463137642",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2463137642,
          "node_id": "IC_kwDOBN0Z8c6S0H9q",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-07T20:20:52Z",
          "updated_at": "2024-11-07T20:20:52Z",
          "author_association": "NONE",
          "body": "Most changes to Python [require a NEWS entry](https://devguide.python.org/core-developers/committing/#updating-news-and-what-s-new-in-python). Add one using the [blurb_it](https://blurb-it.herokuapp.com) web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.\n\nIf this change has little impact on Python users, wait for a maintainer to apply the `skip news` label instead.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2463137642/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2463175914",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2463175914",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2463175914,
          "node_id": "IC_kwDOBN0Z8c6S0RTq",
          "user": {
            "login": "efimov-mikhail",
            "id": 5574866,
            "node_id": "MDQ6VXNlcjU1NzQ4NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5574866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/efimov-mikhail",
            "html_url": "https://github.com/efimov-mikhail",
            "followers_url": "https://api.github.com/users/efimov-mikhail/followers",
            "following_url": "https://api.github.com/users/efimov-mikhail/following{/other_user}",
            "gists_url": "https://api.github.com/users/efimov-mikhail/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/efimov-mikhail/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/efimov-mikhail/subscriptions",
            "organizations_url": "https://api.github.com/users/efimov-mikhail/orgs",
            "repos_url": "https://api.github.com/users/efimov-mikhail/repos",
            "events_url": "https://api.github.com/users/efimov-mikhail/events{/privacy}",
            "received_events_url": "https://api.github.com/users/efimov-mikhail/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-07T20:43:58Z",
          "updated_at": "2024-11-07T20:43:58Z",
          "author_association": "CONTRIBUTOR",
          "body": "> On success, these functions return the address associated with\r\n> symbol.  On failure, they return NULL; the cause of the error can\r\n> be diagnosed using [dlerror(3)](https://man7.org/linux/man-pages/man3/dlerror.3.html).\r\n\r\nThis is direct quotation from the man page you linked.\r\nWhy you think this is correct?\r\n\r\n> dlsym(), a return value of NULL does not necessarily indicate an error [1].",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2463175914/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2463181754",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2463181754",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2463181754,
          "node_id": "IC_kwDOBN0Z8c6S0Su6",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-07T20:47:47Z",
          "updated_at": "2024-11-07T20:53:30Z",
          "author_association": "CONTRIBUTOR",
          "body": "@efimov-mikhail\r\n\r\nIndeed, I failed to mention that at some point the man page contradicts itself, and I believe that the part you quoted is something the maintainer forgot to remove.\r\n\r\n> [edit: added this part]\r\n\r\nI say this because further up, in the DESCRIPTION, the man page states:\r\n```\r\nIn unusual cases (see NOTES) the value of the symbol could\r\nactually be NULL.  Therefore, a NULL return from dlsym() need not\r\nindicate an error.  The correct way to distinguish an error from\r\na symbol whose value is NULL is to call dlerror(3) to clear any\r\nold error conditions, then call dlsym(), and then call dlerror(3)\r\nagain, saving its return value into a variable, and check whether\r\nthis saved value is not NULL.\r\n```\r\n> [end of edit]\r\n\r\nAdditionally, further down, in the NOTES segment, the man page states:\r\n```\r\nThere are several scenarios when the address of a global symbol\r\nis NULL.  For example, a symbol can be placed at zero address by\r\nthe linker, via a linker script or with --defsym command-line\r\noption.  Undefined weak symbols also have NULL value.  Finally,\r\nthe symbol value may be the result of a GNU indirect function\r\n(IFUNC) resolver function that returns NULL as the resolved\r\nvalue.  In the latter case, dlsym() also returns NULL without\r\nerror.  However, in the former two cases, the behavior of GNU\r\ndynamic linker is inconsistent: relocation processing succeeds\r\nand the symbol can be observed to have NULL value, but dlsym()\r\nfails and dlerror() indicates a lookup error.\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2463181754/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2463188024",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2463188024",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2463188024,
          "node_id": "IC_kwDOBN0Z8c6S0UQ4",
          "user": {
            "login": "efimov-mikhail",
            "id": 5574866,
            "node_id": "MDQ6VXNlcjU1NzQ4NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5574866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/efimov-mikhail",
            "html_url": "https://github.com/efimov-mikhail",
            "followers_url": "https://api.github.com/users/efimov-mikhail/followers",
            "following_url": "https://api.github.com/users/efimov-mikhail/following{/other_user}",
            "gists_url": "https://api.github.com/users/efimov-mikhail/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/efimov-mikhail/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/efimov-mikhail/subscriptions",
            "organizations_url": "https://api.github.com/users/efimov-mikhail/orgs",
            "repos_url": "https://api.github.com/users/efimov-mikhail/repos",
            "events_url": "https://api.github.com/users/efimov-mikhail/events{/privacy}",
            "received_events_url": "https://api.github.com/users/efimov-mikhail/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-07T20:52:03Z",
          "updated_at": "2024-11-07T20:52:14Z",
          "author_association": "CONTRIBUTOR",
          "body": "Understood. IMO, it would be better if we can make an actual reproducible test case, and put this case into regular testing procedure.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2463188024/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2463289611",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2463289611",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2463289611,
          "node_id": "IC_kwDOBN0Z8c6S0tEL",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-07T21:46:00Z",
          "updated_at": "2024-11-07T21:46:00Z",
          "author_association": "CONTRIBUTOR",
          "body": "See reproducer here: https://github.com/python/cpython/issues/126554#issuecomment-2463266531",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2463289611/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464779001",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464779001",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464779001,
          "node_id": "IC_kwDOBN0Z8c6S6Yr5",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T13:32:33Z",
          "updated_at": "2024-11-08T13:32:33Z",
          "author_association": "CONTRIBUTOR",
          "body": "@ZeroIntensity\r\n\r\n1. I understand that I can just click \"Commit\" on your proposed changes, and then we can squash before merging\r\n2. With some grepping I found out that we probably also need to change https://github.com/python/cpython/blob/b19d12f44735583e339ee6ee560588fcf22633b4/Modules/_ctypes/callproc.c#L1626\r\nusing the same approach.\r\n3. Regarding the test case, I'm thinking something similar to https://github.com/python/cpython/blob/b19d12f44735583e339ee6ee560588fcf22633b4/Lib/test/test_ctypes/test_find.py, where we will:\r\n    1. Write a fixed string (the content of `foo.c` from the reproducer), \r\n    2. Compile (as does the `test_find` testcase) into a shared lib\r\n    3. Load, and access the `foo` object.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464779001/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464815498",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464815498",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464815498,
          "node_id": "IC_kwDOBN0Z8c6S6hmK",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T13:50:44Z",
          "updated_at": "2024-11-08T13:50:44Z",
          "author_association": "CONTRIBUTOR",
          "body": "(2) is done, pushing  a commit. I also added a comment that explicitly states why we call `dlerror()` before `dlsym()`.\r\n\r\nFrom a project maintaner's POV, if we have 3 instances of this phenomenon, do we add a comment disclaimer at every instance? (This is the approach I took, but I'm unsure what the best / most common practice is.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464815498/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464818338",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464818338",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464818338,
          "node_id": "IC_kwDOBN0Z8c6S6iSi",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T13:51:18Z",
          "updated_at": "2024-11-08T13:51:18Z",
          "author_association": "CONTRIBUTOR",
          "body": "Proceeding with the test case (3), will let you know when ready.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464818338/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464829488",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464829488",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464829488,
          "node_id": "IC_kwDOBN0Z8c6S6lAw",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T13:56:17Z",
          "updated_at": "2024-11-08T13:56:17Z",
          "author_association": "MEMBER",
          "body": "> * I understand that I can just click \"Commit\" on your proposed changes, and then we can squash before merging\r\n\r\nYup. In fact, that's the preferred workflow for us. Force pushing onto one commit is very much discouraged. \r\n\r\n> 2\\. With some grepping I found out that we probably also need to change\r\n\r\nThat looks like a problem too, yeah. Thanks!\r\n\r\nI'll create a separate issue if I can come up with a repro for the locale issue. (I'll CC you on it, if you want to author that PR as well.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464829488/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464906905",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464906905",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464906905,
          "node_id": "IC_kwDOBN0Z8c6S636Z",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T14:30:47Z",
          "updated_at": "2024-11-08T14:30:47Z",
          "author_association": "CONTRIBUTOR",
          "body": "Added a commit with the test case under `test_ctypes/test_dlerror`. PTAL.\r\n\r\nRunning on the PR branch, it passes :)\r\n\r\nOn HEAD of main, it explodes (segfault).\r\n\r\nDo we have any way of handling this gracefully (maybe running a subprocess with the interpreter?), or is it  the correct way to go?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464906905/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464919440",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464919440",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464919440,
          "node_id": "IC_kwDOBN0Z8c6S66-Q",
          "user": {
            "login": "efimov-mikhail",
            "id": 5574866,
            "node_id": "MDQ6VXNlcjU1NzQ4NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5574866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/efimov-mikhail",
            "html_url": "https://github.com/efimov-mikhail",
            "followers_url": "https://api.github.com/users/efimov-mikhail/followers",
            "following_url": "https://api.github.com/users/efimov-mikhail/following{/other_user}",
            "gists_url": "https://api.github.com/users/efimov-mikhail/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/efimov-mikhail/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/efimov-mikhail/subscriptions",
            "organizations_url": "https://api.github.com/users/efimov-mikhail/orgs",
            "repos_url": "https://api.github.com/users/efimov-mikhail/repos",
            "events_url": "https://api.github.com/users/efimov-mikhail/events{/privacy}",
            "received_events_url": "https://api.github.com/users/efimov-mikhail/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T14:36:43Z",
          "updated_at": "2024-11-08T14:36:43Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Do we have any way of handling this gracefully (maybe running a subprocess with the interpreter?)\r\n\r\nCould you please explain, what exactly are you speaking about?\r\nGracefully handling what?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464919440/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464922075",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464922075",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464922075,
          "node_id": "IC_kwDOBN0Z8c6S67nb",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T14:37:59Z",
          "updated_at": "2024-11-08T14:42:59Z",
          "author_association": "CONTRIBUTOR",
          "body": "If we want to be pedantic, we must check all 3 code paths that invoke `dlsym()`.\r\n\r\nIn this case, we only check one (`PyCFuncPtr_FromDll`).\r\n\r\nOn one hand, since our amendment is the same across all 3 funcs, we should theoretically be OK.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464922075/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464927212",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464927212",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464927212,
          "node_id": "IC_kwDOBN0Z8c6S683s",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T14:40:20Z",
          "updated_at": "2024-11-08T14:55:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > Do we have any way of handling this gracefully (maybe running a subprocess with the interpreter?)\r\n> \r\n> Could you please explain, what exactly are you speaking about? Gracefully handling what?\r\n\r\n@efimov-mikhail\r\n\r\nIf I run the test on the main branch, the Python interpreter gets a segmentation fault.\r\n\r\nWhat I'm saying is that in a scenario where someone runs all tests, when the `./python -m test` process encounters this test, it will exit with a segmentation fault and terminate the testing procedure. It won't mark the test as failing. It will explode.\r\n\r\nMaybe I have misunderstood something regarding the philosophy of testing.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464927212/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464932491",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464932491",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464932491,
          "node_id": "IC_kwDOBN0Z8c6S6-KL",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T14:42:48Z",
          "updated_at": "2024-11-08T14:42:48Z",
          "author_association": "MEMBER",
          "body": "Run the test in a subprocess and check the return code.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464932491/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464935416",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464935416",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464935416,
          "node_id": "IC_kwDOBN0Z8c6S6-34",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T14:43:58Z",
          "updated_at": "2024-11-08T14:43:58Z",
          "author_association": "CONTRIBUTOR",
          "body": "> From a project maintaner's POV, if we have 3 instances of this phenomenon, do we add a comment disclaimer at every instance? (This is the approach I took, but I'm unsure what the best / most common practice is.)\r\n\r\n@ZeroIntensity Any thoughts on this?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464935416/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464966953",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464966953",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464966953,
          "node_id": "IC_kwDOBN0Z8c6S7Gkp",
          "user": {
            "login": "efimov-mikhail",
            "id": 5574866,
            "node_id": "MDQ6VXNlcjU1NzQ4NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5574866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/efimov-mikhail",
            "html_url": "https://github.com/efimov-mikhail",
            "followers_url": "https://api.github.com/users/efimov-mikhail/followers",
            "following_url": "https://api.github.com/users/efimov-mikhail/following{/other_user}",
            "gists_url": "https://api.github.com/users/efimov-mikhail/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/efimov-mikhail/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/efimov-mikhail/subscriptions",
            "organizations_url": "https://api.github.com/users/efimov-mikhail/orgs",
            "repos_url": "https://api.github.com/users/efimov-mikhail/repos",
            "events_url": "https://api.github.com/users/efimov-mikhail/events{/privacy}",
            "received_events_url": "https://api.github.com/users/efimov-mikhail/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T14:57:01Z",
          "updated_at": "2024-11-08T15:00:00Z",
          "author_association": "CONTRIBUTOR",
          "body": "> If I run the test on the main branch, the Python interpreter gets a segmentation fault.\r\n\r\nYes, and this is ok.\r\nFor now, there is no such test on main.\r\nAfter this PR will be merged, there will be dlsym fix and the tests on it.\r\n\r\n> From a project maintaner's POV, if we have 3 instances of this phenomenon, do we add a comment disclaimer at every instance? (This is the approach I took, but I'm unsure what the best / most common practice is.)\r\n\r\nIMO, every call of function which is not obvious and looks like redundant should have a comment.\r\nMaybe we can make one function like `py_dlsym` for this case, but I'm not sure that it worth it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464966953/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464975005",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2464975005",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2464975005,
          "node_id": "IC_kwDOBN0Z8c6S7Iid",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T15:00:20Z",
          "updated_at": "2024-11-08T15:00:20Z",
          "author_association": "CONTRIBUTOR",
          "body": "@efimov-mikhail\r\n\r\nI see. So you and Peter are suggesting two different approaches.\r\n\r\nShould we decide on which one to take?\r\n\r\nI think it's a matter of testing philosophy, with which I'm not familiar.\r\n\r\nI feel that the subprocess approach is cleaner, even if we agree that the tests are meant to be run after the fix is applied.\r\n\r\nIn the sense that if a regression happens, we will get a segmentation fault, which I believe shouldn't happen in the main testing process.\r\n\r\nWDYT?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464975005/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2465205638",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2465205638",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2465205638,
          "node_id": "IC_kwDOBN0Z8c6S8A2G",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T16:23:34Z",
          "updated_at": "2024-11-08T16:23:34Z",
          "author_association": "MEMBER",
          "body": "I don't think it matters that much. If we hit a regression and get a segfault there, it's pretty easy to track it down.\n\nRegarding the redundancy, I would prefer adding a utility function if there are multiple places where this can happen.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2465205638/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2465216290",
          "html_url": "https://github.com/python/cpython/pull/126555#issuecomment-2465216290",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126555",
          "id": 2465216290,
          "node_id": "IC_kwDOBN0Z8c6S8Dci",
          "user": {
            "login": "grgalex",
            "id": 62315387,
            "node_id": "MDQ6VXNlcjYyMzE1Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/62315387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/grgalex",
            "html_url": "https://github.com/grgalex",
            "followers_url": "https://api.github.com/users/grgalex/followers",
            "following_url": "https://api.github.com/users/grgalex/following{/other_user}",
            "gists_url": "https://api.github.com/users/grgalex/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/grgalex/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/grgalex/subscriptions",
            "organizations_url": "https://api.github.com/users/grgalex/orgs",
            "repos_url": "https://api.github.com/users/grgalex/repos",
            "events_url": "https://api.github.com/users/grgalex/events{/privacy}",
            "received_events_url": "https://api.github.com/users/grgalex/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T16:29:07Z",
          "updated_at": "2024-11-08T16:30:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "ACK on the testing part.\r\n\r\nRegarding adding an intermediary function, it's not going to be easy in this case, the code needs major refactoring to account for the `#ifdef` cases, different types of exceptions raised (`AttributeError`, `ValueError`, `OSError`).\r\n\r\nI think we'll have to keep it as is, in the context of this PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2465216290/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/99507",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/99507/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/99507/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/99507/events",
      "html_url": "https://github.com/python/cpython/pull/99507",
      "id": 1449646540,
      "node_id": "PR_kwDOBN0Z8c5C7A_A",
      "number": 99507,
      "title": "gh-96168: Add sqlite3 row factory how-to",
      "user": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 667924166,
          "node_id": "MDU6TGFiZWw2Njc5MjQxNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/skip%20news",
          "name": "skip news",
          "color": "000000",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2022-11-15T11:43:30Z",
      "updated_at": "2022-11-25T13:07:46Z",
      "closed_at": "2022-11-25T13:07:28Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/99507",
        "html_url": "https://github.com/python/cpython/pull/99507",
        "diff_url": "https://github.com/python/cpython/pull/99507.diff",
        "patch_url": "https://github.com/python/cpython/pull/99507.patch",
        "merged_at": "2022-11-25T13:07:28Z"
      },
      "body": "\n\n<!-- gh-issue-number: gh-96168 -->\n* Issue: gh-96168\n<!-- /gh-issue-number -->\n",
      "closed_by": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/99507/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/99507/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1316719035",
          "html_url": "https://github.com/python/cpython/pull/99507#issuecomment-1316719035",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/99507",
          "id": 1316719035,
          "node_id": "IC_kwDOBN0Z8c5Oe4m7",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-11-16T09:57:07Z",
          "updated_at": "2022-11-16T09:57:07Z",
          "author_association": "CONTRIBUTOR",
          "body": "> However, maybe this is just me, but to me the section did appear pretty heavy on examples, but without as much explicit focus on solving specific user problems, as would be appropriate for a how-to.\r\n\r\nYeah, maybe... but How To's are recipes. How can I create a foo row factory? How do I use a bar row factory? How do I use the sqlite3.Row row factory? I don't think it matters much that it is example heavy. IMO it is too thin for a tutorial, and definitely too thin for an explanation.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1316719035/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1316768719",
          "html_url": "https://github.com/python/cpython/pull/99507#issuecomment-1316768719",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/99507",
          "id": 1316768719,
          "node_id": "IC_kwDOBN0Z8c5OfEvP",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-11-16T10:32:09Z",
          "updated_at": "2022-11-17T17:28:44Z",
          "author_association": "CONTRIBUTOR",
          "body": "Ouch, it just occurred to me that the Cursor also has a `row_factory` attribute, with the following problems:\r\n\r\n- it is not documented (easily fixed; ~we can do that in this PR~ done in this PR)\r\n- it is _copied_ from the connection in `Cursor.__init__`, so changing the connection row factory does not affect the row factories of the cursors belonging to that connection; vice versa\r\n\r\nSo, more prose coming up.\r\n\r\n```python\r\n>>> import sqlite3\r\n>>> cx = sqlite3.connect(\":memory:\")\r\n>>> cx.row_factory = sqlite3.Row\r\n>>> cu = cx.cursor()\r\n>>> cx.row_factory = None\r\n>>> cu.row_factory == cx.row_factory\r\nFalse\r\n>>> cu.connection.row_factory == cx.row_factory\r\nTrue\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1316768719/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1318969178",
          "html_url": "https://github.com/python/cpython/pull/99507#issuecomment-1318969178",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/99507",
          "id": 1318969178,
          "node_id": "IC_kwDOBN0Z8c5Ond9a",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-11-17T17:27:31Z",
          "updated_at": "2022-11-17T17:27:31Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks for your feedback CAM and \u00c9ric; this PR is in a much better state now. I've addressed the last round of reviews. Please take another look.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1318969178/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1319279705",
          "html_url": "https://github.com/python/cpython/pull/99507#issuecomment-1319279705",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/99507",
          "id": 1319279705,
          "node_id": "IC_kwDOBN0Z8c5OopxZ",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-11-17T22:16:49Z",
          "updated_at": "2022-11-17T22:16:49Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thank you all. I've addressed the easy parts of CAM's review, including the simplification of the named tuple[^1] example. I simplified it further. I also reworded the premature optimisation[^1] suggestion. It originally ended up as a single (four-line) sentence; I broke it up in two. Perhaps it's still too verbose.\r\n\r\nI haven't yet addressed the `row_factory` connection and cursor attribute reference issues; I'll have to sleep on those two.\r\n\r\n[^1]: pun intended",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1319279705/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1323560046",
          "html_url": "https://github.com/python/cpython/pull/99507#issuecomment-1323560046",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/99507",
          "id": 1323560046,
          "node_id": "IC_kwDOBN0Z8c5O4-xu",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-11-22T12:03:17Z",
          "updated_at": "2022-11-22T12:03:17Z",
          "author_association": "CONTRIBUTOR",
          "body": "@CAM-Gerlach: I've reworded the reference, hopefully to the better; IMO the current version reflects the difference between the two row factory attributes more clearly. I also removed the example from ab98877; IMO it is superfluous with the now (hopefully) improved reference. Looking forward to your comments.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1323560046/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1327207008",
          "html_url": "https://github.com/python/cpython/pull/99507#issuecomment-1327207008",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/99507",
          "id": 1327207008,
          "node_id": "IC_kwDOBN0Z8c5PG5Jg",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-11-25T09:28:43Z",
          "updated_at": "2022-11-25T09:28:43Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks again y'all for improving this part of the docs. I'm going to land this later today. A lot of back and forth, but IMO totally worth it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1327207008/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1327452831",
          "html_url": "https://github.com/python/cpython/pull/99507#issuecomment-1327452831",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/99507",
          "id": 1327452831,
          "node_id": "IC_kwDOBN0Z8c5PH1Kf",
          "user": {
            "login": "miss-islington",
            "id": 31488909,
            "node_id": "MDQ6VXNlcjMxNDg4OTA5",
            "avatar_url": "https://avatars.githubusercontent.com/u/31488909?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/miss-islington",
            "html_url": "https://github.com/miss-islington",
            "followers_url": "https://api.github.com/users/miss-islington/followers",
            "following_url": "https://api.github.com/users/miss-islington/following{/other_user}",
            "gists_url": "https://api.github.com/users/miss-islington/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/miss-islington/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/miss-islington/subscriptions",
            "organizations_url": "https://api.github.com/users/miss-islington/orgs",
            "repos_url": "https://api.github.com/users/miss-islington/repos",
            "events_url": "https://api.github.com/users/miss-islington/events{/privacy}",
            "received_events_url": "https://api.github.com/users/miss-islington/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-11-25T13:07:31Z",
          "updated_at": "2022-11-25T13:07:31Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks @erlend-aasland for the PR \ud83c\udf2e\ud83c\udf89.. I'm working now to backport this PR to: 3.10, 3.11.\n\ud83d\udc0d\ud83c\udf52\u26cf\ud83e\udd16 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1327452831/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1327452996",
          "html_url": "https://github.com/python/cpython/pull/99507#issuecomment-1327452996",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/99507",
          "id": 1327452996,
          "node_id": "IC_kwDOBN0Z8c5PH1NE",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-11-25T13:07:41Z",
          "updated_at": "2022-11-25T13:07:41Z",
          "author_association": "NONE",
          "body": "[GH-99778](https://github.com/python/cpython/pull/99778) is a backport of this pull request to the [3.11 branch](https://github.com/python/cpython/tree/3.11).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1327452996/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1327453113",
          "html_url": "https://github.com/python/cpython/pull/99507#issuecomment-1327453113",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/99507",
          "id": 1327453113,
          "node_id": "IC_kwDOBN0Z8c5PH1O5",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-11-25T13:07:45Z",
          "updated_at": "2022-11-25T13:07:45Z",
          "author_association": "NONE",
          "body": "[GH-99779](https://github.com/python/cpython/pull/99779) is a backport of this pull request to the [3.10 branch](https://github.com/python/cpython/tree/3.10).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1327453113/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/67684",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/67684/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/67684/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/67684/events",
      "html_url": "https://github.com/python/cpython/issues/67684",
      "id": 1198931743,
      "node_id": "MDU6SXNzdWUxMTk4OTMxNzQz",
      "number": 67684,
      "title": "Steps for Android Native Build of Python 3.4.2",
      "user": {
        "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
        "id": 101775376,
        "node_id": "M_kgDOBhD4EA",
        "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
        "html_url": "https://github.com/chaselton",
        "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
        "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
        "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
        "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
        "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
        "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
        "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018676104,
          "node_id": "LA_kwDOBN0Z8c7viCGI",
          "url": "https://api.github.com/repos/python/cpython/labels/build",
          "name": "build",
          "color": "0052cc",
          "default": false,
          "description": "The build process and cross-build"
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 177,
      "created_at": "2015-02-21T20:46:57Z",
      "updated_at": "2022-04-10T08:04:57Z",
      "closed_at": "2019-10-22T23:47:24Z",
      "author_association": "MANNEQUIN",
      "type": null,
      "active_lock_reason": null,
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [23496](https://bugs.python.org/issue23496)\n--- | :---\nNosy | @terryjreedy, @vstinner, @bitdancer, @freakboy3742, @ericsnowcurrently, @Fak3, @refi64, @mpaolini, @tritium21, @yan12125\nDependencies | <li>bpo-16353: add function to os module for getting path to default shell</li><li>bpo-20305: Android&#x27;s incomplete locale.h implementation prevents cross-compilation</li><li>bpo-21668: The select and time modules uses libm functions without linking against it</li>\nFiles | <li>[patch.diff](https://bugs.python.org/file38201/patch.diff \"Uploaded as text/plain at 2015-02-21.20:46:55 by chaselton\"): patch for pythonrun.c</li><li>[android_segfault_fix.patch](https://bugs.python.org/file38575/android_segfault_fix.patch \"Uploaded as text/plain at 2015-03-20.00:43:04 by @refi64\")</li><li>[kbox_fix.patch](https://bugs.python.org/file38576/kbox_fix.patch \"Uploaded as text/plain at 2015-03-20.00:43:14 by @refi64\")</li><li>[issue_16353.patch](https://bugs.python.org/file38577/issue_16353.patch \"Uploaded as text/plain at 2015-03-20.00:43:26 by @refi64\")</li><li>[issue_20305_tweaked.patch](https://bugs.python.org/file38578/issue_20305_tweaked.patch \"Uploaded as text/plain at 2015-03-20.00:43:34 by @refi64\")</li><li>[issue_21668.patch](https://bugs.python.org/file38580/issue_21668.patch \"Uploaded as text/plain at 2015-03-20.00:44:10 by @refi64\")</li><li>[unused_var.patch](https://bugs.python.org/file38581/unused_var.patch \"Uploaded as text/plain at 2015-03-20.00:44:17 by @refi64\")</li><li>[rjmatthews62_fixes_tweaked.patch](https://bugs.python.org/file38582/rjmatthews62_fixes_tweaked.patch \"Uploaded as text/plain at 2015-03-20.00:44:25 by @refi64\")</li><li>[androidfn.patch](https://bugs.python.org/file38846/androidfn.patch \"Uploaded as text/plain at 2015-04-06.16:19:23 by @refi64\")</li><li>[issue_20306.patch](https://bugs.python.org/file38853/issue_20306.patch \"Uploaded as text/plain at 2015-04-06.20:21:58 by @refi64\")</li><li>[rjmatthews64_fixes2.patch](https://bugs.python.org/file38880/rjmatthews64_fixes2.patch \"Uploaded as text/plain at 2015-04-09.15:24:24 by @refi64\")</li><li>[rjmatthews64_fixes2.patch](https://bugs.python.org/file38881/rjmatthews64_fixes2.patch \"Uploaded as text/plain at 2015-04-09.15:38:29 by @refi64\")</li><li>[rjmatthews64_fixes2.patch](https://bugs.python.org/file38884/rjmatthews64_fixes2.patch \"Uploaded as text/plain at 2015-04-09.17:07:27 by @refi64\")</li><li>[kbox_fix.patch](https://bugs.python.org/file39134/kbox_fix.patch \"Uploaded as text/plain at 2015-04-20.00:26:15 by @refi64\")</li><li>[python.patch](https://bugs.python.org/file39135/python.patch \"Uploaded as text/plain at 2015-04-20.00:30:44 by chaselton\"): patch for python.c. that prevents android segfault</li><li>[kbox_fix.patch](https://bugs.python.org/file39628/kbox_fix.patch \"Uploaded as text/plain at 2015-06-04.21:52:53 by @refi64\")</li><li>[lib_fixes.patch](https://bugs.python.org/file39629/lib_fixes.patch \"Uploaded as text/plain at 2015-06-04.21:56:18 by @refi64\")</li><li>[py_test_results.log](https://bugs.python.org/file40002/py_test_results.log \"Uploaded as text/plain at 2015-07-23.22:14:54 by chaselton\"): ./python -m test log</li><li>[test_gdb.log](https://bugs.python.org/file40586/test_gdb.log \"Uploaded as text/plain at 2015-09-26.14:10:46 by chaselton\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = <Date 2019-10-22.23:47:24.109>\ncreated_at = <Date 2015-02-21.20:46:56.960>\nlabels = ['type-feature', 'build']\ntitle = 'Steps for Android Native Build of Python 3.4.2'\nupdated_at = <Date 2019-10-22.23:47:24.108>\nuser = 'https://bugs.python.org/chaselton'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2019-10-22.23:47:24.108>\nactor = 'vstinner'\nassignee = 'none'\nclosed = True\nclosed_date = <Date 2019-10-22.23:47:24.109>\ncloser = 'vstinner'\ncomponents = ['Build']\ncreation = <Date 2015-02-21.20:46:56.960>\ncreator = 'chaselton'\ndependencies = ['16353', '20305', '21668']\nfiles = ['38201', '38575', '38576', '38577', '38578', '38580', '38581', '38582', '38846', '38853', '38880', '38881', '38884', '39134', '39135', '39628', '39629', '40002', '40586']\nhgrepos = []\nissue_num = 23496\nkeywords = ['patch']\nmessage_count = 177.0\nmessages = ['236389', '236444', '236445', '236447', '236462', '236469', '236488', '236530', '236566', '236567', '236571', '236578', '236584', '236611', '236667', '236683', '236685', '236722', '236746', '236756', '236761', '236763', '236766', '236773', '236779', '236797', '236800', '236801', '236810', '236819', '236820', '236857', '236858', '236883', '236884', '236886', '236890', '236911', '236926', '236999', '237009', '237073', '237118', '237215', '237216', '237219', '237222', '237260', '237280', '237284', '237285', '237374', '237574', '237639', '237654', '237680', '237681', '237682', '237683', '237684', '237693', '237724', '237725', '237774', '237785', '238592', '238744', '238932', '238934', '239256', '239264', '239466', '240117', '240118', '240119', '240127', '240143', '240144', '240157', '240176', '240178', '240208', '240218', '240329', '240338', '240339', '240342', '240350', '240351', '240352', '240356', '240357', '240363', '240366', '240401', '240403', '240404', '240406', '240423', '240489', '240822', '241154', '241385', '241427', '241432', '241437', '241457', '241574', '241576', '241577', '241578', '241579', '241634', '241642', '241657', '241663', '241805', '241862', '242062', '244366', '244387', '244389', '244845', '244846', '244859', '244868', '245445', '245674', '245894', '245932', '245937', '245938', '245988', '245990', '245993', '246938', '247118', '247232', '247235', '247269', '247310', '247346', '247359', '247364', '247584', '247713', '248452', '248458', '248671', '248672', '248730', '248731', '248733', '248909', '248938', '248954', '248957', '248974', '248975', '248990', '248995', '248996', '248997', '249199', '249208', '250794', '251598', '251648', '253800', '253817', '253847', '253851', '253856', '253862', '254248', '264176', '355183']\nnosy_count = 12.0\nnosy_names = ['terry.reedy', 'vstinner', 'r.david.murray', 'cvrebert', 'freakboy3742', 'eric.snow', 'Roman.Evstifeev', 'refi64', 'mpaolini', 'chaselton', 'tritium', 'yan12125']\npr_nums = []\npriority = 'normal'\nresolution = 'fixed'\nstage = 'resolved'\nstatus = 'closed'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue23496'\nversions = ['Python 3.4']\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/67684/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/67684/timeline",
      "performed_via_github_app": null,
      "state_reason": "completed",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675373",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675373",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675373,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzNzM=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-21T20:46:55Z",
          "updated_at": "2015-02-21T20:46:55Z",
          "author_association": "MANNEQUIN",
          "body": "This is a (hopefully) complete list of patches and modifications required to natively build Python 3.4.2 on an Android device where\r\npatches == listed issues in this bug tracker\r\nmodifications (mods) == unsubmitted patches and/or edits made to source\r\n\r\nCAVEATS\r\nBuild was completed on a tablet running Android 4.4.2 and within the KBOX environment; an app that simulates a Linux filesystem by using a ported version of fakechroot.  Details of the environment can be found here: http://kevinboone.net/kbox2_how_it_works.html. NOTE: During the Python build it was necessary to patch this environment with a modified version of fakechroot; the KBOX version currently available as of 2.21.2015 may not contain the modified fakechroot.\r\n\r\nCONFIGURE && POST-CONFIGURE && MAKE\r\nThe configure command was run with the following parameters\r\n--enable-shared\r\n--without-ensurepip\r\n--prefix=/usr/python\r\n\r\nAfter running configure. changes were made to pyconfig.h to account for various platform limitations and to Setup to ensure that a) all modules specified were built as shared and b) modules that used symbols from libpython were explicitly linked to said library. See attached pyconfig.h and Setup.\r\n\r\nMake fails when the newly built python binary tries to execute and run setup.py. This is resolved by copying the shared library from the build directory to /lib in the KBOX environment.  Otherwise make && make install runs without errors provided patches/mods are applied. I did not run make test or the equivalent for this build.\r\n\r\nPATCHES/MODS\r\nThe attached patches from the following issues must be applied:\r\nhttp://bugs.python.org/issue20305\r\nhttp://bugs.python.org/issue16353 (NOTE: use patch with 'defpath' not 'confstr', which is not supported in Android)\r\nhttp://bugs.python.org/issue21668\r\n\r\n```c\nThe following modifications to source must be made:\r\nThe instructions under 'Code Changes' at this link: https://code.google.com/p/python-for-android/wiki/CrossCompilingPython\r\nThe attached patch, contributed by Ryan Gonzales (patch.diff)\r\nThe changes listed below by file (apologies for formatting)\r\n        \r\n/* patch for strdup segfault issue in readline.c */\r\n #define RESTORE_LOCALE(sl) { if (sl) { setlocale(LC_CTYPE, sl); free(sl); } }\r\n \r\n char *_locale = setlocale(LC_CTYPE, NULL); \r\n char *saved_locale; \r\n if(!_locale) \r\n _locale = \"\"; \r\n saved_locale = strdup(_locale);\r\n \r\n \r\n char *saved_locale = setlocale(LC_CTYPE, NULL);\r\n    if (saved_locale != NULL) {\r\n        saved_locale = strdup(saved_locale);\r\n        if (!saved_locale)\r\n            Py_FatalError(\"not enough memory to save locale\");\r\n    }\r\n    \n```\n\r\n\r\n/* fix for [Lib/ctypes/__init.py](https://github.com/python/cpython/blob/main/Lib/ctypes/__init.py)__ \\*/\r\n 30 DEFAULT_MODE ==  RTLD_GLOBAL\r\n \r\n /* patch for python.c \\*/\r\n/* here line for oldloc is commented out \\*/\r\n     24     int i, res;\r\n     25     /* char \\*oldloc; \\*/\r\n     26 #ifdef \\_\\_FreeBSD__\r\n\r\n/* here oldloc lines commented out \\*/\r\n     46\r\n     47   /*  oldloc = \\_PyMem_RawStrdup(setlocale(LC_ALL, NULL));\r\n     48    * if (!oldloc) {\r\n     49    *     fprintf(stderr, \"out of memory\\\\n\");\r\n     50    *     return 1;\r\n     51    *\r\n     52    * }\r\n     53    \\*/\r\n\r\n /* patch for pythonrun.c 307, --309-310, ++311-313 --1009-1012 ++1013-1014 \\*/\r\n \r\n    305     return get_codec_name(codeset);\r\n    306 #else\r\n    307    char* m;\r\n    308    PyErr_SetNone(PyExc_NotImplementedError);\r\n    309    /*  return NULL; \\*/\r\n    310    /* char* m; \\*/\r\n    311    m = malloc(6);\r\n    312    strcpy(m, \"ascii\");\r\n    313    return m;\r\n    314 #endif\r\n    315 }\r\n    \r\n   1002 static int\r\n   1003 initfsencoding(PyInterpreterState \\*interp)\r\n   1004 {\r\n   1005     PyObject \\*codec;\r\n   1006\r\n   1007     if (Py_FileSystemDefaultEncoding == NULL)\r\n   1008     {\r\n   1009         /* Py_FileSystemDefaultEncoding = get_locale_encoding();\r\n   1010          * if (Py_FileSystemDefaultEncoding == NULL)\r\n   1011          *   Py_FatalError(\"Py_Initialize: Unable to get the locale encoding\r\n   1011 \");\r\n   1012          \\*/\r\n   1013            Py_FileSystemDefaultEncoding = malloc(6);\r\n   1014            strcpy(Py_FileSystemDefaultEncoding, \"ascii\");\r\n   1015         Py_HasFileSystemDefaultEncoding = 0;\r\n   1016         interp-\\>fscodec_initialized = 1;\r\n   1017         return 0;\r\n   1018     }\r\n   1019\r\n   \r\n/* changes to [Lib/plat-linux/DLFCN.py](https://github.com/python/cpython/blob/main/Lib/plat-linux/DLFCN.py) \\*/\r\n     76 # Included from bits/dlfcn.h\r\n     77 # Changed for Android\r\n     78 RTLD_LAZY = 1\r\n     79 RTLD_NOW = 0\r\n     80 #RTLD_BINDING_MASK = 0x3\r\n     81 #RTLD_NOLOAD = 0x00004\r\n     82 RTLD_GLOBAL = 2\r\n     83 RTLD_LOCAL = 0\r\n     84 #RTLD_NODELETE = 0x01000\r\n     85\r\n     86 # Also from Android's dlfcn.h\r\n     87 RTLD_DEFAULT ((void*) 0xffffffff)\r\n     88 RTLD_NEXT     ((void*) 0xfffffffe)\r\n     89",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675373/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675374",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675374",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675374,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzNzQ=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-23T14:13:32Z",
          "updated_at": "2015-02-23T14:13:32Z",
          "author_association": "MANNEQUIN",
          "body": "The attached g-zipped file contains the first set of patches required to build Python 3.4.2 from source in the environment specified in the origonal post.\r\n\r\nWill post the second/final set ASAP",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675374/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675375",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675375",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675375,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzNzU=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-23T14:38:36Z",
          "updated_at": "2015-02-23T14:38:36Z",
          "author_association": "MEMBER",
          "body": "It's not convinient to have patches in a tarball. Please at least open patches one by one, or better: open one issue per patch. You should group similar changes in a single patch: for example all changes related to wcstombs().\r\n\r\nYou should explain each change.\r\n\r\n\r\nFor example, the following change (os.patch) looks like a bug. You cannot simply rename a function. It completly breaks backward compatibility.\r\n\r\n-.. function :: get_shell()\r\n+.. function :: get_shell_executable()\r\n\r\n\r\nselectmodule.patch:\r\n\r\n-        timeout = (int)ceill(dtimeout * 1000.0);\r\n\\+        timeout = (int)ceil(dtimeout * 1000.0);\r\n\r\nI don't understand where ceill() does come from. I cannot find it in the current source code. Maybe the patch was produced in the wrong direction?\r\n\r\n\r\npatch.diff: please generate unified patches. Your format is ugly, I cannot read it. And the bug tracker failed to create a \"review\" button.\r\n\r\n\r\nIt's hard to follow instructions to apply patches. Maybe you should use a Mercurial repository, which include all changes?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675375/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675376",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675376",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675376,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzNzY=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-23T15:26:17Z",
          "updated_at": "2015-02-23T15:26:17Z",
          "author_association": "MANNEQUIN",
          "body": "Apologies for the tarball, but all patches within are related to this \"issue\"\r\n\r\nRemoving tarball and will re-post individual, cleaned-up patches, grouped by issue.  \r\n\r\nRyan, can you re-do patch for pythonrun.c? If not. I'l. work it in.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675376/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675377",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675377",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675377,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzNzc=",
          "user": {
            "login": "6c71e414-5f93-49b5-bb0f-c482d8783102",
            "id": 93806184,
            "node_id": "M_kgDOBZdeaA",
            "avatar_url": "https://avatars.githubusercontent.com/u/93806184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102",
            "html_url": "https://github.com/refi64",
            "followers_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/followers",
            "following_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/following{/other_user}",
            "gists_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/subscriptions",
            "organizations_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/orgs",
            "repos_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/repos",
            "events_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/events{/privacy}",
            "received_events_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-23T19:47:17Z",
          "updated_at": "2015-02-23T19:47:17Z",
          "author_association": "MANNEQUIN",
          "body": "Cyd,\r\n\r\nWhat revision of the Python 3.4 source is this against? The tarball?\r\n\r\nI'm not quite sure what to redo that patch against.\r\n\r\nAlso, shouldn't the code be selectively enabled with macros/configure.ac edits? Or did I miss where someone said this should be in its own branch (which, in my opinion, isn't very clean)?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675377/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675378",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675378",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675378,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzNzg=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-23T23:07:37Z",
          "updated_at": "2015-02-23T23:07:37Z",
          "author_association": "MANNEQUIN",
          "body": "Ryan,\r\nI manually applied the patch to the Python 3.4.2 source tarball, dowmloaded from the main site to my Android tablet. I'm guessing (re)generating the patch from that source should work.\r\n\r\nI've no knowledge of configure syntax, but most of the patches apply only if \\_\\_ANDROID__ is defined.  This can be enabled with the -mandroid/-mbionic CFLAGS that work with GCC 4.8.x and later.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675378/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675379",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675379",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675379,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzNzk=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-24T12:32:50Z",
          "updated_at": "2015-02-24T12:32:50Z",
          "author_association": "MANNEQUIN",
          "body": "Additionally, for the [Lib/plat](https://github.com/python/cpython/blob/main/Lib/plat)-\\<os\\> specific changes, I can create [Lib/plat-android](https://github.com/python/cpython/blob/main/Lib/plat-android) and move the modified DLFCN.py and others there, provided someone could help with the appropriate configure.ac syntax.\r\n\r\nI can/could do it myself, but it would take a \\*while* as I'd need to learn a fair amount of configure scripting first.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675379/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675380",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675380",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675380,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzODA=",
          "user": {
            "login": "6c71e414-5f93-49b5-bb0f-c482d8783102",
            "id": 93806184,
            "node_id": "M_kgDOBZdeaA",
            "avatar_url": "https://avatars.githubusercontent.com/u/93806184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102",
            "html_url": "https://github.com/refi64",
            "followers_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/followers",
            "following_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/following{/other_user}",
            "gists_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/subscriptions",
            "organizations_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/orgs",
            "repos_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/repos",
            "events_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/events{/privacy}",
            "received_events_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-24T19:08:09Z",
          "updated_at": "2015-02-24T19:08:09Z",
          "author_association": "MANNEQUIN",
          "body": "So...\r\n\r\nI know a decent amount of configure scripts, although Python's is easily going to be the absolute longest I've ever touched.\r\n\r\nMaybe these should be made against the 3.6 Mercurial source? I'm not sure if the Python devs would prefer that.\r\n\r\nAlso, should the configure script be based on the Android target triple?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675380/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675381",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675381",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675381,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzODE=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-25T10:04:23Z",
          "updated_at": "2015-02-25T10:04:23Z",
          "author_association": "MANNEQUIN",
          "body": "Pulling from Mercurial will require taking a couple of huge steps back, as I've ported git to the environment I am using but not Mercurial.  It would also mean getting up to speed \\*fast* as I know nothing about VCS...including Mercurial.\r\n\r\nI'm willing to do this (what's another port after all) but it may be a while before I can get everything set up correctly.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675381/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675383",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675383",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675383,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzODM=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-25T10:54:26Z",
          "updated_at": "2015-02-25T10:54:26Z",
          "author_association": "MEMBER",
          "body": "Take a look at https://docs.python.org/devguide/gitdevs.html\n\"Mercurial for git developers\"",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675383/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675384",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675384",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675384,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzODQ=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-25T11:38:37Z",
          "updated_at": "2015-02-25T11:38:37Z",
          "author_association": "MANNEQUIN",
          "body": "Thanks for the suggestion Victor, however I've only ported git to this environment; the most I;ve used it is to run 'git clone' to pull source from a repo. The recommendation from the mobile-sig mailing list is...given my lack of familiarity with VCS..is to attempt to port and work with Mercurial.  If doing so starts to take too much bandwidth I'll fall back to git and the article you linked.\r\n\r\nSide Note: I cannot emphasize enough how little I know about how to use git and most of the other tools I've ported to this environment. My goal was to get as many of the 'standard' Linux utilities running in this environment, then start learning them.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675384/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675385",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675385",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675385,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzODU=",
          "user": {
            "login": "bitdancer",
            "id": 476443,
            "node_id": "MDQ6VXNlcjQ3NjQ0Mw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/476443?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bitdancer",
            "html_url": "https://github.com/bitdancer",
            "followers_url": "https://api.github.com/users/bitdancer/followers",
            "following_url": "https://api.github.com/users/bitdancer/following{/other_user}",
            "gists_url": "https://api.github.com/users/bitdancer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bitdancer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bitdancer/subscriptions",
            "organizations_url": "https://api.github.com/users/bitdancer/orgs",
            "repos_url": "https://api.github.com/users/bitdancer/repos",
            "events_url": "https://api.github.com/users/bitdancer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bitdancer/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-25T14:35:11Z",
          "updated_at": "2015-02-25T14:35:11Z",
          "author_association": "MEMBER",
          "body": "There is a github mirror of the hg repository (https://github.com/python/cpython).  Patches produced from it don't automatically get review links in the tracker, but at least they would then be against the most current source (and someone else could regenerate them).  That would at least allow you to skip the \"port mercurial\" step.\r\n\r\nOn the other hand, it sounds like Ryan may be volunteering to update the patches to apply to the head of default for you.  (And yes, Ryan, the patches should be against the head of the default branch.)\r\n\r\nNow, whether or not we will accept the patches is a different discussion, but I'd certainly like to see more Android support in our tree myself.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675385/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675387",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675387",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675387,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzODc=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-25T15:31:37Z",
          "updated_at": "2015-02-25T15:31:37Z",
          "author_association": "MANNEQUIN",
          "body": "Thanks for that suggestion R. David...that would be ideal given the 2.x requirements of Mercurial would mean i'd need to re-port Python before tackling a port of Mercurial.\r\n\r\nI'll wait until Ryan chimes in before I start serious work with git, just in case.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675387/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675388",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675388",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675388,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzODg=",
          "user": {
            "login": "6c71e414-5f93-49b5-bb0f-c482d8783102",
            "id": 93806184,
            "node_id": "M_kgDOBZdeaA",
            "avatar_url": "https://avatars.githubusercontent.com/u/93806184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102",
            "html_url": "https://github.com/refi64",
            "followers_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/followers",
            "following_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/following{/other_user}",
            "gists_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/subscriptions",
            "organizations_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/orgs",
            "repos_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/repos",
            "events_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/events{/privacy}",
            "received_events_url": "https://api.github.com/users/6c71e414-5f93-49b5-bb0f-c482d8783102/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-25T18:06:59Z",
          "updated_at": "2015-02-25T18:06:59Z",
          "author_association": "MANNEQUIN",
          "body": "That's what I was saying; I'll update the patches myself. I highly doubt Cyd wants to re-port Python again. :0\r\n\r\nI'll ask on python-dev on which would be preferred: configure.ac edits or macro tests.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675388/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675389",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675389",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675389,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzODk=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-26T12:45:07Z",
          "updated_at": "2015-02-26T12:45:07Z",
          "author_association": "MANNEQUIN",
          "body": "Thanks Ryan.\r\nShould I create a branch off the master at github and patch there or just clone the master and patch?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675389/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675390",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675390",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675390,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzOTA=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-26T16:29:19Z",
          "updated_at": "2015-02-26T16:29:19Z",
          "author_association": "MANNEQUIN",
          "body": "...or, should I fork the 3.4 branch?  If so, which one...3.4 or origin/3.4?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675390/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675391",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675391",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675391,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzOTE=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-26T16:38:49Z",
          "updated_at": "2015-02-26T16:38:49Z",
          "author_association": "MEMBER",
          "body": "I don't think that Android support should be added to a stable branche\n(2.7 or 3.4), only in the development branch.\n\nYou may maintain your own 2.7 or 3.4 fork if you want.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675391/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675392",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675392",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675392,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzOTI=",
          "user": {
            "login": "ethanfurman",
            "id": 7659890,
            "node_id": "MDQ6VXNlcjc2NTk4OTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7659890?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ethanfurman",
            "html_url": "https://github.com/ethanfurman",
            "followers_url": "https://api.github.com/users/ethanfurman/followers",
            "following_url": "https://api.github.com/users/ethanfurman/following{/other_user}",
            "gists_url": "https://api.github.com/users/ethanfurman/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ethanfurman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ethanfurman/subscriptions",
            "organizations_url": "https://api.github.com/users/ethanfurman/orgs",
            "repos_url": "https://api.github.com/users/ethanfurman/repos",
            "events_url": "https://api.github.com/users/ethanfurman/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ethanfurman/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-27T01:30:55Z",
          "updated_at": "2015-02-27T01:30:55Z",
          "author_association": "MEMBER",
          "body": "Once this android Python is built, can it:\r\n\r\n  - be copied from/to other android devices?\r\n\r\n  - run without KBOX?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675392/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675393",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675393",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675393,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzOTM=",
          "user": {
            "login": "1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "id": 101775376,
            "node_id": "M_kgDOBhD4EA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101775376?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23",
            "html_url": "https://github.com/chaselton",
            "followers_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/followers",
            "following_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/following{/other_user}",
            "gists_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/subscriptions",
            "organizations_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/orgs",
            "repos_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/repos",
            "events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1bf5feec-1bc6-472f-8176-3d63f6747b23/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-27T13:35:16Z",
          "updated_at": "2015-02-27T13:35:16Z",
          "author_association": "MANNEQUIN",
          "body": "Ethan,\r\nThe binary produced runs in the KBOX environment. It can be copied between devices provided the target device has the KBOX environment installed. \r\n\r\nVictor et al,\r\nI read https://docs.python.org/devguide/devcycle.html#indevbranch a couple of times and, unless I;m missing something the dev branch only contains the 3.5 release.  This may be an obvious question but if I fork the 3.4 branch would Android-related patches be eligible for that branch?\r\n\r\nI'm hesitant to clone the dev branch as I;ve worked hard to get the latest stable version (3.4.2?) working on my device; I'm more interested in a) making my efforts available to others and b) learning the Python language than c) constantly working at making the latest and greatest Android-friendly",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675393/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675394",
          "html_url": "https://github.com/python/cpython/issues/67684#issuecomment-1093675394",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/67684",
          "id": 1093675394,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM2NzUzOTQ=",
          "user": {
            "login": "5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "id": 92819801,
            "node_id": "M_kgDOBYhRWQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819801?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "html_url": "https://github.com/skrah",
            "followers_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/followers",
            "following_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/following{/other_user}",
            "gists_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/subscriptions",
            "organizations_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/orgs",
            "repos_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/repos",
            "events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/events{/privacy}",
            "received_events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2015-02-27T14:55:17Z",
          "updated_at": "2015-02-27T14:55:17Z",
          "author_association": "MANNEQUIN",
          "body": "> c) constantly working at making the latest and greatest Android-friendly\r\n\r\nBut that is precisely what \"Android support\", should it be added, means:\r\nIt does take constant work (and build slaves) to support a platform.\r\n\r\n\r\nUnrelatedly, regarding the localeconv changes: \r\n\r\nI cannot find any bugreport for localeconv at\r\n\r\n  https://code.google.com/p/android/issues/list .\r\n\r\n\r\nBefore we add workarounds to Python, it would be nice to have\r\nat least a record that the Android developers actually \\*did*\r\nrefuse to add a simple struct lconv (trivial for en_US!).\r\n\r\nHow about opening an Android issue?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093675394/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/21515",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/21515/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/21515/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/21515/events",
      "html_url": "https://github.com/python/cpython/pull/21515",
      "id": 658683420,
      "node_id": "MDExOlB1bGxSZXF1ZXN0NDUwNjE2MTkz",
      "number": 21515,
      "title": "bpo-41428: Implementation for PEP 604",
      "user": {
        "login": "MaggieMoss",
        "id": 7714112,
        "node_id": "MDQ6VXNlcjc3MTQxMTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7714112?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MaggieMoss",
        "html_url": "https://github.com/MaggieMoss",
        "followers_url": "https://api.github.com/users/MaggieMoss/followers",
        "following_url": "https://api.github.com/users/MaggieMoss/following{/other_user}",
        "gists_url": "https://api.github.com/users/MaggieMoss/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/MaggieMoss/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MaggieMoss/subscriptions",
        "organizations_url": "https://api.github.com/users/MaggieMoss/orgs",
        "repos_url": "https://api.github.com/users/MaggieMoss/repos",
        "events_url": "https://api.github.com/users/MaggieMoss/events{/privacy}",
        "received_events_url": "https://api.github.com/users/MaggieMoss/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 32,
      "created_at": "2020-07-17T00:07:17Z",
      "updated_at": "2020-09-09T20:37:56Z",
      "closed_at": "2020-09-09T20:23:25Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/21515",
        "html_url": "https://github.com/python/cpython/pull/21515",
        "diff_url": "https://github.com/python/cpython/pull/21515.diff",
        "patch_url": "https://github.com/python/cpython/pull/21515.patch",
        "merged_at": "2020-09-09T20:23:25Z"
      },
      "body": "# PEP 604 - Proposed Implementation\r\nhttps://www.python.org/dev/peps/pep-0604/\r\n\r\nBuilding off of the comments left on this PR here: https://github.com/pprados/cpython/tree/PEP604\r\n\r\n<!-- issue-number: [bpo-41428](https://bugs.python.org/issue41428) -->\r\nhttps://bugs.python.org/issue41428\r\n<!-- /issue-number -->\r\n",
      "closed_by": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/21515/reactions",
        "total_count": 3,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 3,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/21515/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/659745554",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-659745554",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 659745554,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTc0NTU1NA==",
          "user": {
            "login": "the-knights-who-say-ni",
            "id": 18121554,
            "node_id": "MDQ6VXNlcjE4MTIxNTU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/18121554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/the-knights-who-say-ni",
            "html_url": "https://github.com/the-knights-who-say-ni",
            "followers_url": "https://api.github.com/users/the-knights-who-say-ni/followers",
            "following_url": "https://api.github.com/users/the-knights-who-say-ni/following{/other_user}",
            "gists_url": "https://api.github.com/users/the-knights-who-say-ni/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/the-knights-who-say-ni/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/the-knights-who-say-ni/subscriptions",
            "organizations_url": "https://api.github.com/users/the-knights-who-say-ni/orgs",
            "repos_url": "https://api.github.com/users/the-knights-who-say-ni/repos",
            "events_url": "https://api.github.com/users/the-knights-who-say-ni/events{/privacy}",
            "received_events_url": "https://api.github.com/users/the-knights-who-say-ni/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-17T00:07:21Z",
          "updated_at": "2020-07-25T03:11:27Z",
          "author_association": "NONE",
          "body": "Hello, and thanks for your contribution!\n\nI'm a bot set up to make sure that the project can legally accept this contribution by verifying everyone involved has signed the [PSF contributor agreement](https://www.python.org/psf/contrib/contrib-form/) (CLA).\n\n## Recognized GitHub username\n\nWe couldn't find a [bugs.python.org](https://bugs.python.org/) (b.p.o) account corresponding to the following GitHub usernames:\n\n@MaggieMoss\n\nThis might be simply due to a missing \"GitHub Name\" entry in one's b.p.o account settings. This is necessary for legal reasons before we can look at this contribution. Please follow [the steps outlined in the CPython devguide](https://devguide.python.org/pullrequest/#licensing) to rectify this issue.\n\n\n\n\nYou can [check yourself](https://check-python-cla.herokuapp.com/) to see if the CLA has been received.\n\nThanks again for the contribution, we look forward to reviewing it!\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/659745554/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/660385009",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-660385009",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 660385009,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDM4NTAwOQ==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-17T23:54:04Z",
          "updated_at": "2020-07-17T23:54:04Z",
          "author_association": "MEMBER",
          "body": "Thank you so much! Give me a few days to review this. Ping me if you haven't heard from me by Wednesday!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/660385009/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/661542454",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-661542454",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 661542454,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTU0MjQ1NA==",
          "user": {
            "login": "MaggieMoss",
            "id": 7714112,
            "node_id": "MDQ6VXNlcjc3MTQxMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7714112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MaggieMoss",
            "html_url": "https://github.com/MaggieMoss",
            "followers_url": "https://api.github.com/users/MaggieMoss/followers",
            "following_url": "https://api.github.com/users/MaggieMoss/following{/other_user}",
            "gists_url": "https://api.github.com/users/MaggieMoss/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MaggieMoss/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MaggieMoss/subscriptions",
            "organizations_url": "https://api.github.com/users/MaggieMoss/orgs",
            "repos_url": "https://api.github.com/users/MaggieMoss/repos",
            "events_url": "https://api.github.com/users/MaggieMoss/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MaggieMoss/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-21T01:40:39Z",
          "updated_at": "2020-07-21T01:40:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "@gvanrossum thanks so much for the comments! I'll implement your suggestions and clean this up :) ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/661542454/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/663774371",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-663774371",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 663774371,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzc3NDM3MQ==",
          "user": {
            "login": "MaggieMoss",
            "id": 7714112,
            "node_id": "MDQ6VXNlcjc3MTQxMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7714112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MaggieMoss",
            "html_url": "https://github.com/MaggieMoss",
            "followers_url": "https://api.github.com/users/MaggieMoss/followers",
            "following_url": "https://api.github.com/users/MaggieMoss/following{/other_user}",
            "gists_url": "https://api.github.com/users/MaggieMoss/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MaggieMoss/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MaggieMoss/subscriptions",
            "organizations_url": "https://api.github.com/users/MaggieMoss/orgs",
            "repos_url": "https://api.github.com/users/MaggieMoss/repos",
            "events_url": "https://api.github.com/users/MaggieMoss/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MaggieMoss/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-24T23:39:12Z",
          "updated_at": "2020-07-24T23:39:12Z",
          "author_association": "CONTRIBUTOR",
          "body": "@gvanrossum Thanks so much for the initial review. Please let me know of any additional comments :) \r\n\r\nI have a couple of questions:\r\n- Is there a shortcut to run one test file at a time?\r\n\r\n\r\nThis check works in a test file I have, but not when I run `make test`. \r\n```\r\nisinstance(AbstractChild(), AbstractChild | int)\r\n```\r\nI have a question about what should be allowed here.\r\n\r\n```\r\n3 | int # (A) not allowed \r\n\r\nAbstractChild | int # (B) allowed \r\n\r\nAbstractChild() | int # (C) not allowed?\r\n```\r\n\r\nIs there a way to check whether or not a `PyObject` is an instance or a class? I couldn't find a straightforward way to implement it.\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/663774371/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/663777340",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-663777340",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 663777340,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2Mzc3NzM0MA==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-24T23:55:51Z",
          "updated_at": "2020-07-24T23:55:51Z",
          "author_association": "MEMBER",
          "body": "> @gvanrossum Thanks so much for the initial review. Please let me know of any additional comments :)\r\n\r\nThanks; I will review it over the weekend.\r\n\r\n> I have a couple of questions:\r\n> \r\n>     * Is there a shortcut to run one test file at a time?\r\n\r\nYes! Sorry you didn't see this: `./python -m test test_abc` (see https://devguide.python.org/runtests/).\r\n\r\n> This check works in a test file I have, but not when I run `make test`.\r\n\r\nThat's usually a sign of something very fishy -- it means there's interference between tests, which in this case I suspect is due to some part of your C code using uninitialized state.\r\n\r\n> ```\r\n> isinstance(AbstractChild(), AbstractChild | int)\r\n> ```\r\n> \r\n> I have a question about what should be allowed here.\r\n> \r\n> ```\r\n> 3 | int # (A) not allowed \r\n> \r\n> AbstractChild | int # (B) allowed \r\n> \r\n> AbstractChild() | int # (C) not allowed?\r\n> ```\r\n\r\nIndeed, you can't mix instances and classes (unless the instance is an instance of a **metaclass**, since that's a class :-).\r\n\r\n> Is there a way to check whether or not a `PyObject` is an instance or a class? I couldn't find a straightforward way to implement it.\r\n\r\nYes, `PyType_Check(x)` is true when `x` is a class. (Why isn't it called `PyClass_Check()`? Because at runtime, classes are mostly referred to as types.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/663777340/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/664535708",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-664535708",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 664535708,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDUzNTcwOA==",
          "user": {
            "login": "MaggieMoss",
            "id": 7714112,
            "node_id": "MDQ6VXNlcjc3MTQxMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7714112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MaggieMoss",
            "html_url": "https://github.com/MaggieMoss",
            "followers_url": "https://api.github.com/users/MaggieMoss/followers",
            "following_url": "https://api.github.com/users/MaggieMoss/following{/other_user}",
            "gists_url": "https://api.github.com/users/MaggieMoss/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MaggieMoss/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MaggieMoss/subscriptions",
            "organizations_url": "https://api.github.com/users/MaggieMoss/orgs",
            "repos_url": "https://api.github.com/users/MaggieMoss/repos",
            "events_url": "https://api.github.com/users/MaggieMoss/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MaggieMoss/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-27T17:34:37Z",
          "updated_at": "2020-07-27T17:34:37Z",
          "author_association": "CONTRIBUTOR",
          "body": "@gvanrossum thanks again for the quick review - it's much appreciated. \ud83d\ude4c \r\n\r\nI've implemented the suggested changes :) ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/664535708/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/664548957",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-664548957",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 664548957,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDU0ODk1Nw==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-27T17:59:13Z",
          "updated_at": "2020-07-27T17:59:13Z",
          "author_association": "MEMBER",
          "body": "@vstinner Can you point us to docs for debugging test failures related to negative reference counts?\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/664548957/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/664611614",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-664611614",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 664611614,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDYxMTYxNA==",
          "user": {
            "login": "MaggieMoss",
            "id": 7714112,
            "node_id": "MDQ6VXNlcjc3MTQxMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7714112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MaggieMoss",
            "html_url": "https://github.com/MaggieMoss",
            "followers_url": "https://api.github.com/users/MaggieMoss/followers",
            "following_url": "https://api.github.com/users/MaggieMoss/following{/other_user}",
            "gists_url": "https://api.github.com/users/MaggieMoss/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MaggieMoss/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MaggieMoss/subscriptions",
            "organizations_url": "https://api.github.com/users/MaggieMoss/orgs",
            "repos_url": "https://api.github.com/users/MaggieMoss/repos",
            "events_url": "https://api.github.com/users/MaggieMoss/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MaggieMoss/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-27T20:08:23Z",
          "updated_at": "2020-07-27T20:08:23Z",
          "author_association": "CONTRIBUTOR",
          "body": "I found these resources to start with :)\r\n- https://www.python.org/doc/essays/refcnt/\r\n- https://pythonextensionpatterns.readthedocs.io/en/latest/refcount.html\r\n\r\nBefore when I was running the tests locally - they were passing. I ran the configure step from the macOS test and now they're failing - what would be the difference between the two configurations? (More of a curiosity question).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/664611614/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/664649855",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-664649855",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 664649855,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDY0OTg1NQ==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-27T21:33:04Z",
          "updated_at": "2020-07-27T21:33:04Z",
          "author_association": "MEMBER",
          "body": "Maybe the \u2014with-py-debug (sp?) flag?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/664649855/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/664707320",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-664707320",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 664707320,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDcwNzMyMA==",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-28T00:30:52Z",
          "updated_at": "2020-07-28T00:32:46Z",
          "author_association": "MEMBER",
          "body": "One tip regarding reference counts: You can run a test with the reafleak checker activated by using `-R :`. For instance:\r\n\r\n`./python -m test test_list -R :` will check for reference leak in the `test_list` test module (it requires compiling with `--with-pydebug`).\r\n\r\nYou can also use the `Lib/test/bisect_cmd.py` file to bisect a test module to find out what test is failing (or what test leaks). For instance:\r\n\r\n```\r\n./python Lib/test/bisect_cmd.py test_set -R\r\n```\r\n\r\nwill run `test_set`, looking for reference leaks and will tell you what test is making it fail, so is easier to isolate the problem.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/664707320/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/664737277",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-664737277",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 664737277,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDczNzI3Nw==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-28T02:22:19Z",
          "updated_at": "2020-07-28T02:22:19Z",
          "author_association": "MEMBER",
          "body": "> I am going to have to contact the sponsor for PEP 604 to ensure this PEP will actually make a chance of appearing before the SC before 3.10 is too far underway.\r\n\r\nThe SC promoted me to PEP delegate. See https://github.com/python/peps/pull/1538.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/664737277/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/665339167",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-665339167",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 665339167,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTMzOTE2Nw==",
          "user": {
            "login": "MaggieMoss",
            "id": 7714112,
            "node_id": "MDQ6VXNlcjc3MTQxMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7714112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MaggieMoss",
            "html_url": "https://github.com/MaggieMoss",
            "followers_url": "https://api.github.com/users/MaggieMoss/followers",
            "following_url": "https://api.github.com/users/MaggieMoss/following{/other_user}",
            "gists_url": "https://api.github.com/users/MaggieMoss/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MaggieMoss/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MaggieMoss/subscriptions",
            "organizations_url": "https://api.github.com/users/MaggieMoss/orgs",
            "repos_url": "https://api.github.com/users/MaggieMoss/repos",
            "events_url": "https://api.github.com/users/MaggieMoss/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MaggieMoss/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-28T23:07:36Z",
          "updated_at": "2020-07-28T23:07:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "@pablogsal @gvanrossum  thanks so much for the reviews! \ud83d\ude4f \r\n\r\nHappy to implement any other tests / nits / comments :) ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/665339167/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/665341013",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-665341013",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 665341013,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTM0MTAxMw==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-28T23:13:29Z",
          "updated_at": "2020-07-28T23:13:29Z",
          "author_association": "MEMBER",
          "body": "Not sure if you got my email. I think we should follow the lead of typing.Union and make `int|int` return just `int` rather than a types.Union instance whose repr is `'int'`. Also maybe you could help out adding some more bits to the specification in the PEP, e.g. what the repr of a union should be, that `(int|str) == (str|int)`, and that `int|int|str` should return `int|str`.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/665341013/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/665345692",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-665345692",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 665345692,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTM0NTY5Mg==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-28T23:28:57Z",
          "updated_at": "2020-07-28T23:28:57Z",
          "author_association": "MEMBER",
          "body": "Also: the repr of `int|None` should come out as `int | None`, not `int | NoneType`.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/665345692/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/665850894",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-665850894",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 665850894,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTg1MDg5NA==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-07-29T19:14:39Z",
          "updated_at": "2020-07-29T19:14:39Z",
          "author_association": "MEMBER",
          "body": "So I discovered a bunch of other interoperability issues.\r\n\r\nI think we should allow `list[int] | list[str]` and so on. Note that `isinstance(x, list[int])` is *invalid* (raises at runtime and rejected by mypy), so I think `isinstance(x, list[int] | list[str])` should also be invalid, and even `isinstance(x, int | list[int])` should be invalid.\r\n\r\nI think we should also allow types like `typing.Any | int`, and ditto for other special things there (like you already do for `TypeVar`).\r\n\r\nGiven that we support `typing.List[int] | int | str` (it returns a `typing.Union` instance), shouldn't we also support `int | str | typing.List[int]`?\r\n\r\nAnd what about `typing.List[int | str]`? I'm less sure about that, but you see where I'm going...\r\n\r\nWe may have to do some kind of audit of the various types in typing.py and decide what to do with each of them.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/665850894/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/671502505",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-671502505",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 671502505,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTUwMjUwNQ==",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-08-10T18:01:49Z",
          "updated_at": "2020-08-10T18:01:49Z",
          "author_association": "MEMBER",
          "body": "I am very close to accepting the PEP (there's one big PR for the PEP pending) and then I'd like some review from another core dev here. So @pablogsal if you're still up to it please work your magic!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/671502505/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/672221474",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-672221474",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 672221474,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjIyMTQ3NA==",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-08-11T19:34:05Z",
          "updated_at": "2020-08-11T19:34:05Z",
          "author_association": "MEMBER",
          "body": "> I'd like some review from another core dev here. So @pablogsal if you're still up to it please work your magic!\r\n\r\nI will try to make a review this night (London time) :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/672221474/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/672354652",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-672354652",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 672354652,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjM1NDY1Mg==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-08-11T23:28:38Z",
          "updated_at": "2020-08-11T23:28:38Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @pablogsal for commit 9f014e204ed955b90e48bc58ede59842d0d90563 :robot:\n\nIf you want to schedule another build, you need to add the \":hammer: test-with-buildbots\" label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/672354652/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/672416463",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-672416463",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 672416463,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjQxNjQ2Mw==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-08-12T01:05:48Z",
          "updated_at": "2020-08-12T01:05:48Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/672416463/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/672417033",
          "html_url": "https://github.com/python/cpython/pull/21515#issuecomment-672417033",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/21515",
          "id": 672417033,
          "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjQxNzAzMw==",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2020-08-12T01:06:55Z",
          "updated_at": "2020-08-12T01:07:04Z",
          "author_association": "MEMBER",
          "body": "I have made the first pass over the C code. I will review the rest once we are happy with that part as reviewing that carefully takes a considerable amount of time :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/672417033/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/46545",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/46545/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/46545/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/46545/events",
      "html_url": "https://github.com/python/cpython/issues/46545",
      "id": 1198829398,
      "node_id": "MDU6SXNzdWUxMTk4ODI5Mzk4",
      "number": 46545,
      "title": "Missing *-unpacking generalizations",
      "user": {
        "login": "Yhg1s",
        "id": 3949752,
        "node_id": "MDQ6VXNlcjM5NDk3NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3949752?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Yhg1s",
        "html_url": "https://github.com/Yhg1s",
        "followers_url": "https://api.github.com/users/Yhg1s/followers",
        "following_url": "https://api.github.com/users/Yhg1s/following{/other_user}",
        "gists_url": "https://api.github.com/users/Yhg1s/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Yhg1s/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Yhg1s/subscriptions",
        "organizations_url": "https://api.github.com/users/Yhg1s/orgs",
        "repos_url": "https://api.github.com/users/Yhg1s/repos",
        "events_url": "https://api.github.com/users/Yhg1s/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Yhg1s/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018687099,
          "node_id": "LA_kwDOBN0Z8c7viEx7",
          "url": "https://api.github.com/repos/python/cpython/labels/release-blocker",
          "name": "release-blocker",
          "color": "660205",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "benjaminp",
          "id": 219470,
          "node_id": "MDQ6VXNlcjIxOTQ3MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/219470?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/benjaminp",
          "html_url": "https://github.com/benjaminp",
          "followers_url": "https://api.github.com/users/benjaminp/followers",
          "following_url": "https://api.github.com/users/benjaminp/following{/other_user}",
          "gists_url": "https://api.github.com/users/benjaminp/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/benjaminp/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/benjaminp/subscriptions",
          "organizations_url": "https://api.github.com/users/benjaminp/orgs",
          "repos_url": "https://api.github.com/users/benjaminp/repos",
          "events_url": "https://api.github.com/users/benjaminp/events{/privacy}",
          "received_events_url": "https://api.github.com/users/benjaminp/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 175,
      "created_at": "2008-03-15T15:41:19Z",
      "updated_at": "2024-06-08T04:29:43Z",
      "closed_at": "2015-05-06T00:17:24Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [2292](https://bugs.python.org/issue2292)\n--- | :---\nNosy | @gvanrossum, @Yhg1s, @birkenfeld, @terryjreedy, @pfmoore, @ncoghlan, @abalkin, @scoder, @larryhastings, @benjaminp, @ezio-melotti, @agbuckley, @bitdancer, @ethanfurman, @ericsnowcurrently, @berkerpeksag, @serhiy-storchaka, @1st1, @zooba, @phmc, @NeilGirdhar\nFiles | <li>[starunpack.diff](https://bugs.python.org/file9955/starunpack.diff \"Uploaded as text/plain at 2008-04-05.23:59:42 by @Yhg1s\")</li><li>[starunpack2.diff](https://bugs.python.org/file32670/starunpack2.diff \"Uploaded as text/plain at 2013-11-17.15:15:48 by fhahn\")</li><li>[starunpack3.diff](https://bugs.python.org/file37779/starunpack3.diff \"Uploaded as text/plain at 2015-01-20.00:36:08 by @NeilGirdhar\")</li><li>[starunpack4.diff](https://bugs.python.org/file37788/starunpack4.diff \"Uploaded as text/plain at 2015-01-20.10:37:57 by @NeilGirdhar\")</li><li>[starunpack5.diff](https://bugs.python.org/file37790/starunpack5.diff \"Uploaded as text/plain at 2015-01-20.16:38:53 by @NeilGirdhar\")</li><li>[starunpack6.diff](https://bugs.python.org/file37791/starunpack6.diff \"Uploaded as text/plain at 2015-01-20.17:34:25 by @NeilGirdhar\")</li><li>[starunpack6.diff](https://bugs.python.org/file37792/starunpack6.diff \"Uploaded as text/plain at 2015-01-20.17:59:51 by @NeilGirdhar\")</li><li>[starunpack7.diff](https://bugs.python.org/file37795/starunpack7.diff \"Uploaded as text/plain at 2015-01-20.22:16:25 by Joshua.Landau\")</li><li>[starunpack8.diff](https://bugs.python.org/file37798/starunpack8.diff \"Uploaded as text/plain at 2015-01-20.23:20:50 by Joshua.Landau\")</li><li>[starunpack9.diff](https://bugs.python.org/file37799/starunpack9.diff \"Uploaded as text/plain at 2015-01-20.23:40:59 by @NeilGirdhar\")</li><li>[starunpack10.diff](https://bugs.python.org/file37801/starunpack10.diff \"Uploaded as text/plain at 2015-01-21.01:26:22 by @NeilGirdhar\")</li><li>[starunpack11.diff](https://bugs.python.org/file37805/starunpack11.diff \"Uploaded as text/plain at 2015-01-21.10:49:34 by @NeilGirdhar\")</li><li>[starunpack12.diff](https://bugs.python.org/file37806/starunpack12.diff \"Uploaded as text/plain at 2015-01-21.13:46:29 by Joshua.Landau\")</li><li>[starunpack13.diff](https://bugs.python.org/file37811/starunpack13.diff \"Uploaded as text/plain at 2015-01-21.21:07:33 by Joshua.Landau\")</li><li>[starunpack14.diff](https://bugs.python.org/file37821/starunpack14.diff \"Uploaded as text/plain at 2015-01-22.11:04:00 by @NeilGirdhar\")</li><li>[starunpack15.diff](https://bugs.python.org/file37851/starunpack15.diff \"Uploaded as text/plain at 2015-01-25.11:57:36 by @NeilGirdhar\")</li><li>[starunpack16.diff](https://bugs.python.org/file37852/starunpack16.diff \"Uploaded as text/plain at 2015-01-25.13:52:48 by @NeilGirdhar\")</li><li>[starunpack17.diff](https://bugs.python.org/file37853/starunpack17.diff \"Uploaded as text/plain at 2015-01-25.14:26:12 by @NeilGirdhar\")</li><li>[starunpack18.diff](https://bugs.python.org/file37854/starunpack18.diff \"Uploaded as text/plain at 2015-01-25.15:35:02 by @NeilGirdhar\")</li><li>[starunpack19.diff](https://bugs.python.org/file37866/starunpack19.diff \"Uploaded as text/plain at 2015-01-26.19:18:18 by Joshua.Landau\")</li><li>[starunpack20.diff](https://bugs.python.org/file37867/starunpack20.diff \"Uploaded as text/plain at 2015-01-26.19:37:45 by Joshua.Landau\")</li><li>[starunpack21.diff](https://bugs.python.org/file37871/starunpack21.diff \"Uploaded as text/plain at 2015-01-26.22:36:02 by @NeilGirdhar\")</li><li>[starunpack22.diff](https://bugs.python.org/file37876/starunpack22.diff \"Uploaded as text/plain at 2015-01-26.23:49:16 by @NeilGirdhar\")</li><li>[starunpack23.diff](https://bugs.python.org/file37877/starunpack23.diff \"Uploaded as text/plain at 2015-01-26.23:53:19 by @NeilGirdhar\")</li><li>[starunpack24.diff](https://bugs.python.org/file37896/starunpack24.diff \"Uploaded as text/plain at 2015-01-28.20:42:54 by @NeilGirdhar\")</li><li>[starunpack25.diff](https://bugs.python.org/file37911/starunpack25.diff \"Uploaded as text/plain at 2015-01-30.00:32:23 by @NeilGirdhar\")</li><li>[starunpack26.diff](https://bugs.python.org/file37920/starunpack26.diff \"Uploaded as text/plain at 2015-01-30.08:45:46 by @NeilGirdhar\")</li><li>[starunpack27.diff](https://bugs.python.org/file37921/starunpack27.diff \"Uploaded as text/plain at 2015-01-30.11:42:08 by @NeilGirdhar\")</li><li>[starunpack28.diff](https://bugs.python.org/file37925/starunpack28.diff \"Uploaded as text/plain at 2015-01-30.16:02:36 by @NeilGirdhar\")</li><li>[starunpack29.diff](https://bugs.python.org/file37926/starunpack29.diff \"Uploaded as text/plain at 2015-01-30.16:36:02 by @NeilGirdhar\")</li><li>[starunpack30.diff](https://bugs.python.org/file37928/starunpack30.diff \"Uploaded as text/plain at 2015-01-30.21:48:06 by Joshua.Landau\")</li><li>[starunpack31.diff](https://bugs.python.org/file38062/starunpack31.diff \"Uploaded as text/plain at 2015-02-09.20:55:34 by @NeilGirdhar\")</li><li>[starunpack32.diff](https://bugs.python.org/file38070/starunpack32.diff \"Uploaded as text/plain at 2015-02-09.23:41:23 by @NeilGirdhar\")</li><li>[starunpack33.diff](https://bugs.python.org/file38252/starunpack33.diff \"Uploaded as text/plain at 2015-02-26.20:04:07 by @NeilGirdhar\")</li><li>[starunpack34.diff](https://bugs.python.org/file38253/starunpack34.diff \"Uploaded as text/plain at 2015-02-26.20:22:00 by @NeilGirdhar\")</li><li>[starunpack35.diff](https://bugs.python.org/file38341/starunpack35.diff \"Uploaded as text/plain at 2015-03-05.11:00:41 by @NeilGirdhar\")</li><li>[starunpack36.diff](https://bugs.python.org/file38395/starunpack36.diff \"Uploaded as text/plain at 2015-03-08.23:38:08 by @NeilGirdhar\")</li><li>[starunpack37.diff](https://bugs.python.org/file38429/starunpack37.diff \"Uploaded as text/plain at 2015-03-10.21:38:22 by @NeilGirdhar\")</li><li>[starunpack38.diff](https://bugs.python.org/file38611/starunpack38.diff \"Uploaded as text/plain at 2015-03-21.00:04:01 by @NeilGirdhar\")</li><li>[starunpack39.diff](https://bugs.python.org/file38613/starunpack39.diff \"Uploaded as text/plain at 2015-03-21.02:56:55 by @NeilGirdhar\")</li><li>[starunpack40.diff](https://bugs.python.org/file38856/starunpack40.diff \"Uploaded as text/plain at 2015-04-07.10:18:48 by @NeilGirdhar\")</li><li>[starunpack41.diff](https://bugs.python.org/file39059/starunpack41.diff \"Uploaded as text/plain at 2015-04-15.22:37:50 by @NeilGirdhar\")</li><li>[starunpack42.diff](https://bugs.python.org/file39230/starunpack42.diff \"Uploaded as text/plain at 2015-04-29.03:16:40 by @NeilGirdhar\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/benjaminp'\nclosed_at = <Date 2015-05-06.00:17:23.889>\ncreated_at = <Date 2008-03-15.15:41:19.194>\nlabels = ['interpreter-core', 'type-feature', 'release-blocker']\ntitle = 'Missing *-unpacking generalizations'\nupdated_at = <Date 2017-02-11.15:40:07.206>\nuser = 'https://github.com/Yhg1s'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2017-02-11.15:40:07.206>\nactor = 'serhiy.storchaka'\nassignee = 'benjamin.peterson'\nclosed = True\nclosed_date = <Date 2015-05-06.00:17:23.889>\ncloser = 'benjamin.peterson'\ncomponents = ['Interpreter Core']\ncreation = <Date 2008-03-15.15:41:19.194>\ncreator = 'twouters'\ndependencies = []\nfiles = ['9955', '32670', '37779', '37788', '37790', '37791', '37792', '37795', '37798', '37799', '37801', '37805', '37806', '37811', '37821', '37851', '37852', '37853', '37854', '37866', '37867', '37871', '37876', '37877', '37896', '37911', '37920', '37921', '37925', '37926', '37928', '38062', '38070', '38252', '38253', '38341', '38395', '38429', '38611', '38613', '38856', '39059', '39230']\nhgrepos = []\nissue_num = 2292\nkeywords = ['patch']\nmessage_count = 172.0\nmessages = ['63548', '63550', '63551', '63552', '63553', '63554', '63557', '63563', '63859', '65012', '65018', '65023', '65079', '65089', '65095', '65096', '65100', '65109', '65110', '65111', '65116', '65117', '65125', '67465', '88533', '88537', '100293', '100295', '100296', '100304', '100305', '116416', '149588', '151143', '186099', '186101', '191754', '192984', '203191', '234332', '234342', '234366', '234368', '234370', '234372', '234377', '234378', '234380', '234384', '234385', '234386', '234393', '234394', '234397', '234404', '234405', '234406', '234408', '234409', '234411', '234413', '234414', '234415', '234416', '234418', '234419', '234420', '234421', '234422', '234432', '234436', '234445', '234457', '234458', '234459', '234460', '234462', '234463', '234464', '234465', '234466', '234467', '234468', '234469', '234483', '234489', '234493', '234516', '234518', '234519', '234520', '234521', '234522', '234528', '234529', '234530', '234531', '234537', '234538', '234539', '234540', '234541', '234543', '234544', '234663', '234668', '234669', '234670', '234681', '234711', '234754', '234755', '234757', '234758', '234759', '234760', '234764', '234766', '234767', '234771', '234772', '234785', '234800', '234914', '234916', '235009', '235018', '235029', '235030', '235031', '235038', '235040', '235041', '235058', '235281', '235292', '235297', '235302', '235310', '235368', '235641', '235646', '235647', '235648', '236557', '236702', '236703', '237257', '237688', '238751', '241113', '242210', '242212', '242438', '242442', '242446', '242624', '242625', '242626', '242629', '242631', '242666', '242669', '242721', '242723', '242724', '242739', '248019', '248025', '257139', '261617', '287606']\nnosy_count = 25.0\nnosy_names = ['gvanrossum', 'twouters', 'georg.brandl', 'terry.reedy', 'paul.moore', 'ncoghlan', 'belopolsky', 'scoder', 'larry', 'benjamin.peterson', 'ezio.melotti', 'andybuckley', 'r.david.murray', 'zbysz', 'ethan.furman', 'eric.snow', 'berker.peksag', 'Joshua.Landau', 'serhiy.storchaka', 'yselivanov', 'steve.dower', 'pconnell', 'NeilGirdhar', 'Jeff.Kaufman', 'SpaghettiToastBook']\npr_nums = []\npriority = 'release blocker'\nresolution = 'fixed'\nstage = 'resolved'\nstatus = 'closed'\nsuperseder = None\ntype = 'enhancement'\nurl = 'https://bugs.python.org/issue2292'\nversions = ['Python 3.5']\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "benjaminp",
        "id": 219470,
        "node_id": "MDQ6VXNlcjIxOTQ3MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/219470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benjaminp",
        "html_url": "https://github.com/benjaminp",
        "followers_url": "https://api.github.com/users/benjaminp/followers",
        "following_url": "https://api.github.com/users/benjaminp/following{/other_user}",
        "gists_url": "https://api.github.com/users/benjaminp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/benjaminp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/benjaminp/subscriptions",
        "organizations_url": "https://api.github.com/users/benjaminp/orgs",
        "repos_url": "https://api.github.com/users/benjaminp/repos",
        "events_url": "https://api.github.com/users/benjaminp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/benjaminp/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/46545/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/46545/timeline",
      "performed_via_github_app": null,
      "state_reason": "completed",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412283",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412283",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412283,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyODM=",
          "user": {
            "login": "Yhg1s",
            "id": 3949752,
            "node_id": "MDQ6VXNlcjM5NDk3NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3949752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Yhg1s",
            "html_url": "https://github.com/Yhg1s",
            "followers_url": "https://api.github.com/users/Yhg1s/followers",
            "following_url": "https://api.github.com/users/Yhg1s/following{/other_user}",
            "gists_url": "https://api.github.com/users/Yhg1s/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Yhg1s/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Yhg1s/subscriptions",
            "organizations_url": "https://api.github.com/users/Yhg1s/orgs",
            "repos_url": "https://api.github.com/users/Yhg1s/repos",
            "events_url": "https://api.github.com/users/Yhg1s/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Yhg1s/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-03-15T15:41:16Z",
          "updated_at": "2008-03-15T15:41:16Z",
          "author_association": "MEMBER",
          "body": "The attached patch adds the missing \\*-unpacking generalizations.\nSpecifically:\n\n>\\>\\> a, b, \\*c = range(5)\n\n```pycon\n>>> *a, b, c = a, b, *c\n>>> a, b, c\n([0, 1, 2], 3, 4)\n>>> [ *a, b, c ]\n[0, 1, 2, 3, 4]\n>>> L = [ a, (3, 4), {5}, {6: None}, (i for i in range(7, 10)) ]\n>>> [ *item for item in L ]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n\nAlso, yielding everything from an iterator:\n\n```pycon\n>>> def flatten(iterables):\n...     for it in iterables:\n...         yield *it\n... \n>>> L = [ a, (3, 4), {5}, {6: None}, (i for i in range(7, 10)) ]\n>>> flatten(L)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412283/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412285",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412285",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412285,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyODU=",
          "user": {
            "login": "abalkin",
            "id": 535197,
            "node_id": "MDQ6VXNlcjUzNTE5Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/535197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abalkin",
            "html_url": "https://github.com/abalkin",
            "followers_url": "https://api.github.com/users/abalkin/followers",
            "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
            "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
            "organizations_url": "https://api.github.com/users/abalkin/orgs",
            "repos_url": "https://api.github.com/users/abalkin/repos",
            "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abalkin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-03-15T16:09:27Z",
          "updated_at": "2008-03-15T16:09:27Z",
          "author_association": "MEMBER",
          "body": "This was discussed years ago and never got enough support:\n\nhttp://mail.python.org/pipermail/python-dev/2005-October/057177.html",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412285/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412286",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412286",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412286,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyODY=",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-03-15T16:12:12Z",
          "updated_at": "2008-03-15T16:12:12Z",
          "author_association": "MEMBER",
          "body": "Didn't you say it does sets too?  Does this work?\na = [1, 2, 3]\n{1, \\*a, 0, 4}   # {0, 1, 2, 3, 4}\n\nHow about dicts?\nkwds = {'z': 0, 'w': 12}\n{'x': 1, 'y': 2, \\*\\*kwds}  # {'x': 1, 'y': 2, 'z': 0, 'w': 12}\n\nAlso, now that we support\n\n[*a, b, c]\n\nshouldn't we also support\n\n```py\nfoo(*a, b, c)\n```\n\n\n?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412286/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412288",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412288",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412288,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyODg=",
          "user": {
            "login": "Yhg1s",
            "id": 3949752,
            "node_id": "MDQ6VXNlcjM5NDk3NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3949752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Yhg1s",
            "html_url": "https://github.com/Yhg1s",
            "followers_url": "https://api.github.com/users/Yhg1s/followers",
            "following_url": "https://api.github.com/users/Yhg1s/following{/other_user}",
            "gists_url": "https://api.github.com/users/Yhg1s/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Yhg1s/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Yhg1s/subscriptions",
            "organizations_url": "https://api.github.com/users/Yhg1s/orgs",
            "repos_url": "https://api.github.com/users/Yhg1s/repos",
            "events_url": "https://api.github.com/users/Yhg1s/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Yhg1s/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-03-15T16:14:25Z",
          "updated_at": "2008-03-15T16:14:25Z",
          "author_association": "MEMBER",
          "body": "On Sat, Mar 15, 2008 at 9:12 AM, Guido van Rossum \\<report@bugs.python.org\\>\nwrote:\n\n>\n> Guido van Rossum \\<guido@python.org\\> added the comment:\n>\n> Didn't you say it does sets too?  Does this work?\n> a = [1, 2, 3]\n> {1, \\*a, 0, 4}   # {0, 1, 2, 3, 4}\n\nYes.\n\n>\n>\n> How about dicts?\n> kwds = {'z': 0, 'w': 12}\n> {'x': 1, 'y': 2, \\*\\*kwds}  # {'x': 1, 'y': 2, 'z': 0, 'w': 12}\n\nNot yet.\n\n>\n>\n> Also, now that we support\n>\n> [*a, b, c]\n>\n> shouldn't we also support\n>\n> foo(*a, b, c)\n>\n\nSure. (And also 'foo(*a, \\*b, \\*c)'?) But have you taken a look lately at the\nfunction definition grammar? I need some time to sort it out :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412288/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412290",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412290",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412290,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyOTA=",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-03-15T16:18:09Z",
          "updated_at": "2008-03-15T16:18:09Z",
          "author_association": "MEMBER",
          "body": "Looking at the flatten() example I'm curious -- how come the output of\n\n>\\>\\> flatten(L)\n\nis displayed as a list rather than as \\<generator at xxxxxx\\> ?\n\nAlso, do I understand correctly that\n\nyield \\*(1, 2, 3)\n\nis equivalent to\n\nyield 1\nyield 2\nyield 3\n\n? (That's really cool.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412290/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412292",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412292",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412292,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyOTI=",
          "user": {
            "login": "Yhg1s",
            "id": 3949752,
            "node_id": "MDQ6VXNlcjM5NDk3NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3949752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Yhg1s",
            "html_url": "https://github.com/Yhg1s",
            "followers_url": "https://api.github.com/users/Yhg1s/followers",
            "following_url": "https://api.github.com/users/Yhg1s/following{/other_user}",
            "gists_url": "https://api.github.com/users/Yhg1s/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Yhg1s/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Yhg1s/subscriptions",
            "organizations_url": "https://api.github.com/users/Yhg1s/orgs",
            "repos_url": "https://api.github.com/users/Yhg1s/repos",
            "events_url": "https://api.github.com/users/Yhg1s/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Yhg1s/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-03-15T16:22:37Z",
          "updated_at": "2008-03-15T16:22:37Z",
          "author_association": "MEMBER",
          "body": "On Sat, Mar 15, 2008 at 9:18 AM, Guido van Rossum \\<report@bugs.python.org\\>\nwrote:\n\n>\n> Guido van Rossum \\<guido@python.org\\> added the comment:\n>\n> Looking at the flatten() example I'm curious -- how come the output of\n>\n> \\>\\>\\> flatten(L)\n>\n> is displayed as a list rather than as \\<generator at xxxxxx\\> ?\n>\n\nIt's a typo. It should've been list(flatten(L)) :-) (see the tests included\nin the patch.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412292/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412293",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412293",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412293,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyOTM=",
          "user": {
            "login": "abalkin",
            "id": 535197,
            "node_id": "MDQ6VXNlcjUzNTE5Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/535197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abalkin",
            "html_url": "https://github.com/abalkin",
            "followers_url": "https://api.github.com/users/abalkin/followers",
            "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
            "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
            "organizations_url": "https://api.github.com/users/abalkin/orgs",
            "repos_url": "https://api.github.com/users/abalkin/repos",
            "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abalkin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-03-15T16:55:09Z",
          "updated_at": "2008-03-15T16:55:09Z",
          "author_association": "MEMBER",
          "body": "It looks like I completely missed PEP-3132.  Sorry for a misleading \ncomment above.\n\nAt least I am not alone: \"A little new feature in Python 3 that many \noverviews don't tell you about: extended unpacking.\" http://pyside.blogspot.com/2007/10/new-in-python-3-extended-\nunpacking.html",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412293/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412294",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412294",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412294,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyOTQ=",
          "user": {
            "login": "birkenfeld",
            "id": 144359,
            "node_id": "MDQ6VXNlcjE0NDM1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/birkenfeld",
            "html_url": "https://github.com/birkenfeld",
            "followers_url": "https://api.github.com/users/birkenfeld/followers",
            "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/birkenfeld/orgs",
            "repos_url": "https://api.github.com/users/birkenfeld/repos",
            "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/birkenfeld/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-03-15T20:15:53Z",
          "updated_at": "2008-03-15T20:15:53Z",
          "author_association": "MEMBER",
          "body": "Just a nit: the syntax error message for invalid starred expressions\nshould be changed from \"can use starred expression only as assignment\ntarget\".",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412294/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412297",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412297",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412297,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyOTc=",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-03-18T03:02:20Z",
          "updated_at": "2008-03-18T03:02:20Z",
          "author_association": "MEMBER",
          "body": "This is fun, but needs more work (see python-3000 thread).\n\nI'm setting the priority to low, since I won't hold up a release to get\nthis in (if there's even a rough consensus).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412297/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412298",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412298",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412298,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyOTg=",
          "user": {
            "login": "Yhg1s",
            "id": 3949752,
            "node_id": "MDQ6VXNlcjM5NDk3NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3949752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Yhg1s",
            "html_url": "https://github.com/Yhg1s",
            "followers_url": "https://api.github.com/users/Yhg1s/followers",
            "following_url": "https://api.github.com/users/Yhg1s/following{/other_user}",
            "gists_url": "https://api.github.com/users/Yhg1s/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Yhg1s/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Yhg1s/subscriptions",
            "organizations_url": "https://api.github.com/users/Yhg1s/orgs",
            "repos_url": "https://api.github.com/users/Yhg1s/repos",
            "events_url": "https://api.github.com/users/Yhg1s/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Yhg1s/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-05T23:59:39Z",
          "updated_at": "2008-04-05T23:59:39Z",
          "author_association": "MEMBER",
          "body": "Updated patch: reworked some internals, and added generalization of\nfunctioncalls after talking with Guido. \\*args is now considered just\nanother positional argument, and can occur anywhere in the positional\nargument section. It can also occur more than once. Keyword arguments\nnow have to appear after \\*args, and \\*\\*kwargs can now occur multiple\ntimes at any position in the keyword argument list. test_extcall has\nsome examples.\n\n(The opcodes are largely unaffected; just the order of '\\*args' and\nkeyword arguments is changed. Behind the scenes, anything after the\nfirst '\\*args' argument is collapsed into a single \\*args, and everything\nafter the first '\\*\\*kwargs' is likewise collapsed. The common case\n(meaning any currently valid syntax, barring the 2to3 fix to swap \\*args\nand keyword arguments) does not change in meaning or codepath, just the\ncomplex cases are handled differently.)\n\nThis is still Work In Progress. To do: implement the dict unpacking\nsyntax (the mechanics are already there for keyword arguments to\nfunctioncalls), make sure the precendence of * is correct, get more\ncomplete test coverage, iron out the cosmetic bugs in the 2to3 fixer.\n\nBzr branch for this patch is\nhttp://code.python.org/python/users/twouters/starunpack . There is also\na branch with just the functioncall changes (although the starunpack\nchanges are a small sprinkling on top of that branch, as it uses the\nsame new mechanics): http://code.python.org/python/users/twouters/funcargs .",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412298/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412299",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412299",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412299,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIyOTk=",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-06T04:34:27Z",
          "updated_at": "2008-04-06T04:34:27Z",
          "author_association": "MEMBER",
          "body": "What's dict unpacking? I hope it's not an implementation of this sad\nidea posted recently:\n\n{'a': x, 'b': y} = {'a': 42, 'b': 'hello'}  # Same as x, y = 42, 'hello'\n\n:-)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412299/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412311",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412311",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412311,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIzMTE=",
          "user": {
            "login": "Yhg1s",
            "id": 3949752,
            "node_id": "MDQ6VXNlcjM5NDk3NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3949752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Yhg1s",
            "html_url": "https://github.com/Yhg1s",
            "followers_url": "https://api.github.com/users/Yhg1s/followers",
            "following_url": "https://api.github.com/users/Yhg1s/following{/other_user}",
            "gists_url": "https://api.github.com/users/Yhg1s/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Yhg1s/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Yhg1s/subscriptions",
            "organizations_url": "https://api.github.com/users/Yhg1s/orgs",
            "repos_url": "https://api.github.com/users/Yhg1s/repos",
            "events_url": "https://api.github.com/users/Yhg1s/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Yhg1s/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-06T06:38:08Z",
          "updated_at": "2008-04-06T06:38:08Z",
          "author_association": "MEMBER",
          "body": "No, it's what you asked for in [msg63551](https://bugs.python.org/msg63551):\n\n> How about dicts?\n> kwds = {'z': 0, 'w': 12}\n> {'x': 1, 'y': 2, \\*\\*kwds}  # {'x': 1, 'y': 2, 'z': 0, 'w': 12}\n\n(unpacking of dicts in dicts.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412311/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412313",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412313",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412313,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIzMTM=",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-07T17:45:11Z",
          "updated_at": "2008-04-07T17:45:11Z",
          "author_association": "MEMBER",
          "body": "I think we should either get this into the 3.0a5 release planned for May\n7, or wait for 3.1.  I'd prefer to see some kind of PEP discussion on\nthe python-3000 list, rather than just a BDFL approval in a tracker\nissue.  I think it's a useful feature (especially now we already have\nPEP-3132) but we're getting close to the release, so I'd like to see\nsome more eyeballs on this code...  I expect the PEP discussion will be\nshort and sweet -- either most folks like it, or we should not push\nthrough at this point in time.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412313/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412314",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412314",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412314,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIzMTQ=",
          "user": {
            "login": "Yhg1s",
            "id": 3949752,
            "node_id": "MDQ6VXNlcjM5NDk3NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3949752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Yhg1s",
            "html_url": "https://github.com/Yhg1s",
            "followers_url": "https://api.github.com/users/Yhg1s/followers",
            "following_url": "https://api.github.com/users/Yhg1s/following{/other_user}",
            "gists_url": "https://api.github.com/users/Yhg1s/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Yhg1s/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Yhg1s/subscriptions",
            "organizations_url": "https://api.github.com/users/Yhg1s/orgs",
            "repos_url": "https://api.github.com/users/Yhg1s/repos",
            "events_url": "https://api.github.com/users/Yhg1s/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Yhg1s/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-07T18:28:32Z",
          "updated_at": "2008-04-07T18:28:32Z",
          "author_association": "MEMBER",
          "body": "Agreed. A PEP was already on my TODO list (although I don't mind if\nsomeone else picks it up :-) I implemented the\ndict-unpacking-in-dict-literal syntax in the mean time; it's pushed to\nthe starunpack bzr branch, but I'll add some actual tests before I\nupload the patch.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412314/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412315",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412315",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412315,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIzMTU=",
          "user": {
            "login": "abalkin",
            "id": 535197,
            "node_id": "MDQ6VXNlcjUzNTE5Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/535197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abalkin",
            "html_url": "https://github.com/abalkin",
            "followers_url": "https://api.github.com/users/abalkin/followers",
            "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
            "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
            "organizations_url": "https://api.github.com/users/abalkin/orgs",
            "repos_url": "https://api.github.com/users/abalkin/repos",
            "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abalkin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-07T19:00:14Z",
          "updated_at": "2008-04-07T19:00:14Z",
          "author_association": "MEMBER",
          "body": "Thomas,\n\nCould you add BUILD_*_UNPACK opcodes documentation to\n[Doc/library/dis.rst](https://github.com/python/cpython/blob/main/Doc/library/dis.rst)?   It would also help if you modify CALL_FUNCTION_*\nopcodes' documentation to explain how they will interact with unpacking\nopcodes.\n\nDo I understand correctly that non-starred arguments are packed into\nintermediate tuples/sets in the presence of starred arguments so that\n{a,b,*c,d,e} is equivalent to {*{a,b},*c,*{d,e}}? This should not be a\nproblem for tuples, but with sets, it means that {a,b,c} may behave\nsubtly differently from {a,*(b,c)}.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412315/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412316",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412316",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412316,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIzMTY=",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-07T19:07:51Z",
          "updated_at": "2008-04-07T19:07:51Z",
          "author_association": "MEMBER",
          "body": ">  Do I understand correctly that non-starred arguments are packed into\n>  intermediate tuples/sets in the presence of starred arguments so that\n>  {a,b,*c,d,e} is equivalent to {*{a,b},*c,*{d,e}}? This should not be a\n>  problem for tuples, but with sets, it means that {a,b,c} may behave\n>  subtly differently from {a,*(b,c)}.\n\nCan you show an example where this would be different?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412316/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412319",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412319",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412319,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIzMTk=",
          "user": {
            "login": "Yhg1s",
            "id": 3949752,
            "node_id": "MDQ6VXNlcjM5NDk3NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3949752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Yhg1s",
            "html_url": "https://github.com/Yhg1s",
            "followers_url": "https://api.github.com/users/Yhg1s/followers",
            "following_url": "https://api.github.com/users/Yhg1s/following{/other_user}",
            "gists_url": "https://api.github.com/users/Yhg1s/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Yhg1s/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Yhg1s/subscriptions",
            "organizations_url": "https://api.github.com/users/Yhg1s/orgs",
            "repos_url": "https://api.github.com/users/Yhg1s/repos",
            "events_url": "https://api.github.com/users/Yhg1s/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Yhg1s/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-07T19:28:01Z",
          "updated_at": "2008-04-07T19:28:01Z",
          "author_association": "MEMBER",
          "body": "On Mon, Apr 7, 2008 at 9:00 PM, Alexander Belopolsky \\<report@bugs.python.org\\>\nwrote:\n\n>\n> Alexander Belopolsky \\<belopolsky@users.sourceforge.net\\> added the comment:\n>\n> Thomas,\n>\n> Could you add BUILD_*_UNPACK opcodes documentation to\n> [Doc/library/dis.rst](https://github.com/python/cpython/blob/main/Doc/library/dis.rst)?   It would also help if you modify CALL_FUNCTION_*\n> opcodes' documentation to explain how they will interact with unpacking\n> opcodes.\n\nThey don't interact. They're separate opcodes. The CALL_FUNCTION_* opcodes\nare almost untouched, except the \\_VAR and \\_VAR_KW versions: previously, they\nexpected, on the stack, positional arguments followed by keyword/argument\npairs followed by the \\*args sequence followed by the \\*\\*kwargs mapping (for\n\\_VAR_KW.) I just changed the order so \\*args is before the keyword/argument\npairs. The change is not related to the BUILD_*_UNPACK opcodes, but rather\nto Guido's request that the order of keyword arguments and \\*args in the\nfunctioncall syntax changes. For the order of execution to remain sane, the\narguments need to be pushed on the stack in that order, and keeping the\n\\_VAR* opcode order the same would mean a large amount of ROT_* opcodes ;-P\n\nUpdating the docs is on the TODO list.\n\n>\n> Do I understand correctly that non-starred arguments are packed into\n> intermediate tuples/sets in the presence of starred arguments so that\n> {a,b,*c,d,e} is equivalent to {*{a,b},*c,*{d,e}}? This should not be a\n> problem for tuples, but with sets, it means that {a,b,c} may behave\n> subtly differently from {a,*(b,c)}.\n>\n\nYes, that's what happens, but only in the presence of \\*args. For\nfunctioncalls, it only happens to everything after the first \\*args\n(inclusive.) That means '{a, b, c}' does not change, and neither does\n'func(a, b, c)' or 'func(a, b, \\*c)'. As for sets, I don't see why this would\nbe a problem; there is no difference in the set created by {a, b, c} and the\nset created by {a, \\*{b, c}} or {a, \\*(b, c)}.  The arguments are all\nevaluated in the same order (left to right), and c replaces b, b replaces a\nif they are considered equal by sets.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412319/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412323",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412323",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412323,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIzMjM=",
          "user": {
            "login": "abalkin",
            "id": 535197,
            "node_id": "MDQ6VXNlcjUzNTE5Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/535197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abalkin",
            "html_url": "https://github.com/abalkin",
            "followers_url": "https://api.github.com/users/abalkin/followers",
            "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
            "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
            "organizations_url": "https://api.github.com/users/abalkin/orgs",
            "repos_url": "https://api.github.com/users/abalkin/repos",
            "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abalkin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-07T19:53:34Z",
          "updated_at": "2008-04-07T19:53:34Z",
          "author_association": "MEMBER",
          "body": "On Mon, Apr 7, 2008 at 3:07 PM, Guido van Rossum \\<report@bugs.python.org\\> wrote:\n\n>  Can you show an example where this would be different?\n\nAdmittedly a contrived example, but\n\n```pycon\n...    def __hash__(self):\n...        print('hash', self)\n...        return int.__hash__(self)\n...\n>>> a,b,c = map(X, range(3))\n>>> {a,b,c}\nhash 2\nhash 1\nhash 0\n{0, 1, 2}\n>>> {a,*(b,c)}\nhash 0\nhash 1\nhash 2\n{0, 1, 2}\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412323/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412326",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412326",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412326,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIzMjY=",
          "user": {
            "login": "abalkin",
            "id": 535197,
            "node_id": "MDQ6VXNlcjUzNTE5Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/535197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abalkin",
            "html_url": "https://github.com/abalkin",
            "followers_url": "https://api.github.com/users/abalkin/followers",
            "following_url": "https://api.github.com/users/abalkin/following{/other_user}",
            "gists_url": "https://api.github.com/users/abalkin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abalkin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abalkin/subscriptions",
            "organizations_url": "https://api.github.com/users/abalkin/orgs",
            "repos_url": "https://api.github.com/users/abalkin/repos",
            "events_url": "https://api.github.com/users/abalkin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abalkin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-07T19:58:37Z",
          "updated_at": "2008-04-07T19:58:37Z",
          "author_association": "MEMBER",
          "body": "I missed the first line copying the class definition into my previous\npost.  Class 'X' was defined as follows:\n\n```py\nclass X(int):\n    def __hash__(self):\n        print('hash', self)\n        return int.__hash__(self)\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412326/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412327",
          "html_url": "https://github.com/python/cpython/issues/46545#issuecomment-1093412327",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/46545",
          "id": 1093412327,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MTIzMjc=",
          "user": {
            "login": "Yhg1s",
            "id": 3949752,
            "node_id": "MDQ6VXNlcjM5NDk3NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3949752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Yhg1s",
            "html_url": "https://github.com/Yhg1s",
            "followers_url": "https://api.github.com/users/Yhg1s/followers",
            "following_url": "https://api.github.com/users/Yhg1s/following{/other_user}",
            "gists_url": "https://api.github.com/users/Yhg1s/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Yhg1s/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Yhg1s/subscriptions",
            "organizations_url": "https://api.github.com/users/Yhg1s/orgs",
            "repos_url": "https://api.github.com/users/Yhg1s/repos",
            "events_url": "https://api.github.com/users/Yhg1s/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Yhg1s/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-04-07T20:02:09Z",
          "updated_at": "2008-04-07T20:02:09Z",
          "author_association": "MEMBER",
          "body": "I'm not sure how this matters. The order of evaluation is the same, the\nBUILD_SET implementation just hashes the evaluated items in a different\norder. You can't really rely on that particular order as it's tied\nclosely to the stack representation CPython uses. I also see no\npractical reason -- or even practical \\*way* -- to abuse the hashing\norder. But you have given me an idea on how to improve some of the code\nin the BUILD_*_UNPACK opcodes, hmm.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093412327/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/96123",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/96123/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/96123/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/96123/events",
      "html_url": "https://github.com/python/cpython/pull/96123",
      "id": 1344439133,
      "node_id": "PR_kwDOBN0Z8c49dk0X",
      "number": 96123,
      "title": "gh-96143: Allow Linux perf profiler to see Python calls",
      "user": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 37,
      "created_at": "2022-08-19T13:22:56Z",
      "updated_at": "2023-03-08T11:39:51Z",
      "closed_at": "2022-08-30T17:11:18Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/96123",
        "html_url": "https://github.com/python/cpython/pull/96123",
        "diff_url": "https://github.com/python/cpython/pull/96123.diff",
        "patch_url": "https://github.com/python/cpython/pull/96123.patch",
        "merged_at": "2022-08-30T17:11:18Z"
      },
      "body": "\r\n\r\n\r\n<!-- gh-issue-number: gh-96143 -->\r\n* Issue: gh-96143\r\n<!-- /gh-issue-number -->\n\nAutomerge-Triggered-By: GH:pablogsal",
      "closed_by": {
        "login": "miss-islington",
        "id": 31488909,
        "node_id": "MDQ6VXNlcjMxNDg4OTA5",
        "avatar_url": "https://avatars.githubusercontent.com/u/31488909?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/miss-islington",
        "html_url": "https://github.com/miss-islington",
        "followers_url": "https://api.github.com/users/miss-islington/followers",
        "following_url": "https://api.github.com/users/miss-islington/following{/other_user}",
        "gists_url": "https://api.github.com/users/miss-islington/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/miss-islington/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/miss-islington/subscriptions",
        "organizations_url": "https://api.github.com/users/miss-islington/orgs",
        "repos_url": "https://api.github.com/users/miss-islington/repos",
        "events_url": "https://api.github.com/users/miss-islington/events{/privacy}",
        "received_events_url": "https://api.github.com/users/miss-islington/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/96123/reactions",
        "total_count": 13,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 12,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/96123/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221030891",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221030891",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221030891,
          "node_id": "IC_kwDOBN0Z8c5Ix3Pr",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-19T19:33:01Z",
          "updated_at": "2022-08-19T19:33:01Z",
          "author_association": "MEMBER",
          "body": "You can use preprocesor macros if you name the file `Objects/asm_trampoline.S` or `.sx` instead of `Objects/asm_trampoline.s`. The `.sx` form needs a makefile rule. ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221030891/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221097007",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221097007",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221097007,
          "node_id": "IC_kwDOBN0Z8c5IyHYv",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-19T21:14:25Z",
          "updated_at": "2022-08-19T21:14:25Z",
          "author_association": "MEMBER",
          "body": "> You can use preprocesor macros if you name the file `Objects/asm_trampoline.S` or `.sx` instead of `Objects/asm_trampoline.s`. The `.sx` form needs a makefile rule. \n\nHummm, not sure I follow, could you maybe show me an example of what we can achieve with this?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221097007/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221106981",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221106981",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221106981,
          "node_id": "IC_kwDOBN0Z8c5IyJ0l",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-19T21:31:37Z",
          "updated_at": "2022-08-19T21:31:37Z",
          "author_association": "MEMBER",
          "body": "You can have multiple implementations in the same file:\r\n\r\n```\r\n    .text\r\n    .globl\t_Py_trampoline_func_start\r\n_Py_trampoline_func_start:\r\n#ifdef __x86_64__\r\n    push   %rbp\r\n    mov    %rsp,%rbp\r\n    mov    %rdi,%rax\r\n    mov    %rsi,%rdi\r\n    mov    %rdx,%rsi\r\n    mov    %ecx,%edx\r\n    call   *%rax\r\n    pop    %rbp\r\n    ret\r\n#endif // __x86_64__\r\n#ifdef __aarch64__\r\n    TODO\r\n#endif\r\n    .globl\t_Py_trampoline_func_end\r\n_Py_trampoline_func_end:\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221106981/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221382792",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221382792",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221382792,
          "node_id": "IC_kwDOBN0Z8c5IzNKI",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-20T18:33:28Z",
          "updated_at": "2022-08-20T18:33:28Z",
          "author_association": "MEMBER",
          "body": "Why did you add a Windows build file? How about we do not define ``_PyPerfTrampoline_Init`` unless HAVE_PERF_TRAMPOLINE is defined?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221382792/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221385806",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221385806",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221385806,
          "node_id": "IC_kwDOBN0Z8c5IzN5O",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-20T18:51:13Z",
          "updated_at": "2022-08-20T18:51:13Z",
          "author_association": "MEMBER",
          "body": "> Why did you add a Windows build file? How about we do not define ``_PyPerfTrampoline_Init`` unless HAVE_PERF_TRAMPOLINE is defined?\n\nThen we need to add more ifdef every place is used but that works as well for sure",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221385806/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221422370",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221422370",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221422370,
          "node_id": "IC_kwDOBN0Z8c5IzW0i",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-20T23:00:29Z",
          "updated_at": "2022-08-20T23:00:29Z",
          "author_association": "MEMBER",
          "body": "Docs will follow in a separate PR",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221422370/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221597608",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221597608",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221597608,
          "node_id": "IC_kwDOBN0Z8c5I0Bmo",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-21T18:25:40Z",
          "updated_at": "2022-08-21T18:25:40Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nWhen you're done making the requested changes, leave the comment: `I have made the requested changes; please review again`.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221597608/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221598666",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221598666",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221598666,
          "node_id": "IC_kwDOBN0Z8c5I0B3K",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-21T18:33:25Z",
          "updated_at": "2022-08-21T18:33:25Z",
          "author_association": "MEMBER",
          "body": "> > Docs will follow in a separate PR\n> \n> Please don't do it that way. Everything needs reviewing all at once.\n> \n> Per our own devguide: _\"proper [documentation](https://devguide.python.org/documentation/start-documenting/#documenting) additions/changes should be included.\"_ - https://devguide.python.org/getting-started/pull-request-lifecycle/#patch\n> \n> It feels like this change is being rushed in.\n\nIn happy to include them here. I was suggesting doing that to not overwhelm reviewers. We are not in a rush by any means so apologies if it felt like that :(",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221598666/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221633342",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221633342",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221633342,
          "node_id": "IC_kwDOBN0Z8c5I0KU-",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-21T22:33:01Z",
          "updated_at": "2022-08-21T22:34:50Z",
          "author_association": "MEMBER",
          "body": "(Note: I made a comment mentioning that I would prefer to do this in another PR but upon reflection adding a function that allows you to override those 3 functions may be ok to do here so I deleted my original comment as it doesn't apply anymore).\n\n@gpshead would you be Ok with some API that allows you to provide 3 function pointers with the same signature and those will be called before executing the trampoline?\n\n> I'd keep it Py_BUILD_CORE internal only API to set the map_get_file, map_write_entry, and map_close, function pointers to start with. (If we wanted to make a public C API to support changing these, that requires broader discussion)\n\nMakes sense, I wouldn't also be comfortable offering a public APIs until we have some experience with this. \ud83d\udc4d",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221633342/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221634343",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221634343",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221634343,
          "node_id": "IC_kwDOBN0Z8c5I0Kkn",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-21T22:40:22Z",
          "updated_at": "2022-08-21T22:43:03Z",
          "author_association": "MEMBER",
          "body": "> There's only about 40 lines of code in your current \"perf_trampoline.c\" that are \"Linux specific\": The perf_map_* stuff. I'd separate that from the trampoline setup code that calls them.\n\nThe trampoline itself is likely Linux specific. For example, macOS has more protections and boilerplate (https://developer.apple.com/documentation/apple-silicon/porting-just-in-time-compilers-to-apple-silicon) when setting executable pages. The whole feature is basically dominated by when the trampolining is available.\n\nMaybe I am misinterpreting what you suggest. You mean \"separate\" as \"place them in other file\" or \"logically place them into another structure\", perhaps?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221634343/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221635748",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221635748",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221635748,
          "node_id": "IC_kwDOBN0Z8c5I0K6k",
          "user": {
            "login": "gpshead",
            "id": 68491,
            "node_id": "MDQ6VXNlcjY4NDkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gpshead",
            "html_url": "https://github.com/gpshead",
            "followers_url": "https://api.github.com/users/gpshead/followers",
            "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
            "organizations_url": "https://api.github.com/users/gpshead/orgs",
            "repos_url": "https://api.github.com/users/gpshead/repos",
            "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gpshead/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-21T22:51:14Z",
          "updated_at": "2022-08-21T22:51:14Z",
          "author_association": "MEMBER",
          "body": "> (Note: I made a comment mentioning that I would prefer to do this in another PR but upon reflection adding a function that allows you to override those 3 functions may be ok to do here so I deleted my original comment as it doesn't apply anymore).\r\n\r\n> @gpshead would you be Ok with some API that allows you to provide 3 function pointers with the same signature and those will be called before executing the trampoline?\r\n\r\nYeah that's about all I was thinking. I assume internally it'd just be setting static function pointers. A minimal thing of just failing with an error if the pointers are already set perhaps to avoid unintentional conflicts.  No need to worry about switching them or chaining or whatnot.  There's not likely to be a need to answer that kind of complication unless we were aiming for a public API.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221635748/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1221636684",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1221636684",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1221636684,
          "node_id": "IC_kwDOBN0Z8c5I0LJM",
          "user": {
            "login": "gpshead",
            "id": 68491,
            "node_id": "MDQ6VXNlcjY4NDkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gpshead",
            "html_url": "https://github.com/gpshead",
            "followers_url": "https://api.github.com/users/gpshead/followers",
            "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
            "organizations_url": "https://api.github.com/users/gpshead/orgs",
            "repos_url": "https://api.github.com/users/gpshead/repos",
            "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gpshead/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-21T22:58:10Z",
          "updated_at": "2022-08-21T22:58:10Z",
          "author_association": "MEMBER",
          "body": "> Maybe I am misinterpreting what you suggest. You mean \"separate\" as \"place them in other file\" or \"logically place them into another structure\", perhaps?\r\n\r\nI was thinking probably they stay in a file with \"perf\" in the name such as \"perf_map_output\" and the other stuff winds up in a file that evokes an \"eval_trampoline\" feel in its name just to separate what has direct access to what (yay C static privates) and which parts are specific to which purpose.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1221636684/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1222240578",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1222240578",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1222240578,
          "node_id": "IC_kwDOBN0Z8c5I2elC",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-22T11:44:53Z",
          "updated_at": "2022-08-22T11:53:49Z",
          "author_association": "MEMBER",
          "body": "> > (Note: I made a comment mentioning that I would prefer to do this in another PR but upon reflection adding a function that allows you to override those 3 functions may be ok to do here so I deleted my original comment as it doesn't apply anymore).\r\n> \r\n> > @gpshead would you be Ok with some API that allows you to provide 3 function pointers with the same signature and those will be called before executing the trampoline?\r\n> \r\n> Yeah that's about all I was thinking. I assume internally it'd just be setting static function pointers. A minimal thing of just failing with an error if the pointers are already set perhaps to avoid unintentional conflicts. No need to worry about switching them or chaining or whatnot. There's not likely to be a need to answer that kind of complication unless we were aiming for a public API.\r\n\r\nOk, I have implemented this API in the last commit. I am not entirely happy because this adds quite a lot of extra complexity for some usages that are not clear if they are going to be used. Also, we have lost some functionality as now if you don't pass `-Xperf` the hooks are not activated so you cannot activate them using the APIs in the `sys` module. Is not the end of the word but we may need to add even more stuff to the sys module to allow us to set the callbacks if `-X` was not passed originally. Additionally, we are also losing the inlining in the evaluator of the perf functions due to the indirection of the function pointers but that is not a huge deal.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1222240578/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1222242505",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1222242505",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1222242505,
          "node_id": "IC_kwDOBN0Z8c5I2fDJ",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-22T11:46:42Z",
          "updated_at": "2022-08-22T11:53:07Z",
          "author_association": "MEMBER",
          "body": "> I was thinking probably they stay in a file with \"perf\" in the name such as \"perf_map_output\" and the other stuff winds up in a file that evokes an \"eval_trampoline\" feel in its name just to separate what has direct access to what (yay C static privates) and which parts are specific to which purpose.\r\n\r\nI gave this a go but after making a draft of it and seeing that it complicates quite a bunch of things I prefer not to do it for now. This requires yet another API so set the trampoline status (`failed/noinit/ok`) and it would need one extra header and one extra compilation unit and to move some definitions to headers. We would also need to deal with other platforms compiling these extra compilation units and also this leads to increased link times.\r\n\r\nI think I am going to keep the definitions separated in different sections of the file, but given that `perf` keeps being the main focus of this work, I prefer to keep everything in the same file for now.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1222242505/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1222305711",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1222305711",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1222305711,
          "node_id": "IC_kwDOBN0Z8c5I2uev",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-22T12:42:17Z",
          "updated_at": "2022-08-22T12:42:17Z",
          "author_association": "MEMBER",
          "body": "First batch of comments added to the file, please take a look and suggest edits using the GH interface as I am not a native speaker and it may read a bit suboptimally :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1222305711/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1222347470",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1222347470",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1222347470,
          "node_id": "IC_kwDOBN0Z8c5I24rO",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-22T13:16:03Z",
          "updated_at": "2022-08-22T13:16:03Z",
          "author_association": "MEMBER",
          "body": "Could you document that Python should be built with `CFLAGS=\"-fno-omit-frame-pointer -mno-omit-leaf-frame-pointer\"` to give useful results?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1222347470/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1222356279",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1222356279",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1222356279,
          "node_id": "IC_kwDOBN0Z8c5I2603",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-22T13:22:31Z",
          "updated_at": "2022-08-22T13:22:31Z",
          "author_association": "MEMBER",
          "body": "> Could you document that Python should be built with `CFLAGS=\"-fno-omit-frame-pointer -mno-omit-leaf-frame-pointer\"` to give useful results?\r\n\r\nWhere would be the best way to document this?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1222356279/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1222591429",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1222591429",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1222591429,
          "node_id": "IC_kwDOBN0Z8c5I30PF",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-22T16:21:42Z",
          "updated_at": "2022-08-22T16:30:09Z",
          "author_association": "MEMBER",
          "body": "Apparently we cannot test this in Github actions because the runners don't have permissions so we need to use a buildbot:\r\n\r\n```\r\nError:\r\nAccess to performance monitoring and observability operations is limited.\r\nConsider adjusting /proc/sys/kernel/perf_event_paranoid setting to open\r\naccess to performance monitoring and observability operations for processes\r\nwithout CAP_PERFMON, CAP_SYS_PTRACE or CAP_SYS_ADMIN Linux capability.\r\nMore information can be found at 'Perf events and tool security' document:\r\nhttps://www.kernel.org/doc/html/latest/admin-guide/perf-security.html\r\nperf_event_paranoid setting is 4:\r\n  -1: Allow use of (almost) all events by all users\r\n      Ignore mlock limit after perf_event_mlock_kb without CAP_IPC_LOCK\r\n>= 0: Disallow raw and ftrace function tracepoint access\r\n>= 1: Disallow CPU event access\r\n>= 2: Disallow kernel profiling\r\nTo make the adjusted perf_event_paranoid setting permanent preserve it\r\nin /etc/sysctl.conf (e.g. kernel.perf_event_paranoid = <setting>)\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1222591429/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 1,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1222687057",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1222687057",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1222687057,
          "node_id": "IC_kwDOBN0Z8c5I4LlR",
          "user": {
            "login": "gpshead",
            "id": 68491,
            "node_id": "MDQ6VXNlcjY4NDkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/68491?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gpshead",
            "html_url": "https://github.com/gpshead",
            "followers_url": "https://api.github.com/users/gpshead/followers",
            "following_url": "https://api.github.com/users/gpshead/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpshead/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gpshead/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpshead/subscriptions",
            "organizations_url": "https://api.github.com/users/gpshead/orgs",
            "repos_url": "https://api.github.com/users/gpshead/repos",
            "events_url": "https://api.github.com/users/gpshead/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gpshead/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-22T17:36:30Z",
          "updated_at": "2022-08-22T17:36:30Z",
          "author_association": "MEMBER",
          "body": "> > > @gpshead would you be Ok with some API that allows you to provide 3 function pointers with the same signature and those will be called before executing the trampoline?\r\n> > \r\n> > \r\n> > Yeah that's about all I was thinking. I assume internally it'd just be setting static function pointers. A minimal thing of just failing with an error if the pointers are already set perhaps to avoid unintentional conflicts. No need to worry about switching them or chaining or whatnot. There's not likely to be a need to answer that kind of complication unless we were aiming for a public API.\r\n> \r\n> Ok, I have implemented this API in the last commit. I am not entirely happy because this adds quite a lot of extra complexity for some usages that are not clear if they are going to be used. Also, we have lost some functionality as now if you don't pass `-Xperf` the hooks are not activated so you cannot activate them using the APIs in the `sys` module. Is not the end of the word but we may need to add even more stuff to the sys module to allow us to set the callbacks if `-X` was not passed originally. Additionally, we are also losing the inlining in the evaluator of the perf functions due to the indirection of the function pointers but that is not a huge deal.\r\n\r\nThe `sys.activate_stack_trampolines(\"perf\")` suggestion over in the API naming / shape comment would bring back this functionality.  (related -Xstack_trampolines=perf instead of -Xperf)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1222687057/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1222707225",
          "html_url": "https://github.com/python/cpython/pull/96123#issuecomment-1222707225",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/96123",
          "id": 1222707225,
          "node_id": "IC_kwDOBN0Z8c5I4QgZ",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-22T17:44:54Z",
          "updated_at": "2022-08-22T17:55:07Z",
          "author_association": "MEMBER",
          "body": "> sys.activate_stack_trampoline(\"perf\") makes a lot of sense as an API. (that'd be a required parameter and the only allowed value today) Deactivate does not need a parameter.\r\n\r\nOk, I think this makes sense. I will make the change!\r\n\r\n> related to this: the -Xperf command line flag would be better off as -Xstack_trampoline=perf. As that carries the feature name lining up with the sys API and the specific implementation. Assume mac and windows and or alternates in the long term would add their own =frob values in the future. (no need parse the = for values just string match on \"stack_trampoline=perf\" today)\r\n\r\nI see the benefit of this, but I think this me be a premature generalization especially since I know no other open source tool that is general enough that can be hooked here and can benefit from this infrastructure and I don't like that the option that we are prioritization right now (`perf`) needs to use a very verbose flag (`-Xstack_trampolines=perf `). It may be possible that there are many private/non-open-source-tools that can use this but those cannot benefit from an `-Xflag` that is hooked into interpreter initialization. As `X` flags are generic they could activate that afterwards using the callback API. I am ok to rename it to `perf-profiler` or something like that but I think `-Xstack_trampolines=perf ` is (1) too verbose and (2) doesn't really convey what is for. \r\n\r\nWe can also go with `perf`/`perf-profiler` and add later a more generic flag if we need to.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1222707225/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/71026",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/71026/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/71026/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/71026/events",
      "html_url": "https://github.com/python/cpython/issues/71026",
      "id": 1198951245,
      "node_id": "MDU6SXNzdWUxMTk4OTUxMjQ1",
      "number": 71026,
      "title": "Python 3.5 running on Linux kernel 3.17+ can block at startup or on importing the random module on getrandom()",
      "user": {
        "login": "doko42",
        "id": 11258518,
        "node_id": "MDQ6VXNlcjExMjU4NTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/doko42",
        "html_url": "https://github.com/doko42",
        "followers_url": "https://api.github.com/users/doko42/followers",
        "following_url": "https://api.github.com/users/doko42/following{/other_user}",
        "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/doko42/subscriptions",
        "organizations_url": "https://api.github.com/users/doko42/orgs",
        "repos_url": "https://api.github.com/users/doko42/repos",
        "events_url": "https://api.github.com/users/doko42/events{/privacy}",
        "received_events_url": "https://api.github.com/users/doko42/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018687099,
          "node_id": "LA_kwDOBN0Z8c7viEx7",
          "url": "https://api.github.com/repos/python/cpython/labels/release-blocker",
          "name": "release-blocker",
          "color": "660205",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 172,
      "created_at": "2016-04-24T19:04:14Z",
      "updated_at": "2022-04-10T09:10:09Z",
      "closed_at": "2016-06-11T08:46:07Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [26839](https://bugs.python.org/issue26839)\n--- | :---\nNosy | @malemburg, @rhettinger, @doko42, @ncoghlan, @vstinner, @larryhastings, @matejcik, @ned-deily, @alex, @skrah, @vadmium, @ztane, @dstufft, @Lukasa, @tpetazzoni\nFiles | <li>[nonblocking-getrandom.diff](https://bugs.python.org/file42837/nonblocking-getrandom.diff \"Uploaded as text/plain at 2016-05-13.08:18:43 by Colm Buckley\"): Patch to py_getrandom to use nonblocking system call, and associated plumbing.</li><li>[getrandom-nonblocking-v2.patch](https://bugs.python.org/file42842/getrandom-nonblocking-v2.patch \"Uploaded as text/plain at 2016-05-14.01:51:26 by Colm Buckley\"): Patch random.c to use nonblocking getrandom()</li><li>[getrandom-nonblocking-v3.patch](https://bugs.python.org/file43265/getrandom-nonblocking-v3.patch \"Uploaded as text/plain at 2016-06-06.20:45:54 by Colm Buckley\"): Patch random.c to use nonblocking getrandom() (cleaned-up version).</li><li>[getrandom_nonblocking_v4.patch](https://bugs.python.org/file43267/getrandom_nonblocking_v4.patch \"Uploaded as text/plain at 2016-06-06.23:32:39 by Colm Buckley\")</li><li>[nonblocking_urandom_noraise.patch](https://bugs.python.org/file43278/nonblocking_urandom_noraise.patch \"Uploaded as text/plain at 2016-06-07.14:14:58 by Colm Buckley\")</li><li>[no-urandom-by-default.diff](https://bugs.python.org/file43282/no-urandom-by-default.diff \"Uploaded as text/plain at 2016-06-07.18:29:04 by @dstufft\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = <Date 2016-06-11.08:46:07.323>\ncreated_at = <Date 2016-04-24.19:04:13.945>\nlabels = ['interpreter-core', 'type-bug', 'release-blocker']\ntitle = 'Python 3.5 running on Linux kernel 3.17+ can block at startup or on importing the random module on getrandom()'\nupdated_at = <Date 2016-06-15.20:00:44.118>\nuser = 'https://github.com/doko42'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2016-06-15.20:00:44.118>\nactor = 'vstinner'\nassignee = 'none'\nclosed = True\nclosed_date = <Date 2016-06-11.08:46:07.323>\ncloser = 'larry'\ncomponents = ['Interpreter Core']\ncreation = <Date 2016-04-24.19:04:13.945>\ncreator = 'doko'\ndependencies = []\nfiles = ['42837', '42842', '43265', '43267', '43278', '43282']\nhgrepos = []\nissue_num = 26839\nkeywords = ['patch']\nmessage_count = 172.0\nmessages = ['264121', '264122', '264126', '264258', '264265', '264267', '264270', '264271', '264284', '264289', '264292', '264303', '265427', '265430', '265452', '265477', '265481', '265485', '265496', '265500', '265549', '265555', '266216', '267455', '267504', '267511', '267537', '267539', '267546', '267550', '267554', '267571', '267608', '267609', '267610', '267611', '267612', '267614', '267616', '267617', '267621', '267623', '267624', '267625', '267626', '267627', '267628', '267629', '267630', '267631', '267632', '267633', '267634', '267635', '267636', '267637', '267638', '267640', '267642', '267643', '267644', '267645', '267648', '267650', '267654', '267656', '267660', '267661', '267663', '267664', '267665', '267666', '267667', '267668', '267669', '267670', '267671', '267672', '267673', '267674', '267675', '267676', '267677', '267678', '267679', '267680', '267681', '267682', '267684', '267685', '267686', '267687', '267688', '267689', '267690', '267693', '267694', '267695', '267696', '267699', '267705', '267707', '267709', '267710', '267711', '267712', '267715', '267716', '267718', '267720', '267721', '267723', '267725', '267726', '267728', '267729', '267730', '267731', '267735', '267737', '267739', '267740', '267741', '267745', '267746', '267749', '267750', '267751', '267752', '267803', '267804', '267805', '267806', '267807', '267808', '267809', '267810', '267811', '267812', '267813', '267815', '267816', '267817', '267818', '267819', '267823', '267825', '267831', '267836', '267837', '267846', '267850', '267853', '267855', '267856', '267857', '267863', '267873', '267887', '267890', '267893', '267897', '267898', '267913', '267914', '267939', '268018', '268201', '268591', '268593', '268627', '268629']\nnosy_count = 19.0\nnosy_names = ['lemburg', 'rhettinger', 'doko', 'ncoghlan', 'vstinner', 'larry', 'matejcik', 'ned.deily', 'alex', 'skrah', 'python-dev', 'martin.panter', 'ztane', 'dstufft', 'pitti', 'Lukasa', 'thomas-petazzoni', 'Colm Buckley', 'Theodore Tso']\npr_nums = []\npriority = 'release blocker'\nresolution = 'fixed'\nstage = 'resolved'\nstatus = 'closed'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue26839'\nversions = ['Python 3.5', 'Python 3.6']\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "larryhastings",
        "id": 14175923,
        "node_id": "MDQ6VXNlcjE0MTc1OTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/14175923?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/larryhastings",
        "html_url": "https://github.com/larryhastings",
        "followers_url": "https://api.github.com/users/larryhastings/followers",
        "following_url": "https://api.github.com/users/larryhastings/following{/other_user}",
        "gists_url": "https://api.github.com/users/larryhastings/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/larryhastings/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/larryhastings/subscriptions",
        "organizations_url": "https://api.github.com/users/larryhastings/orgs",
        "repos_url": "https://api.github.com/users/larryhastings/repos",
        "events_url": "https://api.github.com/users/larryhastings/events{/privacy}",
        "received_events_url": "https://api.github.com/users/larryhastings/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/71026/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/71026/timeline",
      "performed_via_github_app": null,
      "state_reason": "completed",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712871",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712871",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712871,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4NzE=",
          "user": {
            "login": "doko42",
            "id": 11258518,
            "node_id": "MDQ6VXNlcjExMjU4NTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/doko42",
            "html_url": "https://github.com/doko42",
            "followers_url": "https://api.github.com/users/doko42/followers",
            "following_url": "https://api.github.com/users/doko42/following{/other_user}",
            "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/doko42/subscriptions",
            "organizations_url": "https://api.github.com/users/doko42/orgs",
            "repos_url": "https://api.github.com/users/doko42/repos",
            "events_url": "https://api.github.com/users/doko42/events{/privacy}",
            "received_events_url": "https://api.github.com/users/doko42/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-24T19:04:13Z",
          "updated_at": "2016-04-24T19:04:13Z",
          "author_association": "MEMBER",
          "body": "[forwarded from https://bugs.debian.org/822431]\r\n\r\nThis regression / change of behaviour was seen between 20160330 and 20160417 on the 3.5 branch. The only check-in which could affect this is the fix for issue bpo-26735.\r\n\r\n3.5.1-11 = 20160330\r\n3.5.1-12 = 20160417\r\n\r\nMartin writes:\r\n\"\"\"\r\nI just debugged the adt-virt-qemu failure with python 3.5.1-11 and\r\ntracked it down to python3.5 hanging for a long time when it gets\r\ncalled before the kernel initializes its RNG (which can take a minute\r\nin VMs which have low entropy sources).\r\n\r\nWith 3.5.1-10:\r\n\r\n```sh\n  $ strace -e getrandom python3 -c 'True'\r\n  +++ exited with 0 +++\n```\n\r\n\r\nWith -11:\r\n  $ strace -e getrandom python3 -c 'True'\r\n  getrandom(\"\\\\300\\\\0209\\\\26&v\\\\232\\\\264\\\\325\\\\217\\\\322\\\\303:]\\\\30\\\\212Q\\\\314\\\\244\\\\257t%\\\\206\\\\\"\", 24, 0) = 24\r\n  +++ exited with 0 +++\r\n\r\nWhen you do this with -11 right after booting a VM, the getrandom()\r\ncan block for a long time, until the kernel initializes its random\r\npool:\r\n\r\n   11:21:36.118034 getrandom(\"/V#\\\\200^O\\*HD+D_\\\\32\\\\345\\\\223M\\\\205a\\\\336/\\\\36x\\\\335\\\\246\", 24, 0) = 24\r\n   11:21:57.939999 ioctl(0, TCGETS, 0x7ffde1d152a0) = -1 ENOTTY (Inappropriate ioctl for device)\r\n\r\n   [    1.549882] [TTM] Initializing DMA pool allocator\r\n   [   39.586483] random: nonblocking pool is initialized\r\n\r\n(Note the time stamps in the strace in the first paragraph)\r\n\r\nThis is really unfriendly -- it essentially means that you stop being\r\nable to use python3 early in the boot process or even early after\r\nbooting. It would be better to initialize that random stuff lazily,\r\nuntil/if things actually need it.\r\n\r\nIn the diff between -10 and -11 I do seem some getrandom() fixes to\r\nsupply the correct buffer size (but that should be irrelevant as in\r\n-10 getrandom() wasn't called in the first place), and a new call\r\nwhich should apply to Solaris only (#ifdef sun), so it's not entirely\r\nclear where that comes from or how to work around it.\r\n\r\nIt's very likely that this is the same cause as for bpo-821877, but the\r\ndescription of that is both completely different and also very vague,\r\nso I file this separately for now.\r\n\"\"\"",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712871/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712872",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712872",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712872,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4NzI=",
          "user": {
            "login": "doko42",
            "id": 11258518,
            "node_id": "MDQ6VXNlcjExMjU4NTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/doko42",
            "html_url": "https://github.com/doko42",
            "followers_url": "https://api.github.com/users/doko42/followers",
            "following_url": "https://api.github.com/users/doko42/following{/other_user}",
            "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/doko42/subscriptions",
            "organizations_url": "https://api.github.com/users/doko42/orgs",
            "repos_url": "https://api.github.com/users/doko42/repos",
            "events_url": "https://api.github.com/users/doko42/events{/privacy}",
            "received_events_url": "https://api.github.com/users/doko42/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-24T19:06:20Z",
          "updated_at": "2016-04-24T19:06:20Z",
          "author_association": "MEMBER",
          "body": "other issues fixed between these dates:\r\n\r\n    - Issue bpo-26659: Make the builtin slice type support cycle collection.\r\n    - Issue bpo-26718: super.__init__ no longer leaks memory if called multiple\r\n      times.  NOTE: A direct call of super.__init__ is not endorsed!\r\n    - Issue bpo-25339: PYTHONIOENCODING now has priority over locale in setting\r\n      the error handler for stdin and stdout.\r\n    - Issue bpo-26717: Stop encoding Latin-1-ized WSGI paths with UTF-8.\r\n    - Issue bpo-26735: Fix :func:`os.urandom` on Solaris 11.3 and newer when\r\n      reading more than 1,024 bytes: call ``getrandom()`` multiple times with\r\n      a limit of 1024 bytes per call.\r\n    - Issue bpo-16329: Add .webm to mimetypes.types_map.\r\n    - Issue bpo-13952: Add .csv to mimetypes.types_map.\r\n    - Issue bpo-26709: Fixed Y2038 problem in loading binary PLists.\r\n    - Issue bpo-23735: Handle terminal resizing with Readline 6.3+ by installing\r\n      our own SIGWINCH handler.\r\n    - Issue bpo-26586: In http.server, respond with \"413 Request header fields too\r\n      large\" if there are too many header fields to parse, rather than killing\r\n      the connection and raising an unhandled exception.\r\n    - Issue bpo-22854: Change BufferedReader.writable() and\r\n      BufferedWriter.readable() to always return False.\r\n    - Issue bpo-6953: Rework the Readline module documentation to group related\r\n      functions together, and add more details such as what underlying Readline\r\n      functions and variables are accessed.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712872/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712873",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712873",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712873,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4NzM=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-24T19:37:04Z",
          "updated_at": "2016-04-24T19:37:04Z",
          "author_association": "MEMBER",
          "body": "Python 3 uses os.urandom() at startup to randomize the hash function. os.urandom() now uses the new Linux getrandom() function which blocks until the Linux kernel is feeded with enough entropy. It's a deliberate choice.\r\n\r\nThe workaround is simple: set the PYTHONHASHSEED environment variable to use a fixed seed. For example, PYTHONHASHSEED=0 disables hash randomization.\r\n\r\nIf you use virtualization and Linux is not feeded with enough entropy, you have security issues.\r\n\r\n> I just debugged the adt-virt-qemu failure (...)\r\n\r\nIf you use qemu, you can use virt-rng to provide good entropy to the VM from the host kernel.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712873/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712874",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712874",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712874,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4NzQ=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-26T11:47:19Z",
          "updated_at": "2016-04-26T11:47:19Z",
          "author_association": "MEMBER",
          "body": "See also the issue bpo-25420 which is similar but specific to \"import random\".",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712874/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712875",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712875",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712875,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4NzU=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-26T12:11:48Z",
          "updated_at": "2016-04-26T12:11:48Z",
          "author_association": "MEMBER",
          "body": "The issue bpo-25420 has been closed as a duplicate of this issue.\r\n\r\nCopy of the latest message:\r\n\r\n[msg264262](https://bugs.python.org/msg264262) - (view) \tAuthor: Marc-Andre Lemburg (lemburg) * (Python committer) \tDate: 2016-04-26 12:05\r\n\r\nI still believe the underlying system API use should be fixed rather than all the different instances where it gets used.\r\n\r\ngetrandom() should not block. If it does on a platform, that's a bug on that platform and Python should revert to the alternative of using /dev/urandom directly (or whatever other source of randomness is available).\r\n\r\nDisabling hash randomization is not a good workaround for the issue, since it will definitely pop up in other areas as well.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712875/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712876",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712876",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712876,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4NzY=",
          "user": {
            "login": "5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "id": 92819801,
            "node_id": "M_kgDOBYhRWQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819801?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "html_url": "https://github.com/skrah",
            "followers_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/followers",
            "following_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/following{/other_user}",
            "gists_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/subscriptions",
            "organizations_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/orgs",
            "repos_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/repos",
            "events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/events{/privacy}",
            "received_events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-26T12:22:23Z",
          "updated_at": "2016-04-26T12:22:23Z",
          "author_association": "MANNEQUIN",
          "body": "Hmm. Why does os.urandom(), which should explicitly not block, use a blocking getrandom() function?\r\n\r\nThis is quite unexpected on Linux.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712876/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712877",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712877",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712877,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4Nzc=",
          "user": {
            "login": "5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "id": 92819801,
            "node_id": "M_kgDOBYhRWQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819801?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "html_url": "https://github.com/skrah",
            "followers_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/followers",
            "following_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/following{/other_user}",
            "gists_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/subscriptions",
            "organizations_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/orgs",
            "repos_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/repos",
            "events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/events{/privacy}",
            "received_events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-26T12:35:11Z",
          "updated_at": "2016-04-26T12:35:11Z",
          "author_association": "MANNEQUIN",
          "body": "Wow, it's by design:\r\n\r\n\" os.urandom(n)\r\n\r\n    Return a string of n random bytes suitable for cryptographic use.\"\r\n\r\n\r\n``man urandom'':\r\n\r\n\"A read from the /dev/urandom device will not block waiting for more entropy.  As a result,  if  there  is\r\n       not sufficient entropy in the entropy pool, the returned values are theoretically vulnerable to a crypto-\r\n       graphic attack on the algorithms used by the driver.\"",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712877/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712878",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712878",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712878,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4Nzg=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-26T12:37:32Z",
          "updated_at": "2016-04-26T12:37:32Z",
          "author_association": "MEMBER",
          "body": "\"Hmm. Why does os.urandom(), which should explicitly not block, use a blocking getrandom() function? This is quite unexpected on Linux.\"\r\n\r\nI modified os.getrandom() in the issue bpo-22181 to use the new getrandom() syscall of Linux 3.17. The syscall blocks until the Linux kernel entropy pool is \\*initialized* with enough entropy. In a healthy system, it must never occur.\r\n\r\nTo be clear: you get read 10 MB (or 1 GB or more) of random data using os.urandom() even if the entropy pool is empty. You can test:\r\n\r\n* In a terminal 1, run \"dd if=/dev/random of=random\" to ensure that the entropy pool is empty\r\n* In a terminal 2, run \"while true; do cat /proc/sys/kernel/random/entropy_avail; sleep 1; done\" to see that entropy pool is empty (or very low, like less 100 bytes)\r\n* In a terminal 3, get a lot of random data using os.urandom(): ./python -c 'import os; x=os.urandom(1024\\*1024\\*10)'\r\n\r\n=\\> it works, you \\*can* get 10 MB of random data even if the kernel entropy pool is empty.\r\n\r\nReminder: getrandom() is used to avoid a file descriptor which caused various issues (see issue bpo-22181 for more information).\r\n\r\nOk, now this issue. The lack of entropy is a known problem in virtual machine. It's common that SSH, HTTPS, or other operations block because because of the lack of entropy. On bare metal, the Linux entropy pool is feeded by physical events like interruptions, keyboard strokes, mouse moves, etc. On a virtual machine, there is \\*no* source of entropy.\r\n\r\nThe problem is not only known but also solved, at least for qemu: you must attach a virtio-rng device to your virtual machine. See for example https://fedoraproject.org/wiki/Features/Virtio_RNG The VM can now reads fresh and good quality entropy from the host.\r\n\r\nTo come back to Python: getrandom() syscall only blocks until the entropy pool is \\*initialized* with enough entropy.\r\n\r\nThe getrandom() syscall has a GRND_NONBLOCK to fail with EAGAIN if reading from /dev/random (not /dev/urandom) would block because the entropy pool has not enough entropy:\r\nhttp://man7.org/linux/man-pages/man2/getrandom.2.html\r\n\r\nIMHO it's a deliberate choice to block in getrandom() when reading /dev/urandom while the entropy pool is not initialized with enough entropy yet.\r\n\r\nOk, now the question is: should python do nothing to support VM badly configured (with no real source of entropy)?\r\n\r\nIt looks like the obvious change is to not use getrandom() but revert code to use a file descriptor and read from /dev/urandom. We will get bad entropy, but Python will be able to start.\r\n\r\nI am not excited by this idea. The os.urandom() private file descriptor caused other kinds of issues and bad quality entropy is also an issue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712878/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712879",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712879",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712879,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4Nzk=",
          "user": {
            "login": "5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "id": 92819801,
            "node_id": "M_kgDOBYhRWQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819801?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "html_url": "https://github.com/skrah",
            "followers_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/followers",
            "following_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/following{/other_user}",
            "gists_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/subscriptions",
            "organizations_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/orgs",
            "repos_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/repos",
            "events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/events{/privacy}",
            "received_events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-26T13:44:11Z",
          "updated_at": "2016-04-26T13:44:11Z",
          "author_association": "MANNEQUIN",
          "body": "It is clear how /dev/urandom works. I just think that securing enough\r\nentropy on startup should be done by the init scripts (if systemd still\r\nallows that :) and not by an application.\r\n\r\n[Unless the application is gpg or similar.]",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712879/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712880",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712880",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712880,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4ODA=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-26T14:14:15Z",
          "updated_at": "2016-04-26T14:14:15Z",
          "author_association": "MEMBER",
          "body": "Since many years, Linux systems store entropy on disk to quickly feed the\nentropy pool at startup.\n\nIt doesn't create magically entropy on VM where you start with zero entropy\nat the first boot.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712880/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712882",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712882",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712882,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4ODI=",
          "user": {
            "login": "5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "id": 92819801,
            "node_id": "M_kgDOBYhRWQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819801?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
            "html_url": "https://github.com/skrah",
            "followers_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/followers",
            "following_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/following{/other_user}",
            "gists_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/subscriptions",
            "organizations_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/orgs",
            "repos_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/repos",
            "events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/events{/privacy}",
            "received_events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-26T14:31:57Z",
          "updated_at": "2016-04-26T14:31:57Z",
          "author_association": "MANNEQUIN",
          "body": "I did not claim that it magically creates entropy. -- Many VMs are throwaway test beds. It would be annoying to setup some entropy\r\ngathering mechanism just so that Python starts.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712882/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712883",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712883",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712883,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4ODM=",
          "user": {
            "login": "malemburg",
            "id": 6735498,
            "node_id": "MDQ6VXNlcjY3MzU0OTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6735498?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/malemburg",
            "html_url": "https://github.com/malemburg",
            "followers_url": "https://api.github.com/users/malemburg/followers",
            "following_url": "https://api.github.com/users/malemburg/following{/other_user}",
            "gists_url": "https://api.github.com/users/malemburg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/malemburg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/malemburg/subscriptions",
            "organizations_url": "https://api.github.com/users/malemburg/orgs",
            "repos_url": "https://api.github.com/users/malemburg/repos",
            "events_url": "https://api.github.com/users/malemburg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/malemburg/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-04-26T15:11:15Z",
          "updated_at": "2016-04-26T15:11:15Z",
          "author_association": "MEMBER",
          "body": "As mentioned on the other issue bpo-25420, this is a regression and a change in documented behavior of os.urandom(), which is expected to be non-blocking, regardless of whether entropy is available or not.\r\n\r\nThe fix should be easy (from reading the man page http://man7.org/linux/man-pages/man2/getrandom.2.html): set the GRND_NONBLOCK flag on getrandom(); then, if the function returns -1 and sets EAGAIN, fallback to reading from /dev/urandom directly.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712883/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712884",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712884",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712884,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4ODQ=",
          "user": {
            "login": "10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "id": 101769219,
            "node_id": "M_kgDOBhDgAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/101769219?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "html_url": "https://github.com/ColmBuckley",
            "followers_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/followers",
            "following_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/following{/other_user}",
            "gists_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/subscriptions",
            "organizations_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/orgs",
            "repos_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/repos",
            "events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/events{/privacy}",
            "received_events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-05-12T21:18:22Z",
          "updated_at": "2016-05-12T21:18:22Z",
          "author_association": "MANNEQUIN",
          "body": "It's worth noting that this issue now affects every installation of Debian testing track with systemd and systemd-cron installed; the python program /lib/systemd/system-generators/systemd-crontab-generator is called very early in the boot process; it imports hashlib (although only .md5() is used) and blocks on getrandom(), delaying boot time until a 90s timeout has occurred.\r\n\r\nSuggestions: modify hashlib to avoid calling getrandom() until entropy is actually required, rather than on import; change the logic to use /dev/urandom (or an in-process PRNG) when getrandom() blocks; or both.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712884/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712885",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712885",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712885,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4ODU=",
          "user": {
            "login": "10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "id": 101769219,
            "node_id": "M_kgDOBhDgAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/101769219?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "html_url": "https://github.com/ColmBuckley",
            "followers_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/followers",
            "following_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/following{/other_user}",
            "gists_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/subscriptions",
            "organizations_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/orgs",
            "repos_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/repos",
            "events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/events{/privacy}",
            "received_events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-05-12T21:48:02Z",
          "updated_at": "2016-05-12T21:48:02Z",
          "author_association": "MANNEQUIN",
          "body": "Oh; it's not actually hashlib which is calling getrandom(), it's the main runtime - the initialization of the per-process secret hash seed in \\_PyRandom_Init\r\n\r\nDon't know enough about the internal logic here to comment on what the Right Thing is; but I second the suggestion of [msg264303](https://bugs.python.org/msg264303). This might just require setting \"flags\" to GRND_NONBLOCK in py_getrandom() assuming that's portable to other OS.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712885/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712887",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712887",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712887,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4ODc=",
          "user": {
            "login": "10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "id": 101769219,
            "node_id": "M_kgDOBhDgAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/101769219?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "html_url": "https://github.com/ColmBuckley",
            "followers_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/followers",
            "following_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/following{/other_user}",
            "gists_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/subscriptions",
            "organizations_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/orgs",
            "repos_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/repos",
            "events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/events{/privacy}",
            "received_events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-05-13T08:18:43Z",
          "updated_at": "2016-05-13T08:18:43Z",
          "author_association": "MANNEQUIN",
          "body": "The attached patch (against 20160330) addresses the issue for me on Linux; it has not been tested on other platforms. It adds the GRND_NONBLOCK flag to the getrandom() call and sends the appropriate failure return if it returns due to lack of entropy. The enclosing functions fall back to reading from /dev/urandom in this case.\r\n\r\nAffected files:\r\n\r\n[Python/random.c](https://github.com/python/cpython/blob/main/Python/random.c) - changes to py_getrandom()\r\nconfigure.ac and pyconfig.h.in - look for linux/random.h for inclusion\r\n\r\nCan this, or something similar, be considered for integration with mainline?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712887/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712888",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712888",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712888,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4ODg=",
          "user": {
            "login": "10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "id": 101769219,
            "node_id": "M_kgDOBhDgAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/101769219?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "html_url": "https://github.com/ColmBuckley",
            "followers_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/followers",
            "following_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/following{/other_user}",
            "gists_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/subscriptions",
            "organizations_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/orgs",
            "repos_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/repos",
            "events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/events{/privacy}",
            "received_events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-05-13T14:39:59Z",
          "updated_at": "2016-05-13T14:39:59Z",
          "author_association": "MANNEQUIN",
          "body": "A couple of things to note:\r\n\r\n* Despite the earlier title; this does not just apply to VMs; any system with a potentially-blocking getrandom() (including all Linux 3.17+ and Solaris 11+) is affected.\r\n\r\n* It's true that getrandom() only blocks on Linux when called before the RNG entropy pool is initialized. However, Python should not be limited to only being called after this initialization.\r\n\r\n* In particular, systemd-cron relies on a Python script being called very early in the boot process (before the urandom pool is initialized), this is now prevalent on the Debian testing track; causing a 90-second boot delay.\r\n\r\n* The patch I supplied causes getrandom() to be only called in nonblocking mode; this seems consistent with the desired semantics of os.urandom and \\_PyRandomInit.\r\n\r\nHope this helps.\r\n\r\nColm",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712888/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712889",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712889",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712889,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4ODk=",
          "user": {
            "login": "10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "id": 101769219,
            "node_id": "M_kgDOBhDgAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/101769219?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "html_url": "https://github.com/ColmBuckley",
            "followers_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/followers",
            "following_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/following{/other_user}",
            "gists_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/subscriptions",
            "organizations_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/orgs",
            "repos_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/repos",
            "events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/events{/privacy}",
            "received_events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-05-13T16:31:41Z",
          "updated_at": "2016-05-13T16:31:41Z",
          "author_association": "MANNEQUIN",
          "body": "@haypo - yes, it's strange that Linux's getrandom() might block even when reading the urandom pool. However, I think we need to just cope with this and add the GRND_NONBLOCK flag rather than attempting to force a change in the Linux kernel",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712889/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712890",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712890",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712890,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4OTA=",
          "user": {
            "login": "10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "id": 101769219,
            "node_id": "M_kgDOBhDgAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/101769219?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "html_url": "https://github.com/ColmBuckley",
            "followers_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/followers",
            "following_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/following{/other_user}",
            "gists_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/subscriptions",
            "organizations_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/orgs",
            "repos_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/repos",
            "events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/events{/privacy}",
            "received_events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-05-13T19:35:13Z",
          "updated_at": "2016-05-13T19:35:13Z",
          "author_association": "MANNEQUIN",
          "body": "See https://lwn.net/Articles/606141/ for an explanation of the blocking behavior of getrandom(). This makes sense to me - before the pool has initialized, /dev/urandom will be readable but will return highly predictable data - ie: it should not be considered safe. In other words, I think that getrandom() offers a sensible API.\r\n\r\nThe only circumstances where we hit the EAGAIN in getrandom() should be when it's called extremely early in the boot process (as is the case for the systemd-cron generator script I mentioned earlier). I think this is safe enough; a more thorough approach would be to flag that the per-process hash seed (_Py_HashSecret) is predictable and shouldn't be used.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712890/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712892",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712892",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712892,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4OTI=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-05-13T23:24:10Z",
          "updated_at": "2016-05-13T23:24:10Z",
          "author_association": "MEMBER",
          "body": "Please elaborate the comment in the patch:\n\n- explain that the RNG is not initialized yet with enough entropy\n- add a refer\u00e9nce to this issue\n- explain that it's a deliberate choice to use weak (non initialized) RNG\nfor practical reasons",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712892/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712893",
          "html_url": "https://github.com/python/cpython/issues/71026#issuecomment-1093712893",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/71026",
          "id": 1093712893,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM3MTI4OTM=",
          "user": {
            "login": "10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "id": 101769219,
            "node_id": "M_kgDOBhDgAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/101769219?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583",
            "html_url": "https://github.com/ColmBuckley",
            "followers_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/followers",
            "following_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/following{/other_user}",
            "gists_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/subscriptions",
            "organizations_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/orgs",
            "repos_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/repos",
            "events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/events{/privacy}",
            "received_events_url": "https://api.github.com/users/10da46c7-ab01-4256-82c4-e1aba4ee3583/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2016-05-14T01:51:26Z",
          "updated_at": "2016-05-14T01:51:26Z",
          "author_association": "MANNEQUIN",
          "body": "@haypo - new version of patch attached with comments and references per your request.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093712893/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/31691",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/31691/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/31691/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/31691/events",
      "html_url": "https://github.com/python/cpython/pull/31691",
      "id": 1160192071,
      "node_id": "PR_kwDOBN0Z8c4z-7Yx",
      "number": 31691,
      "title": "gh-68320, gh-88302 - Allow for `pathlib.Path` subclassing",
      "user": {
        "login": "barneygale",
        "id": 960340,
        "node_id": "MDQ6VXNlcjk2MDM0MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barneygale",
        "html_url": "https://github.com/barneygale",
        "followers_url": "https://api.github.com/users/barneygale/followers",
        "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
        "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
        "organizations_url": "https://api.github.com/users/barneygale/orgs",
        "repos_url": "https://api.github.com/users/barneygale/repos",
        "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
        "received_events_url": "https://api.github.com/users/barneygale/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4255101819,
          "node_id": "LA_kwDOBN0Z8c79n7N7",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-pathlib",
          "name": "topic-pathlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 45,
      "created_at": "2022-03-05T02:18:41Z",
      "updated_at": "2023-04-06T18:40:40Z",
      "closed_at": "2022-12-23T22:52:24Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/31691",
        "html_url": "https://github.com/python/cpython/pull/31691",
        "diff_url": "https://github.com/python/cpython/pull/31691.diff",
        "patch_url": "https://github.com/python/cpython/pull/31691.patch",
        "merged_at": "2022-12-23T22:52:24Z"
      },
      "body": "Users may wish to define subclasses of `pathlib.PurePath` and `Path` to add or modify existing methods. Before this change, attempting to instantiate a subclass raised an exception like:\r\n\r\n    AttributeError: type object 'PPath' has no attribute '_flavour'\r\n\r\nPreviously the `_flavour` attribute was assigned as follows:\r\n\r\n    PurePath._flavour        = xxx not set!! xxx\r\n    PurePosixPath._flavour   = _PosixFlavour()\r\n    PureWindowsPath._flavour = _WindowsFlavour()\r\n\r\nIt's now set as follows:\r\n\r\n    PurePath._flavour        = os.path\r\n    PurePosixPath._flavour   = posixpath\r\n    PureWindowsPath._flavour = ntpath\r\n\r\nFunctionality from `_PosixFlavour` and `_WindowsFlavour` is moved into `PurePath` as underscored-prefixed classmethods. Flavour classes are removed.\r\n\r\nA deeper dive into this patch can be read here: https://discuss.python.org/t/make-pathlib-extensible/3428/42\r\n\r\nFixes #68320 #88302\n\n<!-- gh-issue-number: gh-68320 -->\n* Issue: gh-68320\n<!-- /gh-issue-number -->\n",
      "closed_by": {
        "login": "brettcannon",
        "id": 54418,
        "node_id": "MDQ6VXNlcjU0NDE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brettcannon",
        "html_url": "https://github.com/brettcannon",
        "followers_url": "https://api.github.com/users/brettcannon/followers",
        "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
        "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
        "organizations_url": "https://api.github.com/users/brettcannon/orgs",
        "repos_url": "https://api.github.com/users/brettcannon/repos",
        "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brettcannon/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": true
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/31691/reactions",
        "total_count": 7,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 7,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/31691/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1090687101",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1090687101",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1090687101,
          "node_id": "IC_kwDOBN0Z8c5BApB9",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-04-06T19:35:59Z",
          "updated_at": "2022-04-06T19:35:59Z",
          "author_association": "CONTRIBUTOR",
          "body": "Hey @brettcannon, just bumping this PR in case it dropped off your radar. ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1090687101/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1092118651",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1092118651",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1092118651,
          "node_id": "IC_kwDOBN0Z8c5BGGh7",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2022-04-07T19:25:07Z",
          "updated_at": "2022-04-07T19:25:07Z",
          "author_association": "MEMBER",
          "body": "@barneygale it hasn't, but my PR review queue is 11 PRs deep, this is in position 7, and I have worry about getting [PEP 594](https://peps.python.org/pep-0594/) done in time for 3.11b1. Plus I have some stuff I need to get done for work this month which is eating into my paid OSS time.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1092118651/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1113756938",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1113756938",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1113756938,
          "node_id": "IC_kwDOBN0Z8c5CYpUK",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-04-29T21:30:19Z",
          "updated_at": "2022-04-29T21:30:19Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1113756938/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1113849536",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1113849536",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1113849536,
          "node_id": "IC_kwDOBN0Z8c5CY_7A",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-04-29T22:56:45Z",
          "updated_at": "2022-04-29T22:56:45Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks @brettcannon, working to address your feedback now.\r\n\r\nSome of your comments relate to the `_splitroot()` and `_split_extended_path()` methods. To be clear: these have been _moved_ from the `_WindowsFlavour` and `_PosixFlavour` classes, which are removed in this patch. They have not been written afresh.\r\n\r\nI'm happy to fix up formatting and whatnot, but I don't want to modify the implementations of those methods _too_ much here. It adds undue risk to the overall PR as it's possible we'll change behaviour without realising it.\r\n\r\nAnd in this particular case, the deficiencies in `_splitroot()` etc are being addressed elsewhere - see #91882.\r\n\r\nDoes that go some of the way towards explaining why I'm mostly leaving these implementations alone, aside moving them from the \"flavour\" classes into `PurePath`?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1113849536/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1116347652",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1116347652",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1116347652,
          "node_id": "IC_kwDOBN0Z8c5Cih0E",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-03T17:16:10Z",
          "updated_at": "2022-05-03T17:16:10Z",
          "author_association": "CONTRIBUTOR",
          "body": "I didn't expect the Spanish Inquisition!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1116347652/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1116347715",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1116347715",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1116347715,
          "node_id": "IC_kwDOBN0Z8c5Cih1D",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-03T17:16:14Z",
          "updated_at": "2022-05-03T17:16:14Z",
          "author_association": "NONE",
          "body": "Nobody expects the Spanish Inquisition!\n\n@brettcannon: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1116347715/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1152643904",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1152643904",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1152643904,
          "node_id": "IC_kwDOBN0Z8c5Es_NA",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-10T18:52:56Z",
          "updated_at": "2022-06-10T18:52:56Z",
          "author_association": "CONTRIBUTOR",
          "body": "Hey @brettcannon! I've just merged main, including #91882, into this branch. As a result, most of the iffy code you identified in your previous review no longer exists! Could you review again please? Thanks v much",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1152643904/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1152749376",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1152749376",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1152749376,
          "node_id": "IC_kwDOBN0Z8c5EtY9A",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2022-06-10T21:25:58Z",
          "updated_at": "2022-06-10T21:25:58Z",
          "author_association": "MEMBER",
          "body": "@barneygale Right now I'm focusing on bugfix PRs for 3.11, but as soon as that queue is cleared out I will be able to get to this feature PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1152749376/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1200009235",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1200009235",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1200009235,
          "node_id": "IC_kwDOBN0Z8c5HhrAT",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-29T22:49:42Z",
          "updated_at": "2022-07-29T22:49:42Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1200009235/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1200016808",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1200016808",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1200016808,
          "node_id": "IC_kwDOBN0Z8c5Hhs2o",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-29T23:09:27Z",
          "updated_at": "2022-07-29T23:09:27Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thank you @brettcannon, much appreciated. \r\n\r\nA clarification: I'm not intending for users to implement their own `_flavour`, as I expect `posixpath` and `ntpath` to cover 99.99% of cases. The flavour is there to provide the very lowest level of path manipulation for use in `PurePath` / `AbstractPath` / `Path` methods. The *path classes themselves* are the user API, not the flavours. As such, I don't think the `self._flavour is posixpath` checks break anything important.\r\n\r\nThat said, I don't much like the `is posixpath` checks. I'll respond to each case inline.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1200016808/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1200314655",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1200314655",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1200314655,
          "node_id": "IC_kwDOBN0Z8c5Hi1kf",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-30T23:51:41Z",
          "updated_at": "2022-07-30T23:51:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "I think #95450 needs to be merged before I can fix the Windows tests, so I'm marking this PR as a draft.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1200314655/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1207006284",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1207006284",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1207006284,
          "node_id": "IC_kwDOBN0Z8c5H8XRM",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2022-08-05T22:14:55Z",
          "updated_at": "2022-08-05T22:14:55Z",
          "author_association": "MEMBER",
          "body": "> The flavour is there to provide the very lowest level of path manipulation for use in `PurePath` / `AbstractPath` / `Path` methods.\r\n\r\nSo what is the expectation around `AbstractPath` and this? How is e.g. a `ZipPath` to make sure it's using `posixpath` as its flavour? Or am I getting ahead of myself here and that comes in a later PR? And thus \"subclassing\" here is just to allow potential overriding of the public methods as they are and a/the future `AbstractPath` will handle fully abstract implementation?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1207006284/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1207068108",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1207068108",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1207068108,
          "node_id": "IC_kwDOBN0Z8c5H8mXM",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-05T22:34:26Z",
          "updated_at": "2022-08-06T00:15:03Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > The flavour is there to provide the very lowest level of path manipulation for use in `PurePath` / `AbstractPath` / `Path` methods.\r\n> \r\n> So what is the expectation around `AbstractPath` and this? How is e.g. a `ZipPath` to make sure it's using `posixpath` as its flavour? Or am I getting ahead of myself here and that comes in a later PR? And thus \"subclassing\" here is just to allow potential overriding of the public methods as they are and a/the future `AbstractPath` will handle fully abstract implementation?\r\n\r\nYep spot on. After this PR, users can subclass from `PurePosixPath` or `PureWindowsPath` if they need a specific flavour, or they can subclass from `PurePath` or `Path` if they need the current OS's flavour. So all use cases are satisfied. When we introduce `AbstractPath`, I think we'd remove the underscore prefix from `_flavour` and document it. Thus users would write:\r\n\r\n```python\r\nimport posixpath\r\nimport pathlib\r\n\r\nclass ZipPath(pathlib.AbstractPath):\r\n    flavour = posixpath\r\n```\r\n\r\n... but that's a little ways away still.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1207068108/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1207105370",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1207105370",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1207105370,
          "node_id": "IC_kwDOBN0Z8c5H8vda",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-06T00:32:55Z",
          "updated_at": "2022-08-06T00:33:21Z",
          "author_association": "CONTRIBUTOR",
          "body": "An alternative to making `AbstractPath.flavour` public would be to add `AbstractPosixPath` and `AbstractWindowsPath` classes. But I'd rather not go there for the sake of one attribute! :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1207105370/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1224936527",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1224936527",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1224936527,
          "node_id": "IC_kwDOBN0Z8c5JAwxP",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-23T22:05:32Z",
          "updated_at": "2022-08-23T22:05:32Z",
          "author_association": "CONTRIBUTOR",
          "body": "I didn't expect the spanish inquisition!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1224936527/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1224936583",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1224936583",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1224936583,
          "node_id": "IC_kwDOBN0Z8c5JAwyH",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-23T22:05:36Z",
          "updated_at": "2022-08-23T22:05:36Z",
          "author_association": "NONE",
          "body": "Nobody expects the Spanish Inquisition!\n\n@brettcannon: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1224936583/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1224976081",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1224976081",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1224976081,
          "node_id": "IC_kwDOBN0Z8c5JA6bR",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-23T23:06:25Z",
          "updated_at": "2022-08-26T01:11:45Z",
          "author_association": "CONTRIBUTOR",
          "body": "I've removed all `flavour is posixpath` and `flavour is ntpath` checks, except for these:\r\n\r\n- ~~`_split_root()` - these are only for performance. I'm planning to move the implementation into `ntpath` and `posixpath`, but I'd like to massage pathlib a little more first.~~\r\n  edit: found a better way to do it :)\r\n- `is_absolute()` - unavoidable due to longstanding incompatible `ntpath.isabs()` behaviour.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1224976081/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1228996211",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1228996211",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1228996211,
          "node_id": "IC_kwDOBN0Z8c5JQP5z",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2022-08-26T21:58:25Z",
          "updated_at": "2022-08-26T21:58:25Z",
          "author_association": "MEMBER",
          "body": "Are the Windows failures in relation to https://github.com/python/cpython/issues/96290 ?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1228996211/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1228998759",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1228998759",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1228998759,
          "node_id": "IC_kwDOBN0Z8c5JQQhn",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-26T22:02:07Z",
          "updated_at": "2022-08-26T22:02:07Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Are the Windows failures in relation to #96290 ?\r\n\r\nYes",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1228998759/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1229024221",
          "html_url": "https://github.com/python/cpython/pull/31691#issuecomment-1229024221",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31691",
          "id": 1229024221,
          "node_id": "IC_kwDOBN0Z8c5JQWvd",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-08-26T22:52:41Z",
          "updated_at": "2022-08-26T22:52:41Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1229024221/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/113465",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/113465/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/113465/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/113465/events",
      "html_url": "https://github.com/python/cpython/pull/113465",
      "id": 2055461493,
      "node_id": "PR_kwDOBN0Z8c5iuvW2",
      "number": 113465,
      "title": "GH-113464: A copy-and-patch JIT compiler",
      "user": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 537029789,
          "node_id": "MDU6TGFiZWw1MzcwMjk3ODk=",
          "url": "https://api.github.com/repos/python/cpython/labels/performance",
          "name": "performance",
          "color": "0052cc",
          "default": false,
          "description": "Performance or resource usage"
        },
        {
          "id": 666980059,
          "node_id": "MDU6TGFiZWw2NjY5ODAwNTk=",
          "url": "https://api.github.com/repos/python/cpython/labels/awaiting%20merge",
          "name": "awaiting merge",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 7018075156,
          "node_id": "LA_kwDOBN0Z8c8AAAABok9UFA",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-JIT",
          "name": "topic-JIT",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "brandtbucher",
          "id": 40968415,
          "node_id": "MDQ6VXNlcjQwOTY4NDE1",
          "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/brandtbucher",
          "html_url": "https://github.com/brandtbucher",
          "followers_url": "https://api.github.com/users/brandtbucher/followers",
          "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
          "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
          "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
          "repos_url": "https://api.github.com/users/brandtbucher/repos",
          "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
          "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 31,
      "created_at": "2023-12-25T07:17:38Z",
      "updated_at": "2024-05-31T19:59:40Z",
      "closed_at": "2024-01-29T07:18:26Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/113465",
        "html_url": "https://github.com/python/cpython/pull/113465",
        "diff_url": "https://github.com/python/cpython/pull/113465.diff",
        "patch_url": "https://github.com/python/cpython/pull/113465.patch",
        "merged_at": null
      },
      "body": "'Twas the night before Christmas, when all through the code\r\nNot a core dev was merging, not even Guido;\r\nThe CI was spun on the PRs with care\r\nIn hopes that green check-markings soon would be there;\r\nThe buildbots were nestled all snug under desks,\r\nEven PPC64 AIX;\r\nDoc-writers, triage team, the Council of Steering,\r\nHad just stashed every change and stopped engineering,\r\n\r\nWhen in the \"PRs\" tab arose such a clatter,\r\nThey opened GitHub to see what was the matter.\r\nAway to CPython they flew like a flash,\r\nTowards sounds of `PROT_EXEC` and `__builtin___clear_cache`.\r\nFirst [LLVM was downloaded, unzipped](https://github.com/brandtbucher/cpython/blob/justin/Tools/jit/README.md)\r\nThen the Actions were running [a strange new build script](https://github.com/brandtbucher/cpython/blob/justin/Tools/jit/build.py),\r\nWhen something appeared, they were stopped in their tracks,\r\n[`jit_stencils.h`](https://gist.github.com/brandtbucher/d6397b1d106c55164b32df27d53eb7b8), generated from [hacks](https://github.com/brandtbucher/cpython/blob/justin/Tools/jit/template.c),\r\nWith their spines all a-shiver, they muttered \"Oh, shit...\",\r\nThey knew in a moment it must be a JIT.\r\n\r\nMore rapid than interpretation it came\r\nAnd it copied-and-patched every stencil by name:\r\n\"Now, `_LOAD_FAST`! Now, `_STORE_FAST`! `_BINARY_OP_ADD_INT`!\r\nOn, `_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT`!\r\nTo the top of the loop! And down into the call!\r\nNow cache away! Cache away! Cache away all!\"\r\nBut why now? And how so? They needed a hint,\r\nThankfully, Brandt gave a great talk at the sprint;\r\nSo over to [YouTube](https://youtu.be/HxSHIpEQRjs) the reviewers flew,\r\nThey read [the white paper](https://dl.acm.org/doi/10.1145/3485513), and [the blog post](https://sillycross.github.io/2023/05/12/2023-05-12) too.\r\n\r\nAnd then, after watching, they saw its appeal\r\nNot writing the code themselves seemed so unreal.\r\nAnd the platform support was almost too easy,\r\nARM64 Macs to 32-bit PCs.\r\nThere was [some runtime C](https://github.com/brandtbucher/cpython/blob/justin/Python/jit.c), not too much, just enough,\r\nBasically a loader, relocating stuff;\r\nIt ran every test, one by one passed them all,\r\nWith not one runtime dependency to install.\r\nMostly build-time Python! With strict static typing!\r\nFor maintenance ease, and also nerd-sniping!\r\n\r\nThough dispatch was faster, the JIT wasn't wise,\r\nAnd the traces it used still should be optimized;\r\nThe code it was JIT'ing still needed some thinning,\r\nWith code models small, and some register pinning;\r\nOr [new calling conventions](https://discourse.llvm.org/t/rfc-exposing-ghccc-calling-convention-as-preserve-none-to-clang/74233), shared stubs for paths slow,\r\nSince this JIT was brand new, there was fruit hanging low.\r\nIt was awkwardly large, parsed straight out of the ELFs,\r\nAnd they laughed when they saw it, in spite of themselves;\r\n\r\nA `configure` flag, and no merging this year,\r\nSoon gave them to know they had nothing to fear;\r\nIt wasn't much faster, at least it could work,\r\nThey knew that'd come later; no one was a jerk,\r\nBut they were still smart, and determined, and skilled,\r\nThey opened a shell, and configured the build;\r\n`--enable-experimental-jit`, then made it,\r\nAnd away the JIT flew as their \"+1\"s okay'ed it.\r\nBut they heard it exclaim, as it traced out of sight,\r\n\"Happy JIT-mas to all, and to all a good night!\"\n\n<!-- gh-issue-number: gh-113464 -->\n* Issue: gh-113464\n<!-- /gh-issue-number -->\n",
      "closed_by": {
        "login": "brandtbucher",
        "id": 40968415,
        "node_id": "MDQ6VXNlcjQwOTY4NDE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandtbucher",
        "html_url": "https://github.com/brandtbucher",
        "followers_url": "https://api.github.com/users/brandtbucher/followers",
        "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
        "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
        "repos_url": "https://api.github.com/users/brandtbucher/repos",
        "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/113465/reactions",
        "total_count": 1286,
        "+1": 329,
        "-1": 1,
        "laugh": 365,
        "hooray": 155,
        "confused": 0,
        "heart": 316,
        "rocket": 101,
        "eyes": 19
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/113465/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1868835724",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1868835724",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1868835724,
          "node_id": "IC_kwDOBN0Z8c5vZCuM",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-12-25T08:00:48Z",
          "updated_at": "2023-12-25T08:00:48Z",
          "author_association": "MEMBER",
          "body": "(FYI, the merge commit is broken because tier 2 isn't working on `main` right now... not something that's gonna get fixed this week. The head of my `justin` branch works fine, though.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1868835724/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1869111410",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1869111410",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1869111410,
          "node_id": "IC_kwDOBN0Z8c5vaGBy",
          "user": {
            "login": "adrian17",
            "id": 4729533,
            "node_id": "MDQ6VXNlcjQ3Mjk1MzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4729533?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/adrian17",
            "html_url": "https://github.com/adrian17",
            "followers_url": "https://api.github.com/users/adrian17/followers",
            "following_url": "https://api.github.com/users/adrian17/following{/other_user}",
            "gists_url": "https://api.github.com/users/adrian17/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/adrian17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/adrian17/subscriptions",
            "organizations_url": "https://api.github.com/users/adrian17/orgs",
            "repos_url": "https://api.github.com/users/adrian17/repos",
            "events_url": "https://api.github.com/users/adrian17/events{/privacy}",
            "received_events_url": "https://api.github.com/users/adrian17/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-12-25T20:38:35Z",
          "updated_at": "2023-12-25T20:38:35Z",
          "author_association": "CONTRIBUTOR",
          "body": "I'm curious, given the perf results reported in your talk, do you have any documented ideas on improving the generated code - either by tinkering with whatever gets generated (though I'm aware messing with it too much manually defeats the idea of having it work \"magically\"), or by  improving the template for LLVM? Some of the things I see in generated code seem really pessimized, like the obligatory jump-to-continue in each op (with a jump-to-register too, probably enforced by `mcmodel=large`), or 64-bit oparg immediates.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1869111410/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1869743922",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1869743922",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1869743922,
          "node_id": "IC_kwDOBN0Z8c5vcgcy",
          "user": {
            "login": "jessekrubin",
            "id": 20122832,
            "node_id": "MDQ6VXNlcjIwMTIyODMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/20122832?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jessekrubin",
            "html_url": "https://github.com/jessekrubin",
            "followers_url": "https://api.github.com/users/jessekrubin/followers",
            "following_url": "https://api.github.com/users/jessekrubin/following{/other_user}",
            "gists_url": "https://api.github.com/users/jessekrubin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jessekrubin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jessekrubin/subscriptions",
            "organizations_url": "https://api.github.com/users/jessekrubin/orgs",
            "repos_url": "https://api.github.com/users/jessekrubin/repos",
            "events_url": "https://api.github.com/users/jessekrubin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jessekrubin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-12-26T19:55:11Z",
          "updated_at": "2023-12-26T23:41:25Z",
          "author_association": "NONE",
          "body": "FWIW: unrelated to anything code, the \"night before christmas\" theme of the post is extremely well done! I cracked up. ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1869743922/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1870472346",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1870472346",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1870472346,
          "node_id": "IC_kwDOBN0Z8c5vfSSa",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-12-27T16:53:44Z",
          "updated_at": "2023-12-27T16:53:44Z",
          "author_association": "MEMBER",
          "body": "Thanks, everyone! I'm away from my computer for now, but I'll be back in a week to address all of the review comments and actually open this thing. ;)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1870472346/reactions",
            "total_count": 4,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 3,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1874688651",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1874688651",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1874688651,
          "node_id": "IC_kwDOBN0Z8c5vvXqL",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-02T23:38:52Z",
          "updated_at": "2024-01-02T23:38:52Z",
          "author_association": "MEMBER",
          "body": "Note: the two failing `i686-pc-windows-msvc/msvc` and `x86_64-pc-windows-msvc/msvc` release JIT builds are due to GH-113655.\r\n\r\nAlso, the JIT CI matrix doesn't include Apple silicon, and many tests are skipped when emulating AArch64 Linux (since they fail under emulation, JIT or no JIT). Local runs on both platforms are passing, but we probably want something better in the long term than \"works on Brandt's machine\". :)\r\n\r\nWorking now through the 13(!) reviews on this draft PR. Apologies if I don't get to everyone today.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1874688651/reactions",
            "total_count": 7,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 7,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1874907370",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1874907370",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1874907370,
          "node_id": "IC_kwDOBN0Z8c5vwNDq",
          "user": {
            "login": "Zheaoli",
            "id": 7054676,
            "node_id": "MDQ6VXNlcjcwNTQ2NzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7054676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Zheaoli",
            "html_url": "https://github.com/Zheaoli",
            "followers_url": "https://api.github.com/users/Zheaoli/followers",
            "following_url": "https://api.github.com/users/Zheaoli/following{/other_user}",
            "gists_url": "https://api.github.com/users/Zheaoli/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Zheaoli/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Zheaoli/subscriptions",
            "organizations_url": "https://api.github.com/users/Zheaoli/orgs",
            "repos_url": "https://api.github.com/users/Zheaoli/repos",
            "events_url": "https://api.github.com/users/Zheaoli/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Zheaoli/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-03T06:34:13Z",
          "updated_at": "2024-01-03T18:25:32Z",
          "author_association": "CONTRIBUTOR",
          "body": "Hi, Brandt, Thanks for the marvelous work, I got a little bit question about this JIT machnism.\r\n\r\n1. The time we chose to JIT is chosen by the `Optimizor` right. Is there some data to represent how much the possibility to be compiled as native code for the normal workflows. If there is not enough data now, I would like to take some benchmark for this PR.\r\n2. Is there any way to monitor the JIT status\r\n3. After #96123, we make a trampoline to point the code address and symbol, so the user can use perf or other tools to monitor the code by add-hook on some user space address, Is it possible to do the same thing after the JIT ?( I would like to help with this feature",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1874907370/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876004929",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876004929",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876004929,
          "node_id": "IC_kwDOBN0Z8c5v0ZBB",
          "user": {
            "login": "alphavector",
            "id": 11805788,
            "node_id": "MDQ6VXNlcjExODA1Nzg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/11805788?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alphavector",
            "html_url": "https://github.com/alphavector",
            "followers_url": "https://api.github.com/users/alphavector/followers",
            "following_url": "https://api.github.com/users/alphavector/following{/other_user}",
            "gists_url": "https://api.github.com/users/alphavector/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alphavector/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alphavector/subscriptions",
            "organizations_url": "https://api.github.com/users/alphavector/orgs",
            "repos_url": "https://api.github.com/users/alphavector/repos",
            "events_url": "https://api.github.com/users/alphavector/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alphavector/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-03T21:38:01Z",
          "updated_at": "2024-01-03T22:02:02Z",
          "author_association": "CONTRIBUTOR",
          "body": "If you want to play around with this using pyenv, here's a patch for pyenv:\r\n<details><summary>Details</summary>\r\n<pre>\r\ndiff --git a/plugins/python-build/share/python-build/3.13-dev b/plugins/python-build/share/python-build/3.13-dev\r\nindex 8c4740e4..408809e5 100644\r\n--- a/plugins/python-build/share/python-build/3.13-dev\r\n+++ b/plugins/python-build/share/python-build/3.13-dev\r\n@@ -2,6 +2,9 @@ prefer_openssl3\r\n export PYTHON_BUILD_CONFIGURE_WITH_OPENSSL=1\r\n export PYTHON_BUILD_TCLTK_USE_PKGCONFIG=1\r\n export PYTHON_BUILD_CONFIGURE_WITH_DSYMUTIL=1\r\n+export PYTHON_CONFIGURE_OPTS=\"--enable-experimental-jit\"\r\n+export CPPFLAGS=\"-I$(brew --prefix llvm@16)/include${CPPFLAGS:+ $CPPFLAGS}\"\r\n+export LDFLAGS=\"-L$(brew --prefix llvm@16)/lib${LDFLAGS:+ $LDFLAGS}\"\r\n install_package \"openssl-3.1.2\" \"https://www.openssl.org/source/openssl-3.1.2.tar.gz#a0ce69b8b97ea6a35b96875235aa453b966ba3cba8af2de23657d8b6767d6539\" mac_openssl --if has_broken_mac_openssl\r\n install_package \"readline-8.0\" \"https://ftpmirror.gnu.org/readline/readline-8.0.tar.gz#e339f51971478d369f8a053a330a190781acb9864cf4c541060f12078948e461\" mac_readline --if has_broken_mac_readline\r\n-install_git \"Python-3.13-dev\" \"https://github.com/python/cpython\" main standard verify_py313 copy_python_gdb ensurepip\r\n+install_git \"Python-3.13-dev\" \"https://github.com/brandtbucher/cpython\" justin standard verify_py313 copy_python_gdb ensurepip\r\n</pre>\r\n</details> \r\n\r\nThen just run:\r\n```sh\r\ncd \"$(pyenv root)\"\r\ngit apply file.diff\r\npyenv install 3.13-dev\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876004929/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876027405",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876027405",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876027405,
          "node_id": "IC_kwDOBN0Z8c5v0egN",
          "user": {
            "login": "Eclips4",
            "id": 80244920,
            "node_id": "MDQ6VXNlcjgwMjQ0OTIw",
            "avatar_url": "https://avatars.githubusercontent.com/u/80244920?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Eclips4",
            "html_url": "https://github.com/Eclips4",
            "followers_url": "https://api.github.com/users/Eclips4/followers",
            "following_url": "https://api.github.com/users/Eclips4/following{/other_user}",
            "gists_url": "https://api.github.com/users/Eclips4/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Eclips4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Eclips4/subscriptions",
            "organizations_url": "https://api.github.com/users/Eclips4/orgs",
            "repos_url": "https://api.github.com/users/Eclips4/repos",
            "events_url": "https://api.github.com/users/Eclips4/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Eclips4/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-03T22:00:54Z",
          "updated_at": "2024-01-03T22:01:27Z",
          "author_association": "MEMBER",
          "body": "> If you want to play around with this using pyenv, here's a patch for pyenv:\r\n> \r\n> Details\r\n> Then just run:\r\n> \r\n> ```shell\r\n> cd \"$(pyenv root)\"\r\n> git apply file.diff\r\n> pyenv install 3.13-dev\r\n> ```\r\n\r\nCurrently this PR in draft stage, so it's probably too early to \"play around with this\".\r\nAlso, this PR contains too much \"off-topic\" comments(IIRC, some of them have already deleted), lets keep them minimum as possible, please.\r\nI'm apologize if this message offended you (or someone else), but someone should write this. This PR attracts too much attention (and it's well deserved, Brandt!), so, let's continue to keep a \"working atmosphere\", please. Thanks. \ud83d\ude04 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876027405/reactions",
            "total_count": 4,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 3,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876131873",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876131873",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876131873,
          "node_id": "IC_kwDOBN0Z8c5v04Ah",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T00:04:03Z",
          "updated_at": "2024-01-04T00:04:03Z",
          "author_association": "MEMBER",
          "body": "> I'm curious, given the perf results reported in your talk, do you have any documented ideas on improving the generated code - either by tinkering with whatever gets generated (though I'm aware messing with it too much manually defeats the idea of having it work \"magically\"), or by improving the template for LLVM? Some of the things I see in generated code seem really pessimized, like the obligatory jump-to-continue in each op (with a jump-to-register too, probably enforced by `mcmodel=large`), or 64-bit oparg immediates.\r\n\r\nYep. Things on the roadmap (not in this PR) include:\r\n- removing simple zero-length jumps at the ends of stencils in a postprocessing step\r\n- using the `small` or `medium` code models for stencils that don't require 64-bit holes\r\n- using the `ghccc` calling convention for more efficient tail calls (way less pushing, popping, and register shuffling at the beginning and end of instructions)\r\n- using shared stubs for slow paths\r\n- using shared const data instead of duplicating stuff like static strings every time they're used\r\n- top-of-stack caching in registers (plays nicely with `ghccc`, above)\r\n- compiling different variants of each stencil when the oparg changes control flow\r\n- compiling super-stencils that combine common sequences of instructions\r\n\r\nEach of these increases the complexity a tiny bit, and probably deserve to be their own projects that are reviewed individually. I've roughly prototyped many of them to prove they're viable, though.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876131873/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876139308",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876139308",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876139308,
          "node_id": "IC_kwDOBN0Z8c5v050s",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T00:13:52Z",
          "updated_at": "2024-01-04T00:13:52Z",
          "author_association": "MEMBER",
          "body": "> Hi, Brandt, Thanks for the marvelous work, I got a little bit question about this JIT machnism.\r\n> \r\n> 1. The time we chose to JIT is chosen by the `Optimizor` right. Is there some data to represent how much the possibility to be compiled as native code for the normal workflows. If there is not enough data now, I would like to take some benchmark for this PR.\r\n\r\nThis piggybacks on the existing tier two machinery (activated by passing `-X uops` on the command line or setting the `PYTHON_UOPS` environment variable). You can build an instrumented version of `main` today using [`--enable-pystats`](https://docs.python.org/3.13/using/configure.html#cmdoption-enable-pystats), which dumps tons of internal counters. These include stats on how effective tier two is at finding, optimizing, and executing hot spots in your code.\r\n\r\n> 2. Is there any way to monitor the JIT status\r\n\r\nNot yet, but there almost certainly will be in the future. I think we need to play with the JIT a bit to see what kind of info/control is most useful.\r\n\r\n> 3. After [gh-96143: Allow Linux perf profiler to see Python calls\u00a0#96123](https://github.com/python/cpython/pull/96123), we make a trampoline to point the code address and symbol, so the user can use perf or other tools to monitor the code by add-hook on some user space address, Is it possible to do the same thing after the JIT ?( I would like to help with this feature\r\n\r\nIt should be possible, but I haven't experimented with this at all. This is probably a related problem to making sure that C-level debuggers can work with the jitted code effectively, which I'm also not worrying about for now (contributions welcome once this lands, though)!\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876139308/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876221884",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876221884",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876221884,
          "node_id": "IC_kwDOBN0Z8c5v1N-8",
          "user": {
            "login": "Zheaoli",
            "id": 7054676,
            "node_id": "MDQ6VXNlcjcwNTQ2NzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7054676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Zheaoli",
            "html_url": "https://github.com/Zheaoli",
            "followers_url": "https://api.github.com/users/Zheaoli/followers",
            "following_url": "https://api.github.com/users/Zheaoli/following{/other_user}",
            "gists_url": "https://api.github.com/users/Zheaoli/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Zheaoli/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Zheaoli/subscriptions",
            "organizations_url": "https://api.github.com/users/Zheaoli/orgs",
            "repos_url": "https://api.github.com/users/Zheaoli/repos",
            "events_url": "https://api.github.com/users/Zheaoli/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Zheaoli/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T02:24:30Z",
          "updated_at": "2024-01-04T02:24:30Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > Hi, Brandt, Thanks for the marvelous work, I got a little bit question about this JIT machnism.\r\n> > \r\n> > 1. The time we chose to JIT is chosen by the `Optimizor` right. Is there some data to represent how much the possibility to be compiled as native code for the normal workflows. If there is not enough data now, I would like to take some benchmark for this PR.\r\n> \r\n> This piggybacks on the existing tier two machinery (activated by passing `-X uops` on the command line or setting the `PYTHON_UOPS` environment variable). You can build an instrumented version of `main` today using [`--enable-pystats`](https://docs.python.org/3.13/using/configure.html#cmdoption-enable-pystats), which dumps tons of internal counters. These include stats on how effective tier two is at finding, optimizing, and executing hot spots in your code.\r\n> \r\n> > 2. Is there any way to monitor the JIT status\r\n> \r\n> Not yet, but there almost certainly will be in the future. I think we need to play with the JIT a bit to see what kind of info/control is most useful.\r\n> \r\n> > 3. After [gh-96143: Allow Linux perf profiler to see Python calls\u00a0#96123](https://github.com/python/cpython/pull/96123), we make a trampoline to point the code address and symbol, so the user can use perf or other tools to monitor the code by add-hook on some user space address, Is it possible to do the same thing after the JIT ?( I would like to help with this feature\r\n> \r\n> It should be possible, but I haven't experimented with this at all. This is probably a related problem to making sure that C-level debuggers can work with the jitted code effectively, which I'm also not worrying about for now (contributions welcome once this lands, though)!\r\n\r\nThanks a lot for your patience! I got another here\r\n\r\nI think the base template code is from the tire2 executor case. I'm very curious about the performance between the tire2 interpreter and the JITed code.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876221884/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876225775",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876225775",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876225775,
          "node_id": "IC_kwDOBN0Z8c5v1O7v",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T02:31:03Z",
          "updated_at": "2024-01-04T02:37:50Z",
          "author_association": "MEMBER",
          "body": "> I think the base template code is from the tire2 executor case. I'm very curious about the performance between the tire2 interpreter and the JITed code.\r\n\r\nAs it stands now, it's somewhere between 2% and 9% faster than the tier two interpreter, depending on platform (individual benchmarks vary widely, from 13% slower to 47% faster). See [my comment](https://github.com/python/cpython/pull/113465#issuecomment-1876131873) above for possible improvements to the generated code once this initial implementation is in (all of which are orthogonal to optimizing the trace itself, which is being worked on separately).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876225775/reactions",
            "total_count": 15,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 15,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876235122",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876235122",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876235122,
          "node_id": "IC_kwDOBN0Z8c5v1RNy",
          "user": {
            "login": "penguin-wwy",
            "id": 15888598,
            "node_id": "MDQ6VXNlcjE1ODg4NTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/15888598?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/penguin-wwy",
            "html_url": "https://github.com/penguin-wwy",
            "followers_url": "https://api.github.com/users/penguin-wwy/followers",
            "following_url": "https://api.github.com/users/penguin-wwy/following{/other_user}",
            "gists_url": "https://api.github.com/users/penguin-wwy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/penguin-wwy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/penguin-wwy/subscriptions",
            "organizations_url": "https://api.github.com/users/penguin-wwy/orgs",
            "repos_url": "https://api.github.com/users/penguin-wwy/repos",
            "events_url": "https://api.github.com/users/penguin-wwy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/penguin-wwy/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T02:45:35Z",
          "updated_at": "2024-01-04T02:45:35Z",
          "author_association": "CONTRIBUTOR",
          "body": "Hi, Brandt, thanks for the amazing work. Allow me to ask a few little bit question about future optimisation.\r\n* The current implementation only supports binary templates for a single bytecode node. So how are we going to support supernode of a common bytecode sequence.\r\n* In addition to support for supernodes, perhaps we could somehow stitch binary templates to generate a function or superblock, and if we did that perhaps we'd need to customise the register allocation algorithm for pass parameters and removes calling overhead between stencils.\r\n* Finally, can we generate inline-optimised templates for C-API with type mocks, such as pyston does. These help us to make the less common types of bytecode native as well (e.g _binary_op_add_list).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876235122/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876240754",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876240754",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876240754,
          "node_id": "IC_kwDOBN0Z8c5v1Sly",
          "user": {
            "login": "Zheaoli",
            "id": 7054676,
            "node_id": "MDQ6VXNlcjcwNTQ2NzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7054676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Zheaoli",
            "html_url": "https://github.com/Zheaoli",
            "followers_url": "https://api.github.com/users/Zheaoli/followers",
            "following_url": "https://api.github.com/users/Zheaoli/following{/other_user}",
            "gists_url": "https://api.github.com/users/Zheaoli/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Zheaoli/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Zheaoli/subscriptions",
            "organizations_url": "https://api.github.com/users/Zheaoli/orgs",
            "repos_url": "https://api.github.com/users/Zheaoli/repos",
            "events_url": "https://api.github.com/users/Zheaoli/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Zheaoli/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T02:54:31Z",
          "updated_at": "2024-01-04T02:54:31Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > I think the base template code is from the tire2 executor case. I'm very curious about the performance between the tire2 interpreter and the JITed code.\n> \n> \n> \n> As it stands now, it's somewhere between 2% and 9% faster than the tier two interpreter, depending on platform (individual benchmarks vary widely, from 13% slower to 47% faster). See [my comment](https://github.com/python/cpython/pull/113465#issuecomment-1876131873) above for possible improvements to the generated code once this initial implementation is in (all of which are orthogonal to optimizing the trace itself, which is being worked on separately).\n\nGot it\uff0c I think we might need to have a continuous benchmark pipeline to evaluate the performance issue.\n\nAbout the test case, we may need to cover some real use case which is complex enough and will run for long time. Just like what the Ruby community do the benchmark(The Shopify run the JIT in main branch, and report the profile results to the community https://railsatscale.com",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876240754/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876242018",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876242018",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876242018,
          "node_id": "IC_kwDOBN0Z8c5v1S5i",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T02:56:16Z",
          "updated_at": "2024-01-04T02:56:16Z",
          "author_association": "MEMBER",
          "body": "> Hi, Brandt, thanks for the amazing work. Allow me to ask a few little bit question about future optimisation.\r\n> \r\n> * The current implementation only supports binary templates for a single bytecode node. So how are we going to support supernode of a common bytecode sequence.\r\n\r\nOne of two ways:\r\n- the tier two optimizer can combine tier two instructions into superinstructions before the JIT even sees them (then, to the JIT, they are just normal instructions)\r\n- in addition to individual stencils, we'll also compile stencils for common pairs or triples of instructions (then the JIT can use them if they show up in the trace)\r\n\r\n> * In addition to support for supernodes, perhaps we could somehow stitch binary templates to generate a function or superblock, and if we did that perhaps we'd need to customise the register allocation algorithm for pass parameters and removes calling overhead between stencils.\r\n\r\nThere are lots of things we can do with this, since at its core it's really just a general-purpose backend. :)\r\n\r\nBut for register allocation, LLVM's `ghccc` calling convention makes it very easy to pin registers across the tail calls by passing them as arguments to the continuation... so we actually have a surprising amount of control there!\r\n\r\n> * Finally, can we generate inline-optimised templates for C-API with type mocks, such as pyston does. These help us to make the less common types of bytecode native as well (e.g _binary_op_add_list).\r\n\r\nNot sure I follow... I don't know what you mean by \"type mocks\" (and Google isn't helping).\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876242018/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876243033",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876243033",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876243033,
          "node_id": "IC_kwDOBN0Z8c5v1TJZ",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T02:58:17Z",
          "updated_at": "2024-01-04T02:58:17Z",
          "author_association": "MEMBER",
          "body": "> Got it\uff0c I think we might need to have a continuous benchmark pipeline to evaluate the performance issue.\r\n> \r\n> About the test case, we may need to cover some real use case which is complex enough and will run for long time. Just like what the Ruby community do the benchmark(The Shopify run the JIT in main branch, and report the profile results to the community https://railsatscale.com\r\n\r\nWe already have automated performance testing of a comprehensive benchmark suite, if that's what you mean: https://github.com/faster-cpython/benchmarking-public\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876243033/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876253227",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876253227",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876253227,
          "node_id": "IC_kwDOBN0Z8c5v1Vor",
          "user": {
            "login": "penguin-wwy",
            "id": 15888598,
            "node_id": "MDQ6VXNlcjE1ODg4NTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/15888598?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/penguin-wwy",
            "html_url": "https://github.com/penguin-wwy",
            "followers_url": "https://api.github.com/users/penguin-wwy/followers",
            "following_url": "https://api.github.com/users/penguin-wwy/following{/other_user}",
            "gists_url": "https://api.github.com/users/penguin-wwy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/penguin-wwy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/penguin-wwy/subscriptions",
            "organizations_url": "https://api.github.com/users/penguin-wwy/orgs",
            "repos_url": "https://api.github.com/users/penguin-wwy/repos",
            "events_url": "https://api.github.com/users/penguin-wwy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/penguin-wwy/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T03:16:54Z",
          "updated_at": "2024-01-04T03:16:54Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > Hi, Brandt, thanks for the amazing work. Allow me to ask a few little bit question about future optimisation.\r\n> > \r\n> > * The current implementation only supports binary templates for a single bytecode node. So how are we going to support supernode of a common bytecode sequence.\r\n> \r\n> One of two ways:\r\n> \r\n>     * the tier two optimizer can combine tier two instructions into superinstructions before the JIT even sees them (then, to the JIT, they are just normal instructions)\r\n> \r\n>     * in addition to individual stencils, we'll also compile stencils for common pairs or triples of instructions (then the JIT can use them if they show up in the trace)\r\n> \r\n> \r\n> > * In addition to support for supernodes, perhaps we could somehow stitch binary templates to generate a function or superblock, and if we did that perhaps we'd need to customise the register allocation algorithm for pass parameters and removes calling overhead between stencils.\r\n> \r\n> There are lots of things we can do with this, since at its core it's really just a general-purpose backend. :)\r\n> \r\n> But for register allocation, LLVM's `ghccc` calling convention makes it very easy to pin registers across the tail calls by passing them as arguments to the continuation... so we actually have a surprising amount of control there!\r\n> \r\n> > * Finally, can we generate inline-optimised templates for C-API with type mocks, such as pyston does. These help us to make the less common types of bytecode native as well (e.g _binary_op_add_list).\r\n> \r\n> Not sure I follow... I don't know what you mean by \"type mocks\" (and Google isn't helping).\r\n\r\nSorry, my wording is not very standard. What I want to say is that generating binary template functions (optimised for inline) for bytecode (e.g. binary_op_add, but adding two list) by llvm, and then call them with a generic method\r\n```\r\nadd_tow_list = load_fast + load_fast + binary_op_add:\r\n    mov xxx\r\n    mov yyy\r\n    call  (X86_64_RELOC_UNSIGNED)   -> redirect to list_extend\r\n```\r\nwhich can help make some of the less common (as opposed to int, float) bytecode operations also native",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876253227/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876254617",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876254617",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876254617,
          "node_id": "IC_kwDOBN0Z8c5v1V-Z",
          "user": {
            "login": "Zheaoli",
            "id": 7054676,
            "node_id": "MDQ6VXNlcjcwNTQ2NzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7054676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Zheaoli",
            "html_url": "https://github.com/Zheaoli",
            "followers_url": "https://api.github.com/users/Zheaoli/followers",
            "following_url": "https://api.github.com/users/Zheaoli/following{/other_user}",
            "gists_url": "https://api.github.com/users/Zheaoli/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Zheaoli/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Zheaoli/subscriptions",
            "organizations_url": "https://api.github.com/users/Zheaoli/orgs",
            "repos_url": "https://api.github.com/users/Zheaoli/repos",
            "events_url": "https://api.github.com/users/Zheaoli/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Zheaoli/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T03:19:33Z",
          "updated_at": "2024-01-04T03:19:33Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > Got it\uff0c I think we might need to have a continuous benchmark pipeline to evaluate the performance issue.\r\n> > About the test case, we may need to cover some real use case which is complex enough and will run for long time. Just like what the Ruby community do the benchmark(The Shopify run the JIT in main branch, and report the profile results to the community https://railsatscale.com\r\n> \r\n> We already have automated performance testing of a comprehensive benchmark suite, if that's what you mean: https://github.com/faster-cpython/benchmarking-public\r\n\r\nI have seen this before, But a little bit different. I will try to do some more complex workflow(like Django with a lot of ORM query etc..) to benchmark some extra metric like the TPS improvment, CPU usgae etc...",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876254617/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1876646249",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1876646249",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1876646249,
          "node_id": "IC_kwDOBN0Z8c5v21lp",
          "user": {
            "login": "tekknolagi",
            "id": 401167,
            "node_id": "MDQ6VXNlcjQwMTE2Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/401167?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tekknolagi",
            "html_url": "https://github.com/tekknolagi",
            "followers_url": "https://api.github.com/users/tekknolagi/followers",
            "following_url": "https://api.github.com/users/tekknolagi/following{/other_user}",
            "gists_url": "https://api.github.com/users/tekknolagi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tekknolagi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tekknolagi/subscriptions",
            "organizations_url": "https://api.github.com/users/tekknolagi/orgs",
            "repos_url": "https://api.github.com/users/tekknolagi/repos",
            "events_url": "https://api.github.com/users/tekknolagi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tekknolagi/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T07:48:57Z",
          "updated_at": "2024-01-04T07:49:30Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > > Got it\uff0c I think we might need to have a continuous benchmark pipeline to evaluate the performance issue.\r\n> > > About the test case, we may need to cover some real use case which is complex enough and will run for long time. Just like what the Ruby community do the benchmark(The Shopify run the JIT in main branch, and report the profile results to the community https://railsatscale.com\r\n> > \r\n> > \r\n> > We already have automated performance testing of a comprehensive benchmark suite, if that's what you mean: https://github.com/faster-cpython/benchmarking-public\r\n> \r\n> I have seen this before, But a little bit different. I will try to do some more complex workflow(like Django with a lot of ORM query etc..) to benchmark some extra metric like the TPS improvment, CPU usgae etc...\r\n\r\nWe did something like this with https://github.com/facebookarchive/django-workload some years ago, but I don't know how relevant that exact code is today. Also, I no longer work at FB.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1876646249/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1877506736",
          "html_url": "https://github.com/python/cpython/pull/113465#issuecomment-1877506736",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/113465",
          "id": 1877506736,
          "node_id": "IC_kwDOBN0Z8c5v6Hqw",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-04T17:38:57Z",
          "updated_at": "2024-01-04T17:38:57Z",
          "author_association": "MEMBER",
          "body": "> > > Got it\uff0c I think we might need to have a continuous benchmark pipeline to evaluate the performance issue.\r\n> > > About the test case, we may need to cover some real use case which is complex enough and will run for long time. Just like what the Ruby community do the benchmark(The Shopify run the JIT in main branch, and report the profile results to the community https://railsatscale.com\r\n> > \r\n> > \r\n> > We already have automated performance testing of a comprehensive benchmark suite, if that's what you mean: https://github.com/faster-cpython/benchmarking-public\r\n> \r\n> I have seen this before, But a little bit different. I will try to do some more complex workflow(like Django with a lot of ORM query etc..) to benchmark some extra metric like the TPS improvment, CPU usgae etc...\r\n\r\nFWIW, the faster-cpython team does also run a number of additional high-level ([\"workload-oriented\"](https://github.com/faster-cpython/benchmarking)) benchmarks that are included in the results: https://github.com/pyston/python-macrobenchmarks/tree/main/benchmarks.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1877506736/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/11816",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/11816/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/11816/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/11816/events",
      "html_url": "https://github.com/python/cpython/pull/11816",
      "id": 408632432,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjUxNzk5OTA4",
      "number": 11816,
      "title": "bpo-35813: Tests and docs for shared_memory",
      "user": {
        "login": "applio",
        "id": 121634,
        "node_id": "MDQ6VXNlcjEyMTYzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/121634?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/applio",
        "html_url": "https://github.com/applio",
        "followers_url": "https://api.github.com/users/applio/followers",
        "following_url": "https://api.github.com/users/applio/following{/other_user}",
        "gists_url": "https://api.github.com/users/applio/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/applio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/applio/subscriptions",
        "organizations_url": "https://api.github.com/users/applio/orgs",
        "repos_url": "https://api.github.com/users/applio/repos",
        "events_url": "https://api.github.com/users/applio/events{/privacy}",
        "received_events_url": "https://api.github.com/users/applio/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 667924166,
          "node_id": "MDU6TGFiZWw2Njc5MjQxNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/skip%20news",
          "name": "skip news",
          "color": "000000",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-02-11T04:39:47Z",
      "updated_at": "2019-05-29T00:04:42Z",
      "closed_at": "2019-02-24T04:08:16Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/11816",
        "html_url": "https://github.com/python/cpython/pull/11816",
        "diff_url": "https://github.com/python/cpython/pull/11816.diff",
        "patch_url": "https://github.com/python/cpython/pull/11816.patch",
        "merged_at": "2019-02-24T04:08:16Z"
      },
      "body": "Tests and docs are now present.  Discussion around the API for the SharedMemory class and the appropriateness of the shareable_wrap() function is requested in particular.\r\n\n\n<!-- issue-number: [bpo-35813](https://bugs.python.org/issue35813) -->\nhttps://bugs.python.org/issue35813\n<!-- /issue-number -->\n",
      "closed_by": {
        "login": "applio",
        "id": 121634,
        "node_id": "MDQ6VXNlcjEyMTYzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/121634?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/applio",
        "html_url": "https://github.com/applio",
        "followers_url": "https://api.github.com/users/applio/followers",
        "following_url": "https://api.github.com/users/applio/following{/other_user}",
        "gists_url": "https://api.github.com/users/applio/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/applio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/applio/subscriptions",
        "organizations_url": "https://api.github.com/users/applio/orgs",
        "repos_url": "https://api.github.com/users/applio/repos",
        "events_url": "https://api.github.com/users/applio/events{/privacy}",
        "received_events_url": "https://api.github.com/users/applio/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/11816/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/11816/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/462527113",
          "html_url": "https://github.com/python/cpython/pull/11816#issuecomment-462527113",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11816",
          "id": 462527113,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjUyNzExMw==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-11T22:51:45Z",
          "updated_at": "2019-02-11T22:51:45Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nWhen you're done making the requested changes, leave the comment: `I have made the requested changes; please review again`.\n<!-- /changes-requested -->\n\nAnd if you don't make the requested changes, [you will be put in the comfy chair!](https://youtu.be/XnS49c9KZw8?t=1m30s)\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/462527113/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/466732064",
          "html_url": "https://github.com/python/cpython/pull/11816#issuecomment-466732064",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11816",
          "id": 466732064,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjczMjA2NA==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-24T04:08:18Z",
          "updated_at": "2019-02-24T04:08:18Z",
          "author_association": "NONE",
          "body": "@applio: Please replace `#` with `GH-` in the commit message next time. Thanks!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/466732064/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/95151",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/95151/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/95151/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/95151/events",
      "html_url": "https://github.com/python/cpython/pull/95151",
      "id": 1315457730,
      "node_id": "PR_kwDOBN0Z8c47-UKN",
      "number": 95151,
      "title": "gh-95065: Add Argument Clinic support for deprecating positional use of parameters",
      "user": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4019554242,
          "node_id": "LA_kwDOBN0Z8c7vlYfC",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-argument-clinic",
          "name": "topic-argument-clinic",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 26,
      "created_at": "2022-07-22T22:15:29Z",
      "updated_at": "2023-08-07T16:19:31Z",
      "closed_at": "2023-08-07T11:28:08Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/95151",
        "html_url": "https://github.com/python/cpython/pull/95151",
        "diff_url": "https://github.com/python/cpython/pull/95151.diff",
        "patch_url": "https://github.com/python/cpython/pull/95151.patch",
        "merged_at": "2023-08-07T11:28:08Z"
      },
      "body": "Add support for deprecating positional use of optional parameters by                                       \r\nintroducing the `* [from X.Y]` syntax, meaning the following parameters                                    \r\nwill be keyword-only starting with Python version X.Y. Code that emits                                     \r\nDeprecationWarnings and compile time messages will be automatically                                        \r\ngenerated.                                                                                                 \r\n                                                                                                           \r\nMultiple `* [from X.Y]` lines are not allowed (yet).\r\n\r\n<!-- gh-issue-number: gh-95065 -->\r\n* Issue: gh-95065\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/95151/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/95151/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1192975116",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1192975116",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1192975116,
          "node_id": "IC_kwDOBN0Z8c5HG1sM",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-22T22:17:38Z",
          "updated_at": "2022-07-22T22:17:38Z",
          "author_association": "CONTRIBUTOR",
          "body": "Disclaimer: there's probably a lot of corner cases I haven't thought of yet. This is very much a draft.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1192975116/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1195377797",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1195377797",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1195377797,
          "node_id": "IC_kwDOBN0Z8c5HQASF",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-26T11:46:34Z",
          "updated_at": "2022-07-26T11:46:34Z",
          "author_association": "CONTRIBUTOR",
          "body": "@zware, are you interested in reviewing this?\r\n\r\nThis is probably quite crude, but my Argument Clinic knowledge is minimal, so I think getting a round of reviews is needed for me to move forward with this.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1195377797/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1195378544",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1195378544",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1195378544,
          "node_id": "IC_kwDOBN0Z8c5HQAdw",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-26T11:47:24Z",
          "updated_at": "2022-07-26T11:47:24Z",
          "author_association": "CONTRIBUTOR",
          "body": "cc. @arhadthedev, if you would like to review this.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1195378544/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1636898968",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1636898968",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1636898968,
          "node_id": "IC_kwDOBN0Z8c5hkRiY",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-07-15T22:05:50Z",
          "updated_at": "2023-07-15T22:05:50Z",
          "author_association": "CONTRIBUTOR",
          "body": "@serhiy-storchaka, I think this is ready for review, if you want to take a look.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1636898968/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1636902725",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1636902725",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1636902725,
          "node_id": "IC_kwDOBN0Z8c5hkSdF",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-07-15T22:31:36Z",
          "updated_at": "2023-07-15T22:31:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "FTR, I've verified that the generated C preprocessor directives work as expected by tweaking Python/patchlevel.h locally.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1636902725/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1642885091",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1642885091",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1642885091,
          "node_id": "IC_kwDOBN0Z8c5h7G_j",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-07-19T23:17:54Z",
          "updated_at": "2023-07-19T23:17:54Z",
          "author_association": "CONTRIBUTOR",
          "body": "@AlexWaygood, how's the type annotations in this PR? Acceptable? :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1642885091/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1644654578",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1644654578",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1644654578,
          "node_id": "IC_kwDOBN0Z8c5iB2_y",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-07-20T21:54:45Z",
          "updated_at": "2023-07-20T21:54:45Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Typing looks good!\r\n\r\nFeel free to review the whole PR, if you have time :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1644654578/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1646175178",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1646175178",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1646175178,
          "node_id": "IC_kwDOBN0Z8c5iHqPK",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-07-21T19:55:25Z",
          "updated_at": "2023-07-21T19:55:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "@sobolevn, I know you like Argument Clinic; would you like to take a look at this?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1646175178/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1646556120",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1646556120",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1646556120,
          "node_id": "IC_kwDOBN0Z8c5iJHPY",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-07-22T10:51:35Z",
          "updated_at": "2023-07-22T10:51:35Z",
          "author_association": "CONTRIBUTOR",
          "body": "> One more idea: I think that it might be a good thing to mock the current python version when testing this: so it always says `3.12` or `3.whathever`. Because some time later `3.14` will be a thing and this test would need to be updated, I don't think we want to bother with it :)\n\nYes, let's do that. Feel free to give it a shot! I'm currently on mobile.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1646556120/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666553121",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666553121",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666553121,
          "node_id": "IC_kwDOBN0Z8c5jVZUh",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-05T16:52:43Z",
          "updated_at": "2023-08-05T16:52:43Z",
          "author_association": "CONTRIBUTOR",
          "body": "> What will happen if there is more than one deprecated positional parameter?\r\n\r\nAfter `* [from ...]`, all following parameters will emit a deprecation warning if passed as a keyword parameter.\r\n\r\nFor the C code, preprocessor code that emit warnings/errors will be generated for _each parameter_; I'll refactor that so only one chunk of preprocessor code is generated, and only one warning/error is emitted.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666553121/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666553374",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666553374",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666553374,
          "node_id": "IC_kwDOBN0Z8c5jVZYe",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-05T16:54:11Z",
          "updated_at": "2023-08-05T16:54:11Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks for the reviews so far, everyone. I'll try to address them pretty quickly, in order to not loose momentum.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666553374/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666555391",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666555391",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666555391,
          "node_id": "IC_kwDOBN0Z8c5jVZ3_",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-05T17:04:30Z",
          "updated_at": "2023-08-07T16:19:31Z",
          "author_association": "CONTRIBUTOR",
          "body": "FTR, here's my TODO list for this PR, and suggestions for immediate follow-up PRs:\r\n\r\n- [x] Address the reviews \ud83d\ude04\r\n\r\nFollow-up PRs:\r\n\r\n- [ ] Move the clinic.test.c tests to Modules/_testclinic.c, in order to test the emitted warnings\r\n- [x] Simplify the generated preprocessor code, so that the warning messages for the parameters are consolidated into one message, and only one bulk of preprocessor code is generated\r\n- [ ] Add tests for preprocessor warnings/errors\r\n- [ ] Support multiple `[from ...]` lines (for example, deprecate 2 params for Python x.y, and 3 more params for Python x.y+1)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666555391/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666559389",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666559389",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666559389,
          "node_id": "IC_kwDOBN0Z8c5jVa2d",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-05T17:25:09Z",
          "updated_at": "2023-08-05T17:25:09Z",
          "author_association": "MEMBER",
          "body": "> Move the clinic.test.c tests to Modules/_testclinic.c, in order to test the emitted warnings\r\n\r\nI think it is not needed. A peer review of the generated code should be enough for now. We will test it additionally by using this feature in the real code.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666559389/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666560190",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666560190",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666560190,
          "node_id": "IC_kwDOBN0Z8c5jVbC-",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-05T17:29:35Z",
          "updated_at": "2023-08-05T17:29:35Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > Move the clinic.test.c tests to Modules/_testclinic.c, in order to test the emitted warnings\r\n> \r\n> I think it is not needed. A peer review of the generated code should be enough for now. We will test it additionally by using this feature in the real code.\r\n\r\nWell, I can add it to the list of follow-up tasks; IMO, we should be testing these things in CI. _But_, as soon as we start apply this to the code base by deprecating positional use of keyword parameters, we will quickly see if it is broken.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666560190/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666574357",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666574357",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666574357,
          "node_id": "IC_kwDOBN0Z8c5jVegV",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-05T18:24:21Z",
          "updated_at": "2023-08-05T18:24:21Z",
          "author_association": "CONTRIBUTOR",
          "body": "I've addressed most review remarks (except some stylistic things I haven't made up my mind about). I've updated the issue with tasks for follow-up PRs (some of them are review remarks, like @sobolevn's suggestion for better tests).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666574357/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666728147",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666728147",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666728147,
          "node_id": "IC_kwDOBN0Z8c5jWEDT",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-06T05:41:00Z",
          "updated_at": "2023-08-06T05:41:00Z",
          "author_association": "MEMBER",
          "body": "> Simplify the generated preprocessor code, so that the warning messages for the parameters are consolidated into one message, and only one bulk of preprocessor code is generated\r\n\r\nI think it should be done in this PR. The code for the runtime warning looks incorrect to me if there is more than one deprecated positional argument. It perhaps should be inserted before any parsing code, so you will get a warning even if parsing of previous arguments raises an exception.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666728147/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666756083",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666756083",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666756083,
          "node_id": "IC_kwDOBN0Z8c5jWK3z",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-06T07:27:41Z",
          "updated_at": "2023-08-06T07:27:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "> I think it should be done in this PR. The code for the runtime warning looks incorrect to me if there is more than one deprecated positional argument. It perhaps should be inserted before any parsing code, so you will get a warning even if parsing of previous arguments raises an exception.\n\nI think you mentioned this before, and I probably forgot about it. I will see to it. Thanks for the heads-up.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666756083/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666885261",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666885261",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666885261,
          "node_id": "IC_kwDOBN0Z8c5jWqaN",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-06T14:50:29Z",
          "updated_at": "2023-08-06T14:50:29Z",
          "author_association": "CONTRIBUTOR",
          "body": "@serhiy-storchaka, @AlexWaygood: I've given the warning messages a face lift, consolidated stuff into one single block, and adjusted the placement so the generated block comes before the parser. I've still got some beautification left to do, but I think we're getting close to something good, with regards to functionality.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666885261/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666885783",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666885783",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666885783,
          "node_id": "IC_kwDOBN0Z8c5jWqiX",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-06T14:52:24Z",
          "updated_at": "2023-08-06T15:04:37Z",
          "author_association": "CONTRIBUTOR",
          "body": "> You can now replace the `major.isdigit()` test with `try/except ValueError` around `int(major)`. Note also that `major, minor = thenceforth.split(\".\")` can fail too if there is more than one `\".\"`.\r\n> \r\n> Actually, you can replace all these tests with a single `try/except ValueError`.\r\n> \r\n> ```python\r\n> try:\r\n>     major, minor = thenceforth.split(\".\")\r\n>     self.deprecated_positional = int(major), int(minor)\r\n> except ValueError:\r\n>     fail(...)\r\n> ```\r\n\r\nI'll get to this later today. **UPDATE**: resolved.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666885783/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1666971747",
          "html_url": "https://github.com/python/cpython/pull/95151#issuecomment-1666971747",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/95151",
          "id": 1666971747,
          "node_id": "IC_kwDOBN0Z8c5jW_hj",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-08-06T21:28:22Z",
          "updated_at": "2023-08-06T21:28:22Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Now about tests. No longer needed to have separate tests for optional and required arguments. But you need separate tests for `first_pos` = 0, 1 and 2, and `len(items)` = 1, 2, 3. Maybe not for all 3*3=9 combinations, but only 3+3=6 variants.\r\n\r\nI think we still need tests for both optional and required arguments; they take different code paths in clinic.py, so it's nice to have at least one test case for each branch.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1666971747/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/133365",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/133365/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/133365/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/133365/events",
      "html_url": "https://github.com/python/cpython/pull/133365",
      "id": 3037724456,
      "node_id": "PR_kwDOBN0Z8c6U1qQW",
      "number": 133365,
      "title": "gh-132983: Add `compression.zstd` and Python tests",
      "user": {
        "login": "emmatyping",
        "id": 9504279,
        "node_id": "MDQ6VXNlcjk1MDQyNzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emmatyping",
        "html_url": "https://github.com/emmatyping",
        "followers_url": "https://api.github.com/users/emmatyping/followers",
        "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
        "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
        "organizations_url": "https://api.github.com/users/emmatyping/orgs",
        "repos_url": "https://api.github.com/users/emmatyping/repos",
        "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
        "received_events_url": "https://api.github.com/users/emmatyping/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 667924166,
          "node_id": "MDU6TGFiZWw2Njc5MjQxNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/skip%20news",
          "name": "skip news",
          "color": "000000",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 15,
      "created_at": "2025-05-04T02:18:15Z",
      "updated_at": "2025-05-13T20:37:32Z",
      "closed_at": "2025-05-06T00:38:09Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/133365",
        "html_url": "https://github.com/python/cpython/pull/133365",
        "diff_url": "https://github.com/python/cpython/pull/133365.diff",
        "patch_url": "https://github.com/python/cpython/pull/133365.patch",
        "merged_at": "2025-05-06T00:38:09Z"
      },
      "body": "The next step to merging the PEP 784 implementation, this PR introduces `compression.zstd` and tests for the code (which I have been using to test the C code so far).\r\n\r\nSince test can be modified post-beta1, I'd like to focus on reviewing the API and Python implementation code. Obviously if there are important tests to add or change, that review would be valuable as well.\r\n\r\n\r\n\r\n\n\n<!-- gh-issue-number: gh-132983 -->\n* Issue: gh-132983\n<!-- /gh-issue-number -->\n",
      "closed_by": {
        "login": "AA-Turner",
        "id": 9087854,
        "node_id": "MDQ6VXNlcjkwODc4NTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9087854?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AA-Turner",
        "html_url": "https://github.com/AA-Turner",
        "followers_url": "https://api.github.com/users/AA-Turner/followers",
        "following_url": "https://api.github.com/users/AA-Turner/following{/other_user}",
        "gists_url": "https://api.github.com/users/AA-Turner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AA-Turner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AA-Turner/subscriptions",
        "organizations_url": "https://api.github.com/users/AA-Turner/orgs",
        "repos_url": "https://api.github.com/users/AA-Turner/repos",
        "events_url": "https://api.github.com/users/AA-Turner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AA-Turner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/133365/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/133365/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2848914918",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2848914918",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2848914918,
          "node_id": "IC_kwDOBN0Z8c6pzv3m",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-04T02:19:08Z",
          "updated_at": "2025-05-04T02:19:08Z",
          "author_association": "MEMBER",
          "body": "Also as requested, pinging @Rogdham to review the Python code.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2848914918/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2849034760",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2849034760",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2849034760,
          "node_id": "IC_kwDOBN0Z8c6p0NII",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-04T06:22:32Z",
          "updated_at": "2025-05-04T06:22:32Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2849034760/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2849299770",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2849299770",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2849299770,
          "node_id": "IC_kwDOBN0Z8c6p1N06",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-04T16:23:19Z",
          "updated_at": "2025-05-04T16:23:19Z",
          "author_association": "MEMBER",
          "body": "I am working on addressing some of the issues which will include the test failures",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2849299770/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852639107",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852639107",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852639107,
          "node_id": "IC_kwDOBN0Z8c6qB9GD",
          "user": {
            "login": "AA-Turner",
            "id": 9087854,
            "node_id": "MDQ6VXNlcjkwODc4NTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9087854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AA-Turner",
            "html_url": "https://github.com/AA-Turner",
            "followers_url": "https://api.github.com/users/AA-Turner/followers",
            "following_url": "https://api.github.com/users/AA-Turner/following{/other_user}",
            "gists_url": "https://api.github.com/users/AA-Turner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AA-Turner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AA-Turner/subscriptions",
            "organizations_url": "https://api.github.com/users/AA-Turner/orgs",
            "repos_url": "https://api.github.com/users/AA-Turner/repos",
            "events_url": "https://api.github.com/users/AA-Turner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AA-Turner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-05T23:22:30Z",
          "updated_at": "2025-05-05T23:22:30Z",
          "author_association": "MEMBER",
          "body": "Per devguide avoid force pushing, especially on long running and frequently reviewed PRs, such as this one.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852639107/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852649104",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852649104",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852649104,
          "node_id": "IC_kwDOBN0Z8c6qB_iQ",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-05T23:29:37Z",
          "updated_at": "2025-05-05T23:29:37Z",
          "author_association": "MEMBER",
          "body": "Oh, sorry! I forgot about that \ud83e\udd26\u200d\u2640\ufe0f \r\n\r\nI'll avoid it in the future. I generally rebase when I run into merge conflicts. I'll merge instead.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852649104/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852737704",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852737704",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852737704,
          "node_id": "IC_kwDOBN0Z8c6qCVKo",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-05T23:50:46Z",
          "updated_at": "2025-05-05T23:50:46Z",
          "author_association": "MEMBER",
          "body": "I have made the requested changes; please review again",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852737704/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852737955",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852737955",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852737955,
          "node_id": "IC_kwDOBN0Z8c6qCVOj",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-05T23:50:50Z",
          "updated_at": "2025-05-05T23:50:50Z",
          "author_association": "NONE",
          "body": "Thanks for making the requested changes!\n\n@AA-Turner: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852737955/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852742487",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852742487",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852742487,
          "node_id": "IC_kwDOBN0Z8c6qCWVX",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-05T23:51:46Z",
          "updated_at": "2025-05-05T23:51:54Z",
          "author_association": "MEMBER",
          "body": "FWIW I believe I responded to all reviews, so I will add the buildbots to test this.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852742487/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852744332",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852744332",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852744332,
          "node_id": "IC_kwDOBN0Z8c6qCWyM",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-05T23:52:05Z",
          "updated_at": "2025-05-05T23:52:05Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @emmatyping for commit a12a031e9572e5c5981d408a2ddfd7c4227e1423 :robot:\n\nResults will be shown at:\n\nhttps://buildbot.python.org/all/#/grid?branch=refs%2Fpull%2F133365%2Fmerge\n\nIf you want to schedule another build, you need to add the <kbd>:hammer: test-with-buildbots</kbd> label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852744332/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852772985",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852772985",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852772985,
          "node_id": "IC_kwDOBN0Z8c6qCdx5",
          "user": {
            "login": "AA-Turner",
            "id": 9087854,
            "node_id": "MDQ6VXNlcjkwODc4NTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9087854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AA-Turner",
            "html_url": "https://github.com/AA-Turner",
            "followers_url": "https://api.github.com/users/AA-Turner/followers",
            "following_url": "https://api.github.com/users/AA-Turner/following{/other_user}",
            "gists_url": "https://api.github.com/users/AA-Turner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AA-Turner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AA-Turner/subscriptions",
            "organizations_url": "https://api.github.com/users/AA-Turner/orgs",
            "repos_url": "https://api.github.com/users/AA-Turner/repos",
            "events_url": "https://api.github.com/users/AA-Turner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AA-Turner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-05T23:57:25Z",
          "updated_at": "2025-05-05T23:57:25Z",
          "author_association": "MEMBER",
          "body": "I've pushed a series of commits. Most are explanatory and fairly minor (docstring wording, etc). The one of most note is removing the exact type checks on `{C,Dec}ompressionParamater`. I think it is overly restrictivie to check the exact type of the enum, and I can't think of a similar example where we do this. Users who want the validation of not conflating compression and decompression can use a staic type checker.\r\n\r\nI've pushed this for speed, given time, but if you feel strongly I'm happy for you to revert.\r\n\r\nA",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852772985/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852799728",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852799728",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852799728,
          "node_id": "IC_kwDOBN0Z8c6qCkTw",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-06T00:06:42Z",
          "updated_at": "2025-05-06T00:06:42Z",
          "author_association": "MEMBER",
          "body": "@AA-Turner The commits look fine other than the last one. It is very important to check the type of a CompressionParameter vs DecompressionParameter because the C enum variants have overlapping values (`compression_level == window_log_max`)\r\n\r\nYou can see in the tests this could lead to confusing errors:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/runner/work/cpython/cpython-ro-srcdir/Lib/test/test_zstd.py\", line 1424, in test_init_bad_mode\r\n    ZstdFile(io.BytesIO(), 'rb',\r\n    ~~~~~~~~^^^^^^^^^^^^^^^^^^^^\r\n             options={CompressionParameter.compression_level:5})\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/runner/work/cpython/cpython-ro-srcdir/Lib/compression/zstd/_zstdfile.py\", line 91, in __init__\r\n    raw = _streams.DecompressReader(\r\n        self._fp,\r\n    ...<3 lines>...\r\n        options=options,\r\n    )\r\n  File \"/home/runner/work/cpython/cpython-ro-srcdir/Lib/compression/_common/_streams.py\", line 53, in __init__\r\n    self._decompressor = self._decomp_factory(**self._decomp_args)\r\n                         ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^\r\n_zstd.ZstdError: Error when setting zstd decompression parameter \"window_log_max\", it should 10 <= value <= 31, provided value is 5. (zstd v1.5.5, 64-bit build)\r\n```\r\n\r\nI think I will revert the last commit but keep the others.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852799728/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852811395",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852811395",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852811395,
          "node_id": "IC_kwDOBN0Z8c6qCnKD",
          "user": {
            "login": "AA-Turner",
            "id": 9087854,
            "node_id": "MDQ6VXNlcjkwODc4NTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9087854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AA-Turner",
            "html_url": "https://github.com/AA-Turner",
            "followers_url": "https://api.github.com/users/AA-Turner/followers",
            "following_url": "https://api.github.com/users/AA-Turner/following{/other_user}",
            "gists_url": "https://api.github.com/users/AA-Turner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AA-Turner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AA-Turner/subscriptions",
            "organizations_url": "https://api.github.com/users/AA-Turner/orgs",
            "repos_url": "https://api.github.com/users/AA-Turner/repos",
            "events_url": "https://api.github.com/users/AA-Turner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AA-Turner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-06T00:14:12Z",
          "updated_at": "2025-05-06T00:14:12Z",
          "author_association": "MEMBER",
          "body": "> It is very important to check the type of a CompressionParameter vs DecompressionParameter because the C enum variants have overlapping values\r\n\r\nYes, but I think the risk of this actually hitting users is low? For example, the examplar test failure you provided is very clear: `CompressionParameter.compression_level` is provided as a key, and the error message says  'Error when setting zstd **decompression** parameter \"**window_log_max**\"' (emph. added). *typeshed* could annotate the `options` dict as `Mapping[CompressionParameter, int]` which would solve the problem for users of static type checkers. Users who pass nonsense or invalid values will always get undefined behaviour or an error. I think it's better to apply the consenting adults principle here that we see elsewhere in the language. For example, the current code doesn't let me pass an `int` as the key directly.\r\n\r\nI think it's fine to keep for now as we can discuss further and change this during the betas -- this particular item isn't impacted by feature freeze as it's entirely private.\r\n\r\nA",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852811395/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852828074",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852828074",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852828074,
          "node_id": "IC_kwDOBN0Z8c6qCrOq",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-06T00:26:08Z",
          "updated_at": "2025-05-06T00:26:08Z",
          "author_association": "MEMBER",
          "body": "> For example, the examplar test failure you provided is very clear: CompressionParameter.compression_level is provided as a key, and the error message says 'Error when setting zstd **decompression** parameter \"**window_log_max**\"' (emph. added). \r\n\r\nI think we view the clarify of the error differently! To me I would expect users to not understand why they are getting an error about a decompression parameter when passing a compression parameter. I think perhaps a compromise would be to check the type if it is a (De)CompressionParameter, but otherwise just allow ints without checking. If you're passing an int, you're on your own!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852828074/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852841123",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852841123",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852841123,
          "node_id": "IC_kwDOBN0Z8c6qCuaj",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-06T00:32:32Z",
          "updated_at": "2025-05-06T00:32:44Z",
          "author_association": "MEMBER",
          "body": "@AA-Turner \r\n> For example, the current code doesn't let me pass an int as the key directly.\r\n\r\nAfter writing this:\r\n> I think perhaps a compromise would be to check the type if it is a (De)CompressionParameter, but otherwise just allow ints without checking. If you're passing an int, you're on your own!\r\n\r\nI just checked and we only check if it is `CompressionParameter` for decompression, or `DecompressionParameter` for compression. So the compromise is actually the current behavior. So you can pass an int if you'd like:\r\n\r\n```pycon\r\n>>> from compression.zstd import *\r\n>>> compress(b'testtesttest', options={100:5})\r\nb'(\\xb5/\\xfd \\x0ca\\x00\\x00testtesttest'\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852841123/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2852851010",
          "html_url": "https://github.com/python/cpython/pull/133365#issuecomment-2852851010",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/133365",
          "id": 2852851010,
          "node_id": "IC_kwDOBN0Z8c6qCw1C",
          "user": {
            "login": "emmatyping",
            "id": 9504279,
            "node_id": "MDQ6VXNlcjk1MDQyNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9504279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emmatyping",
            "html_url": "https://github.com/emmatyping",
            "followers_url": "https://api.github.com/users/emmatyping/followers",
            "following_url": "https://api.github.com/users/emmatyping/following{/other_user}",
            "gists_url": "https://api.github.com/users/emmatyping/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emmatyping/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emmatyping/subscriptions",
            "organizations_url": "https://api.github.com/users/emmatyping/orgs",
            "repos_url": "https://api.github.com/users/emmatyping/repos",
            "events_url": "https://api.github.com/users/emmatyping/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emmatyping/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-06T00:40:08Z",
          "updated_at": "2025-05-06T00:40:32Z",
          "author_association": "MEMBER",
          "body": "> Thanks everyone, and especially thank you @Rogdham for the valuable feedback & context from pyzstd.\r\n\r\nHear, hear! And thank you @AA-Turner for your suggestions and contributions! Thank you to all of the reviewers!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2852851010/reactions",
            "total_count": 3,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 3,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/92517",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/92517/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/92517/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/92517/events",
      "html_url": "https://github.com/python/cpython/pull/92517",
      "id": 1229007542,
      "node_id": "PR_kwDOBN0Z8c43d2CM",
      "number": 92517,
      "title": "gh-90385: Add `pathlib.Path.walk()` method",
      "user": {
        "login": "zmievsa",
        "id": 17561586,
        "node_id": "MDQ6VXNlcjE3NTYxNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/17561586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zmievsa",
        "html_url": "https://github.com/zmievsa",
        "followers_url": "https://api.github.com/users/zmievsa/followers",
        "following_url": "https://api.github.com/users/zmievsa/following{/other_user}",
        "gists_url": "https://api.github.com/users/zmievsa/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zmievsa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zmievsa/subscriptions",
        "organizations_url": "https://api.github.com/users/zmievsa/orgs",
        "repos_url": "https://api.github.com/users/zmievsa/repos",
        "events_url": "https://api.github.com/users/zmievsa/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zmievsa/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        },
        {
          "id": 4255101819,
          "node_id": "LA_kwDOBN0Z8c79n7N7",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-pathlib",
          "name": "topic-pathlib",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 34,
      "created_at": "2022-05-08T22:47:32Z",
      "updated_at": "2022-07-24T01:38:51Z",
      "closed_at": "2022-07-22T23:55:46Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/92517",
        "html_url": "https://github.com/python/cpython/pull/92517",
        "diff_url": "https://github.com/python/cpython/pull/92517.diff",
        "patch_url": "https://github.com/python/cpython/pull/92517.patch",
        "merged_at": "2022-07-22T23:55:46Z"
      },
      "body": "<!-- gh-issue-number: gh-90385 -->\r\n* Issue: gh-90385\r\n<!-- /gh-issue-number -->\n\nAutomerge-Triggered-By: GH:brettcannon",
      "closed_by": {
        "login": "miss-islington",
        "id": 31488909,
        "node_id": "MDQ6VXNlcjMxNDg4OTA5",
        "avatar_url": "https://avatars.githubusercontent.com/u/31488909?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/miss-islington",
        "html_url": "https://github.com/miss-islington",
        "followers_url": "https://api.github.com/users/miss-islington/followers",
        "following_url": "https://api.github.com/users/miss-islington/following{/other_user}",
        "gists_url": "https://api.github.com/users/miss-islington/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/miss-islington/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/miss-islington/subscriptions",
        "organizations_url": "https://api.github.com/users/miss-islington/orgs",
        "repos_url": "https://api.github.com/users/miss-islington/repos",
        "events_url": "https://api.github.com/users/miss-islington/events{/privacy}",
        "received_events_url": "https://api.github.com/users/miss-islington/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/92517/reactions",
        "total_count": 3,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/92517/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1120500360",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1120500360",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1120500360,
          "node_id": "IC_kwDOBN0Z8c5CyXqI",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-08T22:47:35Z",
          "updated_at": "2022-05-08T22:47:35Z",
          "author_association": "NONE",
          "body": "Every change to Python [requires a NEWS entry](https://devguide.python.org/committing/#updating-news-and-what-s-new-in-python).\n\nPlease, add it using the [blurb_it](https://blurb-it.herokuapp.com) Web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1120500360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1120912135",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1120912135",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1120912135,
          "node_id": "IC_kwDOBN0Z8c5Cz8MH",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-09T10:16:17Z",
          "updated_at": "2022-05-09T10:16:17Z",
          "author_association": "NONE",
          "body": "Every change to Python [requires a NEWS entry](https://devguide.python.org/committing/#updating-news-and-what-s-new-in-python).\n\nPlease, add it using the [blurb_it](https://blurb-it.herokuapp.com) Web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1120912135/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1121065924",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1121065924",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1121065924,
          "node_id": "IC_kwDOBN0Z8c5C0hvE",
          "user": {
            "login": "ghost",
            "id": 10137,
            "node_id": "MDQ6VXNlcjEwMTM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following{/other_user}",
            "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-09T12:57:24Z",
          "updated_at": "2022-07-17T20:10:38Z",
          "author_association": "NONE",
          "body": "All commit authors signed the Contributor License Agreement. <br/> [![CLA signed](https://cpython-clabot.herokuapp.com/cla-signed.svg)](https://cpython-clabot.herokuapp.com/signed-contributor-license-agreement?version=96a49432b8b111ec9bf5bfe9ad6c72c4)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1121065924/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1121065944",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1121065944",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1121065944,
          "node_id": "IC_kwDOBN0Z8c5C0hvY",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-09T12:57:25Z",
          "updated_at": "2022-05-09T12:57:25Z",
          "author_association": "NONE",
          "body": "Every change to Python [requires a NEWS entry](https://devguide.python.org/committing/#updating-news-and-what-s-new-in-python).\n\nPlease, add it using the [blurb_it](https://blurb-it.herokuapp.com) Web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1121065944/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1121622053",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1121622053",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1121622053,
          "node_id": "IC_kwDOBN0Z8c5C2pgl",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-09T21:54:26Z",
          "updated_at": "2022-05-09T21:54:26Z",
          "author_association": "NONE",
          "body": "Every change to Python [requires a NEWS entry](https://devguide.python.org/committing/#updating-news-and-what-s-new-in-python).\n\nPlease, add it using the [blurb_it](https://blurb-it.herokuapp.com) Web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1121622053/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1121658870",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1121658870",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1121658870,
          "node_id": "IC_kwDOBN0Z8c5C2yf2",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-09T22:49:46Z",
          "updated_at": "2022-05-09T22:49:46Z",
          "author_association": "CONTRIBUTOR",
          "body": "A quick recipe that puts symlinks to directories in `dirnames` but doesn't walk into them:\r\n\r\n```python\r\nfor root, dirnames, filenames in Path().walk(follow_symlinks=True):\r\n    # (do things with dirnames and filenames here)\r\n\r\n    # don't walk into symlinks\r\n    dirnames[:] = [name for name in dirnames if not (root / name).is_symlink())\r\n```\r\n\r\nOr alternatively:\r\n\r\n```python\r\nfor root, dirnames, filenames in Path().walk(follow_symlinks=False):\r\n    for name in dirnames + filenames:\r\n        path = root / name\r\n        if path.is_dir():\r\n            pass # do things to directory, or symlink to directory.\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1121658870/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1121699962",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1121699962",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1121699962,
          "node_id": "IC_kwDOBN0Z8c5C28h6",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2022-05-10T00:05:52Z",
          "updated_at": "2022-05-10T00:05:52Z",
          "author_association": "MEMBER",
          "body": "Why `walk_bottom_up()` and not `top_down` or some such keyword parameter? I didn't see a discussion on the issue about this. The `topdown` parameter for `os.walk()` has worked out fine.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1121699962/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1121718296",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1121718296",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1121718296,
          "node_id": "IC_kwDOBN0Z8c5C3BAY",
          "user": {
            "login": "zmievsa",
            "id": 17561586,
            "node_id": "MDQ6VXNlcjE3NTYxNTg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/17561586?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zmievsa",
            "html_url": "https://github.com/zmievsa",
            "followers_url": "https://api.github.com/users/zmievsa/followers",
            "following_url": "https://api.github.com/users/zmievsa/following{/other_user}",
            "gists_url": "https://api.github.com/users/zmievsa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zmievsa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zmievsa/subscriptions",
            "organizations_url": "https://api.github.com/users/zmievsa/orgs",
            "repos_url": "https://api.github.com/users/zmievsa/repos",
            "events_url": "https://api.github.com/users/zmievsa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zmievsa/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-10T00:36:00Z",
          "updated_at": "2022-05-10T00:36:00Z",
          "author_association": "CONTRIBUTOR",
          "body": "@brettcannon we have had a bit of a discussion [here](https://discuss.python.org/t/add-pathlib-path-walk-method/). For the purposes of saving your time, I'll lay down my logic here:\r\n* There are many complaints about os.walk having an overwhelming API so I tried to simplify it a bit\r\n* As a result, I split a single interface that could function in two modes with slightly different semantics (for example, allowing vs disallowing the modification of dirnames) into two interfaces (walk and walk_bottom_up), each of which has a single mode of functioning\r\n* The naming I used is quite clunky. Its purpose is basically: Path.walk is the default and most common use case which is why it has a shorter and non-symmetric name and Path.walk_bottom_up for other use cases\r\n* The more I work on this, the more I realize that os.walk had an overwhelming API because it did a complex task, not because it was written poorly or in a non-pythonic manner. So I'm completely open to any suggestions about refactoring my current API to make it clearer for the end users",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1121718296/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1121738404",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1121738404",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1121738404,
          "node_id": "IC_kwDOBN0Z8c5C3F6k",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-10T00:50:17Z",
          "updated_at": "2022-05-10T00:50:17Z",
          "author_association": "CONTRIBUTOR",
          "body": "Personally I reckon a `top_down` argument is better than splitting into two methods, but I can see what you were trying to do there.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1121738404/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1121961063",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1121961063",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1121961063,
          "node_id": "IC_kwDOBN0Z8c5C38Rn",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-10T05:55:32Z",
          "updated_at": "2022-05-10T05:55:32Z",
          "author_association": "NONE",
          "body": "Every change to Python [requires a NEWS entry](https://devguide.python.org/committing/#updating-news-and-what-s-new-in-python).\n\nPlease, add it using the [blurb_it](https://blurb-it.herokuapp.com) Web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1121961063/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1121961707",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1121961707",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1121961707,
          "node_id": "IC_kwDOBN0Z8c5C38br",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-10T05:56:50Z",
          "updated_at": "2022-05-10T05:56:50Z",
          "author_association": "NONE",
          "body": "Every change to Python [requires a NEWS entry](https://devguide.python.org/committing/#updating-news-and-what-s-new-in-python).\n\nPlease, add it using the [blurb_it](https://blurb-it.herokuapp.com) Web app or the [blurb](https://pypi.org/project/blurb/) command-line tool.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1121961707/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1124287297",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1124287297",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1124287297,
          "node_id": "IC_kwDOBN0Z8c5DA0NB",
          "user": {
            "login": "barneygale",
            "id": 960340,
            "node_id": "MDQ6VXNlcjk2MDM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/960340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barneygale",
            "html_url": "https://github.com/barneygale",
            "followers_url": "https://api.github.com/users/barneygale/followers",
            "following_url": "https://api.github.com/users/barneygale/following{/other_user}",
            "gists_url": "https://api.github.com/users/barneygale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barneygale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barneygale/subscriptions",
            "organizations_url": "https://api.github.com/users/barneygale/orgs",
            "repos_url": "https://api.github.com/users/barneygale/repos",
            "events_url": "https://api.github.com/users/barneygale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barneygale/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-05-11T20:56:19Z",
          "updated_at": "2022-05-11T20:56:19Z",
          "author_association": "CONTRIBUTOR",
          "body": "I'll return to this review in two week's time. I want to give others an opportunity to review the behaviour + implementation before I review the tests and docs.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1124287297/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1166885381",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1166885381",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1166885381,
          "node_id": "IC_kwDOBN0Z8c5FjUIF",
          "user": {
            "login": "zmievsa",
            "id": 17561586,
            "node_id": "MDQ6VXNlcjE3NTYxNTg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/17561586?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zmievsa",
            "html_url": "https://github.com/zmievsa",
            "followers_url": "https://api.github.com/users/zmievsa/followers",
            "following_url": "https://api.github.com/users/zmievsa/following{/other_user}",
            "gists_url": "https://api.github.com/users/zmievsa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zmievsa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zmievsa/subscriptions",
            "organizations_url": "https://api.github.com/users/zmievsa/orgs",
            "repos_url": "https://api.github.com/users/zmievsa/repos",
            "events_url": "https://api.github.com/users/zmievsa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zmievsa/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-27T05:24:55Z",
          "updated_at": "2022-06-27T05:24:55Z",
          "author_association": "CONTRIBUTOR",
          "body": "Is there anything missing in my PR for it to be reviewed? ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1166885381/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1166966829",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1166966829",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1166966829,
          "node_id": "IC_kwDOBN0Z8c5FjoAt",
          "user": {
            "login": "arhadthedev",
            "id": 4881073,
            "node_id": "MDQ6VXNlcjQ4ODEwNzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4881073?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arhadthedev",
            "html_url": "https://github.com/arhadthedev",
            "followers_url": "https://api.github.com/users/arhadthedev/followers",
            "following_url": "https://api.github.com/users/arhadthedev/following{/other_user}",
            "gists_url": "https://api.github.com/users/arhadthedev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arhadthedev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arhadthedev/subscriptions",
            "organizations_url": "https://api.github.com/users/arhadthedev/orgs",
            "repos_url": "https://api.github.com/users/arhadthedev/repos",
            "events_url": "https://api.github.com/users/arhadthedev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arhadthedev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-27T07:10:19Z",
          "updated_at": "2022-06-27T07:10:19Z",
          "author_association": "MEMBER",
          "body": "Everything is fine. There was a feedback gathering month to give everybody a chance to participate in the PR.\r\n\r\nIndeed, nobody keeps a track of PRs so your remainder was on spot to resurface the PR. Now we need to wait until some core developer gets here while processing their unread notification queue (a couple of days or so, maybe shorter, it depends).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1166966829/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1168015333",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1168015333",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1168015333,
          "node_id": "IC_kwDOBN0Z8c5Fnn_l",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2022-06-27T23:02:29Z",
          "updated_at": "2022-06-27T23:02:29Z",
          "author_association": "MEMBER",
          "body": "@Ovsyanka83 for me personally, it's a lack of time to think through whether we want this, whether the API makes sense, review the code, and whether https://github.com/python/cpython/pull/31691 changes things.\r\n\r\nThis PR is in [my review queue](https://github.com/search?q=is%3Aopen+is%3Apr+review-requested%3Abrettcannon+archived%3Afalse), but it isn't the only one. \ud83d\ude05",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1168015333/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1168042738",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1168042738",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1168042738,
          "node_id": "IC_kwDOBN0Z8c5Fnury",
          "user": {
            "login": "zmievsa",
            "id": 17561586,
            "node_id": "MDQ6VXNlcjE3NTYxNTg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/17561586?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zmievsa",
            "html_url": "https://github.com/zmievsa",
            "followers_url": "https://api.github.com/users/zmievsa/followers",
            "following_url": "https://api.github.com/users/zmievsa/following{/other_user}",
            "gists_url": "https://api.github.com/users/zmievsa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zmievsa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zmievsa/subscriptions",
            "organizations_url": "https://api.github.com/users/zmievsa/orgs",
            "repos_url": "https://api.github.com/users/zmievsa/repos",
            "events_url": "https://api.github.com/users/zmievsa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zmievsa/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-27T23:45:48Z",
          "updated_at": "2022-06-27T23:45:48Z",
          "author_association": "CONTRIBUTOR",
          "body": "I completely understand and am not rushing you. I just wanted to know that this PR is somewhere in the queue :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1168042738/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1171319630",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1171319630",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1171319630,
          "node_id": "IC_kwDOBN0Z8c5F0OtO",
          "user": {
            "login": "merwok",
            "id": 635179,
            "node_id": "MDQ6VXNlcjYzNTE3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/635179?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/merwok",
            "html_url": "https://github.com/merwok",
            "followers_url": "https://api.github.com/users/merwok/followers",
            "following_url": "https://api.github.com/users/merwok/following{/other_user}",
            "gists_url": "https://api.github.com/users/merwok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/merwok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/merwok/subscriptions",
            "organizations_url": "https://api.github.com/users/merwok/orgs",
            "repos_url": "https://api.github.com/users/merwok/repos",
            "events_url": "https://api.github.com/users/merwok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/merwok/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-06-30T14:51:06Z",
          "updated_at": "2022-06-30T14:51:06Z",
          "author_association": "MEMBER",
          "body": "For next time, know that you can accept change suggestions into one commit \ud83d\ude42 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1171319630/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1179412489",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1179412489",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1179412489,
          "node_id": "IC_kwDOBN0Z8c5GTGgJ",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-08T22:44:56Z",
          "updated_at": "2022-07-08T22:44:56Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1179412489/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1179412643",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1179412643",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1179412643,
          "node_id": "IC_kwDOBN0Z8c5GTGij",
          "user": {
            "login": "brettcannon",
            "id": 54418,
            "node_id": "MDQ6VXNlcjU0NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brettcannon",
            "html_url": "https://github.com/brettcannon",
            "followers_url": "https://api.github.com/users/brettcannon/followers",
            "following_url": "https://api.github.com/users/brettcannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/brettcannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brettcannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brettcannon/subscriptions",
            "organizations_url": "https://api.github.com/users/brettcannon/orgs",
            "repos_url": "https://api.github.com/users/brettcannon/repos",
            "events_url": "https://api.github.com/users/brettcannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brettcannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": true
          },
          "created_at": "2022-07-08T22:45:27Z",
          "updated_at": "2022-07-08T22:45:27Z",
          "author_association": "MEMBER",
          "body": "Please note that `make patchcheck` is failing.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1179412643/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1179634473",
          "html_url": "https://github.com/python/cpython/pull/92517#issuecomment-1179634473",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/92517",
          "id": 1179634473,
          "node_id": "IC_kwDOBN0Z8c5GT8sp",
          "user": {
            "login": "zmievsa",
            "id": 17561586,
            "node_id": "MDQ6VXNlcjE3NTYxNTg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/17561586?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zmievsa",
            "html_url": "https://github.com/zmievsa",
            "followers_url": "https://api.github.com/users/zmievsa/followers",
            "following_url": "https://api.github.com/users/zmievsa/following{/other_user}",
            "gists_url": "https://api.github.com/users/zmievsa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zmievsa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zmievsa/subscriptions",
            "organizations_url": "https://api.github.com/users/zmievsa/orgs",
            "repos_url": "https://api.github.com/users/zmievsa/repos",
            "events_url": "https://api.github.com/users/zmievsa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zmievsa/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-07-10T01:33:31Z",
          "updated_at": "2022-07-10T01:33:31Z",
          "author_association": "CONTRIBUTOR",
          "body": "For some reason, test_ftplib fails for me.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1179634473/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/114059",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/114059/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/114059/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/114059/events",
      "html_url": "https://github.com/python/cpython/pull/114059",
      "id": 2080849487,
      "node_id": "PR_kwDOBN0Z8c5kB3Jq",
      "number": 114059,
      "title": "gh-114058: The Tier2 Optimizer",
      "user": {
        "login": "Fidget-Spinner",
        "id": 28750310,
        "node_id": "MDQ6VXNlcjI4NzUwMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fidget-Spinner",
        "html_url": "https://github.com/Fidget-Spinner",
        "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
        "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
        "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
        "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
        "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 666979871,
          "node_id": "MDU6TGFiZWw2NjY5Nzk4NzE=",
          "url": "https://api.github.com/repos/python/cpython/labels/awaiting%20core%20review",
          "name": "awaiting core review",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 54,
      "created_at": "2024-01-14T18:38:27Z",
      "updated_at": "2024-02-06T14:52:13Z",
      "closed_at": "2024-02-06T04:54:38Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/114059",
        "html_url": "https://github.com/python/cpython/pull/114059",
        "diff_url": "https://github.com/python/cpython/pull/114059.diff",
        "patch_url": "https://github.com/python/cpython/pull/114059.patch",
        "merged_at": null
      },
      "body": "Closes https://github.com/python/cpython/issues/114058\r\n\r\nThis PR turns on the optimizer for all uops. The tier 2 uops optimizer contains a few parts: the abstract interpreter, the IR, and the codegen.\r\n\r\nThe abstract interpreter does the following:\r\n- Value numbering for types (not on all expressions though, that is too expensive)\r\n- Type propagation\r\n- Constant propagation\r\n- Guard elimination\r\n- Poor man's loop invariant code motion for guards/loop duplication\r\n\r\nFunction inlining is left out for a future PR, as it's the most complex.\r\n\r\nAfter analysis of the bytecode and doing all of the above, it emits optimized uops, and passes that to the executor.\r\n\r\nWhen uops is enabled, **this passes the entire CPython test suite **. The significant milestone is that this is able to analyse and abstract interpret all CPython uops that we currently support. The other significant milestone is that this generates code that passes CPython's test suite.\r\n\r\nRefleak tests will fail as well, as they need a design overhaul.\r\n\r\nThe design of this PR is here https://github.com/Fidget-Spinner/cpython_optimization_notes/blob/main/3.13/uops_optimizer.md\r\n\r\nHigh level discussion here https://github.com/faster-cpython/ideas/issues/648.\r\n\r\n[0-2% faster on Linux, 3% faster on macOS ARM64](https://github.com/faster-cpython/benchmarking-public/tree/main/results/bm-20240129-3.13.0a3%2B-fcdc84c-PYTHON_UOPS)\r\n\r\n<!-- gh-issue-number: gh-114058 -->\r\n* Issue: gh-114058\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "Fidget-Spinner",
        "id": 28750310,
        "node_id": "MDQ6VXNlcjI4NzUwMzEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fidget-Spinner",
        "html_url": "https://github.com/Fidget-Spinner",
        "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
        "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
        "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
        "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
        "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/114059/reactions",
        "total_count": 2,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 1,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/114059/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1891036422",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1891036422",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1891036422,
          "node_id": "IC_kwDOBN0Z8c5wtu0G",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-14T18:39:27Z",
          "updated_at": "2024-01-14T18:39:27Z",
          "author_association": "MEMBER",
          "body": "Please give me some time to write out the proper docs explaining the abstract IR this uses.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1891036422/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1893875675",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1893875675",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1893875675,
          "node_id": "IC_kwDOBN0Z8c5w4j_b",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-16T14:36:40Z",
          "updated_at": "2024-01-16T14:36:40Z",
          "author_association": "MEMBER",
          "body": "All tests run with uops on now passes except for the following two:\r\n\r\n1. `test_capi` - there's one test that counts memory allocation, which obviously fails because my optimizer allocates memory. I think I'm just going to skip this test when -Xuops is detected.\r\n2. `test_ctypes` - this doesn't actually fail I just have no clue whether it passes because the linker on my system is broken.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1893875675/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1896406786",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1896406786",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1896406786,
          "node_id": "IC_kwDOBN0Z8c5xCN8C",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-17T18:33:32Z",
          "updated_at": "2024-01-17T18:33:32Z",
          "author_association": "MEMBER",
          "body": "> I think I'm just going to skip this test when -Xuops is detected.\r\n\r\nMaybe we should just fix the test? This sort of seems to be kicking the can down the road, since eventually tier 2 will be on by default.\r\n\r\nThere's a `without_optimizer` helper in `test.support`. We also have other ways of getting and setting optimizers in `_testinternalcapi` if we're in a subprocess or something (check out `test_opt.temporary_optimizer` for an example).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1896406786/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1897496052",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1897496052",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1897496052,
          "node_id": "IC_kwDOBN0Z8c5xGX30",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-17T23:45:43Z",
          "updated_at": "2024-01-17T23:45:43Z",
          "author_association": "MEMBER",
          "body": "[1% slower](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20240116-3.13.0a2%2B-0929bb8-PYTHON_UOPS/bm-20240116-darwin-arm64-Fidget%252dSpinner-tier2_abstract_inter-3.13.0a2%2B-0929bb8-vs-base.png) on macOS (other platforms aren't building right now). 8% reduction in traces executed, but [3% *increase*](https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20240116-3.13.0a2%2B-0929bb8-PYTHON_UOPS/bm-20240116-azure-x86_64-Fidget%252dSpinner-tier2_abstract_inter-3.13.0a2%2B-0929bb8-pystats-vs-base.md#optimization-tier-2-stats) in uops executed.\r\n\r\nPGO failure on Windows:\r\n\r\n<details>\r\n\r\n```\r\nRunning PGInstrument|x64 interpreter...\r\nUsing random seed: 1256678172\r\n0:00:00 Run 44 tests sequentially\r\n0:00:00 [ 1/44] test_array\r\n0:00:05 [ 2/44] test_base64\r\n0:00:07 load avg: 0.41 [ 3/44] test_binascii\r\n0:00:07 load avg: 0.41 [ 4/44] test_binop\r\n0:00:08 load avg: 0.41 [ 5/44] test_bisect\r\n0:00:08 load avg: 0.42 [ 6/44] test_bytes\r\n0:00:34 load avg: 0.50 [ 7/44] test_bz2\r\n0:00:40 load avg: 0.49 [ 8/44] test_cmath\r\n0:00:41 load avg: 0.48 [ 9/44] test_codecs\r\n0:00:52 load avg: 0.46 [10/44] test_collections\r\n0:01:03 load avg: 0.52 [11/44] test_complex\r\n0:01:04 load avg: 0.53 [12/44] test_dataclasses\r\n0:01:08 load avg: 0.56 [13/44] test_datetime\r\n0:01:18 load avg: 0.56 [14/44] test_decimal\r\n0:01:49 load avg: 0.61 [15/44] test_difflib -- test_decimal passed in 31.4 sec\r\n0:01:59 load avg: 0.60 [16/44] test_embed\r\n0:02:42 load avg: 0.33 [17/44] test_float -- test_embed passed in 42.7 sec\r\n0:02:43 load avg: 0.34 [18/44] test_fstring\r\n0:02:57 load avg: 0.34 [19/44] test_functools\r\nWindows fatal exception: stack overflow\r\n\r\nThread 0x00002f90 (most recent call first):\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\libregrtest\\win_utils.py\", line 43 in _update_load\r\n\r\nCurrent thread 0x000019dc (most recent call first):\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1[875](https://github.com/faster-cpython/benchmarking/actions/runs/7559538614/job/20583550792#step:10:876) in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  File \"C:\\actions-runner\\_work\\benchmarking\\benchmarking\\cpython\\Lib\\test\\test_functools.py\", line 1875 in fib\r\n  ...\r\n```\r\n\r\n</details>\r\n\r\nPGO failure on Linux:\r\n\r\n<details>\r\n\r\n```\r\n# Next, run the profile task to generate the profile information.\r\n./python -m test --pgo --timeout=\r\nUsing random seed: [1366](https://github.com/faster-cpython/benchmarking/actions/runs/7559538614/job/20583550197#step:10:1367)[1376](https://github.com/faster-cpython/benchmarking/actions/runs/7559538614/job/20583550197#step:10:1377)73\r\n0:00:00 load avg: 1.96 Run 44 tests sequentially\r\n0:00:00 load avg: 1.96 [ 1/44] test_array\r\n0:00:00 load avg: 1.89 [ 2/44] test_base64\r\n0:00:01 load avg: 1.89 [ 3/44] test_binascii\r\n0:00:01 load avg: 1.89 [ 4/44] test_binop\r\n0:00:01 load avg: 1.89 [ 5/44] test_bisect\r\n0:00:01 load avg: 1.89 [ 6/44] test_bytes\r\n0:00:05 load avg: 1.89 [ 7/44] test_bz2\r\n0:00:06 load avg: 1.82 [ 8/44] test_cmath\r\n0:00:06 load avg: 1.82 [ 9/44] test_codecs\r\nFatal Python error: Segmentation fault\r\n\r\nCurrent thread 0x00007fb926b78740 (most recent call first):\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/encodings/idna.py\", line 37 in nameprep\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/encodings/idna.py\", line 74 in ToASCII\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/encodings/idna.py\", line 142 in ToUnicode\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/encodings/idna.py\", line 222 in decode\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/test_codecs.py\", line 1561 in test_builtin_decode_length_limit\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/unittest/case.py\", line 589 in _callTestMethod\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/unittest/case.py\", line 636 in run\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/unittest/case.py\", line 692 in __call__\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/unittest/suite.py\", line 122 in run\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/unittest/suite.py\", line 84 in __call__\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/unittest/suite.py\", line 122 in run\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/unittest/suite.py\", line 84 in __call__\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/testresult.py\", line 146 in run\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/single.py\", line 57 in _run_suite\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/single.py\", line 37 in run_unittest\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/single.py\", line 132 in test_func\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/single.py\", line 88 in regrtest_runner\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/single.py\", line 135 in _load_run_test\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/single.py\", line 178 in _runtest_env_changed_exc\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/single.py\", line 278 in _runtest\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/single.py\", line 306 in run_single_test\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/main.py\", line 302 in run_test\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/main.py\", line 336 in run_tests_sequentially\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/main.py\", line 477 in _run_tests\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/main.py\", line 509 in run_tests\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/main.py\", line 672 in main\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/libregrtest/main.py\", line 680 in main\r\n  File \"/home/ddfun/actions-runner/_work/benchmarking/benchmarking/cpython/Lib/test/__main__.py\", line 2 in <module>\r\n  File \"<frozen runpy>\", line 88 in _run_code\r\n  File \"<frozen runpy>\", line 198 in _run_module_as_main\r\n\r\nExtension modules: _testcapi, _testinternalcapi (total: 2)\r\nSegmentation fault (core dumped)\r\n```\r\n\r\n</details>\r\n\r\nBoth look like recursion-related issues. The Windows one *may* be fixed on `main` as of yesterday.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1897496052/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1897863147",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1897863147",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1897863147,
          "node_id": "IC_kwDOBN0Z8c5xHxfr",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-18T06:08:54Z",
          "updated_at": "2024-01-18T06:08:54Z",
          "author_association": "MEMBER",
          "body": "Thanks Brandt. Seems like the slowdown is due to `bm_nbody`, and there's some serious pessimization there for some reason. The only way such a massive slowdown could happen IMO, is if the executors are constantly being discarded and re-optimized again, since optimization is now not completely free (not too sure, will take a look).\r\n\r\nLlike Mark said though, benchmark results aren't too important at the moment. Function inlining would be the most important optimization and that's missing from this PR, to be added in a future PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1897863147/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1899316124",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1899316124",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1899316124,
          "node_id": "IC_kwDOBN0Z8c5xNUOc",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-18T22:24:07Z",
          "updated_at": "2024-01-18T22:24:07Z",
          "author_association": "MEMBER",
          "body": "Nevertheless it would be wise to dig deeper into what goes on with bm_nbody. It may be an important canary. :-)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1899316124/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1901197887",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1901197887",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1901197887,
          "node_id": "IC_kwDOBN0Z8c5xUfo_",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-19T22:15:51Z",
          "updated_at": "2024-01-19T22:15:51Z",
          "author_association": "MEMBER",
          "body": "After fixing the problems:\r\n```rst\r\nAll benchmarks:\r\n===============\r\n\r\n+----------------+-----------+-----------------------+\r\n| Benchmark      | uops_main | uops_optimizer        |\r\n+================+===========+=======================+\r\n| deltablue      | 6.00 ms   | 5.48 ms: 1.09x faster |\r\n+----------------+-----------+-----------------------+\r\n| nbody          | 138 ms    | 123 ms: 1.13x faster  |\r\n+----------------+-----------+-----------------------+\r\n| raytrace       | 353 ms    | 341 ms: 1.03x faster  |\r\n+----------------+-----------+-----------------------+\r\n| Geometric mean | (ref)     | 1.08x faster          |\r\n+----------------+-----------+-----------------------+\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1901197887/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1901715005",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1901715005",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1901715005,
          "node_id": "IC_kwDOBN0Z8c5xWd49",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-20T03:31:02Z",
          "updated_at": "2024-01-20T03:32:40Z",
          "author_association": "MEMBER",
          "body": "The pyperformance benchmarks are somewhat confusing. Both macOS and Linux say 1.00x faster (ie no speedup), but one of the machines (pythonperf2) is 1.02x slower. https://github.com/faster-cpython/benchmarking-public/tree/main/results/bm-20240120-3.13.0a3%2B-27ce303-PYTHON_UOPS\r\n\r\nHowever, more impressively: `-24.4%` in `_GUARD_BOTH_INT`, `-15.7%` in `_GUARD_BOTH_FLOAT` https://github.com/faster-cpython/benchmarking-public/blob/main/results/bm-20240120-3.13.0a3%2B-27ce303-PYTHON_UOPS/bm-20240120-azure-x86_64-Fidget%252dSpinner-tier2_abstract_inter-3.13.0a3%2B-27ce303-pystats-vs-base.md#uop-execution-stats . Showing the type propagator is really working :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1901715005/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902216410",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902216410",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902216410,
          "node_id": "IC_kwDOBN0Z8c5xYYTa",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-20T18:15:39Z",
          "updated_at": "2024-01-20T18:15:39Z",
          "author_association": "MEMBER",
          "body": "AFAIK, this should now pass all tests, including refleaks.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902216410/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902239178",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902239178",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902239178,
          "node_id": "IC_kwDOBN0Z8c5xYd3K",
          "user": {
            "login": "brandtbucher",
            "id": 40968415,
            "node_id": "MDQ6VXNlcjQwOTY4NDE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/40968415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandtbucher",
            "html_url": "https://github.com/brandtbucher",
            "followers_url": "https://api.github.com/users/brandtbucher/followers",
            "following_url": "https://api.github.com/users/brandtbucher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandtbucher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandtbucher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandtbucher/subscriptions",
            "organizations_url": "https://api.github.com/users/brandtbucher/orgs",
            "repos_url": "https://api.github.com/users/brandtbucher/repos",
            "events_url": "https://api.github.com/users/brandtbucher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandtbucher/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-20T18:53:52Z",
          "updated_at": "2024-01-20T18:53:52Z",
          "author_association": "MEMBER",
          "body": "Wanna hardcode tier 2 on and hit it with buildbots after it passes CI? Then we can disable it again after it passes.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902239178/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902240165",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902240165",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902240165,
          "node_id": "IC_kwDOBN0Z8c5xYeGl",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-20T18:58:48Z",
          "updated_at": "2024-01-20T18:58:48Z",
          "author_association": "MEMBER",
          "body": "I'm not going to write the documentation here. I've added what I think needs to be said in the comments. The rest, I will add to the devguide after this is merged.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902240165/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902245167",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902245167",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902245167,
          "node_id": "IC_kwDOBN0Z8c5xYfUv",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-20T19:21:37Z",
          "updated_at": "2024-01-20T19:21:37Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @Fidget-Spinner for commit 7280281695af2e0f6ead7cf82b4bd3aeb6a887b9 :robot:\n\nIf you want to schedule another build, you need to add the <kbd>:hammer: test-with-buildbots</kbd> label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902245167/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902481624",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902481624",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902481624,
          "node_id": "IC_kwDOBN0Z8c5xZZDY",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-21T02:26:33Z",
          "updated_at": "2024-01-21T02:33:21Z",
          "author_association": "MEMBER",
          "body": "All tests except refleak tests pass (and one wasi test, not sure if that's already broken on main though). The refleak tests are nontrivial to fix. There are two problems:\r\n\r\n1. Currently on main we disable the optimizer for refleak tests. The main problem is that when we force enable uops, this doesn't pass over to subinterpreters and subprocesses. So this configuration isn't passed over to them. This causes the refleak tests to erroneously detect strong references created by the optimizer when tracing some other part of the test suite in a subprocess/subinterpreter.\r\n2. The optimizer, when enabled, can trace the test suite itself and create strong references while the test is executing. This results in the refleak counter being wrong as the before and after references don't match up.\r\n\r\nThe least invasive fix I can think of is to not force enable uops in the build of refleak tests machines are run. The other fix I can think of which should solve this completely is to propagate the uops value down to subprocesses/interpreters, and clear the optimizer before and after each refleak test.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902481624/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902484848",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902484848",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902484848,
          "node_id": "IC_kwDOBN0Z8c5xZZ1w",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-21T02:49:14Z",
          "updated_at": "2024-01-21T02:49:14Z",
          "author_association": "MEMBER",
          "body": "> The least invasive fix I can think of is to not force enable uops in the build of refleak tests machines are run. The other fix I can think of which should solve this completely is to propagate the uops value down to subprocesses/interpreters, and clear the optimizer before and after each refleak test.\r\n\r\nSome time last year Victor proposed a change to the test suite that would pass the uops flag down to subprocesses. I regret to say that I rejected his PR because it was a bit messy and I didn't need that functionality at the time. Now I can't find it (Victor is too prolific to easily find something like that). But I think that's the way to go. (What we do currently is horrible -- we have a one-line patch that just hardcodes uops on, see my uops-forever branch.)\r\n\r\nOne thing that's unclear to me from what you write -- does it look like your optimizer might be introducing a refleak, or is the problem simply that your changes cause the refleaks tests to fail because the uops flag is inconsistently propagated?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902484848/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902487535",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902487535",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902487535,
          "node_id": "IC_kwDOBN0Z8c5xZafv",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-21T03:10:43Z",
          "updated_at": "2024-01-21T03:10:43Z",
          "author_association": "MEMBER",
          "body": "> One thing that's unclear to me from what you write -- does it look like your optimizer might be introducing a refleak, or is the problem simply that your changes cause the refleaks tests to fail because the uops flag is inconsistently propagated?\n\nIt's the latter, and also with how the refleak hunter calculates refleaks. We need to clear executors on every refleak test run. We already clear the type cache and other caches on every run in the current test runner for that very same reason.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902487535/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902495830",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902495830",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902495830,
          "node_id": "IC_kwDOBN0Z8c5xZchW",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-21T04:11:01Z",
          "updated_at": "2024-01-21T04:11:01Z",
          "author_association": "MEMBER",
          "body": "> It's the latter, and also with how the refleak hunter calculates refleaks. We need to clear executors on every refleak test run. We already clear the type cache and other caches on every run in the current test runner for that very same reason.\r\n\r\nAh, the problem is that there is (yet) no way to hunt down all executors. There's no dedicated API for that and no registration data structure; and executors aren't GC types so they can't be found using the `gc` module either. (However, gh-114142 adds the latter.)\r\n\r\nThis has bugged us in the past, and we've \"solved\" it (again, I think with Victor's help) by forcing the creation of new code objects. Example: https://github.com/python/cpython/blob/b04c5005cc9bd04052075077f7b33beca5edf43d/Lib/test/test_capi/test_opt.py#L53-L57. I think this works because the code object is deallocated when the test method returns, whereas if you use a regular nested function, the inner function's code object is kept alive as long as the outer method lives, which (for a method of a toplevel class like this) is until the module is destroyed.\r\n\r\nDid you add new tests that cause this issue, or is it a new problem for existing tests? (Not sure if that question makes sense.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902495830/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902496545",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902496545",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902496545,
          "node_id": "IC_kwDOBN0Z8c5xZcsh",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-21T04:16:45Z",
          "updated_at": "2024-01-21T04:16:45Z",
          "author_association": "MEMBER",
          "body": "> Did you add new tests that cause this issue, or is it a new problem for existing tests? (Not sure if that question makes sense.)\r\n\r\nI added functionality that exposes the issue - I made it so that executors can hold strong references to constants. This is needed so that constant propagated values don't suddenly evaporate, which borrowed references will cause. We can also just clear the optimizer outright on every refleak test run, since that will by proxy clear the executors as well.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902496545/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902512392",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902512392",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902512392,
          "node_id": "IC_kwDOBN0Z8c5xZgkI",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-21T05:01:43Z",
          "updated_at": "2024-01-21T05:01:43Z",
          "author_association": "MEMBER",
          "body": "> I added functionality that exposes the issue - I made it so that executors can hold strong references to constants. This is needed so that constant propagated values don't suddenly evaporate, which borrowed references will cause. We can also just clear the optimizer outright on every refleak test run, since that will by proxy clear the executors as well.\r\n\r\nThen maybe making executors GC objects (like in gh-114142, but with a traversal function that follows the referenced constants) might be the solution?\r\n\r\nI'm not sure how clearing the optimizer would clear the executors, unless you mean that if the optimizer is None, no executors will ever be created?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902512392/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902525645",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902525645",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902525645,
          "node_id": "IC_kwDOBN0Z8c5xZjzN",
          "user": {
            "login": "Fidget-Spinner",
            "id": 28750310,
            "node_id": "MDQ6VXNlcjI4NzUwMzEw",
            "avatar_url": "https://avatars.githubusercontent.com/u/28750310?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Fidget-Spinner",
            "html_url": "https://github.com/Fidget-Spinner",
            "followers_url": "https://api.github.com/users/Fidget-Spinner/followers",
            "following_url": "https://api.github.com/users/Fidget-Spinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/Fidget-Spinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Fidget-Spinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Fidget-Spinner/subscriptions",
            "organizations_url": "https://api.github.com/users/Fidget-Spinner/orgs",
            "repos_url": "https://api.github.com/users/Fidget-Spinner/repos",
            "events_url": "https://api.github.com/users/Fidget-Spinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Fidget-Spinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-21T06:03:42Z",
          "updated_at": "2024-01-21T06:03:42Z",
          "author_association": "MEMBER",
          "body": "\n> I'm not sure how clearing the optimizer would clear the executors, unless you mean that if the optimizer is None, no executors will ever be created?\n\nI was under the impression that the old optimizer is decrefed when a new one is set, and it will be discarded if we hold no references to it.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902525645/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1902530482",
          "html_url": "https://github.com/python/cpython/pull/114059#issuecomment-1902530482",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/114059",
          "id": 1902530482,
          "node_id": "IC_kwDOBN0Z8c5xZk-y",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-01-21T06:34:45Z",
          "updated_at": "2024-01-21T06:34:45Z",
          "author_association": "MEMBER",
          "body": "> I was under the impression that the old optimizer is decrefed when a new one is set, and it will be discarded if we hold no references to it.\r\n\r\nYeah, but the optimizer doesn\u2019t \u201cown\u201d the executors. The code objects do.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1902530482/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/132451",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/132451/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/132451/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/132451/events",
      "html_url": "https://github.com/python/cpython/pull/132451",
      "id": 2990650420,
      "node_id": "PR_kwDOBN0Z8c6SXN9K",
      "number": 132451,
      "title": "gh-131591: Allow pdb to attach to a running process",
      "user": {
        "login": "godlygeek",
        "id": 29423,
        "node_id": "MDQ6VXNlcjI5NDIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/godlygeek",
        "html_url": "https://github.com/godlygeek",
        "followers_url": "https://api.github.com/users/godlygeek/followers",
        "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
        "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
        "organizations_url": "https://api.github.com/users/godlygeek/orgs",
        "repos_url": "https://api.github.com/users/godlygeek/repos",
        "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/godlygeek/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 35,
      "created_at": "2025-04-12T18:59:38Z",
      "updated_at": "2025-04-25T00:43:26Z",
      "closed_at": "2025-04-25T00:43:23Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/132451",
        "html_url": "https://github.com/python/cpython/pull/132451",
        "diff_url": "https://github.com/python/cpython/pull/132451.diff",
        "patch_url": "https://github.com/python/cpython/pull/132451.patch",
        "merged_at": "2025-04-25T00:43:23Z"
      },
      "body": "Initial proof-of-concept and design. This is lacking tests and documentation, but otherwise works well, and it would be very helpful if anyone interested can try it out!\r\n\r\nIt has been tested on macOS and Linux, though not yet on Windows.\r\n\r\n<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\ngh-NNNNNN: Summary of the changes made\r\n```\r\n\r\nWhere: gh-NNNNNN refers to the GitHub issue number.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `main`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, for example: [3.13].\r\n\r\nGH-NNNNNN refers to the PR number from `main`.\r\n\r\n-->\r\n\n\n<!-- gh-issue-number: gh-131591 -->\n* Issue: gh-131591\n<!-- /gh-issue-number -->\n",
      "closed_by": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/132451/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 1,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/132451/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2798957186",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2798957186",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2798957186,
          "node_id": "IC_kwDOBN0Z8c6m1LKC",
          "user": {
            "login": "godlygeek",
            "id": 29423,
            "node_id": "MDQ6VXNlcjI5NDIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/godlygeek",
            "html_url": "https://github.com/godlygeek",
            "followers_url": "https://api.github.com/users/godlygeek/followers",
            "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
            "organizations_url": "https://api.github.com/users/godlygeek/orgs",
            "repos_url": "https://api.github.com/users/godlygeek/repos",
            "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/godlygeek/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-12T19:02:19Z",
          "updated_at": "2025-04-21T02:26:29Z",
          "author_association": "CONTRIBUTOR",
          "body": "Oh, one missing feature: this doesn't currently send a SIGINT to the PID when the client gets a ctrl-c.\r\n\r\nThat shouldn't be tough to add, at least for Linux and macOS - I'm not sure if something equivalent is doable on Windows or not?\r\n\r\nEDIT: This has been implemented in a way that works for all platforms.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2798957186/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2799041431",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2799041431",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2799041431,
          "node_id": "IC_kwDOBN0Z8c6m1fuX",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-12T21:14:34Z",
          "updated_at": "2025-04-12T21:14:34Z",
          "author_association": "MEMBER",
          "body": "CC @gaogaotiantian ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2799041431/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2799042100",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2799042100",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2799042100,
          "node_id": "IC_kwDOBN0Z8c6m1f40",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-12T21:16:36Z",
          "updated_at": "2025-04-12T21:20:27Z",
          "author_association": "MEMBER",
          "body": "@gaogaotiantian as promised this is the remote PDB initial implementation. Let\u2019s try to get it ready for beta freeze \ud83e\udd18\r\n\r\nI suggest to try to get the basics landed first so we can iterate in parallel between all of us instead of dying on this PR",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2799042100/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2801890129",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2801890129",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2801890129,
          "node_id": "IC_kwDOBN0Z8c6nAXNR",
          "user": {
            "login": "gaogaotiantian",
            "id": 13121107,
            "node_id": "MDQ6VXNlcjEzMTIxMTA3",
            "avatar_url": "https://avatars.githubusercontent.com/u/13121107?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaogaotiantian",
            "html_url": "https://github.com/gaogaotiantian",
            "followers_url": "https://api.github.com/users/gaogaotiantian/followers",
            "following_url": "https://api.github.com/users/gaogaotiantian/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaogaotiantian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaogaotiantian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaogaotiantian/subscriptions",
            "organizations_url": "https://api.github.com/users/gaogaotiantian/orgs",
            "repos_url": "https://api.github.com/users/gaogaotiantian/repos",
            "events_url": "https://api.github.com/users/gaogaotiantian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaogaotiantian/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-14T14:24:05Z",
          "updated_at": "2025-04-14T14:24:05Z",
          "author_association": "MEMBER",
          "body": "I agree that we should merge the basic stuff in first. It's a relatively long PR so I'll need some time :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2801890129/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2802048694",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2802048694",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2802048694,
          "node_id": "IC_kwDOBN0Z8c6nA962",
          "user": {
            "login": "pablogsal",
            "id": 11718525,
            "node_id": "MDQ6VXNlcjExNzE4NTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pablogsal",
            "html_url": "https://github.com/pablogsal",
            "followers_url": "https://api.github.com/users/pablogsal/followers",
            "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
            "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
            "organizations_url": "https://api.github.com/users/pablogsal/orgs",
            "repos_url": "https://api.github.com/users/pablogsal/repos",
            "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pablogsal/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-14T15:13:19Z",
          "updated_at": "2025-04-14T15:13:19Z",
          "author_association": "MEMBER",
          "body": "> I agree that we should merge the basic stuff in first. It's a relatively long PR so I'll need some time :)\r\n\r\nFeel free to push to the PR if you have small nits or thinks like that to avoid review roundtripping",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2802048694/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2810594812",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2810594812",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2810594812,
          "node_id": "IC_kwDOBN0Z8c6nhkX8",
          "user": {
            "login": "Zheaoli",
            "id": 7054676,
            "node_id": "MDQ6VXNlcjcwNTQ2NzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7054676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Zheaoli",
            "html_url": "https://github.com/Zheaoli",
            "followers_url": "https://api.github.com/users/Zheaoli/followers",
            "following_url": "https://api.github.com/users/Zheaoli/following{/other_user}",
            "gists_url": "https://api.github.com/users/Zheaoli/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Zheaoli/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Zheaoli/subscriptions",
            "organizations_url": "https://api.github.com/users/Zheaoli/orgs",
            "repos_url": "https://api.github.com/users/Zheaoli/repos",
            "events_url": "https://api.github.com/users/Zheaoli/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Zheaoli/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-16T19:47:56Z",
          "updated_at": "2025-04-16T19:48:31Z",
          "author_association": "CONTRIBUTOR",
          "body": "To be honest, I think the TCP socket here is not good for the user. Here's the detail\r\n\r\nFor now, we use `closing(socket.create_server((\"localhost\", 0)))` to allocate a random port from the system. This means that the port can be a common port used by other services, like 3000, 9432, 9092, etc. So the service may can not bootup when the debug process has existed and the people may don't know why(I think we don't have documentation for this behavior yet)\r\n\r\nSo I think we may need to allow people setup a port allocate range to avoid the common port usage range.\r\n\r\nBut here's a better way to do this. Maybe we can let people choose to use the Unix Domain Socket(aka UDS) or the TCP Socket. For now, most of the OS platform has supported the UDS  (even if Windows since 17063), So we can use UDS first and fallback to TCP if the OS platform not support UDS yet)\r\n\r\ncc @gaogaotiantian \r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2810594812/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2810684582",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2810684582",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2810684582,
          "node_id": "IC_kwDOBN0Z8c6nh6Sm",
          "user": {
            "login": "godlygeek",
            "id": 29423,
            "node_id": "MDQ6VXNlcjI5NDIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/godlygeek",
            "html_url": "https://github.com/godlygeek",
            "followers_url": "https://api.github.com/users/godlygeek/followers",
            "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
            "organizations_url": "https://api.github.com/users/godlygeek/orgs",
            "repos_url": "https://api.github.com/users/godlygeek/repos",
            "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/godlygeek/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-16T20:24:47Z",
          "updated_at": "2025-04-16T20:24:47Z",
          "author_association": "CONTRIBUTOR",
          "body": "> For now, we use `closing(socket.create_server((\"localhost\", 0)))` to allocate a random port from the system. This means that the port can be a common port used by other services, like 3000, 9432, 9092, etc.\r\n\r\n> So I think we may need to allow people setup a port allocate range to avoid the common port usage range.\r\n\r\nThe common port range is avoided automatically on every operating system I know of.\r\n\r\n[POSIX says](https://pubs.opengroup.org/onlinepubs/9799919799/basedefs/netinet_in.h.html):\r\n\r\n> If the `sin_port` value passed to [bind()](https://pubs.opengroup.org/onlinepubs/9799919799/functions/bind.html) is zero, the port number bound to the socket shall be one chosen by the implementation from an implementation-defined port range to produce an unused local address.\r\n\r\n[On Linux that implementation-defined port range is configurable](https://www.man7.org/linux/man-pages/man7/ip.7.html) via /proc/sys/net/ipv4/ip_local_port_range but [the default range](https://github.com/torvalds/linux/blob/c62f4b82d57155f35befb5c8bbae176614b87623/Documentation/networking/ip-sysctl.rst#ip-variables) is 32768 to 60999.\r\n\r\n[On Windows the port range is 49152 to 65535](https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-bind).\r\n\r\nI'm having trouble finding official docs for macOS, but [StackOverflow says](https://stackoverflow.com/questions/46023485/what-is-the-range-of-ephemeral-ports-on-mac) that it's configurable like on Linux, with a default range of 49152 to 65535.\r\n\r\n> So the service may can not bootup when the debug process has existed and the people may don't know why\r\n\r\nStatically configuring a service to start on a port that's allocated to the pool of ephemeral ports is incorrect. The configuration should be corrected, rather than assuming that no other software on the machine ever uses the widely portable feature of supplying `bind()` with `0` as the port.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2810684582/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2810729351",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2810729351",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2810729351,
          "node_id": "IC_kwDOBN0Z8c6niFOH",
          "user": {
            "login": "Zheaoli",
            "id": 7054676,
            "node_id": "MDQ6VXNlcjcwNTQ2NzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7054676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Zheaoli",
            "html_url": "https://github.com/Zheaoli",
            "followers_url": "https://api.github.com/users/Zheaoli/followers",
            "following_url": "https://api.github.com/users/Zheaoli/following{/other_user}",
            "gists_url": "https://api.github.com/users/Zheaoli/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Zheaoli/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Zheaoli/subscriptions",
            "organizations_url": "https://api.github.com/users/Zheaoli/orgs",
            "repos_url": "https://api.github.com/users/Zheaoli/repos",
            "events_url": "https://api.github.com/users/Zheaoli/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Zheaoli/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-16T20:44:12Z",
          "updated_at": "2025-04-16T20:54:48Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Statically configuring a service to start on a port that's allocated to the pool of ephemeral ports is incorrect. The configuration should be corrected, rather than assuming that no other software on the machine ever uses the widely portable feature of supplying `bind()` with `0` as the port.\r\n\r\nThis is correct, I agree with your idea. But my concern is the different Linux distro may have different default local port range out of box. If we still use TCP rather than the UDS, I think we may need mention this behavior on the documentation.\r\n\r\nBut in my side, I think the random server port is not a common usage for socket programming. When we try to communicate between the processes, UDS should be a better way to reach the target. It's more effective and nor more port conflict\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2810729351/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2814301909",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2814301909",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2814301909,
          "node_id": "IC_kwDOBN0Z8c6nvtbV",
          "user": {
            "login": "gaogaotiantian",
            "id": 13121107,
            "node_id": "MDQ6VXNlcjEzMTIxMTA3",
            "avatar_url": "https://avatars.githubusercontent.com/u/13121107?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaogaotiantian",
            "html_url": "https://github.com/gaogaotiantian",
            "followers_url": "https://api.github.com/users/gaogaotiantian/followers",
            "following_url": "https://api.github.com/users/gaogaotiantian/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaogaotiantian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaogaotiantian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaogaotiantian/subscriptions",
            "organizations_url": "https://api.github.com/users/gaogaotiantian/orgs",
            "repos_url": "https://api.github.com/users/gaogaotiantian/repos",
            "events_url": "https://api.github.com/users/gaogaotiantian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaogaotiantian/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-18T01:30:58Z",
          "updated_at": "2025-04-18T01:30:58Z",
          "author_association": "MEMBER",
          "body": "Okay I tried to read the protocol for interact and breakpoint commands. Here are my thoughts.\r\n\r\nI think the protocol could be simpler and easier to maintain if we reuse more of the existing structure of pdb. We can't fully mimic a stdin/stdout because that could be difficult to parse, but I don't think we need to make the state of pdb controllable from both client and server. I don't think the client needs to send different commands for \"interact\", \"commands\" and \"breakpoint commands\" (which is very unfortunate because it's called `commands` in pdb but `commands` is used in the protocol for normal pdb commands).\r\n\r\nI think `RemotePdb` should be the only object that maintains the state, and it tells PdbClient what state it's in - either \"normal\"? (there might be a better word for it), \"interact\" or \"commands\". That should be an enum string that's sent through `prompt` protocol - it's possible we have more in the future, they'll all be a kind of states and we have a single source of truth.\r\n\r\nThen, with the `prompt` protocol, the server sends this information to the client, and the client display prompts based on the mode (I don't even know if `prompt` itself is needed, might be). The client should only listen to the server about what the current state is, and behave solely based on that.\r\n\r\nIn order to do this, we need to give the client the capability to send \"control signals\" to server, mainly `EOF` and `KeyboardInterrupt` - we need a separate prototol keyword for it. This could unify the bahavior on remote pdb. For example, the `commands` command actually stops from `Ctrl+D` - it's not obvious, but try it out.\r\n\r\nI believe with this protocol, we can do minimum changes to make `commands` work - not on the client side, but on server side. We shouldn't need to duplicate all the parsing loops on the client side. The client side should almost only do - listen, display, send what user types (or control signal), and listen again.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2814301909/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2814333259",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2814333259",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2814333259,
          "node_id": "IC_kwDOBN0Z8c6nv1FL",
          "user": {
            "login": "godlygeek",
            "id": 29423,
            "node_id": "MDQ6VXNlcjI5NDIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/godlygeek",
            "html_url": "https://github.com/godlygeek",
            "followers_url": "https://api.github.com/users/godlygeek/followers",
            "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
            "organizations_url": "https://api.github.com/users/godlygeek/orgs",
            "repos_url": "https://api.github.com/users/godlygeek/repos",
            "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/godlygeek/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-18T01:51:29Z",
          "updated_at": "2025-04-18T01:51:29Z",
          "author_association": "CONTRIBUTOR",
          "body": "> We shouldn't need to duplicate all the parsing loops on the client side.\r\n\r\nI agree with much of what you said above, but we do need the client-side parsing loops if we want to support true multi-line editing (the ability to press the up arrow to edit a previously typed but not yet executed line).\r\n\r\nI realize that PDB doesn't have that feature today, but it _should_ have that feature (its absence is conspicuous when comparing PDB to pyrepl), and I don't want to design remote PDB in a way that makes it difficult to add true multi-line editing to PDB.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2814333259/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2814339225",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2814339225",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2814339225,
          "node_id": "IC_kwDOBN0Z8c6nv2iZ",
          "user": {
            "login": "gaogaotiantian",
            "id": 13121107,
            "node_id": "MDQ6VXNlcjEzMTIxMTA3",
            "avatar_url": "https://avatars.githubusercontent.com/u/13121107?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaogaotiantian",
            "html_url": "https://github.com/gaogaotiantian",
            "followers_url": "https://api.github.com/users/gaogaotiantian/followers",
            "following_url": "https://api.github.com/users/gaogaotiantian/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaogaotiantian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaogaotiantian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaogaotiantian/subscriptions",
            "organizations_url": "https://api.github.com/users/gaogaotiantian/orgs",
            "repos_url": "https://api.github.com/users/gaogaotiantian/repos",
            "events_url": "https://api.github.com/users/gaogaotiantian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaogaotiantian/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-18T01:57:23Z",
          "updated_at": "2025-04-18T01:57:23Z",
          "author_association": "MEMBER",
          "body": "I don't think multi-line editing conflicts with what I proposed. multi-line editing does not change the state (mode) of the debugger. It's okay to collect multiple lines and send it to the server together. I'm not saying we should get rid of all the parsing code on client side. `commands` does not need any multi-line support, that's my target. Also, multi-line support should not require client side to change mode (on it, instead of sending data to server and listen to what the server has changed).\r\n\r\nWe can have multi-line support on client side, but we should not need to distinguish between `interact` and `normal`.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2814339225/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2814354589",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2814354589",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2814354589,
          "node_id": "IC_kwDOBN0Z8c6nv6Sd",
          "user": {
            "login": "godlygeek",
            "id": 29423,
            "node_id": "MDQ6VXNlcjI5NDIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/godlygeek",
            "html_url": "https://github.com/godlygeek",
            "followers_url": "https://api.github.com/users/godlygeek/followers",
            "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
            "organizations_url": "https://api.github.com/users/godlygeek/orgs",
            "repos_url": "https://api.github.com/users/godlygeek/repos",
            "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/godlygeek/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-18T02:08:39Z",
          "updated_at": "2025-04-18T02:08:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "> We can have multi-line support on client side, but we should not need to distinguish between `interact` and `normal`.\r\n\r\nWe need to distinguish between them because the mode distinguishes whether\r\n```text\r\nhelp (\r\n```\r\nis a complete command or not:\r\n```text\r\n(Pdb) help (\r\n*** No help for '('\r\n(Pdb) interact\r\n*pdb interact start*\r\n>>> help (\r\n... \r\n```\r\nIn one case it's a complete single-line PDB command that needs to be sent to the server for execution, and in the other it's the first line of a multi-line Python expression that needs multi-line editing client-side.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2814354589/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2814878366",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2814878366",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2814878366,
          "node_id": "IC_kwDOBN0Z8c6nx6Ke",
          "user": {
            "login": "godlygeek",
            "id": 29423,
            "node_id": "MDQ6VXNlcjI5NDIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/godlygeek",
            "html_url": "https://github.com/godlygeek",
            "followers_url": "https://api.github.com/users/godlygeek/followers",
            "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
            "organizations_url": "https://api.github.com/users/godlygeek/orgs",
            "repos_url": "https://api.github.com/users/godlygeek/repos",
            "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/godlygeek/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-18T08:07:25Z",
          "updated_at": "2025-04-18T08:07:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "Ok, thinking about this a bit, if we want the client to be able to have multi line editing but we don't want the client to need to do any parsing, the server needs to tell the client whether or not what's in its buffer is a complete command.\n\nThat means exactly the same logic as my current version, but moved from the client to the server, with a request the client can use to call it. And it seems like if we ever want to support multi line editing for regular non remote PDB, it will also need exactly the same logic, and it will be easy to put this code in a function shared by remote PDB and regular PDB.\n\nBut... There's some downsides to moving this server side. First, for a five line code block, we'd send just the first line, then just the first and second, then just the first and second and third, etc - this scales with n^2. If a user pastes a 100 line triple quoted string literal, we'd send around 5000 lines over the socket in 100 separate network requests by the time the statement was complete. Second, this will introduce extra typing latency that users might notice. There might be a noticeable delay between the user pressing enter and remote PDB showing a continuation prompt, which would be annoying. And it could take arbitrarily long (especially if some native thread in the remote process picks up the GIL!), and that delay could happen for each line of a multi line command. And if the user types faster than we can get the server to do this check for us, they might starting typing line n+1 before we've printed the continuation prompt for it... We could fix that, but not until we actually have proper multi line editing using terminal control sequences for fine grained control over what's being displayed.\n\nIf I'm right that in a multi line editing world both remote PDB and regular PDB will need exactly this function, then we can share it between the two equally easily regardless of whether remote PDB does it on the client or server side. The advantage of doing it client side is less latency and less network IO. The advantage of doing it server side is that the client and server will be using the same revision of that function, and so necessarily agree on what is and isn't a complete command, and there's no chance for them to fall out of sync and have the server waiting for more input while the client thinks it has sent everything. And another advantage of doing it server side is that the full list of pdb commands, including aliases, would no longer need to be sent to the client in order for it to determine whether something is or isn't a pdb command.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2814878366/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2815664148",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2815664148",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2815664148,
          "node_id": "IC_kwDOBN0Z8c6n06AU",
          "user": {
            "login": "gaogaotiantian",
            "id": 13121107,
            "node_id": "MDQ6VXNlcjEzMTIxMTA3",
            "avatar_url": "https://avatars.githubusercontent.com/u/13121107?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaogaotiantian",
            "html_url": "https://github.com/gaogaotiantian",
            "followers_url": "https://api.github.com/users/gaogaotiantian/followers",
            "following_url": "https://api.github.com/users/gaogaotiantian/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaogaotiantian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaogaotiantian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaogaotiantian/subscriptions",
            "organizations_url": "https://api.github.com/users/gaogaotiantian/orgs",
            "repos_url": "https://api.github.com/users/gaogaotiantian/repos",
            "events_url": "https://api.github.com/users/gaogaotiantian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaogaotiantian/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-18T15:37:04Z",
          "updated_at": "2025-04-18T15:37:04Z",
          "author_association": "MEMBER",
          "body": "> Ok, thinking about this a bit, if we want the client to be able to have multi line editing but we don't want the client to need to do any parsing, the server needs to tell the client whether or not what's in its buffer is a complete command.\r\n\r\nMaybe I was not clear about my statement. We can allow multi-line check on client-side, I'm okay with that. I'm trying to eliminate three things:\r\n\r\n1. Multiple protocol keys (`{\"interact\": lines}`, `{\"commands\": lines}` and potential `{\"breakpoint_commands\": lines}` if we want to do the following). I think they can be combined because they are just lines - the server should know what it's dealing with.\r\n2. Parsing breakpoint commands on client. Not interpreter multi-line thing, just the breakpoint commands, because this has some real issues (and has a lot of duplicated code).\r\n3. Two-way sync of the current state (whether it's in interpreter mode or pdb mode, etc.). Let me be clear - the client knows if it's working on an interpreter command or a pdb command, from the server. It simply can't change that by itself (because that requires duplicated logic on client about end condition). Say we do a `Ctrl+D` on client side, instead of changing from interpreter to pdb and notify server that the mode has changed, we should tell server \"hey Ctrl+D is pressed\". Then the server should deal with it (an `EOFError` should be raised), the internal state (mode) is changed on the server, and the server sends a `prompt` message to the client so the client knows the mode has changed.\r\n\r\nThis way the client always knows the state (mode), but it's only synced from server - it's a one way street. I want this because there could be multiple ways to switch between states (Ctrl+C, Ctrl+D, `end`, `SystemExit` ...) and we don't want to duplicate all the logic on the client. So we let the server decide.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2815664148/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2815698279",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2815698279",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2815698279,
          "node_id": "IC_kwDOBN0Z8c6n1CVn",
          "user": {
            "login": "godlygeek",
            "id": 29423,
            "node_id": "MDQ6VXNlcjI5NDIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/godlygeek",
            "html_url": "https://github.com/godlygeek",
            "followers_url": "https://api.github.com/users/godlygeek/followers",
            "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
            "organizations_url": "https://api.github.com/users/godlygeek/orgs",
            "repos_url": "https://api.github.com/users/godlygeek/repos",
            "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/godlygeek/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-18T16:00:43Z",
          "updated_at": "2025-04-18T16:00:43Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Maybe I was not clear about my statement. We can allow multi-line check on client-side, I'm okay with that. I'm trying to eliminate three things:\r\n\r\nOK, yep. I'm on board with eliminating all of those. I'll take a swing at it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2815698279/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2815811336",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2815811336",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2815811336,
          "node_id": "IC_kwDOBN0Z8c6n1d8I",
          "user": {
            "login": "chris-eibl",
            "id": 138194463,
            "node_id": "U_kgDOCDyuHw",
            "avatar_url": "https://avatars.githubusercontent.com/u/138194463?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chris-eibl",
            "html_url": "https://github.com/chris-eibl",
            "followers_url": "https://api.github.com/users/chris-eibl/followers",
            "following_url": "https://api.github.com/users/chris-eibl/following{/other_user}",
            "gists_url": "https://api.github.com/users/chris-eibl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chris-eibl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chris-eibl/subscriptions",
            "organizations_url": "https://api.github.com/users/chris-eibl/orgs",
            "repos_url": "https://api.github.com/users/chris-eibl/repos",
            "events_url": "https://api.github.com/users/chris-eibl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chris-eibl/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-18T16:33:00Z",
          "updated_at": "2025-04-18T16:33:00Z",
          "author_association": "MEMBER",
          "body": "> It has been tested on macOS and Linux, though not yet on Windows.\r\n\r\nFirst of all, thank you all for making this happen \ud83e\udd47 \r\n\r\nI had a stab on it on Windows: after fixing the \"startup\" issue I mentioned above (which fails right after attaching, so no debugging possible at all), I could do all the common things (step, next, continue, break, call stack, look at variables, etc) \ud83d\ude80 \r\n\r\nI haven't done an extensive debug session, yet, but I'll happily report back if I encounter any other issues.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2815811336/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2817303556",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2817303556",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2817303556,
          "node_id": "IC_kwDOBN0Z8c6n7KQE",
          "user": {
            "login": "Zheaoli",
            "id": 7054676,
            "node_id": "MDQ6VXNlcjcwNTQ2NzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7054676?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Zheaoli",
            "html_url": "https://github.com/Zheaoli",
            "followers_url": "https://api.github.com/users/Zheaoli/followers",
            "following_url": "https://api.github.com/users/Zheaoli/following{/other_user}",
            "gists_url": "https://api.github.com/users/Zheaoli/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Zheaoli/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Zheaoli/subscriptions",
            "organizations_url": "https://api.github.com/users/Zheaoli/orgs",
            "repos_url": "https://api.github.com/users/Zheaoli/repos",
            "events_url": "https://api.github.com/users/Zheaoli/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Zheaoli/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-20T19:19:42Z",
          "updated_at": "2025-04-20T19:19:42Z",
          "author_association": "CONTRIBUTOR",
          "body": "I have a question when I review this PR again this weekend. what will happen if the target process has been paused and the debug process has been exited un-normally(For example,`kill -9 ` by other user, or oom-killed by system, or segement fault)? The target process will pause forever?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2817303556/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2817378584",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2817378584",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2817378584,
          "node_id": "IC_kwDOBN0Z8c6n7ckY",
          "user": {
            "login": "godlygeek",
            "id": 29423,
            "node_id": "MDQ6VXNlcjI5NDIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/godlygeek",
            "html_url": "https://github.com/godlygeek",
            "followers_url": "https://api.github.com/users/godlygeek/followers",
            "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
            "organizations_url": "https://api.github.com/users/godlygeek/orgs",
            "repos_url": "https://api.github.com/users/godlygeek/repos",
            "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/godlygeek/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-20T23:01:33Z",
          "updated_at": "2025-04-20T23:01:33Z",
          "author_association": "CONTRIBUTOR",
          "body": "> The target process will pause forever?\r\n\r\nNo, the `readline()` that it's blocked in will return an EOF due to the socket connection being broken, and it will handle that broken connection by detaching and continuing.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2817378584/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2817381481",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2817381481",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2817381481,
          "node_id": "IC_kwDOBN0Z8c6n7dRp",
          "user": {
            "login": "godlygeek",
            "id": 29423,
            "node_id": "MDQ6VXNlcjI5NDIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/godlygeek",
            "html_url": "https://github.com/godlygeek",
            "followers_url": "https://api.github.com/users/godlygeek/followers",
            "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
            "organizations_url": "https://api.github.com/users/godlygeek/orgs",
            "repos_url": "https://api.github.com/users/godlygeek/repos",
            "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/godlygeek/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-20T23:09:34Z",
          "updated_at": "2025-04-20T23:09:34Z",
          "author_association": "CONTRIBUTOR",
          "body": "@gaogaotiantian I believe I've addressed all of the review comments about the protocol, versioning, and missing features. Please take another look.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2817381481/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2822739752",
          "html_url": "https://github.com/python/cpython/pull/132451#issuecomment-2822739752",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/132451",
          "id": 2822739752,
          "node_id": "IC_kwDOBN0Z8c6oP5co",
          "user": {
            "login": "godlygeek",
            "id": 29423,
            "node_id": "MDQ6VXNlcjI5NDIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/godlygeek",
            "html_url": "https://github.com/godlygeek",
            "followers_url": "https://api.github.com/users/godlygeek/followers",
            "following_url": "https://api.github.com/users/godlygeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/godlygeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/godlygeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/godlygeek/subscriptions",
            "organizations_url": "https://api.github.com/users/godlygeek/orgs",
            "repos_url": "https://api.github.com/users/godlygeek/repos",
            "events_url": "https://api.github.com/users/godlygeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/godlygeek/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-22T23:58:05Z",
          "updated_at": "2025-04-22T23:58:05Z",
          "author_association": "CONTRIBUTOR",
          "body": "> However, I don't think a better test framework or even better tests should block us from merging this is. We should try out best in tests and we can improve it in the future.\r\n\r\nLet's leave better tests out of this for now, if it's OK with you. I've got a few hundred lines of tests in another branch that do quite a good job of exercising the `_PdbClient` class, but I don't want to add them to this PR that we've already got so much discussion on and make it harder to get the feature landed (and get more people trying it out!). Once we land this PR, I'll open another for iterating on the tests.\r\n\r\n> Also I think integration test framework should not be difficult (it might be slow). You just need to spawn a target process, spawn a pdb attacing process with some commands, and get the stdout from pdb process - then check it.\r\n\r\nIf you can write a few tests showing the structure that you'd like, I can pick up the work of following the pattern to add more.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2822739752/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/1933",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/1933/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/1933/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/1933/events",
      "html_url": "https://github.com/python/cpython/pull/1933",
      "id": 233387489,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MTIzODUxOTM2",
      "number": 1933,
      "title": "bpo-25910: Link redirections in docs",
      "user": {
        "login": "CuriousLearner",
        "id": 8039608,
        "node_id": "MDQ6VXNlcjgwMzk2MDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CuriousLearner",
        "html_url": "https://github.com/CuriousLearner",
        "followers_url": "https://api.github.com/users/CuriousLearner/followers",
        "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
        "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
        "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
        "repos_url": "https://api.github.com/users/CuriousLearner/repos",
        "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 667924166,
          "node_id": "MDU6TGFiZWw2Njc5MjQxNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/skip%20news",
          "name": "skip news",
          "color": "000000",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 30,
      "created_at": "2017-06-03T18:37:38Z",
      "updated_at": "2018-12-06T07:03:01Z",
      "closed_at": "2018-01-20T00:25:38Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/1933",
        "html_url": "https://github.com/python/cpython/pull/1933",
        "diff_url": "https://github.com/python/cpython/pull/1933.diff",
        "patch_url": "https://github.com/python/cpython/pull/1933.patch",
        "merged_at": "2018-01-20T00:25:38Z"
      },
      "body": "This is a Work in Progress PR to address link fixes in documentation.\r\n\r\nI intend to address url redirection issues in this PR.\r\n\r\nPlease let me know what changes are needed in this. Thanks!\r\n\n\n<!-- issue-number: bpo-25910 -->\nhttps://bugs.python.org/issue25910\n<!-- /issue-number -->\n",
      "closed_by": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/1933/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/1933/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/305993515",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-305993515",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 305993515,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTk5MzUxNQ==",
          "user": {
            "login": "mention-bot",
            "id": 15710697,
            "node_id": "MDQ6VXNlcjE1NzEwNjk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/15710697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mention-bot",
            "html_url": "https://github.com/mention-bot",
            "followers_url": "https://api.github.com/users/mention-bot/followers",
            "following_url": "https://api.github.com/users/mention-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/mention-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mention-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mention-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/mention-bot/orgs",
            "repos_url": "https://api.github.com/users/mention-bot/repos",
            "events_url": "https://api.github.com/users/mention-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mention-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-06-03T18:37:41Z",
          "updated_at": "2017-06-03T18:37:41Z",
          "author_association": "NONE",
          "body": "@CuriousLearner, thanks for your PR! By analyzing the history of the files in this pull request, we identified @birkenfeld, @serhiy-storchaka, @ncoghlan and @tiran to be potential reviewers.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/305993515/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/306035261",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-306035261",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 306035261,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjAzNTI2MQ==",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-06-04T11:48:42Z",
          "updated_at": "2017-06-04T11:48:42Z",
          "author_association": "MEMBER",
          "body": "Please fix all similar issues.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/306035261/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/306035327",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-306035327",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 306035327,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjAzNTMyNw==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-06-04T11:50:13Z",
          "updated_at": "2017-06-04T11:50:13Z",
          "author_association": "MEMBER",
          "body": "@serhiy-storchaka sure, on it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/306035327/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/306035440",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-306035440",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 306035440,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjAzNTQ0MA==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-06-04T11:52:18Z",
          "updated_at": "2017-06-04T11:52:18Z",
          "author_association": "MEMBER",
          "body": "@serhiy-storchaka in the `linkchecker/output.txt` there were many redirection to `/latest` urls. Should I remove those changes all together? since I've introduced some of them in this PR.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/306035440/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/306036038",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-306036038",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 306036038,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjAzNjAzOA==",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-06-04T12:04:43Z",
          "updated_at": "2017-06-04T12:04:43Z",
          "author_association": "MEMBER",
          "body": "If the web-server returns the HTTP code in the range 3XX except 301 (Moved Permanently) or 308 (Permanent Redirect), we should keep the original link. For www.pypa.io the code 302 (Found) is returned.\r\n\r\nI think it is better to remove all additions of `/en/latest/` if the stripped links are working.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/306036038/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/306160291",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-306160291",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 306160291,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjE2MDI5MQ==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-06-05T10:53:13Z",
          "updated_at": "2017-06-05T10:53:13Z",
          "author_association": "MEMBER",
          "body": "Hi @serhiy-storchaka!\r\n\r\nI've tried to resolve all the issues with redirection of links.\r\n\r\nHowever I've a concern:\r\n    - All the links pointing to github (that are build automatically) are permanently redirected from `https://github.com/python/cpython/tree/master/*` to `https://github.com/python/cpython/blob/master/*`\r\n\r\nShould we fix these in this PR?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/306160291/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/306205376",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-306205376",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 306205376,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjIwNTM3Ng==",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-06-05T14:42:24Z",
          "updated_at": "2017-06-05T14:42:24Z",
          "author_association": "MEMBER",
          "body": "> Should we fix these in this PR?\r\n\r\nNot in this PR. If there are reasons for using `*/blob/*` liinks, this should be made in a tool that automatically generates links.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/306205376/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/306245185",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-306245185",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 306245185,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjI0NTE4NQ==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-06-05T17:06:35Z",
          "updated_at": "2017-06-05T17:06:35Z",
          "author_association": "MEMBER",
          "body": "Hi @serhiy-storchaka I've done the changes. Also, for the other half, I've tried to do similar changes. Can you please have a look now?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/306245185/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/308079773",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-308079773",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 308079773,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMwODA3OTc3Mw==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-06-13T10:52:35Z",
          "updated_at": "2017-06-13T10:52:35Z",
          "author_association": "MEMBER",
          "body": "@serhiy-storchaka Can you please take a look here once?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/308079773/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/317252278",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-317252278",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 317252278,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI1MjI3OA==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-07-23T13:13:30Z",
          "updated_at": "2017-07-23T13:13:30Z",
          "author_association": "MEMBER",
          "body": "Hey @serhiy-storchaka ,\r\n\r\nJust wanted to ping you to know if it would be possible for you to take a look here once.\r\n\r\nThanks :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/317252278/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/317741049",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-317741049",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 317741049,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzc0MTA0OQ==",
          "user": {
            "login": "marco-buttu",
            "id": 3822393,
            "node_id": "MDQ6VXNlcjM4MjIzOTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3822393?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marco-buttu",
            "html_url": "https://github.com/marco-buttu",
            "followers_url": "https://api.github.com/users/marco-buttu/followers",
            "following_url": "https://api.github.com/users/marco-buttu/following{/other_user}",
            "gists_url": "https://api.github.com/users/marco-buttu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marco-buttu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marco-buttu/subscriptions",
            "organizations_url": "https://api.github.com/users/marco-buttu/orgs",
            "repos_url": "https://api.github.com/users/marco-buttu/repos",
            "events_url": "https://api.github.com/users/marco-buttu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marco-buttu/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-07-25T13:42:35Z",
          "updated_at": "2017-07-25T13:42:35Z",
          "author_association": "CONTRIBUTOR",
          "body": " @CuriousLearner and @serhiy-storchaka, does this pull request aim to fix only link redirections, as the title says?  Because in your first message you wrote: \"*This is a Work in Progress PR to address link fixes in documentation*\", and also [bpo-25910](http://bugs.python.org/issue25910) is focusing on *Fixing links in documentation*, so the goal is not clear to me.  I am asking because if this PR wants to fix all documentation links, than we have to close #2765 .",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/317741049/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/318975231",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-318975231",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 318975231,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMxODk3NTIzMQ==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-07-31T05:57:02Z",
          "updated_at": "2017-07-31T05:57:02Z",
          "author_association": "MEMBER",
          "body": "Hey @marco-buttu ,\r\n\r\nI was working on all link issues that are captured by `make linkcheck` command under `Doc` directory. We're not including the links which are concerned with implementation details and license file for now. ( Waiting for the bug to be updated to properly update those link). Also, covering this as suggested by @serhiy-storchaka  in https://github.com/python/cpython/pull/1933#issuecomment-306036038\r\n\r\nThanks",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/318975231/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/319017606",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-319017606",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 319017606,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTAxNzYwNg==",
          "user": {
            "login": "serhiy-storchaka",
            "id": 3659035,
            "node_id": "MDQ6VXNlcjM2NTkwMzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3659035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serhiy-storchaka",
            "html_url": "https://github.com/serhiy-storchaka",
            "followers_url": "https://api.github.com/users/serhiy-storchaka/followers",
            "following_url": "https://api.github.com/users/serhiy-storchaka/following{/other_user}",
            "gists_url": "https://api.github.com/users/serhiy-storchaka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serhiy-storchaka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serhiy-storchaka/subscriptions",
            "organizations_url": "https://api.github.com/users/serhiy-storchaka/orgs",
            "repos_url": "https://api.github.com/users/serhiy-storchaka/repos",
            "events_url": "https://api.github.com/users/serhiy-storchaka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serhiy-storchaka/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-07-31T09:35:20Z",
          "updated_at": "2017-07-31T09:35:20Z",
          "author_association": "MEMBER",
          "body": "Sorry, this is large PR which requires much time and attention for reviewing. I'll make a review in few days.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/319017606/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/321280413",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-321280413",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 321280413,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTI4MDQxMw==",
          "user": {
            "login": "jamesfe",
            "id": 3836461,
            "node_id": "MDQ6VXNlcjM4MzY0NjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3836461?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesfe",
            "html_url": "https://github.com/jamesfe",
            "followers_url": "https://api.github.com/users/jamesfe/followers",
            "following_url": "https://api.github.com/users/jamesfe/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesfe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesfe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesfe/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesfe/orgs",
            "repos_url": "https://api.github.com/users/jamesfe/repos",
            "events_url": "https://api.github.com/users/jamesfe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesfe/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-08-09T14:54:57Z",
          "updated_at": "2017-08-09T14:54:57Z",
          "author_association": "CONTRIBUTOR",
          "body": "Feel free to pull my commits into yours if it will make things easier - then we can consolidate a bit: https://github.com/python/cpython/pull/2765 ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/321280413/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/337697780",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-337697780",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 337697780,
          "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzY5Nzc4MA==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-10-18T19:12:05Z",
          "updated_at": "2017-10-18T19:12:05Z",
          "author_association": "MEMBER",
          "body": "Hey @serhiy-storchaka !\r\n\r\nPlease review this when you have some time :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/337697780/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/348218038",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-348218038",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 348218038,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODIxODAzOA==",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-11-30T15:15:46Z",
          "updated_at": "2017-11-30T15:15:46Z",
          "author_association": "MEMBER",
          "body": "For such large PR, I suggest to split it into smaller PR. For example, extract changes to only replace HTTP with HTTPS: as Serhiy wrote, such change is easy to check and is ok.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/348218038/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/348686617",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-348686617",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 348686617,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODY4NjYxNw==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-12-02T11:43:31Z",
          "updated_at": "2017-12-02T11:43:31Z",
          "author_association": "MEMBER",
          "body": "@vstinner I've extracted the changes and split them in a separate PR.\r\n\r\nAfter that is merged in, I'll rebase this branch with the latest changes.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/348686617/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/351247943",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-351247943",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 351247943,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTI0Nzk0Mw==",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-12-13T01:08:21Z",
          "updated_at": "2017-12-13T01:08:21Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/351247943/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/351469631",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-351469631",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 351469631,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ2OTYzMQ==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-12-13T17:52:09Z",
          "updated_at": "2017-12-13T17:52:09Z",
          "author_association": "MEMBER",
          "body": "@vstinner Apart from the links that await suggestion form others, I've updated the PR.\r\n\r\nI will update the rest, once we have reply from others :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/351469631/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/352192475",
          "html_url": "https://github.com/python/cpython/pull/1933#issuecomment-352192475",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/1933",
          "id": 352192475,
          "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjE5MjQ3NQ==",
          "user": {
            "login": "CuriousLearner",
            "id": 8039608,
            "node_id": "MDQ6VXNlcjgwMzk2MDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8039608?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/CuriousLearner",
            "html_url": "https://github.com/CuriousLearner",
            "followers_url": "https://api.github.com/users/CuriousLearner/followers",
            "following_url": "https://api.github.com/users/CuriousLearner/following{/other_user}",
            "gists_url": "https://api.github.com/users/CuriousLearner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/CuriousLearner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CuriousLearner/subscriptions",
            "organizations_url": "https://api.github.com/users/CuriousLearner/orgs",
            "repos_url": "https://api.github.com/users/CuriousLearner/repos",
            "events_url": "https://api.github.com/users/CuriousLearner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/CuriousLearner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2017-12-16T16:05:38Z",
          "updated_at": "2017-12-16T16:05:38Z",
          "author_association": "MEMBER",
          "body": "I've just run `make linkcheck` again to check more issues like this. I will update the PR once that is done. :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/352192475/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/116413",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/116413/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/116413/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/116413/events",
      "html_url": "https://github.com/python/cpython/pull/116413",
      "id": 2171605902,
      "node_id": "PR_kwDOBN0Z8c5o2E72",
      "number": 116413,
      "title": "gh-111997: C-API for signalling monitoring events",
      "user": {
        "login": "iritkatriel",
        "id": 1055913,
        "node_id": "MDQ6VXNlcjEwNTU5MTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/iritkatriel",
        "html_url": "https://github.com/iritkatriel",
        "followers_url": "https://api.github.com/users/iritkatriel/followers",
        "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
        "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
        "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
        "repos_url": "https://api.github.com/users/iritkatriel/repos",
        "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 69,
      "created_at": "2024-03-06T14:11:07Z",
      "updated_at": "2024-05-19T14:33:09Z",
      "closed_at": "2024-05-04T08:23:50Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/116413",
        "html_url": "https://github.com/python/cpython/pull/116413",
        "diff_url": "https://github.com/python/cpython/pull/116413.diff",
        "patch_url": "https://github.com/python/cpython/pull/116413.patch",
        "merged_at": "2024-05-04T08:23:50Z"
      },
      "body": "\n\n<!-- gh-issue-number: gh-111997 -->\n* Issue: gh-111997\n<!-- /gh-issue-number -->\n",
      "closed_by": {
        "login": "iritkatriel",
        "id": 1055913,
        "node_id": "MDQ6VXNlcjEwNTU5MTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/iritkatriel",
        "html_url": "https://github.com/iritkatriel",
        "followers_url": "https://api.github.com/users/iritkatriel/followers",
        "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
        "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
        "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
        "repos_url": "https://api.github.com/users/iritkatriel/repos",
        "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/116413/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/116413/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1991079363",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-1991079363",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 1991079363,
          "node_id": "IC_kwDOBN0Z8c52rXXD",
          "user": {
            "login": "iritkatriel",
            "id": 1055913,
            "node_id": "MDQ6VXNlcjEwNTU5MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iritkatriel",
            "html_url": "https://github.com/iritkatriel",
            "followers_url": "https://api.github.com/users/iritkatriel/followers",
            "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
            "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
            "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
            "repos_url": "https://api.github.com/users/iritkatriel/repos",
            "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-12T08:58:37Z",
          "updated_at": "2024-03-12T08:58:37Z",
          "author_association": "MEMBER",
          "body": "> Do I understand correctly that the CodeLike type is expected to be provided by user code?\r\n\r\nI think we should provide CodeLike in some form, but for now I put it in the text file so we can talk about how and where we want it to be.  The offset to location mapping should also be part of this.\r\n\r\n> I don't see why this public API should live in an internal header file. And why the underscore names? We only use(d) them for non-public functions.\r\n\r\n@markshannon did you intend for these to be private?\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1991079363/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1991113939",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-1991113939",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 1991113939,
          "node_id": "IC_kwDOBN0Z8c52rfzT",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-12T09:12:24Z",
          "updated_at": "2024-03-12T09:12:24Z",
          "author_association": "MEMBER",
          "body": "> @markshannon did you intend for these to be private?\r\n\r\nMy thinking was that it is better to keep any function private unless we need it to be public. It sounds like they need to be public.\r\n\r\nHow about this?\r\n\r\n* The declaration of the implementation function,  `_PyMonitoring_FirePyStartEvent()`, goes in the semi-private `cpython/` folder.\r\n* We expose an inline function calling for the unstable API and a non-inline one for the stable API in the public header.\r\n\r\nSomething like this:\r\n```C\r\n#ifndef Py_LIMITED_API\r\nstatic inline int\r\nPyMonitoring_FirePyStartEvent(PyMonitoringState *state, PyObject *codelike, uint32_t offset)\r\n{\r\n    if (state->active)\r\n        return _PyMonitoring_FirePyStartEvent(state, codelike, offset);\r\n    else\r\n        return 0;\r\n}\r\n#else\r\nextern int\r\nPyMonitoring_FirePyStartEvent(PyMonitoringState *state, PyObject *codelike, uint32_t offset);\r\n#endif\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1991113939/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1991200472",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-1991200472",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 1991200472,
          "node_id": "IC_kwDOBN0Z8c52r07Y",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-12T09:46:50Z",
          "updated_at": "2024-03-12T09:46:50Z",
          "author_association": "MEMBER",
          "body": "The \"code like\" object is entirely opaque to the monitoring machinery. As far as it is concerned, a location is a pair of an object and an integer index.\r\nDebuggers, profilers, etc need to present that object, int as a meaningful location. If the object is a code object, they can already do that using `co.co_filename` and `co.co_positions()`.\r\nThe point of a \"code like\" object is to provide the necessary interface for tools (debuggers, profilers, etc) to turn `object, int` into a meaningful source location.\r\n\r\nSo, no C struct, but a Python abstract base class.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1991200472/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2003636272",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2003636272",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2003636272,
          "node_id": "IC_kwDOBN0Z8c53bRAw",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-18T11:14:43Z",
          "updated_at": "2024-03-18T11:14:43Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nWhen you're done making the requested changes, leave the comment: `I have made the requested changes; please review again`.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2003636272/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2006925932",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2006925932",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2006925932,
          "node_id": "IC_kwDOBN0Z8c53n0Js",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-19T11:24:02Z",
          "updated_at": "2024-03-19T11:24:02Z",
          "author_association": "MEMBER",
          "body": "In case my earlier comments were a bit cryptic:\r\n\r\n* The `active` field should only be modified by the VM, so tests will need to call `set_events` before and after the recording run.\r\n* The Python API provided by `_testcapi` should be as thin a layer as possible around the underlying C function.\r\n* It may help the tests to implement a `tp_call` function that calls `PyMonitoring_BeginScope`, then fires events.\r\n\r\nFinally, maybe we should add a `PyMonitoring_ExitScope`, as it would allow the VM to track the current code-like object?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2006925932/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2007010563",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2007010563",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2007010563,
          "node_id": "IC_kwDOBN0Z8c53oI0D",
          "user": {
            "login": "iritkatriel",
            "id": 1055913,
            "node_id": "MDQ6VXNlcjEwNTU5MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iritkatriel",
            "html_url": "https://github.com/iritkatriel",
            "followers_url": "https://api.github.com/users/iritkatriel/followers",
            "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
            "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
            "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
            "repos_url": "https://api.github.com/users/iritkatriel/repos",
            "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-19T12:06:57Z",
          "updated_at": "2024-03-19T12:06:57Z",
          "author_association": "MEMBER",
          "body": "> Finally, maybe we should add a `PyMonitoring_ExitScope`, as it would allow the VM to track the current code-like object?\r\n\r\nWhat do you mean by track?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2007010563/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2007439490",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2007439490",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2007439490,
          "node_id": "IC_kwDOBN0Z8c53pxiC",
          "user": {
            "login": "iritkatriel",
            "id": 1055913,
            "node_id": "MDQ6VXNlcjEwNTU5MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iritkatriel",
            "html_url": "https://github.com/iritkatriel",
            "followers_url": "https://api.github.com/users/iritkatriel/followers",
            "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
            "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
            "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
            "repos_url": "https://api.github.com/users/iritkatriel/repos",
            "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-19T15:06:35Z",
          "updated_at": "2024-03-19T15:06:35Z",
          "author_association": "MEMBER",
          "body": "When you're done making the requested changes, leave the comment: I have made the requested changes; please review again.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2007439490/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2007439953",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2007439953",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2007439953,
          "node_id": "IC_kwDOBN0Z8c53pxpR",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-19T15:06:41Z",
          "updated_at": "2024-03-19T15:06:41Z",
          "author_association": "NONE",
          "body": "Thanks for making the requested changes!\n\n@markshannon: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2007439953/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2007800871",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2007800871",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2007800871,
          "node_id": "IC_kwDOBN0Z8c53rJwn",
          "user": {
            "login": "markshannon",
            "id": 9448417,
            "node_id": "MDQ6VXNlcjk0NDg0MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9448417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markshannon",
            "html_url": "https://github.com/markshannon",
            "followers_url": "https://api.github.com/users/markshannon/followers",
            "following_url": "https://api.github.com/users/markshannon/following{/other_user}",
            "gists_url": "https://api.github.com/users/markshannon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markshannon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markshannon/subscriptions",
            "organizations_url": "https://api.github.com/users/markshannon/orgs",
            "repos_url": "https://api.github.com/users/markshannon/repos",
            "events_url": "https://api.github.com/users/markshannon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markshannon/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-19T17:52:57Z",
          "updated_at": "2024-03-19T17:52:57Z",
          "author_association": "MEMBER",
          "body": "> What do you mean by track?\r\n\r\nStash on the thread state or in the frame stack, perhaps.\r\nThe idea being that the \"code-like\" object can be displayed in tracebacks and the like.\r\nNothing may come of this, but we can't add it after `PyMonitoring_BeginScope` is added to the API, and it would add symmetry.\r\n   ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2007800871/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2012227984",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2012227984",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2012227984,
          "node_id": "IC_kwDOBN0Z8c538CmQ",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-21T12:59:14Z",
          "updated_at": "2024-03-21T12:59:14Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nWhen you're done making the requested changes, leave the comment: `I have made the requested changes; please review again`.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2012227984/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2012418496",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2012418496",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2012418496,
          "node_id": "IC_kwDOBN0Z8c538xHA",
          "user": {
            "login": "iritkatriel",
            "id": 1055913,
            "node_id": "MDQ6VXNlcjEwNTU5MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iritkatriel",
            "html_url": "https://github.com/iritkatriel",
            "followers_url": "https://api.github.com/users/iritkatriel/followers",
            "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
            "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
            "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
            "repos_url": "https://api.github.com/users/iritkatriel/repos",
            "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-21T14:17:33Z",
          "updated_at": "2024-03-21T14:17:33Z",
          "author_association": "MEMBER",
          "body": "I have made the requested changes; please review again.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2012418496/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2012418709",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2012418709",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2012418709,
          "node_id": "IC_kwDOBN0Z8c538xKV",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-21T14:17:38Z",
          "updated_at": "2024-03-21T14:17:38Z",
          "author_association": "NONE",
          "body": "Thanks for making the requested changes!\n\n@markshannon: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2012418709/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2022706511",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2022706511",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2022706511,
          "node_id": "IC_kwDOBN0Z8c54kA1P",
          "user": {
            "login": "encukou",
            "id": 302922,
            "node_id": "MDQ6VXNlcjMwMjkyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/encukou",
            "html_url": "https://github.com/encukou",
            "followers_url": "https://api.github.com/users/encukou/followers",
            "following_url": "https://api.github.com/users/encukou/following{/other_user}",
            "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
            "organizations_url": "https://api.github.com/users/encukou/orgs",
            "repos_url": "https://api.github.com/users/encukou/repos",
            "events_url": "https://api.github.com/users/encukou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/encukou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-27T12:58:34Z",
          "updated_at": "2024-03-27T12:58:34Z",
          "author_association": "MEMBER",
          "body": "This is a very big addition to the limited API & stable ABI. Does it need to be added there?\r\nEven if it is, I recommend that the initial pull request only adds it to public C API (in `Include/cpython/`, with the `#include` guarded in `#ifndef Py_LIMITED_API`, like here: https://github.com/python/cpython/blob/b3e8c78ed7aa9bbd1084375587b99200c687cec9/Include/object.h#L1211-L1215).\r\n\r\nNote that `Include/cpython/` isn't \u201csemi-private\u201d. It's a place to put declarations guarded by `#ifndef Py_LIMITED_API`.\r\n\r\nThe tiers of the C API are described in https://devguide.python.org/developer-workflow/c-api/\r\n\r\nI'm confused by having both `PyMonitoring_EnterScope` and `PyUnstable_Monitoring_EnterScope`. I don't see a reason to add a function to both the limited and unstable tier. Pick one, based on how long you want to support the API.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2022706511/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2022993553",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2022993553",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2022993553,
          "node_id": "IC_kwDOBN0Z8c54lG6R",
          "user": {
            "login": "iritkatriel",
            "id": 1055913,
            "node_id": "MDQ6VXNlcjEwNTU5MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iritkatriel",
            "html_url": "https://github.com/iritkatriel",
            "followers_url": "https://api.github.com/users/iritkatriel/followers",
            "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
            "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
            "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
            "repos_url": "https://api.github.com/users/iritkatriel/repos",
            "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-27T14:58:49Z",
          "updated_at": "2024-03-27T14:58:49Z",
          "author_association": "MEMBER",
          "body": "> I'm confused by having both `PyMonitoring_EnterScope` and `PyUnstable_Monitoring_EnterScope`.\r\n\r\nThe Unstable one is optimized (\r\n\r\n> I'm confused by having both `PyMonitoring_EnterScope` and `PyUnstable_Monitoring_EnterScope`. I don't see a reason to add a function to both the limited and unstable tier. Pick one, based on how long you want to support the API.\r\n\r\nIt wasn't necessary for EnterScope/ExitScope, I removed those. We still have the two versions for the Fire*Event functions, the Unstable one is faster.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2022993553/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2022999883",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2022999883",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2022999883,
          "node_id": "IC_kwDOBN0Z8c54lIdL",
          "user": {
            "login": "iritkatriel",
            "id": 1055913,
            "node_id": "MDQ6VXNlcjEwNTU5MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iritkatriel",
            "html_url": "https://github.com/iritkatriel",
            "followers_url": "https://api.github.com/users/iritkatriel/followers",
            "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
            "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
            "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
            "repos_url": "https://api.github.com/users/iritkatriel/repos",
            "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-27T15:01:44Z",
          "updated_at": "2024-03-27T15:01:44Z",
          "author_association": "MEMBER",
          "body": "> This is a very big addition to the limited API & stable ABI. Does it need to be added there? \r\n\r\nI've been wondering too. Should we keep this simpler and more contained for now?\r\n@markshannon, @scoder ?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2022999883/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2023020222",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2023020222",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2023020222,
          "node_id": "IC_kwDOBN0Z8c54lNa-",
          "user": {
            "login": "encukou",
            "id": 302922,
            "node_id": "MDQ6VXNlcjMwMjkyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/encukou",
            "html_url": "https://github.com/encukou",
            "followers_url": "https://api.github.com/users/encukou/followers",
            "following_url": "https://api.github.com/users/encukou/following{/other_user}",
            "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
            "organizations_url": "https://api.github.com/users/encukou/orgs",
            "repos_url": "https://api.github.com/users/encukou/repos",
            "events_url": "https://api.github.com/users/encukou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/encukou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-27T15:10:41Z",
          "updated_at": "2024-03-27T15:10:41Z",
          "author_association": "MEMBER",
          "body": "If you don't include this in the stable ABI, there'll be no need for the `PyUnstable_` versions.\r\n\r\nIf you do, you still only need one name: choose the implementation based whether the user is compiling for the stable ABI. (But again, I recommend adding to stable ABI this in a later commit, if at all.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2023020222/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2023936166",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2023936166",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2023936166,
          "node_id": "IC_kwDOBN0Z8c54otCm",
          "user": {
            "login": "scoder",
            "id": 491659,
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/scoder",
            "html_url": "https://github.com/scoder",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-27T20:34:20Z",
          "updated_at": "2024-03-27T20:34:20Z",
          "author_association": "CONTRIBUTOR",
          "body": "> This is a very big addition to the limited API & stable ABI. Does it need to be added there?\n\nIt's functionality that is not otherwise available. Given that it was never usable in the Limited API so far, we'd stay with the status quo that profiling, debugging and coverage-testing non-Python code are not possible there.\n\nI don't think that's desirable, but for debugging and coverage, it might be acceptable to compile and run them *outside* of the Limited API. For profiling, it'd be annoying but possible at least for Cython users to resort to native profilers. They wouldn't give you source level profiling, but would still hint at the right code spots.\n\nAt least, since these are developer features rather than end user features, adding them in a later Limited API release would allow many developers (those who can rebuild their dependencies from sources) to make use of them directly in that version, without having to wait for their minimum supported stable ABI to catch up on end user side.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2023936166/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2031926451",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2031926451",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2031926451,
          "node_id": "IC_kwDOBN0Z8c55HLyz",
          "user": {
            "login": "iritkatriel",
            "id": 1055913,
            "node_id": "MDQ6VXNlcjEwNTU5MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iritkatriel",
            "html_url": "https://github.com/iritkatriel",
            "followers_url": "https://api.github.com/users/iritkatriel/followers",
            "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
            "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
            "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
            "repos_url": "https://api.github.com/users/iritkatriel/repos",
            "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-02T12:34:45Z",
          "updated_at": "2024-04-02T12:34:45Z",
          "author_association": "MEMBER",
          "body": "@scoder @encukou @markshannon   I removed the limited API part, so now we just have the inlined version. Can we all agree on this?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2031926451/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2036695408",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2036695408",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2036695408,
          "node_id": "IC_kwDOBN0Z8c55ZYFw",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-04T09:41:28Z",
          "updated_at": "2024-04-04T09:41:28Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nWhen you're done making the requested changes, leave the comment: `I have made the requested changes; please review again`.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2036695408/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2036920609",
          "html_url": "https://github.com/python/cpython/pull/116413#issuecomment-2036920609",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/116413",
          "id": 2036920609,
          "node_id": "IC_kwDOBN0Z8c55aPEh",
          "user": {
            "login": "iritkatriel",
            "id": 1055913,
            "node_id": "MDQ6VXNlcjEwNTU5MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1055913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iritkatriel",
            "html_url": "https://github.com/iritkatriel",
            "followers_url": "https://api.github.com/users/iritkatriel/followers",
            "following_url": "https://api.github.com/users/iritkatriel/following{/other_user}",
            "gists_url": "https://api.github.com/users/iritkatriel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iritkatriel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iritkatriel/subscriptions",
            "organizations_url": "https://api.github.com/users/iritkatriel/orgs",
            "repos_url": "https://api.github.com/users/iritkatriel/repos",
            "events_url": "https://api.github.com/users/iritkatriel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iritkatriel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-04T11:31:41Z",
          "updated_at": "2024-04-04T11:31:41Z",
          "author_association": "MEMBER",
          "body": "I have made the requested changes; please review again.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2036920609/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/11784",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/11784/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/11784/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/11784/events",
      "html_url": "https://github.com/python/cpython/pull/11784",
      "id": 407855585,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjUxMjM1NDQ2",
      "number": 11784,
      "title": "bpo-35934: Add socket.create_server() utility function",
      "user": {
        "login": "giampaolo",
        "id": 681260,
        "node_id": "MDQ6VXNlcjY4MTI2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/giampaolo",
        "html_url": "https://github.com/giampaolo",
        "followers_url": "https://api.github.com/users/giampaolo/followers",
        "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
        "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
        "organizations_url": "https://api.github.com/users/giampaolo/orgs",
        "repos_url": "https://api.github.com/users/giampaolo/repos",
        "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/giampaolo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871772,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzI=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-feature",
          "name": "type-feature",
          "color": "006b75",
          "default": false,
          "description": "A feature request or enhancement"
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 48,
      "created_at": "2019-02-07T19:17:08Z",
      "updated_at": "2019-04-08T23:41:58Z",
      "closed_at": "2019-04-08T22:34:02Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/11784",
        "html_url": "https://github.com/python/cpython/pull/11784",
        "diff_url": "https://github.com/python/cpython/pull/11784.diff",
        "patch_url": "https://github.com/python/cpython/pull/11784.patch",
        "merged_at": "2019-04-08T22:34:02Z"
      },
      "body": "<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\n```\r\n\r\nWhere: bpo-NNNN refers to the issue number in the https://bugs.python.org.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `master`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `master`.\r\n\r\n-->\r\n\n\n<!-- issue-number: [bpo-35934](https://bugs.python.org/issue35934) -->\nhttps://bugs.python.org/issue35934\n<!-- /issue-number -->\n",
      "closed_by": {
        "login": "giampaolo",
        "id": 681260,
        "node_id": "MDQ6VXNlcjY4MTI2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/giampaolo",
        "html_url": "https://github.com/giampaolo",
        "followers_url": "https://api.github.com/users/giampaolo/followers",
        "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
        "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
        "organizations_url": "https://api.github.com/users/giampaolo/orgs",
        "repos_url": "https://api.github.com/users/giampaolo/repos",
        "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/giampaolo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/11784/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/11784/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463278311",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463278311",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463278311,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzI3ODMxMQ==",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-13T16:56:23Z",
          "updated_at": "2019-02-13T16:56:23Z",
          "author_association": "MEMBER",
          "body": "On a side note we might want a similar function for UNIX sockets that can take care of removing leftover files etc.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463278311/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463448842",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463448842",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463448842,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ0ODg0Mg==",
          "user": {
            "login": "giampaolo",
            "id": 681260,
            "node_id": "MDQ6VXNlcjY4MTI2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/giampaolo",
            "html_url": "https://github.com/giampaolo",
            "followers_url": "https://api.github.com/users/giampaolo/followers",
            "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
            "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
            "organizations_url": "https://api.github.com/users/giampaolo/orgs",
            "repos_url": "https://api.github.com/users/giampaolo/repos",
            "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/giampaolo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T01:33:19Z",
          "updated_at": "2019-02-14T01:35:50Z",
          "author_association": "CONTRIBUTOR",
          "body": "> On a side note we might want a similar function for UNIX sockets that can take care of removing leftover files etc.\r\n\r\nYes, I tend to agree. `multiprocessing` module and different unit-tests could also benefit from it. Still unsure about `socketserver` module. IMO the same rationale of \"automating all the typical steps needed when creating a server socket\" which applies to `bind_socket()` also applies to UNIX sockets. I will file a separate ticket for that.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463448842/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463450285",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463450285",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463450285,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ1MDI4NQ==",
          "user": {
            "login": "njsmith",
            "id": 609896,
            "node_id": "MDQ6VXNlcjYwOTg5Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/609896?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/njsmith",
            "html_url": "https://github.com/njsmith",
            "followers_url": "https://api.github.com/users/njsmith/followers",
            "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
            "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
            "organizations_url": "https://api.github.com/users/njsmith/orgs",
            "repos_url": "https://api.github.com/users/njsmith/repos",
            "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
            "received_events_url": "https://api.github.com/users/njsmith/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T01:40:24Z",
          "updated_at": "2019-02-14T01:40:24Z",
          "author_association": "CONTRIBUTOR",
          "body": "Note that there are some very tricky tradeoffs with how to optimally handle unix domain server sockets: https://github.com/python-trio/trio/issues/279#issuecomment-373981329",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463450285/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 1,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463451641",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463451641",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463451641,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ1MTY0MQ==",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T01:46:47Z",
          "updated_at": "2019-02-14T01:46:47Z",
          "author_association": "MEMBER",
          "body": "@giampaolo Another thought: I'm not totally sold on the `bind_socket()` name.  It doesn't play nice with `create_connection()`, and `socket.bind_socket()` reads weird.  How about we call this `create_server()` (similar to asyncio's `loop.create_connection()` & `loop.create_server()`)?\r\n\r\n> Note that there are some very tricky tradeoffs with how to optimally handle unix domain server sockets: [python-trio/trio#279 (comment)](https://github.com/python-trio/trio/issues/279#issuecomment-373981329)\r\n\r\n@njsmith Nathaniel, that's gold, thanks for sharing!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463451641/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463461978",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463461978",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463461978,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ2MTk3OA==",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T02:32:36Z",
          "updated_at": "2019-02-14T02:32:36Z",
          "author_association": "MEMBER",
          "body": "> @giampaolo Another thought: I'm not totally sold on the `bind_socket()` name. It doesn't play nice with `create_connection()`, and `socket.bind_socket()` reads weird. How about we call this `create_server()` (similar to asyncio's `loop.create_connection()` & `loop.create_server()`)?\r\n\r\nOh, I proposed the same name: thanks @1st1 :-) socket.create_server() looks well aside socket.create_connection().",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463461978/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463463682",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463463682",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463463682,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ2MzY4Mg==",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T02:40:38Z",
          "updated_at": "2019-02-14T02:40:38Z",
          "author_association": "MEMBER",
          "body": "\"socket.bind_socket((\"\", 8888), hybrid_ipv46=socket.supports_hybrid_ipv46())\" call is a little bit surprising. I understand it as \"ok, let's try to get a IPv4+IPv6 socket if possible, but it's ok if it's only IPv6, and also ok if it's only IPv4\".\r\n\r\nI'm thinking aloud. Would it make sense to avoid supports_hybrid_ipv46() call and asks bind_socket() to **try** to enable \"hybrid IPv4/IPv6\"? Something like socket.bind_socket((\"\", 8888), hybrid_ipv46=\"MAYBE\"). I let you find a better constant than \"MAYBE\".\r\n\r\nMaybe the default should be to always attempt to get \"hybrid IPv4/IPv6\", since we all want that by default, no? But hybrid_ipv46=False and hybrid_ipv46=True would explicitly disable or enable it. I'm not sure that what I'm proposing make any sense...\r\n\r\nThe problem with defaulting to \"maybe hybrid, maybe not\" is that the socket address may use \"::ffff:192.168.1.2\" format or not, and it can be surprising. So maybe enabling it by default is available is not the best **default**, but I'm still interesting to have a builtin \"try to use it if available\" mode.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463463682/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463468455",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463468455",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463468455,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ2ODQ1NQ==",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T03:03:15Z",
          "updated_at": "2019-02-14T03:03:15Z",
          "author_association": "MEMBER",
          "body": "> I'm thinking aloud. Would it make sense to avoid supports_hybrid_ipv46() call and asks bind_socket() to **try** to enable \"hybrid IPv4/IPv6\"? Something like socket.bind_socket((\"\", 8888), hybrid_ipv46=\"MAYBE\"). I let you find a better constant than \"MAYBE\".\r\n\r\nWe can call it `allow_hybrid_ipv6`; by default it should be set to `False`.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463468455/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463476812",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463476812",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463476812,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ3NjgxMg==",
          "user": {
            "login": "giampaolo",
            "id": 681260,
            "node_id": "MDQ6VXNlcjY4MTI2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/giampaolo",
            "html_url": "https://github.com/giampaolo",
            "followers_url": "https://api.github.com/users/giampaolo/followers",
            "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
            "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
            "organizations_url": "https://api.github.com/users/giampaolo/orgs",
            "repos_url": "https://api.github.com/users/giampaolo/repos",
            "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/giampaolo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T03:44:25Z",
          "updated_at": "2019-02-14T03:44:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "@1st1 \r\n> @giampaolo Another thought: I'm not totally sold on the `bind_socket()` name. It doesn't play nice with `create_connection()`, and `socket.bind_socket()` reads weird. How about we call this `create_server()` (similar to asyncio's `loop.create_connection()` & `loop.create_server()`)?\r\n\r\nYeah, makes sense (more consistent with `create_connection`). Will do it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463476812/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463479323",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463479323",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463479323,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ3OTMyMw==",
          "user": {
            "login": "giampaolo",
            "id": 681260,
            "node_id": "MDQ6VXNlcjY4MTI2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/giampaolo",
            "html_url": "https://github.com/giampaolo",
            "followers_url": "https://api.github.com/users/giampaolo/followers",
            "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
            "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
            "organizations_url": "https://api.github.com/users/giampaolo/orgs",
            "repos_url": "https://api.github.com/users/giampaolo/repos",
            "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/giampaolo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T03:57:24Z",
          "updated_at": "2019-02-14T03:57:50Z",
          "author_association": "CONTRIBUTOR",
          "body": "@vstinner \r\n\r\n> Maybe the default should be to always attempt to get \"hybrid IPv4/IPv6\", since we all want that by default, no? \r\n\r\nWe basically don't want to because of the \"::ffff:192.168.1.2\" format. Also, there's the argument of setting the same default for the sake of consistency across platforms.. From my code:\r\n\r\n```\r\n# Disable IPv4/IPv6 dual stack support (enabled by\r\n# default on Linux) which makes a single socket\r\n# listen on both address families in order to be\r\n# consistent across different platforms.\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463479323/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463607579",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463607579",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463607579,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzYwNzU3OQ==",
          "user": {
            "login": "giampaolo",
            "id": 681260,
            "node_id": "MDQ6VXNlcjY4MTI2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/giampaolo",
            "html_url": "https://github.com/giampaolo",
            "followers_url": "https://api.github.com/users/giampaolo/followers",
            "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
            "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
            "organizations_url": "https://api.github.com/users/giampaolo/orgs",
            "repos_url": "https://api.github.com/users/giampaolo/repos",
            "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/giampaolo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T12:21:36Z",
          "updated_at": "2019-02-14T12:21:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "Update:\r\n* I renamed the function from `bind_server()` to `create_server()`\r\n* I removed `reuse_addr` parameter\r\n* I replaced `backlog=128` with `backlog=None` as per @vstinner suggestion\r\n\r\nAFAIU we're still not sure re. the bikeshedding of `hybrid_ipv46` vs. `allow_hybrid_ipv6`. I'm a bit uncertain myself as well.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463607579/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463636360",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463636360",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463636360,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzYzNjM2MA==",
          "user": {
            "login": "jaraco",
            "id": 308610,
            "node_id": "MDQ6VXNlcjMwODYxMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/308610?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jaraco",
            "html_url": "https://github.com/jaraco",
            "followers_url": "https://api.github.com/users/jaraco/followers",
            "following_url": "https://api.github.com/users/jaraco/following{/other_user}",
            "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions",
            "organizations_url": "https://api.github.com/users/jaraco/orgs",
            "repos_url": "https://api.github.com/users/jaraco/repos",
            "events_url": "https://api.github.com/users/jaraco/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jaraco/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T13:58:19Z",
          "updated_at": "2019-02-14T13:58:19Z",
          "author_association": "MEMBER",
          "body": "> We basically don't want to because of the \"::ffff:192.168.1.2\" format.\r\n\r\nImagine in 5-10 years' time (or 50), when IPv6 is prevalent if not dominant. Will an aversion to IPv4-mapped addresses be a concern?\r\n\r\nMy _strong_ preference would be that any approach makes the target use-case (that is, the long-term goal) have the best user experience, and then find ways to retrofit the legacy use-case. In other words, this solution should give preference to IPv6-only, then IPv6 hybrid, then IPv4 (as that's how you'd want it in an IPv6-dominant world), as long as that doesn't unreasonably degrade the IPv4 experience. I think we _want_ to expose the IPv6-mapped address.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463636360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463640156",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463640156",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463640156,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzY0MDE1Ng==",
          "user": {
            "login": "jaraco",
            "id": 308610,
            "node_id": "MDQ6VXNlcjMwODYxMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/308610?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jaraco",
            "html_url": "https://github.com/jaraco",
            "followers_url": "https://api.github.com/users/jaraco/followers",
            "following_url": "https://api.github.com/users/jaraco/following{/other_user}",
            "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions",
            "organizations_url": "https://api.github.com/users/jaraco/orgs",
            "repos_url": "https://api.github.com/users/jaraco/repos",
            "events_url": "https://api.github.com/users/jaraco/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jaraco/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T14:09:28Z",
          "updated_at": "2019-02-14T14:09:28Z",
          "author_association": "MEMBER",
          "body": "I hope my comments don't come off as hostile. I'm passionate about this capability as I've been passionate about IPv6 since 2001. I'm really grateful for all the hard work @giampaolo is putting into this effort.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463640156/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463645620",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463645620",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463645620,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzY0NTYyMA==",
          "user": {
            "login": "giampaolo",
            "id": 681260,
            "node_id": "MDQ6VXNlcjY4MTI2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/giampaolo",
            "html_url": "https://github.com/giampaolo",
            "followers_url": "https://api.github.com/users/giampaolo/followers",
            "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
            "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
            "organizations_url": "https://api.github.com/users/giampaolo/orgs",
            "repos_url": "https://api.github.com/users/giampaolo/repos",
            "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/giampaolo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T14:24:46Z",
          "updated_at": "2019-02-14T15:04:33Z",
          "author_association": "CONTRIBUTOR",
          "body": "@jaraco for clarity, the current defaults are the following:\r\n1) in case of IPv6 `host` or `family` (e.g. `create_server((\"::\", 8888))`) use `IPV6_V6ONLY`, in order to reject IPv4 connections. Rationale: 1) eliminate cross-platform differences 2) prevent being bitten by `getpeername()` returning an \"exotic\" IPv4-mapped IPv6 address like ``\":ffff:127.0.0.1\"``.\r\n2) if dual-stack is desired do one of these 2:\r\n ```python\r\n>>> create_server(addr, hybrid_ipv46=True)\r\n>>> create_server(addr, hybrid_ipv46=support_hybrid_ipv46())\r\n```\r\n3) in case the family cannot be unambiguously determined from `host` (meaning when host is `\"localhost\"` or `None`), then IPv4 is always preferred over IPv6. I think it makes sense to do this because it reflects `socket.socket()` default, which uses `family=AF_INET` and `type=SOCK_STREAM` as the default. And also because `getaddrinfo` sorting order is not portable across platforms, so I think it's better if this utility function take a stance in order to eliminate cross-platform differences.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463645620/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463646594",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463646594",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463646594,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzY0NjU5NA==",
          "user": {
            "login": "giampaolo",
            "id": 681260,
            "node_id": "MDQ6VXNlcjY4MTI2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/giampaolo",
            "html_url": "https://github.com/giampaolo",
            "followers_url": "https://api.github.com/users/giampaolo/followers",
            "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
            "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
            "organizations_url": "https://api.github.com/users/giampaolo/orgs",
            "repos_url": "https://api.github.com/users/giampaolo/repos",
            "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/giampaolo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T14:27:32Z",
          "updated_at": "2019-02-14T14:27:32Z",
          "author_association": "CONTRIBUTOR",
          "body": "> I hope my comments don't come off as hostile.\r\n\r\nNot at all. It's important to get feedback on this.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463646594/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463672089",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463672089",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463672089,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzY3MjA4OQ==",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T15:34:58Z",
          "updated_at": "2019-02-14T15:34:58Z",
          "author_association": "MEMBER",
          "body": "> Imagine in 5-10 years' time (or 50), when IPv6 is prevalent if not dominant. Will an aversion to IPv4-mapped addresses be a concern? My _strong_ preference would be that any approach makes the target use-case (that is, the long-term goal) have the best user experience, and then find ways to retrofit the legacy use-case. In other words, this solution should give preference to IPv6-only, then IPv6 hybrid, then IPv4 (as that's how you'd want it in an IPv6-dominant world), as long as that doesn't unreasonably degrade the IPv4 experience. I think we _want_ to expose the IPv6-mapped address.\r\n\r\nI don't see the point of excluding IPv4 on purpose. IPv4 remains very widely used: https://www.internetsociety.org/deploy360/ipv6/statistics/\r\n\r\nOnly around 22% of Google users use native IPv6.\r\n\r\nIf the OS supports both IPv4 and IPv6 in a single socket, what's the point of not using it? Does it make any sense to use IPv6-only service **in 2019**? IPv6 was created in 1998 and it's still not widely used. It takes time.\r\n\r\ncreate_server() would be much more useful than a direct usage of socket()+bind()+listen() if it would give IPv6+IPv4 hybrid socket magically.\r\n\r\nMy preference is for **IPv6 hybrid by default**.\r\n\r\nI'm not sure if I have a preference between IPv4-only and IPv6-only :-)\r\n\r\nAgain, what's the point of excluding IPv4 on purpose?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463672089/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463678671",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463678671",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463678671,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzY3ODY3MQ==",
          "user": {
            "login": "giampaolo",
            "id": 681260,
            "node_id": "MDQ6VXNlcjY4MTI2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/giampaolo",
            "html_url": "https://github.com/giampaolo",
            "followers_url": "https://api.github.com/users/giampaolo/followers",
            "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
            "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
            "organizations_url": "https://api.github.com/users/giampaolo/orgs",
            "repos_url": "https://api.github.com/users/giampaolo/repos",
            "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/giampaolo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T15:51:22Z",
          "updated_at": "2019-02-14T21:59:20Z",
          "author_association": "CONTRIBUTOR",
          "body": "@vstinner \r\n> My preference is for **IPv6 hybrid by default**.\r\n> [...]\r\n> Again, what's the point of excluding IPv4 on purpose?\r\n\r\nThe rationale is `getpeername()` behaving differently. With a common AF_INET / IPv4 socket, when an incoming IPv4 connection occurs you'll get:\r\n\r\n```python\r\n>>> s.getpeername()\r\n(\"127.0.0.1\", 8564)\r\n```\r\n\r\nWith an hybrid IPv4/6 socket, the incoming IPv4 connection will be represented as a IPv4-mapped IPv6 address:\r\n\r\n```python\r\n>>> s.getpeername()\r\n(\"::ffff:127.0.0.1\", 8564)\r\n```\r\nThis can be a problem, e.g., in case you have firewall/access rules or application logic which is based on the assumption that the IPv4 string has a \"normal\" IPv4 representation. Even application logs will report the address in this format, which may not be desirable. Basically that's the main reason you don't want the dual-stack enabled by default. \r\n\r\nAnother reason is because not all platforms support the dual-stack (e.g. Windows). As such I prefer the utility function to take a stance by explicitly disabling dual-stack by default on all platforms, so that `create_server()` behaves the same everywhere.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463678671/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463685349",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463685349",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463685349,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzY4NTM0OQ==",
          "user": {
            "login": "jaraco",
            "id": 308610,
            "node_id": "MDQ6VXNlcjMwODYxMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/308610?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jaraco",
            "html_url": "https://github.com/jaraco",
            "followers_url": "https://api.github.com/users/jaraco/followers",
            "following_url": "https://api.github.com/users/jaraco/following{/other_user}",
            "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions",
            "organizations_url": "https://api.github.com/users/jaraco/orgs",
            "repos_url": "https://api.github.com/users/jaraco/repos",
            "events_url": "https://api.github.com/users/jaraco/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jaraco/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T16:07:23Z",
          "updated_at": "2019-02-14T16:07:23Z",
          "author_association": "MEMBER",
          "body": "> If the OS supports both IPv4 and IPv6 in a single socket, what's the point of not using it? Does it make any sense to use IPv6-only service **in 2019**?\r\n\r\nYou're right. Especially today, that's what you'd want. I mis-wrote that - it should have been Hybrid (if available) then IPv6 then IPv4.\r\n\r\n> Basically [IPv4-mapped addresses are] the main reason you don't want the dual-stack enabled by default.\r\n\r\nIf that's a problem for the application, then why not let the application opt-out of a default hybrid model? For many (most?) applications, this representation of the peer name won't be an issue... and if it is, because this is new functionality, they will already be investing the time to engineer the best solution around `create_server`, so will be poised to deal with the ramifications. Perhaps they choose the easy route and call `create_server` with hybrid=False. Or maybe they choose to write their log handlers to raise the capability and support IPv6 addresses. This latter outcome would be beneficial to the adoption of IPv6. By making hybrid disabled by default, you're encouraging the \"IPv4 is good enough\" mentality.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463685349/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463692839",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463692839",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463692839,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzY5MjgzOQ==",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T16:26:03Z",
          "updated_at": "2019-02-14T16:56:07Z",
          "author_association": "MEMBER",
          "body": "Let's regroup.\r\n\r\n1. The current PR has the `family=AF_UNSPEC` default, but later sorts the resolved addresses to prefer IPv4.\r\n\r\n2. The `hybrid_ipv46=False` parameter disables dual-stack IPv4/v6 support (default on Linux).\r\n\r\nFirst, I'm not sure the decision made in (1) is correct.  If the default is `AF_UNSPEC` we should let the system to decide which addresses it resolves hosts to and in what order.  The current rationale:\r\n\r\n> `# 1) AF_INET is the default for socket.socket()`\r\n\r\nSo? Then make the default `family` parameter set to `AF_INET`.  This is not a good enough motivation for manual sorting.\r\n\r\n> `# 2) in case of ambiguous host (None or \"localhost\")`\r\n> `# getaddrinfo() sorting order is not guaranteed, so we take a`\r\n> `# stance in order to eliminate cross-platform differences.`\r\n\r\nI don't think this argument is valid.  Even on the same platform (say MacOS) but in different environments a host can resolve either to only IPv4 addresses or IPv6.  How can manual sorting fix the network configuration?\r\n\r\nSince there's no precedent in manual sorting of resolved addresses in the socket module or asyncio, I think we *shouldn't do it either*.\r\n\r\nIn short:\r\n\r\n* Those who want to enforce IPv6 can pass `family=AF_INET6`.  \r\n\r\n* Those who want to enforce IPv4 can pass `family=AF_INET`.\r\n\r\n* Those who don't care don't specify the family at all.\r\n\r\nRegarding (2).  Since having `IPPROTO_IPV6` on by default is a Linux-only thing (is this correct, btw?), I propose to:\r\n\r\n* unset`IPPROTO_IPV6` by default;\r\n* add a `dualstack_ipv6=False` parameter.  When `True` we try to set the `IPPROTO_IPV6` option;\r\n* essentially this is just a rename of the `hybrid_ipv46` flag.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463692839/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463736515",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463736515",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463736515,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzczNjUxNQ==",
          "user": {
            "login": "giampaolo",
            "id": 681260,
            "node_id": "MDQ6VXNlcjY4MTI2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/681260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/giampaolo",
            "html_url": "https://github.com/giampaolo",
            "followers_url": "https://api.github.com/users/giampaolo/followers",
            "following_url": "https://api.github.com/users/giampaolo/following{/other_user}",
            "gists_url": "https://api.github.com/users/giampaolo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/giampaolo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/giampaolo/subscriptions",
            "organizations_url": "https://api.github.com/users/giampaolo/orgs",
            "repos_url": "https://api.github.com/users/giampaolo/repos",
            "events_url": "https://api.github.com/users/giampaolo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/giampaolo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T18:25:52Z",
          "updated_at": "2019-02-14T18:54:20Z",
          "author_association": "CONTRIBUTOR",
          "body": "@1st1 \r\nYou got me thinking here, and I concur that `AF_UNSPEC` and sorting `getaddrinfo()` results is not the way to go. I am starting to think that maybe we should not use `getaddrinfo()` after all. That makes sense for connecting sockets (`socket.create_connection()`) but less for server sockets. It must be noted that `asyncio` [does rely on getaddrinfo](https://github.com/python/cpython/blob/f34517094049170acc311bac30f68fa67f27a301/Lib/asyncio/base_events.py#L1299), but it does so because it wants to *explicitly* listen on multiple sockets/addresses, which are then handled by the IO loop which is able to run them all at once. Here we want the opposite: listen on one socket only. I actually was the one who [suggested](https://bugs.python.org/issue17561#msg185765) this design choice for asyncio back in 2013. A choice which does make sense for an asynchronous app, but not for this specific utility function.\r\n\r\n> add a `dualstack_ipv6=False` parameter [...] essentially this is just a rename of the `hybrid_ipv46` flag.\r\n\r\nI like the new name.\r\n\r\n> Since having `IPPROTO_IPV6` on by default is a Linux-only thing (is this correct, btw?)\r\n\r\nWe're talking about `IPV6_V6ONLY`, not `IPPROTO_IPV6`, but yes: Linux is supposed to have `IPV6_V6ONLY = 0` by default, meaning the dual-stack is \"on\". I still do think the default should be \"off\" on all platforms though, for the reasons I [explained above](https://github.com/python/cpython/pull/11784#issuecomment-463678671).\r\n\r\nIn summary, I think we should have this:\r\n\r\n```python\r\ndef create_server(address, *, \r\n                  family=AF_INET,        # either AF_INET or AF_INET6 \r\n                  type=SOCK_STREAM,      # either SOCK_STREAM or SOCK_DGRAM\r\n                  backlog=None,          # ignored for type=SOCK_DGRAM\r\n                  reuse_port=False, \r\n                  dualstack_ipv6=False   # ignored for type=SOCK_DGRAM\r\n):\r\n    ...\r\n\r\ndef supports_dualstack_ipv6():\r\n    ...\r\n```\r\n\r\nThoughts?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463736515/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/463744389",
          "html_url": "https://github.com/python/cpython/pull/11784#issuecomment-463744389",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/11784",
          "id": 463744389,
          "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mzc0NDM4OQ==",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2019-02-14T18:46:35Z",
          "updated_at": "2019-02-14T18:46:35Z",
          "author_association": "MEMBER",
          "body": "> It must be noted that `asyncio` [does rely on getaddrinfo](https://github.com/python/cpython/blob/f34517094049170acc311bac30f68fa67f27a301/Lib/asyncio/base_events.py#L1299), but it does so because it wants to _explicitly_ listen on multiple sockets/addresses, which are then handled by the IO loop which is able to run them all at once.\r\n\r\nRight.  We can add name resolution later in 3.9 if users ask us to.\r\n\r\n> I still do think the default should be \"off\" on all platforms though, for the reasons explained above.\r\n\r\nYes, I agree.  The `socket` module normalizes behaviour on multiple systems to make it predictable and consistent, so we *do* want to disable the dual-stack support on Linux by default.  Enabling dual-stack by default everywhere isn't an option, because not every platform supports that.\r\n\r\n> ```python\r\n> def create_server(address, *, \r\n>                   family=AF_INET, \r\n>                   type=SOCK_STREAM, \r\n>                   backlog=None,\r\n>                   reuse_port=False, \r\n>                   flags=None, \r\n>                   dualstack_ipv6=False):\r\n> ```\r\n\r\nI like it.\r\n\r\n> ```python\r\n> def supports_dualstack_ipv6():\r\n>     ...\r\n> ```\r\n\r\nI think `has_dualstack_ipv6()` would be a better name that follows the existing `socket.has_ipv6` naming.  ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/463744389/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/126065",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/126065/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/126065/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/126065/events",
      "html_url": "https://github.com/python/cpython/pull/126065",
      "id": 2617595573,
      "node_id": "PR_kwDOBN0Z8c6ADwmB",
      "number": 126065,
      "title": "gh-126061: Add PyLong_IsPositive/Zero/Negative() functions",
      "user": {
        "login": "rruuaanng",
        "id": 108215543,
        "node_id": "U_kgDOBnM89w",
        "avatar_url": "https://avatars.githubusercontent.com/u/108215543?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rruuaanng",
        "html_url": "https://github.com/rruuaanng",
        "followers_url": "https://api.github.com/users/rruuaanng/followers",
        "following_url": "https://api.github.com/users/rruuaanng/following{/other_user}",
        "gists_url": "https://api.github.com/users/rruuaanng/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rruuaanng/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rruuaanng/subscriptions",
        "organizations_url": "https://api.github.com/users/rruuaanng/orgs",
        "repos_url": "https://api.github.com/users/rruuaanng/repos",
        "events_url": "https://api.github.com/users/rruuaanng/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rruuaanng/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 38,
      "created_at": "2024-10-28T07:48:32Z",
      "updated_at": "2024-11-13T14:54:09Z",
      "closed_at": "2024-11-12T13:18:11Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/126065",
        "html_url": "https://github.com/python/cpython/pull/126065",
        "diff_url": "https://github.com/python/cpython/pull/126065.diff",
        "patch_url": "https://github.com/python/cpython/pull/126065.patch",
        "merged_at": "2024-11-12T13:18:11Z"
      },
      "body": "<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\ngh-NNNNN: Summary of the changes made\r\n```\r\n\r\nWhere: gh-NNNNN refers to the GitHub issue number.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `main`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `main`.\r\n\r\n-->\r\n\n\n<!-- gh-issue-number: gh-126061 -->\n* Issue: gh-126061\n<!-- /gh-issue-number -->\n\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\n\ud83d\udcda Documentation preview \ud83d\udcda: https://cpython-previews--126065.org.readthedocs.build/\n\r\n<!-- readthedocs-preview cpython-previews end -->",
      "closed_by": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/126065/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/126065/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2441085834",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2441085834",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2441085834,
          "node_id": "IC_kwDOBN0Z8c6RgAOK",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-28T09:46:55Z",
          "updated_at": "2024-10-28T09:46:55Z",
          "author_association": "MEMBER",
          "body": "I'll get to reviewing this sometime today.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2441085834/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2441097857",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2441097857",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2441097857,
          "node_id": "IC_kwDOBN0Z8c6RgDKB",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-28T09:52:09Z",
          "updated_at": "2024-10-28T09:52:09Z",
          "author_association": "CONTRIBUTOR",
          "body": "@rruuaanng, please avoid force-pushes.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2441097857/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2441105074",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2441105074",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2441105074,
          "node_id": "IC_kwDOBN0Z8c6RgE6y",
          "user": {
            "login": "rruuaanng",
            "id": 108215543,
            "node_id": "U_kgDOBnM89w",
            "avatar_url": "https://avatars.githubusercontent.com/u/108215543?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rruuaanng",
            "html_url": "https://github.com/rruuaanng",
            "followers_url": "https://api.github.com/users/rruuaanng/followers",
            "following_url": "https://api.github.com/users/rruuaanng/following{/other_user}",
            "gists_url": "https://api.github.com/users/rruuaanng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rruuaanng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rruuaanng/subscriptions",
            "organizations_url": "https://api.github.com/users/rruuaanng/orgs",
            "repos_url": "https://api.github.com/users/rruuaanng/repos",
            "events_url": "https://api.github.com/users/rruuaanng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rruuaanng/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-28T09:55:17Z",
          "updated_at": "2024-10-28T09:55:40Z",
          "author_association": "CONTRIBUTOR",
          "body": "Sorry, there are a lot of changes that need to be rolled back. I will pay attention. :(",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2441105074/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2441111191",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2441111191",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2441111191,
          "node_id": "IC_kwDOBN0Z8c6RgGaX",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-28T09:57:52Z",
          "updated_at": "2024-10-28T09:57:52Z",
          "author_association": "CONTRIBUTOR",
          "body": "On Mon, Oct 28, 2024 at 02:55:40AM -0700, RUANG (James Roy) wrote:\n>    Sorry, there are a lot of changes that need to be rolled back. I will pay\n>    attention. \uff1a\uff08\n\nIn the end - individual commits will be squashed anyway.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2441111191/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2442936951",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2442936951",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2442936951,
          "node_id": "IC_kwDOBN0Z8c6RnEJ3",
          "user": {
            "login": "rruuaanng",
            "id": 108215543,
            "node_id": "U_kgDOBnM89w",
            "avatar_url": "https://avatars.githubusercontent.com/u/108215543?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rruuaanng",
            "html_url": "https://github.com/rruuaanng",
            "followers_url": "https://api.github.com/users/rruuaanng/followers",
            "following_url": "https://api.github.com/users/rruuaanng/following{/other_user}",
            "gists_url": "https://api.github.com/users/rruuaanng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rruuaanng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rruuaanng/subscriptions",
            "organizations_url": "https://api.github.com/users/rruuaanng/orgs",
            "repos_url": "https://api.github.com/users/rruuaanng/repos",
            "events_url": "https://api.github.com/users/rruuaanng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rruuaanng/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T00:41:24Z",
          "updated_at": "2024-10-29T00:43:14Z",
          "author_association": "CONTRIBUTOR",
          "body": "Given the number of comments,I'll reply here. I apologize for any inconvenience. The error handling implementation mentioned above was based on discussions in Capigroup, as `victor` expected. It'sItsavior should be consistent with GetSign. Regarding the comments, their style follows the format used in the same file. So, I apologize, but I may not make changes to them.\n\nEdit\nabout the document, I'll change it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2442936951/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2442939014",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2442939014",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2442939014,
          "node_id": "IC_kwDOBN0Z8c6RnEqG",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T00:43:48Z",
          "updated_at": "2024-10-29T00:43:48Z",
          "author_association": "MEMBER",
          "body": "> The error handling implementation mentioned above was based on discussions in Capigroup\r\n\r\nYes, I'm not asking to change how errors are handled. I'm worried about the error message.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2442939014/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2443032125",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2443032125",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2443032125,
          "node_id": "IC_kwDOBN0Z8c6RnbY9",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T02:22:47Z",
          "updated_at": "2024-10-29T02:22:47Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Nitpick: Use op for names, not obj\r\n\r\nLooking on other functions, rather ``v``.   But I don't think it's a big deal.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2443032125/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2443966374",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2443966374",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2443966374,
          "node_id": "IC_kwDOBN0Z8c6Rq_em",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T11:35:01Z",
          "updated_at": "2024-10-29T11:35:01Z",
          "author_association": "CONTRIBUTOR",
          "body": "> AFAICS, the only other function using the current message is PyLong_GetSign.\r\n\r\nNo.  PyLong_AsNativeBytes, PyLong_AsUnsignedLongLong, PyLong_AsDouble, PyLong_AsSsize_t, etc.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2443966374/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2443975217",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2443975217",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2443975217,
          "node_id": "IC_kwDOBN0Z8c6RrBox",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T11:39:45Z",
          "updated_at": "2024-10-29T11:39:45Z",
          "author_association": "MEMBER",
          "body": "Ah, I see it in `PyLong_AsNativeBytes`, but that looks like the only other location. Could you point me to where it's thrown in the other functions? (GitHub search might be acting up.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2443975217/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2443990846",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2443990846",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2443990846,
          "node_id": "IC_kwDOBN0Z8c6RrFc-",
          "user": {
            "login": "skirpichev",
            "id": 2155800,
            "node_id": "MDQ6VXNlcjIxNTU4MDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2155800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skirpichev",
            "html_url": "https://github.com/skirpichev",
            "followers_url": "https://api.github.com/users/skirpichev/followers",
            "following_url": "https://api.github.com/users/skirpichev/following{/other_user}",
            "gists_url": "https://api.github.com/users/skirpichev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skirpichev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skirpichev/subscriptions",
            "organizations_url": "https://api.github.com/users/skirpichev/orgs",
            "repos_url": "https://api.github.com/users/skirpichev/repos",
            "events_url": "https://api.github.com/users/skirpichev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skirpichev/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T11:47:51Z",
          "updated_at": "2024-10-29T13:24:49Z",
          "author_association": "CONTRIBUTOR",
          "body": "On Tue, Oct 29, 2024 at 04:40:08AM -0700, Peter Bierma wrote:\r\n>    Ah, I see it in PyLong_AsNativeBytes, but that looks like the only other\r\n>    location. Could you point me to where it's thrown in the other functions?\r\n>    (GitHub search might be acting up.)\r\n\r\nCorrect phrase to grep is \"an integer is required\" ;)\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2443990846/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2444000556",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2444000556",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2444000556,
          "node_id": "IC_kwDOBN0Z8c6RrH0s",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T11:52:43Z",
          "updated_at": "2024-10-29T11:52:43Z",
          "author_association": "MEMBER",
          "body": "Ok, so that's not `expect int, got type`. Let's change the error to `an integer is required` (or better yet `an integer is required, but got %T`)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2444000556/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2444005333",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2444005333",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2444005333,
          "node_id": "IC_kwDOBN0Z8c6RrI_V",
          "user": {
            "login": "rruuaanng",
            "id": 108215543,
            "node_id": "U_kgDOBnM89w",
            "avatar_url": "https://avatars.githubusercontent.com/u/108215543?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rruuaanng",
            "html_url": "https://github.com/rruuaanng",
            "followers_url": "https://api.github.com/users/rruuaanng/followers",
            "following_url": "https://api.github.com/users/rruuaanng/following{/other_user}",
            "gists_url": "https://api.github.com/users/rruuaanng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rruuaanng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rruuaanng/subscriptions",
            "organizations_url": "https://api.github.com/users/rruuaanng/orgs",
            "repos_url": "https://api.github.com/users/rruuaanng/repos",
            "events_url": "https://api.github.com/users/rruuaanng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rruuaanng/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T11:55:12Z",
          "updated_at": "2024-10-29T11:55:12Z",
          "author_association": "CONTRIBUTOR",
          "body": "I've made changes :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2444005333/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2444024779",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2444024779",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2444024779,
          "node_id": "IC_kwDOBN0Z8c6RrNvL",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T12:05:07Z",
          "updated_at": "2024-10-29T12:05:07Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Ok, so that's not `expect int, got type`. Let's change the error to `an integer is required` (or better yet `an integer is required, but got %T`)\r\n\r\nSee `git grep \"expected.*got\"`. I think it would be fine to just change the word \"expect\" to \"expected\".",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2444024779/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2444168526",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2444168526",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2444168526,
          "node_id": "IC_kwDOBN0Z8c6Rrw1O",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-29T13:05:30Z",
          "updated_at": "2024-10-29T13:05:30Z",
          "author_association": "MEMBER",
          "body": "Really, it would be nice if we had a private API for displaying an \"expected x got y\" message, so we didn't have to argue about these kinds of issues :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2444168526/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2446478193",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2446478193",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2446478193,
          "node_id": "IC_kwDOBN0Z8c6R0ktx",
          "user": {
            "login": "rruuaanng",
            "id": 108215543,
            "node_id": "U_kgDOBnM89w",
            "avatar_url": "https://avatars.githubusercontent.com/u/108215543?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rruuaanng",
            "html_url": "https://github.com/rruuaanng",
            "followers_url": "https://api.github.com/users/rruuaanng/followers",
            "following_url": "https://api.github.com/users/rruuaanng/following{/other_user}",
            "gists_url": "https://api.github.com/users/rruuaanng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rruuaanng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rruuaanng/subscriptions",
            "organizations_url": "https://api.github.com/users/rruuaanng/orgs",
            "repos_url": "https://api.github.com/users/rruuaanng/repos",
            "events_url": "https://api.github.com/users/rruuaanng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rruuaanng/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-30T10:26:27Z",
          "updated_at": "2024-10-30T10:26:27Z",
          "author_association": "CONTRIBUTOR",
          "body": "Sorry, I\u2019ve been quite busy lately and might not appear in the community as frequently (the discussions seem quite intense). I will address and resolve them one by one.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2446478193/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2446515770",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2446515770",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2446515770,
          "node_id": "IC_kwDOBN0Z8c6R0t46",
          "user": {
            "login": "rruuaanng",
            "id": 108215543,
            "node_id": "U_kgDOBnM89w",
            "avatar_url": "https://avatars.githubusercontent.com/u/108215543?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rruuaanng",
            "html_url": "https://github.com/rruuaanng",
            "followers_url": "https://api.github.com/users/rruuaanng/followers",
            "following_url": "https://api.github.com/users/rruuaanng/following{/other_user}",
            "gists_url": "https://api.github.com/users/rruuaanng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rruuaanng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rruuaanng/subscriptions",
            "organizations_url": "https://api.github.com/users/rruuaanng/orgs",
            "repos_url": "https://api.github.com/users/rruuaanng/repos",
            "events_url": "https://api.github.com/users/rruuaanng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rruuaanng/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-30T10:38:33Z",
          "updated_at": "2024-10-30T10:38:33Z",
          "author_association": "CONTRIBUTOR",
          "body": "> > Ok, so that's not `expect int, got type`. Let's change the error to `an integer is required` (or better yet `an integer is required, but got %T`)\r\n> \r\n> See `git grep \"expected.*got\"`. I think it would be fine to just change the word \"expect\" to \"expected\".\r\n\r\nThat's, we can change `expect int, got %T` to `expected int, got %T`?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2446515770/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2446715057",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2446715057",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2446715057,
          "node_id": "IC_kwDOBN0Z8c6R1eix",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-30T11:27:52Z",
          "updated_at": "2024-10-30T11:27:52Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Sorry, I\u2019ve been quite busy lately and might not appear in the community as frequently (the discussions seem quite intense). I will address and resolve them one by one.\r\n\r\nThanks, but there is no need to inform us of this. You do not need to respond immediately to review remarks; this is asynchronous communication, and nobody expects you or anyone else to react immediately. Remember also, as I've told you multiple times before: _every_ post you create on an issue results in a notification for _every subscribed user_. I now got a notification in my GitHub inbox and clicked on the link only to discover that no new technical information was available. Please try to restrict your communication to **PR relevant information only**.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2446715057/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 1,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2446861754",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2446861754",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2446861754,
          "node_id": "IC_kwDOBN0Z8c6R2CW6",
          "user": {
            "login": "rruuaanng",
            "id": 108215543,
            "node_id": "U_kgDOBnM89w",
            "avatar_url": "https://avatars.githubusercontent.com/u/108215543?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rruuaanng",
            "html_url": "https://github.com/rruuaanng",
            "followers_url": "https://api.github.com/users/rruuaanng/followers",
            "following_url": "https://api.github.com/users/rruuaanng/following{/other_user}",
            "gists_url": "https://api.github.com/users/rruuaanng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rruuaanng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rruuaanng/subscriptions",
            "organizations_url": "https://api.github.com/users/rruuaanng/orgs",
            "repos_url": "https://api.github.com/users/rruuaanng/repos",
            "events_url": "https://api.github.com/users/rruuaanng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rruuaanng/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-30T11:57:34Z",
          "updated_at": "2024-10-30T11:57:34Z",
          "author_association": "CONTRIBUTOR",
          "body": "> The `# CRACHES is...(NULL)` comments seem to be wrong, as it does not appear such calls cause a crash. Can you confirm?\r\n\r\nIt exists only to keep in sync with `test_long_getsign` :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2446861754/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2446976690",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2446976690",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2446976690,
          "node_id": "IC_kwDOBN0Z8c6R2eay",
          "user": {
            "login": "devdanzin",
            "id": 74280297,
            "node_id": "MDQ6VXNlcjc0MjgwMjk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/74280297?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/devdanzin",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/devdanzin/followers",
            "following_url": "https://api.github.com/users/devdanzin/following{/other_user}",
            "gists_url": "https://api.github.com/users/devdanzin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/devdanzin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/devdanzin/subscriptions",
            "organizations_url": "https://api.github.com/users/devdanzin/orgs",
            "repos_url": "https://api.github.com/users/devdanzin/repos",
            "events_url": "https://api.github.com/users/devdanzin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/devdanzin/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-30T12:29:49Z",
          "updated_at": "2024-10-30T12:29:49Z",
          "author_association": "CONTRIBUTOR",
          "body": "> It exists only to keep in sync with `test_long_getsign` :)\r\n\r\nAh, it's probably a way to signal that `PyLong_IsPositive(NULL);` crashes then? Anyway, if the comment should stay, I suggest correcting the typo \"CRACHES\" -> \"CRASHES\".",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2446976690/reactions",
            "total_count": 3,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2448978636",
          "html_url": "https://github.com/python/cpython/pull/126065#issuecomment-2448978636",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/126065",
          "id": 2448978636,
          "node_id": "IC_kwDOBN0Z8c6R-HLM",
          "user": {
            "login": "rruuaanng",
            "id": 108215543,
            "node_id": "U_kgDOBnM89w",
            "avatar_url": "https://avatars.githubusercontent.com/u/108215543?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rruuaanng",
            "html_url": "https://github.com/rruuaanng",
            "followers_url": "https://api.github.com/users/rruuaanng/followers",
            "following_url": "https://api.github.com/users/rruuaanng/following{/other_user}",
            "gists_url": "https://api.github.com/users/rruuaanng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rruuaanng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rruuaanng/subscriptions",
            "organizations_url": "https://api.github.com/users/rruuaanng/orgs",
            "repos_url": "https://api.github.com/users/rruuaanng/repos",
            "events_url": "https://api.github.com/users/rruuaanng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rruuaanng/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-31T04:13:52Z",
          "updated_at": "2024-10-31T04:13:52Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Per the comments from Sergey and Erlend, it should be `expected`, not `expect`.\r\n\r\nI see, but I wonder if there is any reason to change GetSign as well.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2448978636/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 1,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117855",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117855/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117855/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117855/events",
      "html_url": "https://github.com/python/cpython/pull/117855",
      "id": 2241678751,
      "node_id": "PR_kwDOBN0Z8c5skqZo",
      "number": 117855,
      "title": "gh-117587: Add C implementation of `os.path.abspath`",
      "user": {
        "login": "nineteendo",
        "id": 65588599,
        "node_id": "MDQ6VXNlcjY1NTg4NTk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nineteendo",
        "html_url": "https://github.com/nineteendo",
        "followers_url": "https://api.github.com/users/nineteendo/followers",
        "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
        "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
        "organizations_url": "https://api.github.com/users/nineteendo/orgs",
        "repos_url": "https://api.github.com/users/nineteendo/repos",
        "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nineteendo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 666979988,
          "node_id": "MDU6TGFiZWw2NjY5Nzk5ODg=",
          "url": "https://api.github.com/repos/python/cpython/labels/awaiting%20change%20review",
          "name": "awaiting change review",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 790204342,
          "node_id": "MDU6TGFiZWw3OTAyMDQzNDI=",
          "url": "https://api.github.com/repos/python/cpython/labels/DO-NOT-MERGE",
          "name": "DO-NOT-MERGE",
          "color": "c11f32",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 35,
      "created_at": "2024-04-13T17:58:49Z",
      "updated_at": "2024-05-31T07:39:42Z",
      "closed_at": "2024-05-30T23:13:19Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/117855",
        "html_url": "https://github.com/python/cpython/pull/117855",
        "diff_url": "https://github.com/python/cpython/pull/117855.diff",
        "patch_url": "https://github.com/python/cpython/pull/117855.patch",
        "merged_at": null
      },
      "body": "### Benchmark\r\n\r\n#### posixpath.py by @eryksun:\r\n\r\n```none\r\nabsolute, with \"/a\" repeated\r\nlen   speedup\r\n100   1.521x\r\n500   1.157x\r\n1000  1.128x\r\n2000  1.068x\r\n4000  1.019x\r\n\r\nrelative 'a', with cwd length\r\nlen     speedup\r\n93+2    1.861x\r\n548+2   1.729x\r\n1003+2  1.881x\r\n2043+2  1.556x\r\n4058+2  1.548x\r\n```\r\n\r\n#### ntpath.py\r\n\r\n<details><summary>script</summary>\r\n\r\n```bat\r\n::speedup-posixpath.abspath.bat\r\n@echo off\r\necho 10 chars && call main\\python -m timeit -s \"import os\" \"os.path.abspath('a/' * 5)\" && call speedup-posixpath.abspath\\python -m timeit -s \"import os\" \"os.path.abspath('a/' * 5)\"\r\necho 100 chars && call main\\python -m timeit -s \"import os\" \"os.path.abspath('a/' * 50)\" && call speedup-posixpath.abspath\\python -m timeit -s \"import os\" \"os.path.abspath('a/' * 50)\"\r\necho 1000 chars && call main\\python -m timeit -s \"import os\" \"os.path.abspath('a/' * 500)\" && call speedup-posixpath.abspath\\python -m timeit -s \"import os\" \"os.path.abspath('a/' * 500)\"\r\n```\r\n</details>\r\n\r\n```none\r\n10 chars\r\n500000 loops, best of 5: 635 nsec per loop # before\r\n500000 loops, best of 5: 517 nsec per loop # after\r\n# -> 1.23x faster\r\n100 chars\r\n200000 loops, best of 5: 1.53 usec per loop # before\r\n200000 loops, best of 5: 1.23 usec per loop # after\r\n# -> 1.24x faster\r\n1000 chars\r\n50000 loops, best of 5: 9.87 usec per loop # before\r\n50000 loops, best of 5: 7.73 usec per loop # after\r\n# -> 1.28x faster\r\n```\r\n\r\n<!-- gh-issue-number: gh-117587 -->\r\n* Issue: gh-117587\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "erlend-aasland",
        "id": 13780613,
        "node_id": "MDQ6VXNlcjEzNzgwNjEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/erlend-aasland",
        "html_url": "https://github.com/erlend-aasland",
        "followers_url": "https://api.github.com/users/erlend-aasland/followers",
        "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
        "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
        "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
        "repos_url": "https://api.github.com/users/erlend-aasland/repos",
        "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
        "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117855/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117855/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2054102452",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2054102452",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2054102452,
          "node_id": "IC_kwDOBN0Z8c56bx20",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-14T15:44:23Z",
          "updated_at": "2024-04-14T15:44:23Z",
          "author_association": "CONTRIBUTOR",
          "body": "The same approach doesn't work on Window, because `ntpath.join()` is much slower than `nt._getfullpathname()`:\r\n\r\n```powershell\r\nPS C:\\Users\\wanne\\cpython> python -m timeit -s \"import nt\" \"nt._getfullpathname('.')\"; python -m timeit -s \"import os\" \"os.path.join(r'C:\\Users\\wanne\\cpython', '')\"\r\n1000000 loops, best of 5: 286 nsec per loop # _getfullpathname\r\n200000 loops, best of 5: 1.41 usec per loop # join\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2054102452/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2054125993",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2054125993",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2054125993,
          "node_id": "IC_kwDOBN0Z8c56b3mp",
          "user": {
            "login": "eryksun",
            "id": 958268,
            "node_id": "MDQ6VXNlcjk1ODI2OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/958268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eryksun",
            "html_url": "https://github.com/eryksun",
            "followers_url": "https://api.github.com/users/eryksun/followers",
            "following_url": "https://api.github.com/users/eryksun/following{/other_user}",
            "gists_url": "https://api.github.com/users/eryksun/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eryksun/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eryksun/subscriptions",
            "organizations_url": "https://api.github.com/users/eryksun/orgs",
            "repos_url": "https://api.github.com/users/eryksun/repos",
            "events_url": "https://api.github.com/users/eryksun/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eryksun/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-14T17:18:17Z",
          "updated_at": "2024-05-28T23:41:27Z",
          "author_association": "CONTRIBUTOR",
          "body": "> The same approach doesn't work on Window, because `ntpath.join()` is much slower than `nt._getfullpathname()`\r\n\r\nPreferably, `abspath()` should not be naively implemented by simply joining a relative path with the working directory. It doesn't work for drive-relative paths. That's a long-standing bug in the generic implementation `ntpath._abspath_fallback()`.\r\n\r\nA process has a working directory on each A-Z drive. This gets used to resolve drive-relative paths such as \"Z:spam\\\\eggs\" -> \"Z:\\\\path\\\\to\\\\working_directory\\\\spam\\\\eggs\". On NT based Windows systems, a process can optionally store the working directories on drives in special \"=\\<letter\\>:\" environment variables that are inherited by child processes, such as \"=Z:\". If the environment variable isn't set for a drive, or it refers to a path that doesn't exist, the drive's working directory defaults to the root directory. If the overall process working directory is on the same drive, it supersedes the environment variable. Python opts into this scheme on Windows by setting these environment variables in the implementation of `os.chdir()`. However, for resolving drive-relative paths, Python relies on WinAPI `GetFullPathNameW()` rather than trying to implement the scheme on its own. \r\n\r\nPython also relies on `GetFullPathNameW()` to implement some Windows-specific path rules to ensure that the result of `abspath()` is as explicit as possible, but without having to hard code rules that may change. This includes special casing the removal of trailing dots and spaces from the final path component, and also reserving DOS device names such as \"con\". For the latter, it's always \"con\" -> \"\\\\\\\\.\\\\con\". But edge cases can vary across Windows versions, such as for qualified paths (e.g. \".\\\\con\" or \"C:\\\\con\") and file extensions (e.g. \"con.txt\"), and for the set of device names (e.g. supporting \"conin$\" and \"conout$\").\r\n\r\nIn C, `abspath()` on Windows would be implemented via `_Py_normpath_and_size()` followed by `_PyOS_getfullpathname()`, with the empty string as a special case. However, it has to fall back on a generic implementation instead of `_PyOS_getfullpathname()` if the path contains embedded null characters, since WinAPI `GetFullPathNameW()` requires the `lpFileName` parameter to be a null-terminated string.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2054125993/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2054133682",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2054133682",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2054133682,
          "node_id": "IC_kwDOBN0Z8c56b5ey",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-14T17:52:37Z",
          "updated_at": "2024-04-14T17:52:37Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Preferably, `abspath()` should not be naively implemented by simply joining a relative path with the working directory. It doesn't work for drive-relative paths. That's a long-standing bug in the generic implementation `ntpath._abspath_fallback()`.\r\n\r\nI didn't even get that far in the testing process. I already knew it wasn't going to work.\r\nI did notice this while trying to eliminate `normpath()` from the current implementation.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2054133682/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2055896958",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2055896958",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2055896958,
          "node_id": "IC_kwDOBN0Z8c56in9-",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-15T07:37:38Z",
          "updated_at": "2024-04-15T07:38:33Z",
          "author_association": "CONTRIBUTOR",
          "body": "@eryksun, do you know why the new function is 1 usec slower than the old function for long absolute paths (see benchmark)?\r\nIt must be losing time somewhere.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2055896958/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2058394940",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2058394940",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2058394940,
          "node_id": "IC_kwDOBN0Z8c56sJ08",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-16T07:14:18Z",
          "updated_at": "2024-04-16T07:14:18Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks for pointing out the memory leak in my code. Do you have an idea what causes the slowdown for long paths?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2058394940/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2059644122",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2059644122",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2059644122,
          "node_id": "IC_kwDOBN0Z8c56w6za",
          "user": {
            "login": "eryksun",
            "id": 958268,
            "node_id": "MDQ6VXNlcjk1ODI2OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/958268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eryksun",
            "html_url": "https://github.com/eryksun",
            "followers_url": "https://api.github.com/users/eryksun/followers",
            "following_url": "https://api.github.com/users/eryksun/following{/other_user}",
            "gists_url": "https://api.github.com/users/eryksun/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eryksun/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eryksun/subscriptions",
            "organizations_url": "https://api.github.com/users/eryksun/orgs",
            "repos_url": "https://api.github.com/users/eryksun/repos",
            "events_url": "https://api.github.com/users/eryksun/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eryksun/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-16T17:52:30Z",
          "updated_at": "2024-04-16T17:52:30Z",
          "author_association": "CONTRIBUTOR",
          "body": "> do you know why the new function is 1 usec slower than the old function for long absolute paths (see benchmark)? It must be losing time somewhere.\r\n\r\nLet me know if tests on your system still show a performance problem with the latest code.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2059644122/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2059691655",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2059691655",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2059691655,
          "node_id": "IC_kwDOBN0Z8c56xGaH",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-16T18:24:44Z",
          "updated_at": "2024-04-16T18:24:44Z",
          "author_association": "CONTRIBUTOR",
          "body": "Still slower:\r\n\r\n```none\r\n2000 chars\r\n100000 loops, best of 5: 3.87 usec per loop # before\r\n50000 loops, best of 5: 4.68 usec per loop # after\r\n# -> 1.21x slower (needs investigation)\r\n```\r\n\r\nIt's caused by the added if statements in `_Py_normpath_and_size()`, but I don't understand why.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2059691655/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2059804723",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2059804723",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2059804723,
          "node_id": "IC_kwDOBN0Z8c56xiAz",
          "user": {
            "login": "eryksun",
            "id": 958268,
            "node_id": "MDQ6VXNlcjk1ODI2OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/958268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eryksun",
            "html_url": "https://github.com/eryksun",
            "followers_url": "https://api.github.com/users/eryksun/followers",
            "following_url": "https://api.github.com/users/eryksun/following{/other_user}",
            "gists_url": "https://api.github.com/users/eryksun/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eryksun/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eryksun/subscriptions",
            "organizations_url": "https://api.github.com/users/eryksun/orgs",
            "repos_url": "https://api.github.com/users/eryksun/repos",
            "events_url": "https://api.github.com/users/eryksun/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eryksun/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-16T19:41:52Z",
          "updated_at": "2024-04-16T19:41:52Z",
          "author_association": "CONTRIBUTOR",
          "body": "Are you comparing the performance of the feature branch to your own recent build of the main branch that's configured the same way? I get consistently faster results on Linux, varying from slightly faster for a long absolute path, up to 1.5-2 times faster for a relative path. Those are the results I expected considering a lot of the work gets skipped by not having to normalize the working directory.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2059804723/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2059830877",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2059830877",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2059830877,
          "node_id": "IC_kwDOBN0Z8c56xoZd",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-16T20:00:15Z",
          "updated_at": "2024-04-16T20:19:14Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Are you comparing the performance of the feature branch to your own recent build of the main branch that's configured the same way?\r\n\r\nYes I just built from the main branch, only the prefix is different: `~/main` & `~/feature`.\r\n\r\n> Those are the results I expected considering a lot of the work gets skipped by not having to normalize the working directory.\r\n\r\nMe too, but `getcwd()` is super slow on my PC, see #117856. Here are my PC specs:\r\n\r\n- Processor: 3.6 GHz Quad-Core Intel Core i7\r\n- Graphics: Radeon Pro 560 4 GB\r\n- Memory: 16 GB 2400 MHz DDR4\r\n- macOS: 13.6.6 (22G630)\r\n\r\nI think it's better if we use your benchmark. This seems to be an unrelated performance issue.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2059830877/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2059939249",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2059939249",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2059939249,
          "node_id": "IC_kwDOBN0Z8c56yC2x",
          "user": {
            "login": "eryksun",
            "id": 958268,
            "node_id": "MDQ6VXNlcjk1ODI2OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/958268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eryksun",
            "html_url": "https://github.com/eryksun",
            "followers_url": "https://api.github.com/users/eryksun/followers",
            "following_url": "https://api.github.com/users/eryksun/following{/other_user}",
            "gists_url": "https://api.github.com/users/eryksun/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eryksun/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eryksun/subscriptions",
            "organizations_url": "https://api.github.com/users/eryksun/orgs",
            "repos_url": "https://api.github.com/users/eryksun/repos",
            "events_url": "https://api.github.com/users/eryksun/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eryksun/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-16T21:19:07Z",
          "updated_at": "2024-04-16T21:19:07Z",
          "author_association": "CONTRIBUTOR",
          "body": "The lengths on my absolute tests were twice what you listed. My table showed the number of times \"/a\" was repeated, so the lengths were 100, 500, 1000, 2000, and 4000. For the relative cases, my tabled listed the length of the working directory. The total lengths, including the final \"a\" component in each case, were 95, 550, 1005, 2045, and 4060.\r\n\r\n> `getcwd()` is super slow on my PC, see #117856.\r\n\r\n`posix_getcwd(0)` has to be called in the original code as well. Are your builds configured for debug or tracing, or are they release builds?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2059939249/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2059955291",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2059955291",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2059955291,
          "node_id": "IC_kwDOBN0Z8c56yGxb",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-16T21:31:25Z",
          "updated_at": "2024-04-16T21:31:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "> The lengths on my absolute tests were twice what you listed...\r\n\r\nSorry, I fixed the lengths.\r\n\r\n> `posix_getcwd(0)` has to be called in the original code as well.\r\n\r\nI know that. I simply meant that the speedup on my machine is an order of magnitude smaller than the time it takes to call `posix_getcwd(0)`.\r\n\r\n> Are your builds configured for debug or tracing, or are they release builds?\r\n\r\nJust `./configure --prefix=/Users/wannes/feature && make install`. I believe it didn't make a difference when I made a PGO build, but I could try again.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2059955291/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2060456802",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2060456802",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2060456802,
          "node_id": "IC_kwDOBN0Z8c560BNi",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-17T06:15:01Z",
          "updated_at": "2024-04-17T06:15:01Z",
          "author_association": "CONTRIBUTOR",
          "body": "Somehow got worse when I enable PGO:\r\n\r\n```zsh\r\nwannes@Stefans-iMac cpython % ~/main/bin/python3 -m timeit -s \"import os\" \"os.path.abspath('/a' * 1000)\" && ~/feature/bin/python3 -m timeit -s \"import os\" \"os.path.abspath('/a' * 1000)\"\r\n100000 loops, best of 5: 3.83 usec per loop # before\r\n50000 loops, best of 5: 7.58 usec per loop # after PGO\r\n# -> 1.98x slower\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2060456802/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2060696825",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2060696825",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2060696825,
          "node_id": "IC_kwDOBN0Z8c5607z5",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-17T08:28:48Z",
          "updated_at": "2024-04-17T12:12:26Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Somehow got worse when I enable PGO:\r\n\r\nIt may be an issue with your dev environment; with PGO builds on my MacBook, I'm getting no noticeable slowdown ~~(nor speedup)~~ for this PR. I'm seeing a speedup between 10% and 100%.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2060696825/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2060719632",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2060719632",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2060719632,
          "node_id": "IC_kwDOBN0Z8c561BYQ",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-17T08:40:53Z",
          "updated_at": "2024-04-17T08:40:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "I think it's simply because my computer is old: I'm not on Apple Silicon. But I don't think we should focus on this: the performance is better on modern hardware, which is really all that matters. I just find it kind of strange.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2060719632/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2061918134",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2061918134",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2061918134,
          "node_id": "IC_kwDOBN0Z8c565l-2",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-17T18:11:36Z",
          "updated_at": "2024-04-17T18:11:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "How do I fix this error?\r\n\r\n```none\r\ntput: No value for $TERM and no -T specified\r\nconfigure: loading cache config.cache\r\nconfigure: error: `PKG_CONFIG_PATH' has changed since the previous run:\r\nconfigure:   former value:  `/opt/hostedtoolcache/Python/3.12.2/x64/lib/pkgconfig'\r\nconfigure:   current value: `/opt/hostedtoolcache/Python/3.12.3/x64/lib/pkgconfig'\r\nconfigure: error: in `/home/runner/work/cpython/cpython/cross-build/build':\r\nconfigure: error: changes in the environment can compromise the build\r\nconfigure: error: run `make distclean' and/or `rm config.cache'\r\n\t    and start over\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2061918134/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2061997405",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2061997405",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2061997405,
          "node_id": "IC_kwDOBN0Z8c5655Vd",
          "user": {
            "login": "hugovk",
            "id": 1324225,
            "node_id": "MDQ6VXNlcjEzMjQyMjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hugovk",
            "html_url": "https://github.com/hugovk",
            "followers_url": "https://api.github.com/users/hugovk/followers",
            "following_url": "https://api.github.com/users/hugovk/following{/other_user}",
            "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions",
            "organizations_url": "https://api.github.com/users/hugovk/orgs",
            "repos_url": "https://api.github.com/users/hugovk/repos",
            "events_url": "https://api.github.com/users/hugovk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hugovk/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-17T18:55:54Z",
          "updated_at": "2024-04-17T18:55:54Z",
          "author_association": "MEMBER",
          "body": "GitHub updated Python on the CI, and the micro version has changed.\r\n\r\nhttps://github.com/python/cpython/actions/runs/8723744945/job/23932686454?pr=117855\r\n\r\n@erlend-aasland Do we need to include the full Python x.y.z version in the key for the config cache?\r\n\r\nhttps://github.com/python/cpython/blob/a4b44d39cd6941cc03590fee7538776728bdfd0a/.github/workflows/reusable-wasi.yml#L49-L55",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2061997405/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2063104303",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2063104303",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2063104303,
          "node_id": "IC_kwDOBN0Z8c56-Hkv",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-18T06:37:02Z",
          "updated_at": "2024-04-19T19:25:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "~Could someone purge this cache: \"build_wasi_reusable-Linux--24168b7150a51bf2d84cf11b0c1766713f3008fec4733f0682c1e541e1764fc1\"?~ We need to fix the root cause.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2063104303/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2063417629",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2063417629",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2063417629,
          "node_id": "IC_kwDOBN0Z8c56_UEd",
          "user": {
            "login": "hugovk",
            "id": 1324225,
            "node_id": "MDQ6VXNlcjEzMjQyMjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hugovk",
            "html_url": "https://github.com/hugovk",
            "followers_url": "https://api.github.com/users/hugovk/followers",
            "following_url": "https://api.github.com/users/hugovk/following{/other_user}",
            "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions",
            "organizations_url": "https://api.github.com/users/hugovk/orgs",
            "repos_url": "https://api.github.com/users/hugovk/repos",
            "events_url": "https://api.github.com/users/hugovk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hugovk/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-18T09:21:05Z",
          "updated_at": "2024-04-18T09:21:05Z",
          "author_association": "MEMBER",
          "body": "Before working around it and deleting, it would be good to fix the root problem so this doesn't come up next time.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2063417629/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2063764154",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2063764154",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2063764154,
          "node_id": "IC_kwDOBN0Z8c57Aoq6",
          "user": {
            "login": "erlend-aasland",
            "id": 13780613,
            "node_id": "MDQ6VXNlcjEzNzgwNjEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/13780613?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/erlend-aasland",
            "html_url": "https://github.com/erlend-aasland",
            "followers_url": "https://api.github.com/users/erlend-aasland/followers",
            "following_url": "https://api.github.com/users/erlend-aasland/following{/other_user}",
            "gists_url": "https://api.github.com/users/erlend-aasland/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/erlend-aasland/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/erlend-aasland/subscriptions",
            "organizations_url": "https://api.github.com/users/erlend-aasland/orgs",
            "repos_url": "https://api.github.com/users/erlend-aasland/repos",
            "events_url": "https://api.github.com/users/erlend-aasland/events{/privacy}",
            "received_events_url": "https://api.github.com/users/erlend-aasland/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-18T12:35:36Z",
          "updated_at": "2024-04-18T12:35:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "> @erlend-aasland Do we need to include the full Python x.y.z version in the key for the config cache?\r\n\r\nYeah, I think we do.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2063764154/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2063789842",
          "html_url": "https://github.com/python/cpython/pull/117855#issuecomment-2063789842",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117855",
          "id": 2063789842,
          "node_id": "IC_kwDOBN0Z8c57Au8S",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-18T12:49:05Z",
          "updated_at": "2024-04-18T12:49:05Z",
          "author_association": "CONTRIBUTOR",
          "body": "I think it's better to discuss this here: #118039.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2063789842/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/109344",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/109344/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/109344/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/109344/events",
      "html_url": "https://github.com/python/cpython/pull/109344",
      "id": 1893184229,
      "node_id": "PR_kwDOBN0Z8c5aKmH4",
      "number": 109344,
      "title": "gh-108724: Add PyMutex and _PyParkingLot APIs",
      "user": {
        "login": "colesbury",
        "id": 655866,
        "node_id": "MDQ6VXNlcjY1NTg2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/colesbury",
        "html_url": "https://github.com/colesbury",
        "followers_url": "https://api.github.com/users/colesbury/followers",
        "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
        "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
        "organizations_url": "https://api.github.com/users/colesbury/orgs",
        "repos_url": "https://api.github.com/users/colesbury/repos",
        "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
        "received_events_url": "https://api.github.com/users/colesbury/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 22,
      "created_at": "2023-09-12T20:07:24Z",
      "updated_at": "2023-09-28T07:52:26Z",
      "closed_at": "2023-09-19T15:54:30Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/109344",
        "html_url": "https://github.com/python/cpython/pull/109344",
        "diff_url": "https://github.com/python/cpython/pull/109344.diff",
        "patch_url": "https://github.com/python/cpython/pull/109344.patch",
        "merged_at": "2023-09-19T15:54:30Z"
      },
      "body": "`PyMutex` is a one byte lock with fast, inlineable lock and unlock functions for the common uncontended case. The design is based on WebKit's `WTF::Lock`.\r\n\r\nPyMutex is built using the `_PyParkingLot` APIs, which provides a cross-platform futex-like API (based on WebKit's `WTF::ParkingLot`). This internal API will be used for building other synchronization primitives used to implement PEP 703, such as one-time initialization and events.\r\n\r\nThis also includes tests and a mini benchmark in `Tools/lockbench/lockbench.py` to compare with the existing `PyThread_type_lock`.\r\n\r\nUncontended acquisition + release:\r\nLinux (x86-64): PyMutex: 11 ns, PyThread_type_lock: 44 ns\r\nmacOS (arm64): PyMutex: 13 ns, PyThread_type_lock: 18 ns\r\nWindows (x86-64): PyMutex: 13 ns, PyThread_type_lock: 38 ns\r\n\r\n### PR Overview\r\n\r\nThe primary purpose of this PR is to implement `PyMutex`, but there are a number of support pieces (described below).\r\n\r\n* `PyMutex`: A 1-byte lock that doesn't require memory allocation to initialize and is generally faster than the existing `PyThread_type_lock`. The API is internal only for now.\r\n* `_PyParking_Lot`: A futex-like API based on the API of the same name in WebKit. Used to implement `PyMutex`.\r\n* `_PyRawMutex`: A word sized lock used to implement `_PyParking_Lot`\r\n* `PyEvent`: a one time event. This was used a bunch in the \"nogil\" fork and is useful for testing the `PyMutex` implementation, so I've included it as part of the PR.\r\n* `pycore_llist.h`: Defines common operations on doubly-linked list. Not strictly necessary (could do the list operations manually), but they come up frequently in the \"nogil\" fork. (Similar to https://man.freebsd.org/cgi/man.cgi?queue)\r\n\r\n### Linked issue\r\n\r\n<!-- gh-issue-number: gh-108724 -->\r\n* Issue: gh-108724\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "ericsnowcurrently",
        "id": 1152074,
        "node_id": "MDQ6VXNlcjExNTIwNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericsnowcurrently",
        "html_url": "https://github.com/ericsnowcurrently",
        "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
        "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
        "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
        "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
        "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/109344/reactions",
        "total_count": 2,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 2,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/109344/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1716408597",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1716408597",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1716408597,
          "node_id": "IC_kwDOBN0Z8c5mTlEV",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-12T20:47:45Z",
          "updated_at": "2023-09-12T20:47:45Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @colesbury for commit 3161e17da49312af3bdfc7eed3302cdfdebcdff7 :robot:\n\nIf you want to schedule another build, you need to add the <kbd>:hammer: test-with-buildbots</kbd> label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1716408597/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1716604151",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1716604151",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1716604151,
          "node_id": "IC_kwDOBN0Z8c5mUUz3",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-12T22:29:27Z",
          "updated_at": "2023-09-12T22:29:27Z",
          "author_association": "CONTRIBUTOR",
          "body": "!buildbot ARM Raspbian\r\n!buildbot wasm",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1716604151/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1716604179",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1716604179",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1716604179,
          "node_id": "IC_kwDOBN0Z8c5mUU0T",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-12T22:29:28Z",
          "updated_at": "2023-09-12T22:29:28Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @colesbury for commit f963fd873331b6a93e31a923ba860f75294916d5 :robot:\n\nThe command will test the builders whose names match following regular expression: `ARM Raspbian`\n\nThe builders matched are:\n- `ARM Raspbian PR`\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1716604179/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1716604402",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1716604402",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1716604402,
          "node_id": "IC_kwDOBN0Z8c5mUU3y",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-12T22:29:47Z",
          "updated_at": "2023-09-12T22:29:47Z",
          "author_association": "CONTRIBUTOR",
          "body": "!buildbot wasm",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1716604402/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1716604425",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1716604425",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1716604425,
          "node_id": "IC_kwDOBN0Z8c5mUU4J",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-12T22:29:48Z",
          "updated_at": "2023-09-12T22:29:48Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @colesbury for commit f963fd873331b6a93e31a923ba860f75294916d5 :robot:\n\nThe command will test the builders whose names match following regular expression: `wasm`\n\nThe builders matched are:\n- `wasm32-emscripten node (dynamic linking) PR`\n- `wasm32-wasi PR`\n- `wasm32-emscripten node (pthreads) PR`\n- `wasm32-emscripten browser (dynamic linking, no tests) PR`\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1716604425/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1718343861",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1718343861",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1718343861,
          "node_id": "IC_kwDOBN0Z8c5ma9i1",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-13T21:31:40Z",
          "updated_at": "2023-09-13T21:31:40Z",
          "author_association": "CONTRIBUTOR",
          "body": "!buildbot wasm",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1718343861/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1718343884",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1718343884",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1718343884,
          "node_id": "IC_kwDOBN0Z8c5ma9jM",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-13T21:31:42Z",
          "updated_at": "2023-09-13T21:31:42Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @colesbury for commit 779a4019132fda37771de0d60195687f5f854ac3 :robot:\n\nThe command will test the builders whose names match following regular expression: `wasm`\n\nThe builders matched are:\n- `wasm32-emscripten node (dynamic linking) PR`\n- `wasm32-wasi PR`\n- `wasm32-emscripten node (pthreads) PR`\n- `wasm32-emscripten browser (dynamic linking, no tests) PR`\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1718343884/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1719945753",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1719945753",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1719945753,
          "node_id": "IC_kwDOBN0Z8c5mhEoZ",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-14T18:31:00Z",
          "updated_at": "2023-09-14T18:31:00Z",
          "author_association": "MEMBER",
          "body": "FYI, I have a request for you that will help me review your PR(s).\r\n\r\nFirst of all, I want to be clear that I appreciate your work on this.  I also don't want you to think I'm annoyed or otherwise bothered.  Ultimately the following isn't a big deal and amounts to an optimization.  My motivation below is strictly to streamline the process a little, to expedite the outcome. \ud83d\ude04\r\n\r\nMy request: please do not mark any of my review comments as \"resolved\".  Doing so slows down my reviews.  (Perhaps think of me as the owner of the comments I open on a review and so am the one responsible for determining if they are resolved or not.)\r\n\r\nAs a reviewer it's helpful for me to be the one to that marks a comment at \"resolved\" (generally, but especially on large PRs).  Once a comment is resolved I can't tell if it's one that's been resolved since the last time I looked at the PR.  I also can't see any responses you might have left before marking it as resolved.  Consequently, I end up having to expand each resolved comment to double-check and then try to remember the state I left it in, even if it was probably resolved the last time I looked.  This is particularly relevant for long PRs.\r\n\r\nAgain, I just wanted to let you know something that would help me give you the best review possible.  Thanks!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1719945753/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1719967527",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1719967527",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1719967527,
          "node_id": "IC_kwDOBN0Z8c5mhJ8n",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-14T18:47:51Z",
          "updated_at": "2023-09-14T18:47:51Z",
          "author_association": "CONTRIBUTOR",
          "body": "@ericsnowcurrently, I did not directly mark any comments as resolved, but I committed two of your suggestions via the GitHub UI \"Commit Suggestion\". This automatically marks the comment as resolved.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1719967527/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1724159144",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1724159144",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1724159144,
          "node_id": "IC_kwDOBN0Z8c5mxJSo",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-18T18:31:55Z",
          "updated_at": "2023-09-18T18:31:55Z",
          "author_association": "MEMBER",
          "body": "BTW, thanks for your work on this and for addressing all my concerns.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1724159144/reactions",
            "total_count": 4,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 2,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1724570310",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1724570310",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1724570310,
          "node_id": "IC_kwDOBN0Z8c5mytrG",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-18T22:52:46Z",
          "updated_at": "2023-09-18T22:52:46Z",
          "author_association": "MEMBER",
          "body": "I'm going to wait until tomorrow, to accommodate timezones. \ud83d\ude04",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1724570310/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1725939017",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1725939017",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1725939017,
          "node_id": "IC_kwDOBN0Z8c5m371J",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-19T15:54:47Z",
          "updated_at": "2023-09-19T15:54:47Z",
          "author_association": "MEMBER",
          "body": "Thanks again, @colesbury!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1725939017/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1725953704",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1725953704",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1725953704,
          "node_id": "IC_kwDOBN0Z8c5m3_ao",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-19T16:03:15Z",
          "updated_at": "2023-09-19T16:03:15Z",
          "author_association": "NONE",
          "body": ":warning::warning::warning: Buildbot failure :warning::warning::warning:\n------------------------------------------------------------------------\n\nHi! The buildbot **wasm32-emscripten browser (dynamic linking, no tests) 3.x** has failed when building commit 0c89056fe59ac42f09978582479d40e58a236856.\n\nWhat do you need to do:\n\n1. Don't panic.\n2. Check [the buildbot page in the devguide](https://devguide.python.org/buildbots/) if you don't know what the buildbots are or how they work.\n3. Go to the page of the buildbot that failed (https://buildbot.python.org/all/#builders/1051/builds/3114) and take a look at the build logs.\n4. Check if the failure is related to this commit (0c89056fe59ac42f09978582479d40e58a236856) or if it is a false positive.\n5. If the failure is related to this commit, please, reflect that on the issue and make a new Pull Request with a fix.\n\nYou can take a look at the buildbot page here:\n\nhttps://buildbot.python.org/all/#builders/1051/builds/3114\n\n\n\nSummary of the results of the build (if available):\n\n\n\n<details>\n<summary>Click to see traceback logs</summary>\n\n```python-traceback\nremote: Enumerating objects: 51, done.        \nremote: Counting objects:   2% (1/38)        \nremote: Counting objects:   5% (2/38)        \nremote: Counting objects:   7% (3/38)        \nremote: Counting objects:  10% (4/38)        \nremote: Counting objects:  13% (5/38)        \nremote: Counting objects:  15% (6/38)        \nremote: Counting objects:  18% (7/38)        \nremote: Counting objects:  21% (8/38)        \nremote: Counting objects:  23% (9/38)        \nremote: Counting objects:  26% (10/38)        \nremote: Counting objects:  28% (11/38)        \nremote: Counting objects:  31% (12/38)        \nremote: Counting objects:  34% (13/38)        \nremote: Counting objects:  36% (14/38)        \nremote: Counting objects:  39% (15/38)        \nremote: Counting objects:  42% (16/38)        \nremote: Counting objects:  44% (17/38)        \nremote: Counting objects:  47% (18/38)        \nremote: Counting objects:  50% (19/38)        \nremote: Counting objects:  52% (20/38)        \nremote: Counting objects:  55% (21/38)        \nremote: Counting objects:  57% (22/38)        \nremote: Counting objects:  60% (23/38)        \nremote: Counting objects:  63% (24/38)        \nremote: Counting objects:  65% (25/38)        \nremote: Counting objects:  68% (26/38)        \nremote: Counting objects:  71% (27/38)        \nremote: Counting objects:  73% (28/38)        \nremote: Counting objects:  76% (29/38)        \nremote: Counting objects:  78% (30/38)        \nremote: Counting objects:  81% (31/38)        \nremote: Counting objects:  84% (32/38)        \nremote: Counting objects:  86% (33/38)        \nremote: Counting objects:  89% (34/38)        \nremote: Counting objects:  92% (35/38)        \nremote: Counting objects:  94% (36/38)        \nremote: Counting objects:  97% (37/38)        \nremote: Counting objects: 100% (38/38)        \nremote: Counting objects: 100% (38/38), done.        \nremote: Compressing objects:   4% (1/22)        \nremote: Compressing objects:   9% (2/22)        \nremote: Compressing objects:  13% (3/22)        \nremote: Compressing objects:  18% (4/22)        \nremote: Compressing objects:  22% (5/22)        \nremote: Compressing objects:  27% (6/22)        \nremote: Compressing objects:  31% (7/22)        \nremote: Compressing objects:  36% (8/22)        \nremote: Compressing objects:  40% (9/22)        \nremote: Compressing objects:  45% (10/22)        \nremote: Compressing objects:  50% (11/22)        \nremote: Compressing objects:  54% (12/22)        \nremote: Compressing objects:  59% (13/22)        \nremote: Compressing objects:  63% (14/22)        \nremote: Compressing objects:  68% (15/22)        \nremote: Compressing objects:  72% (16/22)        \nremote: Compressing objects:  77% (17/22)        \nremote: Compressing objects:  81% (18/22)        \nremote: Compressing objects:  86% (19/22)        \nremote: Compressing objects:  90% (20/22)        \nremote: Compressing objects:  95% (21/22)        \nremote: Compressing objects: 100% (22/22)        \nremote: Compressing objects: 100% (22/22), done.        \nremote: Total 51 (delta 17), reused 16 (delta 16), pack-reused 13        \nFrom https://github.com/python/cpython\n * branch                  main       -> FETCH_HEAD\nNote: switching to '0c89056fe59ac42f09978582479d40e58a236856'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c <new-branch-name>\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 0c89056fe5 gh-108724: Add PyMutex and _PyParkingLot APIs (gh-109344)\nSwitched to and reset branch 'main'\n\nconfigure: ../../configure --prefix $(PWD)/target/host --with-pydebug --without-pydebug --with-emscripten-target=browser --enable-wasm-dynamic-linking --disable-wasm-pthreads --build=x86_64-pc-linux-gnu --host=wasm32-unknown-emscripten --with-build-python=../build/python\nconfigure: WARNING: using cross tools not prefixed with host triplet\nmcc: error: no input files\n\nmake: make -j2 all\n../../Python/initconfig.c:2309:27: warning: format specifies type 'wint_t' (aka 'int') but the argument has type 'wint_t' (aka 'unsigned int') [-Wformat]\n    printf(usage_envvars, (wint_t)DELIM, (wint_t)DELIM, PYTHONHOMEHELP);\n           ~~~~~~~~~~~~~  ^~~~~~~~~~~~~\n../../Python/initconfig.c:146:18: note: format string is defined here\n\"PYTHONPATH   : '%lc'-separated list of directories prefixed to the\\n\"\n                 ^~~\n                 %c\n../../Python/initconfig.c:2309:42: warning: format specifies type 'wint_t' (aka 'int') but the argument has type 'wint_t' (aka 'unsigned int') [-Wformat]\n    printf(usage_envvars, (wint_t)DELIM, (wint_t)DELIM, PYTHONHOMEHELP);\n           ~~~~~~~~~~~~~                 ^~~~~~~~~~~~~\n../../Python/initconfig.c:148:58: note: format string is defined here\n\"PYTHONHOME   : alternate <prefix> directory (or <prefix>%lc<exec_prefix>).\\n\"\n                                                         ^~~\n                                                         %c\n2 warnings generated.\n../../Python/optimizer.c:408:9: warning: variable 'reserved' set but not used [-Wunused-but-set-variable]\n    int reserved = 0;\n        ^\n1 warning generated.\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:83:11: warning: 'htobe16' macro redefined [-Wmacro-redefined]\n#  define htobe16(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:35:9: note: previous definition is here\n#define htobe16(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:84:11: warning: 'htole16' macro redefined [-Wmacro-redefined]\n#  define htole16(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:41:9: note: previous definition is here\n#define htole16(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:85:11: warning: 'be16toh' macro redefined [-Wmacro-redefined]\n#  define be16toh(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:36:9: note: previous definition is here\n#define be16toh(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:86:11: warning: 'le16toh' macro redefined [-Wmacro-redefined]\n#  define le16toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:42:9: note: previous definition is here\n#define le16toh(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:88:11: warning: 'htobe32' macro redefined [-Wmacro-redefined]\n#  define htobe32(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:37:9: note: previous definition is here\n#define htobe32(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:89:11: warning: 'htole32' macro redefined [-Wmacro-redefined]\n#  define htole32(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:43:9: note: previous definition is here\n#define htole32(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:90:11: warning: 'be32toh' macro redefined [-Wmacro-redefined]\n#  define be32toh(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:38:9: note: previous definition is here\n#define be32toh(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:91:11: warning: 'le32toh' macro redefined [-Wmacro-redefined]\n#  define le32toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:44:9: note: previous definition is here\n#define le32toh(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:93:11: warning: 'htobe64' macro redefined [-Wmacro-redefined]\n#  define htobe64(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:39:9: note: previous definition is here\n#define htobe64(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:94:11: warning: 'htole64' macro redefined [-Wmacro-redefined]\n#  define htole64(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:45:9: note: previous definition is here\n#define htole64(x) (uint64_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:95:11: warning: 'be64toh' macro redefined [-Wmacro-redefined]\n#  define be64toh(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:40:9: note: previous definition is here\n#define be64toh(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:96:11: warning: 'le64toh' macro redefined [-Wmacro-redefined]\n#  define le64toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:46:9: note: previous definition is here\n#define le64toh(x) (uint64_t)(x)\n        ^\n12 warnings generated.\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:83:11: warning: 'htobe16' macro redefined [-Wmacro-redefined]\n#  define htobe16(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:35:9: note: previous definition is here\n#define htobe16(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:84:11: warning: 'htole16' macro redefined [-Wmacro-redefined]\n#  define htole16(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:41:9: note: previous definition is here\n#define htole16(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:85:11: warning: 'be16toh' macro redefined [-Wmacro-redefined]\n#  define be16toh(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:36:9: note: previous definition is here\n#define be16toh(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:86:11: warning: 'le16toh' macro redefined [-Wmacro-redefined]\n#  define le16toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:42:9: note: previous definition is here\n#define le16toh(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:88:11: warning: 'htobe32' macro redefined [-Wmacro-redefined]\n#  define htobe32(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:37:9: note: previous definition is here\n#define htobe32(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:89:11: warning: 'htole32' macro redefined [-Wmacro-redefined]\n#  define htole32(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:43:9: note: previous definition is here\n#define htole32(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:90:11: warning: 'be32toh' macro redefined [-Wmacro-redefined]\n#  define be32toh(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:38:9: note: previous definition is here\n#define be32toh(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:91:11: warning: 'le32toh' macro redefined [-Wmacro-redefined]\n#  define le32toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:44:9: note: previous definition is here\n#define le32toh(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:93:11: warning: 'htobe64' macro redefined [-Wmacro-redefined]\n#  define htobe64(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:39:9: note: previous definition is here\n#define htobe64(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:94:11: warning: 'htole64' macro redefined [-Wmacro-redefined]\n#  define htole64(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:45:9: note: previous definition is here\n#define htole64(x) (uint64_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:95:11: warning: 'be64toh' macro redefined [-Wmacro-redefined]\n#  define be64toh(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:40:9: note: previous definition is here\n#define be64toh(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:96:11: warning: 'le64toh' macro redefined [-Wmacro-redefined]\n#  define le64toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:46:9: note: previous definition is here\n#define le64toh(x) (uint64_t)(x)\n        ^\n12 warnings generated.\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:83:11: warning: 'htobe16' macro redefined [-Wmacro-redefined]\n#  define htobe16(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:35:9: note: previous definition is here\n#define htobe16(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:84:11: warning: 'htole16' macro redefined [-Wmacro-redefined]\n#  define htole16(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:41:9: note: previous definition is here\n#define htole16(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:85:11: warning: 'be16toh' macro redefined [-Wmacro-redefined]\n#  define be16toh(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:36:9: note: previous definition is here\n#define be16toh(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:86:11: warning: 'le16toh' macro redefined [-Wmacro-redefined]\n#  define le16toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:42:9: note: previous definition is here\n#define le16toh(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:88:11: warning: 'htobe32' macro redefined [-Wmacro-redefined]\n#  define htobe32(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:37:9: note: previous definition is here\n#define htobe32(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:89:11: warning: 'htole32' macro redefined [-Wmacro-redefined]\n#  define htole32(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:43:9: note: previous definition is here\n#define htole32(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:90:11: warning: 'be32toh' macro redefined [-Wmacro-redefined]\n#  define be32toh(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:38:9: note: previous definition is here\n#define be32toh(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:91:11: warning: 'le32toh' macro redefined [-Wmacro-redefined]\n#  define le32toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:44:9: note: previous definition is here\n#define le32toh(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:93:11: warning: 'htobe64' macro redefined [-Wmacro-redefined]\n#  define htobe64(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:39:9: note: previous definition is here\n#define htobe64(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:94:11: warning: 'htole64' macro redefined [-Wmacro-redefined]\n#  define htole64(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:45:9: note: previous definition is here\n#define htole64(x) (uint64_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:95:11: warning: 'be64toh' macro redefined [-Wmacro-redefined]\n#  define be64toh(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:40:9: note: previous definition is here\n#define be64toh(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:96:11: warning: 'le64toh' macro redefined [-Wmacro-redefined]\n#  define le64toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:46:9: note: previous definition is here\n#define le64toh(x) (uint64_t)(x)\n        ^\n12 warnings generated.\n../../Modules/expat/xmlparse.c:3116:9: warning: code will never be executed [-Wunreachable-code]\n        parser->m_characterDataHandler(parser->m_handlerArg, parser->m_dataBuf,\n        ^~~~~~\n../../Modules/expat/xmlparse.c:3115:16: note: silence by adding parentheses to mark code as explicitly dead\n      else if (0 && parser->m_characterDataHandler)\n               ^\n               /* DISABLES CODE */ ( )\n../../Modules/expat/xmlparse.c:4059:9: warning: code will never be executed [-Wunreachable-code]\n        parser->m_characterDataHandler(parser->m_handlerArg, parser->m_dataBuf,\n        ^~~~~~\n../../Modules/expat/xmlparse.c:4058:16: note: silence by adding parentheses to mark code as explicitly dead\n      else if (0 && parser->m_characterDataHandler)\n               ^\n               /* DISABLES CODE */ ( )\n../../Modules/expat/xmlparse.c:7703:11: warning: format specifies type 'int' but the argument has type 'ptrdiff_t' (aka 'long') [-Wformat]\n          bytesMore, (account == XML_ACCOUNT_DIRECT) ? \"DIR\" : \"EXP\",\n          ^~~~~~~~~\n3 warnings generated.\n../../Modules/socketmodule.c:4082:33: warning: comparison of integers of different signs: 'unsigned long' and 'long' [-Wsign-compare]\n         cmsgh != NULL; cmsgh = CMSG_NXTHDR(&msg, cmsgh)) {\n                                ^~~~~~~~~~~~~~~~~~~~~~~~\n/opt/buildbot/.emscripten_cache/sysroot/include/sys/socket.h:356:44: note: expanded from macro 'CMSG_NXTHDR'\n        __CMSG_LEN(cmsg) + sizeof(struct cmsghdr) >= __MHDR_END(mhdr) - (unsigned char *)(cmsg) \\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../Modules/socketmodule.c:4135:33: warning: comparison of integers of different signs: 'unsigned long' and 'long' [-Wsign-compare]\n         cmsgh != NULL; cmsgh = CMSG_NXTHDR(&msg, cmsgh)) {\n                                ^~~~~~~~~~~~~~~~~~~~~~~~\n/opt/buildbot/.emscripten_cache/sysroot/include/sys/socket.h:356:44: note: expanded from macro 'CMSG_NXTHDR'\n        __CMSG_LEN(cmsg) + sizeof(struct cmsghdr) >= __MHDR_END(mhdr) - (unsigned char *)(cmsg) \\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../Modules/socketmodule.c:4759:54: warning: comparison of integers of different signs: 'unsigned long' and 'long' [-Wsign-compare]\n            cmsgh = (i == 0) ? CMSG_FIRSTHDR(&msg) : CMSG_NXTHDR(&msg, cmsgh);\n                                                     ^~~~~~~~~~~~~~~~~~~~~~~~\n/opt/buildbot/.emscripten_cache/sysroot/include/sys/socket.h:356:44: note: expanded from macro 'CMSG_NXTHDR'\n        __CMSG_LEN(cmsg) + sizeof(struct cmsghdr) >= __MHDR_END(mhdr) - (unsigned char *)(cmsg) \\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n3 warnings generated.\n../../Modules/_sqlite/connection.c:2260:19: warning: result of comparison of constant 9223372036854775807 with expression of type 'Py_ssize_t' (aka 'long') is always false [-Wtautological-constant-out-of-range-compare]\n    if (data->len > 9223372036854775807) {  // (1 << 63) - 1\n        ~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~\n1 warning generated.\nCreated /opt/buildbot/bcannon-wasm/3.x.bcannon-wasm.emscripten-browser/build/build_oot/host/opt/buildbot/bcannon-wasm/3.x.bcannon-wasm.emscripten-browser/build/build_oot/host/target/host/lib/python313.zip (2.87 MiB)\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:83:11: warning: 'htobe16' macro redefined [-Wmacro-redefined]\n#  define htobe16(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:35:9: note: previous definition is here\n#define htobe16(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:84:11: warning: 'htole16' macro redefined [-Wmacro-redefined]\n#  define htole16(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:41:9: note: previous definition is here\n#define htole16(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:85:11: warning: 'be16toh' macro redefined [-Wmacro-redefined]\n#  define be16toh(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:36:9: note: previous definition is here\n#define be16toh(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:86:11: warning: 'le16toh' macro redefined [-Wmacro-redefined]\n#  define le16toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:42:9: note: previous definition is here\n#define le16toh(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:88:11: warning: 'htobe32' macro redefined [-Wmacro-redefined]\n#  define htobe32(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:37:9: note: previous definition is here\n#define htobe32(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:89:11: warning: 'htole32' macro redefined [-Wmacro-redefined]\n#  define htole32(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:43:9: note: previous definition is here\n#define htole32(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:90:11: warning: 'be32toh' macro redefined [-Wmacro-redefined]\n#  define be32toh(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:38:9: note: previous definition is here\n#define be32toh(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:91:11: warning: 'le32toh' macro redefined [-Wmacro-redefined]\n#  define le32toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:44:9: note: previous definition is here\n#define le32toh(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:93:11: warning: 'htobe64' macro redefined [-Wmacro-redefined]\n#  define htobe64(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:39:9: note: previous definition is here\n#define htobe64(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:94:11: warning: 'htole64' macro redefined [-Wmacro-redefined]\n#  define htole64(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:45:9: note: previous definition is here\n#define htole64(x) (uint64_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:95:11: warning: 'be64toh' macro redefined [-Wmacro-redefined]\n#  define be64toh(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:40:9: note: previous definition is here\n#define be64toh(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:96:11: warning: 'le64toh' macro redefined [-Wmacro-redefined]\n#  define le64toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:46:9: note: previous definition is here\n#define le64toh(x) (uint64_t)(x)\n        ^\n12 warnings generated.\nrror: undefined symbol: sem_timedwait (referenced by top-level compiled C/C++ code)\nwarning: Link with `-sLLD_REPORT_UNDEFINED` to get more information on undefined symbols\nwarning: To disable errors for undefined symbols use `-sERROR_ON_UNDEFINED_SYMBOLS=0`\nwarning: _sem_timedwait may need to be added to EXPORTED_FUNCTIONS if it arrives from a system library\nError: Aborting compilation due to previous errors\nmcc: error: '/opt/emsdk/node/14.18.2_64bit/bin/node /opt/emsdk/upstream/emscripten/src/compiler.js /tmp/tmpbjctbtqx.json' failed (returned 1)\nmake: *** [Makefile:906: python.js] Error 1\nmmake: error: 'make -j2 all' failed (returned 2)\n```\n\n</details>\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1725953704/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1725955231",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1725955231",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1725955231,
          "node_id": "IC_kwDOBN0Z8c5m3_yf",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-19T16:03:27Z",
          "updated_at": "2023-09-19T16:03:27Z",
          "author_association": "NONE",
          "body": ":warning::warning::warning: Buildbot failure :warning::warning::warning:\n------------------------------------------------------------------------\n\nHi! The buildbot **wasm32-emscripten node (dynamic linking) 3.x** has failed when building commit 0c89056fe59ac42f09978582479d40e58a236856.\n\nWhat do you need to do:\n\n1. Don't panic.\n2. Check [the buildbot page in the devguide](https://devguide.python.org/buildbots/) if you don't know what the buildbots are or how they work.\n3. Go to the page of the buildbot that failed (https://buildbot.python.org/all/#builders/1056/builds/3121) and take a look at the build logs.\n4. Check if the failure is related to this commit (0c89056fe59ac42f09978582479d40e58a236856) or if it is a false positive.\n5. If the failure is related to this commit, please, reflect that on the issue and make a new Pull Request with a fix.\n\nYou can take a look at the buildbot page here:\n\nhttps://buildbot.python.org/all/#builders/1056/builds/3121\n\n\n\nSummary of the results of the build (if available):\n\n\n\n<details>\n<summary>Click to see traceback logs</summary>\n\n```python-traceback\nremote: Enumerating objects: 51, done.        \nremote: Counting objects:   2% (1/38)        \nremote: Counting objects:   5% (2/38)        \nremote: Counting objects:   7% (3/38)        \nremote: Counting objects:  10% (4/38)        \nremote: Counting objects:  13% (5/38)        \nremote: Counting objects:  15% (6/38)        \nremote: Counting objects:  18% (7/38)        \nremote: Counting objects:  21% (8/38)        \nremote: Counting objects:  23% (9/38)        \nremote: Counting objects:  26% (10/38)        \nremote: Counting objects:  28% (11/38)        \nremote: Counting objects:  31% (12/38)        \nremote: Counting objects:  34% (13/38)        \nremote: Counting objects:  36% (14/38)        \nremote: Counting objects:  39% (15/38)        \nremote: Counting objects:  42% (16/38)        \nremote: Counting objects:  44% (17/38)        \nremote: Counting objects:  47% (18/38)        \nremote: Counting objects:  50% (19/38)        \nremote: Counting objects:  52% (20/38)        \nremote: Counting objects:  55% (21/38)        \nremote: Counting objects:  57% (22/38)        \nremote: Counting objects:  60% (23/38)        \nremote: Counting objects:  63% (24/38)        \nremote: Counting objects:  65% (25/38)        \nremote: Counting objects:  68% (26/38)        \nremote: Counting objects:  71% (27/38)        \nremote: Counting objects:  73% (28/38)        \nremote: Counting objects:  76% (29/38)        \nremote: Counting objects:  78% (30/38)        \nremote: Counting objects:  81% (31/38)        \nremote: Counting objects:  84% (32/38)        \nremote: Counting objects:  86% (33/38)        \nremote: Counting objects:  89% (34/38)        \nremote: Counting objects:  92% (35/38)        \nremote: Counting objects:  94% (36/38)        \nremote: Counting objects:  97% (37/38)        \nremote: Counting objects: 100% (38/38)        \nremote: Counting objects: 100% (38/38), done.        \nremote: Compressing objects:   4% (1/22)        \nremote: Compressing objects:   9% (2/22)        \nremote: Compressing objects:  13% (3/22)        \nremote: Compressing objects:  18% (4/22)        \nremote: Compressing objects:  22% (5/22)        \nremote: Compressing objects:  27% (6/22)        \nremote: Compressing objects:  31% (7/22)        \nremote: Compressing objects:  36% (8/22)        \nremote: Compressing objects:  40% (9/22)        \nremote: Compressing objects:  45% (10/22)        \nremote: Compressing objects:  50% (11/22)        \nremote: Compressing objects:  54% (12/22)        \nremote: Compressing objects:  59% (13/22)        \nremote: Compressing objects:  63% (14/22)        \nremote: Compressing objects:  68% (15/22)        \nremote: Compressing objects:  72% (16/22)        \nremote: Compressing objects:  77% (17/22)        \nremote: Compressing objects:  81% (18/22)        \nremote: Compressing objects:  86% (19/22)        \nremote: Compressing objects:  90% (20/22)        \nremote: Compressing objects:  95% (21/22)        \nremote: Compressing objects: 100% (22/22)        \nremote: Compressing objects: 100% (22/22), done.        \nremote: Total 51 (delta 17), reused 16 (delta 16), pack-reused 13        \nFrom https://github.com/python/cpython\n * branch                  main       -> FETCH_HEAD\nNote: switching to '0c89056fe59ac42f09978582479d40e58a236856'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c <new-branch-name>\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 0c89056fe5 gh-108724: Add PyMutex and _PyParkingLot APIs (gh-109344)\nSwitched to and reset branch 'main'\n\nconfigure: ../../configure --prefix $(PWD)/target/host --with-pydebug --without-pydebug --with-emscripten-target=node --enable-wasm-dynamic-linking --disable-wasm-pthreads --build=x86_64-pc-linux-gnu --host=wasm32-unknown-emscripten --with-build-python=../build/python\nconfigure: WARNING: using cross tools not prefixed with host triplet\nmcc: error: no input files\n\nmake: make -j2 all\n../../Python/initconfig.c:2309:27: warning: format specifies type 'wint_t' (aka 'int') but the argument has type 'wint_t' (aka 'unsigned int') [-Wformat]\n    printf(usage_envvars, (wint_t)DELIM, (wint_t)DELIM, PYTHONHOMEHELP);\n           ~~~~~~~~~~~~~  ^~~~~~~~~~~~~\n../../Python/initconfig.c:146:18: note: format string is defined here\n\"PYTHONPATH   : '%lc'-separated list of directories prefixed to the\\n\"\n                 ^~~\n                 %c\n../../Python/initconfig.c:2309:42: warning: format specifies type 'wint_t' (aka 'int') but the argument has type 'wint_t' (aka 'unsigned int') [-Wformat]\n    printf(usage_envvars, (wint_t)DELIM, (wint_t)DELIM, PYTHONHOMEHELP);\n           ~~~~~~~~~~~~~                 ^~~~~~~~~~~~~\n../../Python/initconfig.c:148:58: note: format string is defined here\n\"PYTHONHOME   : alternate <prefix> directory (or <prefix>%lc<exec_prefix>).\\n\"\n                                                         ^~~\n                                                         %c\n2 warnings generated.\n../../Python/optimizer.c:408:9: warning: variable 'reserved' set but not used [-Wunused-but-set-variable]\n    int reserved = 0;\n        ^\n1 warning generated.\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:83:11: warning: 'htobe16' macro redefined [-Wmacro-redefined]\n#  define htobe16(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:35:9: note: previous definition is here\n#define htobe16(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:84:11: warning: 'htole16' macro redefined [-Wmacro-redefined]\n#  define htole16(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:41:9: note: previous definition is here\n#define htole16(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:85:11: warning: 'be16toh' macro redefined [-Wmacro-redefined]\n#  define be16toh(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:36:9: note: previous definition is here\n#define be16toh(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:86:11: warning: 'le16toh' macro redefined [-Wmacro-redefined]\n#  define le16toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:42:9: note: previous definition is here\n#define le16toh(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:88:11: warning: 'htobe32' macro redefined [-Wmacro-redefined]\n#  define htobe32(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:37:9: note: previous definition is here\n#define htobe32(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:89:11: warning: 'htole32' macro redefined [-Wmacro-redefined]\n#  define htole32(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:43:9: note: previous definition is here\n#define htole32(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:90:11: warning: 'be32toh' macro redefined [-Wmacro-redefined]\n#  define be32toh(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:38:9: note: previous definition is here\n#define be32toh(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:91:11: warning: 'le32toh' macro redefined [-Wmacro-redefined]\n#  define le32toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:44:9: note: previous definition is here\n#define le32toh(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:93:11: warning: 'htobe64' macro redefined [-Wmacro-redefined]\n#  define htobe64(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:39:9: note: previous definition is here\n#define htobe64(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:94:11: warning: 'htole64' macro redefined [-Wmacro-redefined]\n#  define htole64(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:45:9: note: previous definition is here\n#define htole64(x) (uint64_t)(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:95:11: warning: 'be64toh' macro redefined [-Wmacro-redefined]\n#  define be64toh(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:40:9: note: previous definition is here\n#define be64toh(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/md5module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_MD5.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:96:11: warning: 'le64toh' macro redefined [-Wmacro-redefined]\n#  define le64toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:46:9: note: previous definition is here\n#define le64toh(x) (uint64_t)(x)\n        ^\n12 warnings generated.\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:83:11: warning: 'htobe16' macro redefined [-Wmacro-redefined]\n#  define htobe16(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:35:9: note: previous definition is here\n#define htobe16(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:84:11: warning: 'htole16' macro redefined [-Wmacro-redefined]\n#  define htole16(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:41:9: note: previous definition is here\n#define htole16(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:85:11: warning: 'be16toh' macro redefined [-Wmacro-redefined]\n#  define be16toh(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:36:9: note: previous definition is here\n#define be16toh(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:86:11: warning: 'le16toh' macro redefined [-Wmacro-redefined]\n#  define le16toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:42:9: note: previous definition is here\n#define le16toh(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:88:11: warning: 'htobe32' macro redefined [-Wmacro-redefined]\n#  define htobe32(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:37:9: note: previous definition is here\n#define htobe32(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:89:11: warning: 'htole32' macro redefined [-Wmacro-redefined]\n#  define htole32(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:43:9: note: previous definition is here\n#define htole32(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:90:11: warning: 'be32toh' macro redefined [-Wmacro-redefined]\n#  define be32toh(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:38:9: note: previous definition is here\n#define be32toh(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:91:11: warning: 'le32toh' macro redefined [-Wmacro-redefined]\n#  define le32toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:44:9: note: previous definition is here\n#define le32toh(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:93:11: warning: 'htobe64' macro redefined [-Wmacro-redefined]\n#  define htobe64(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:39:9: note: previous definition is here\n#define htobe64(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:94:11: warning: 'htole64' macro redefined [-Wmacro-redefined]\n#  define htole64(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:45:9: note: previous definition is here\n#define htole64(x) (uint64_t)(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:95:11: warning: 'be64toh' macro redefined [-Wmacro-redefined]\n#  define be64toh(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:40:9: note: previous definition is here\n#define be64toh(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha1module.c:47:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA1.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:96:11: warning: 'le64toh' macro redefined [-Wmacro-redefined]\n#  define le64toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:46:9: note: previous definition is here\n#define le64toh(x) (uint64_t)(x)\n        ^\n12 warnings generated.\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:83:11: warning: 'htobe16' macro redefined [-Wmacro-redefined]\n#  define htobe16(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:35:9: note: previous definition is here\n#define htobe16(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:84:11: warning: 'htole16' macro redefined [-Wmacro-redefined]\n#  define htole16(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:41:9: note: previous definition is here\n#define htole16(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:85:11: warning: 'be16toh' macro redefined [-Wmacro-redefined]\n#  define be16toh(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:36:9: note: previous definition is here\n#define be16toh(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:86:11: warning: 'le16toh' macro redefined [-Wmacro-redefined]\n#  define le16toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:42:9: note: previous definition is here\n#define le16toh(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:88:11: warning: 'htobe32' macro redefined [-Wmacro-redefined]\n#  define htobe32(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:37:9: note: previous definition is here\n#define htobe32(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:89:11: warning: 'htole32' macro redefined [-Wmacro-redefined]\n#  define htole32(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:43:9: note: previous definition is here\n#define htole32(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:90:11: warning: 'be32toh' macro redefined [-Wmacro-redefined]\n#  define be32toh(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:38:9: note: previous definition is here\n#define be32toh(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:91:11: warning: 'le32toh' macro redefined [-Wmacro-redefined]\n#  define le32toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:44:9: note: previous definition is here\n#define le32toh(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:93:11: warning: 'htobe64' macro redefined [-Wmacro-redefined]\n#  define htobe64(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:39:9: note: previous definition is here\n#define htobe64(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:94:11: warning: 'htole64' macro redefined [-Wmacro-redefined]\n#  define htole64(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:45:9: note: previous definition is here\n#define htole64(x) (uint64_t)(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:95:11: warning: 'be64toh' macro redefined [-Wmacro-redefined]\n#  define be64toh(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:40:9: note: previous definition is here\n#define be64toh(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha3module.c:59:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA3.h:34:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:96:11: warning: 'le64toh' macro redefined [-Wmacro-redefined]\n#  define le64toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:46:9: note: previous definition is here\n#define le64toh(x) (uint64_t)(x)\n        ^\n12 warnings generated.\n../../Modules/expat/xmlparse.c:3116:9: warning: code will never be executed [-Wunreachable-code]\n        parser->m_characterDataHandler(parser->m_handlerArg, parser->m_dataBuf,\n        ^~~~~~\n../../Modules/expat/xmlparse.c:3115:16: note: silence by adding parentheses to mark code as explicitly dead\n      else if (0 && parser->m_characterDataHandler)\n               ^\n               /* DISABLES CODE */ ( )\n../../Modules/expat/xmlparse.c:4059:9: warning: code will never be executed [-Wunreachable-code]\n        parser->m_characterDataHandler(parser->m_handlerArg, parser->m_dataBuf,\n        ^~~~~~\n../../Modules/expat/xmlparse.c:4058:16: note: silence by adding parentheses to mark code as explicitly dead\n      else if (0 && parser->m_characterDataHandler)\n               ^\n               /* DISABLES CODE */ ( )\n../../Modules/expat/xmlparse.c:7703:11: warning: format specifies type 'int' but the argument has type 'ptrdiff_t' (aka 'long') [-Wformat]\n          bytesMore, (account == XML_ACCOUNT_DIRECT) ? \"DIR\" : \"EXP\",\n          ^~~~~~~~~\n3 warnings generated.\n../../Modules/socketmodule.c:4082:33: warning: comparison of integers of different signs: 'unsigned long' and 'long' [-Wsign-compare]\n         cmsgh != NULL; cmsgh = CMSG_NXTHDR(&msg, cmsgh)) {\n                                ^~~~~~~~~~~~~~~~~~~~~~~~\n/opt/buildbot/.emscripten_cache/sysroot/include/sys/socket.h:356:44: note: expanded from macro 'CMSG_NXTHDR'\n        __CMSG_LEN(cmsg) + sizeof(struct cmsghdr) >= __MHDR_END(mhdr) - (unsigned char *)(cmsg) \\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../Modules/socketmodule.c:4135:33: warning: comparison of integers of different signs: 'unsigned long' and 'long' [-Wsign-compare]\n         cmsgh != NULL; cmsgh = CMSG_NXTHDR(&msg, cmsgh)) {\n                                ^~~~~~~~~~~~~~~~~~~~~~~~\n/opt/buildbot/.emscripten_cache/sysroot/include/sys/socket.h:356:44: note: expanded from macro 'CMSG_NXTHDR'\n        __CMSG_LEN(cmsg) + sizeof(struct cmsghdr) >= __MHDR_END(mhdr) - (unsigned char *)(cmsg) \\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../Modules/socketmodule.c:4759:54: warning: comparison of integers of different signs: 'unsigned long' and 'long' [-Wsign-compare]\n            cmsgh = (i == 0) ? CMSG_FIRSTHDR(&msg) : CMSG_NXTHDR(&msg, cmsgh);\n                                                     ^~~~~~~~~~~~~~~~~~~~~~~~\n/opt/buildbot/.emscripten_cache/sysroot/include/sys/socket.h:356:44: note: expanded from macro 'CMSG_NXTHDR'\n        __CMSG_LEN(cmsg) + sizeof(struct cmsghdr) >= __MHDR_END(mhdr) - (unsigned char *)(cmsg) \\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n3 warnings generated.\n../../Modules/_sqlite/connection.c:2260:19: warning: result of comparison of constant 9223372036854775807 with expression of type 'Py_ssize_t' (aka 'long') is always false [-Wtautological-constant-out-of-range-compare]\n    if (data->len > 9223372036854775807) {  // (1 << 63) - 1\n        ~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~\n1 warning generated.\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:83:11: warning: 'htobe16' macro redefined [-Wmacro-redefined]\n#  define htobe16(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:35:9: note: previous definition is here\n#define htobe16(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:84:11: warning: 'htole16' macro redefined [-Wmacro-redefined]\n#  define htole16(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:41:9: note: previous definition is here\n#define htole16(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:85:11: warning: 'be16toh' macro redefined [-Wmacro-redefined]\n#  define be16toh(x) __builtin_bswap16(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:36:9: note: previous definition is here\n#define be16toh(x) __bswap16(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:86:11: warning: 'le16toh' macro redefined [-Wmacro-redefined]\n#  define le16toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:42:9: note: previous definition is here\n#define le16toh(x) (uint16_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:88:11: warning: 'htobe32' macro redefined [-Wmacro-redefined]\n#  define htobe32(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:37:9: note: previous definition is here\n#define htobe32(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:89:11: warning: 'htole32' macro redefined [-Wmacro-redefined]\n#  define htole32(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:43:9: note: previous definition is here\n#define htole32(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:90:11: warning: 'be32toh' macro redefined [-Wmacro-redefined]\n#  define be32toh(x) __builtin_bswap32(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:38:9: note: previous definition is here\n#define be32toh(x) __bswap32(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:91:11: warning: 'le32toh' macro redefined [-Wmacro-redefined]\n#  define le32toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:44:9: note: previous definition is here\n#define le32toh(x) (uint32_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:93:11: warning: 'htobe64' macro redefined [-Wmacro-redefined]\n#  define htobe64(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:39:9: note: previous definition is here\n#define htobe64(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:94:11: warning: 'htole64' macro redefined [-Wmacro-redefined]\n#  define htole64(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:45:9: note: previous definition is here\n#define htole64(x) (uint64_t)(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:95:11: warning: 'be64toh' macro redefined [-Wmacro-redefined]\n#  define be64toh(x) __builtin_bswap64(x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:40:9: note: previous definition is here\n#define be64toh(x) __bswap64(x)\n        ^\nIn file included from ../../Modules/sha2module.c:48:\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\n../../Modules/_hacl/include/krml/lowstar_endianness.h:96:11: warning: 'le64toh' macro redefined [-Wmacro-redefined]\n#  define le64toh(x) (x)\n          ^\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:46:9: note: previous definition is here\n#define le64toh(x) (uint64_t)(x)\n        ^\n12 warnings generated.\nrror: undefined symbol: sem_timedwait (referenced by top-level compiled C/C++ code)\nwarning: Link with `-sLLD_REPORT_UNDEFINED` to get more information on undefined symbols\nwarning: To disable errors for undefined symbols use `-sERROR_ON_UNDEFINED_SYMBOLS=0`\nwarning: _sem_timedwait may need to be added to EXPORTED_FUNCTIONS if it arrives from a system library\nError: Aborting compilation due to previous errors\nmcc: error: '/opt/emsdk/node/14.18.2_64bit/bin/node /opt/emsdk/upstream/emscripten/src/compiler.js /tmp/tmpyjv3jww7.json' failed (returned 1)\nmake: *** [Makefile:906: python.js] Error 1\nmmake: error: 'make -j2 all' failed (returned 2)\n```\n\n</details>\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1725955231/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1726009438",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1726009438",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1726009438,
          "node_id": "IC_kwDOBN0Z8c5m4NBe",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-19T16:11:50Z",
          "updated_at": "2023-09-19T16:11:50Z",
          "author_association": "MEMBER",
          "body": "@colesbury ^^^",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1726009438/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1726044650",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1726044650",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1726044650,
          "node_id": "IC_kwDOBN0Z8c5m4Vnq",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-19T16:31:52Z",
          "updated_at": "2023-09-19T16:31:52Z",
          "author_association": "MEMBER",
          "body": "```\r\nIn file included from ../../Modules/sha2module.c:48:\r\nIn file included from ../../Modules/_hacl/Hacl_Hash_SHA2.h:35:\r\nIn file included from ../../Modules/_hacl/include/krml/types.h:12:\r\n../../Modules/_hacl/include/krml/lowstar_endianness.h:83:11: warning: 'htobe16' macro redefined [-Wmacro-redefined]\r\n#  define htobe16(x) __builtin_bswap16(x)\r\n          ^\r\n/opt/buildbot/.emscripten_cache/sysroot/include/endian.h:35:9: note: previous definition is here\r\n#define htobe16(x) __bswap16(x)\r\n        ^\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1726044650/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1726044657",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1726044657",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1726044657,
          "node_id": "IC_kwDOBN0Z8c5m4Vnx",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-19T16:31:53Z",
          "updated_at": "2023-09-19T16:31:53Z",
          "author_association": "NONE",
          "body": ":warning::warning::warning: Buildbot failure :warning::warning::warning:\n------------------------------------------------------------------------\n\nHi! The buildbot **AMD64 Ubuntu Shared 3.x** has failed when building commit 0c89056fe59ac42f09978582479d40e58a236856.\n\nWhat do you need to do:\n\n1. Don't panic.\n2. Check [the buildbot page in the devguide](https://devguide.python.org/buildbots/) if you don't know what the buildbots are or how they work.\n3. Go to the page of the buildbot that failed (https://buildbot.python.org/all/#builders/506/builds/5900) and take a look at the build logs.\n4. Check if the failure is related to this commit (0c89056fe59ac42f09978582479d40e58a236856) or if it is a false positive.\n5. If the failure is related to this commit, please, reflect that on the issue and make a new Pull Request with a fix.\n\nYou can take a look at the buildbot page here:\n\nhttps://buildbot.python.org/all/#builders/506/builds/5900\n\nFailed tests:\n\n- test.test_concurrent_futures.test_wait\n\nFailed subtests:\n\n- test_timeout - test.test_concurrent_futures.test_wait.ProcessPoolForkserverWaitTest.test_timeout\n\n\nSummary of the results of the build (if available):\n\n== \n\n<details>\n<summary>Click to see traceback logs</summary>\n\n```python-traceback\nTraceback (most recent call last):\n  File \"/srv/buildbot/buildarea/3.x.bolen-ubuntu/build/Lib/test/test_concurrent_futures/test_wait.py\", line 128, in test_timeout\n    self.assertEqual(set([CANCELLED_AND_NOTIFIED_FUTURE,\nAssertionError: Items in the first set but not the second:\n<Future at 0x7f25adaf3bc0 state=running>\n\n```\n\n</details>\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1726044657/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1726046358",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1726046358",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1726046358,
          "node_id": "IC_kwDOBN0Z8c5m4WCW",
          "user": {
            "login": "ericsnowcurrently",
            "id": 1152074,
            "node_id": "MDQ6VXNlcjExNTIwNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1152074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ericsnowcurrently",
            "html_url": "https://github.com/ericsnowcurrently",
            "followers_url": "https://api.github.com/users/ericsnowcurrently/followers",
            "following_url": "https://api.github.com/users/ericsnowcurrently/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericsnowcurrently/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ericsnowcurrently/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericsnowcurrently/subscriptions",
            "organizations_url": "https://api.github.com/users/ericsnowcurrently/orgs",
            "repos_url": "https://api.github.com/users/ericsnowcurrently/repos",
            "events_url": "https://api.github.com/users/ericsnowcurrently/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ericsnowcurrently/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-19T16:32:59Z",
          "updated_at": "2023-09-19T16:32:59Z",
          "author_association": "MEMBER",
          "body": "The AMD64 Ubuntu Shared 3.x failure is due to an unrelated flaky test.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1726046358/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1726051404",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1726051404",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1726051404,
          "node_id": "IC_kwDOBN0Z8c5m4XRM",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-19T16:35:38Z",
          "updated_at": "2023-09-19T16:35:38Z",
          "author_association": "NONE",
          "body": ":warning::warning::warning: Buildbot failure :warning::warning::warning:\n------------------------------------------------------------------------\n\nHi! The buildbot **AMD64 Fedora Stable 3.x** has failed when building commit 0c89056fe59ac42f09978582479d40e58a236856.\n\nWhat do you need to do:\n\n1. Don't panic.\n2. Check [the buildbot page in the devguide](https://devguide.python.org/buildbots/) if you don't know what the buildbots are or how they work.\n3. Go to the page of the buildbot that failed (https://buildbot.python.org/all/#builders/543/builds/4495) and take a look at the build logs.\n4. Check if the failure is related to this commit (0c89056fe59ac42f09978582479d40e58a236856) or if it is a false positive.\n5. If the failure is related to this commit, please, reflect that on the issue and make a new Pull Request with a fix.\n\nYou can take a look at the buildbot page here:\n\nhttps://buildbot.python.org/all/#builders/543/builds/4495\n\nFailed tests:\n\n- test.test_concurrent_futures.test_shutdown\n\n\nSummary of the results of the build (if available):\n\n== \n\n<details>\n<summary>Click to see traceback logs</summary>\n\n```python-traceback\nremote: Enumerating objects: 51, done.        \nremote: Counting objects:   2% (1/38)        \nremote: Counting objects:   5% (2/38)        \nremote: Counting objects:   7% (3/38)        \nremote: Counting objects:  10% (4/38)        \nremote: Counting objects:  13% (5/38)        \nremote: Counting objects:  15% (6/38)        \nremote: Counting objects:  18% (7/38)        \nremote: Counting objects:  21% (8/38)        \nremote: Counting objects:  23% (9/38)        \nremote: Counting objects:  26% (10/38)        \nremote: Counting objects:  28% (11/38)        \nremote: Counting objects:  31% (12/38)        \nremote: Counting objects:  34% (13/38)        \nremote: Counting objects:  36% (14/38)        \nremote: Counting objects:  39% (15/38)        \nremote: Counting objects:  42% (16/38)        \nremote: Counting objects:  44% (17/38)        \nremote: Counting objects:  47% (18/38)        \nremote: Counting objects:  50% (19/38)        \nremote: Counting objects:  52% (20/38)        \nremote: Counting objects:  55% (21/38)        \nremote: Counting objects:  57% (22/38)        \nremote: Counting objects:  60% (23/38)        \nremote: Counting objects:  63% (24/38)        \nremote: Counting objects:  65% (25/38)        \nremote: Counting objects:  68% (26/38)        \nremote: Counting objects:  71% (27/38)        \nremote: Counting objects:  73% (28/38)        \nremote: Counting objects:  76% (29/38)        \nremote: Counting objects:  78% (30/38)        \nremote: Counting objects:  81% (31/38)        \nremote: Counting objects:  84% (32/38)        \nremote: Counting objects:  86% (33/38)        \nremote: Counting objects:  89% (34/38)        \nremote: Counting objects:  92% (35/38)        \nremote: Counting objects:  94% (36/38)        \nremote: Counting objects:  97% (37/38)        \nremote: Counting objects: 100% (38/38)        \nremote: Counting objects: 100% (38/38), done.        \nremote: Compressing objects:   4% (1/22)        \nremote: Compressing objects:   9% (2/22)        \nremote: Compressing objects:  13% (3/22)        \nremote: Compressing objects:  18% (4/22)        \nremote: Compressing objects:  22% (5/22)        \nremote: Compressing objects:  27% (6/22)        \nremote: Compressing objects:  31% (7/22)        \nremote: Compressing objects:  36% (8/22)        \nremote: Compressing objects:  40% (9/22)        \nremote: Compressing objects:  45% (10/22)        \nremote: Compressing objects:  50% (11/22)        \nremote: Compressing objects:  54% (12/22)        \nremote: Compressing objects:  59% (13/22)        \nremote: Compressing objects:  63% (14/22)        \nremote: Compressing objects:  68% (15/22)        \nremote: Compressing objects:  72% (16/22)        \nremote: Compressing objects:  77% (17/22)        \nremote: Compressing objects:  81% (18/22)        \nremote: Compressing objects:  86% (19/22)        \nremote: Compressing objects:  90% (20/22)        \nremote: Compressing objects:  95% (21/22)        \nremote: Compressing objects: 100% (22/22)        \nremote: Compressing objects: 100% (22/22), done.        \nremote: Total 51 (delta 17), reused 16 (delta 16), pack-reused 13        \nFrom https://github.com/python/cpython\n * branch                  main       -> FETCH_HEAD\nNote: switching to '0c89056fe59ac42f09978582479d40e58a236856'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c <new-branch-name>\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 0c89056fe5 gh-108724: Add PyMutex and _PyParkingLot APIs (gh-109344)\nSwitched to and reset branch 'main'\n\n../Objects/longobject.c: In function \u2018long_format_binary\u2019:\n../Objects/longobject.c:2120:13: warning: \u2018kind\u2019 may be used uninitialized [-Wmaybe-uninitialized]\n 2120 |     else if (kind == PyUnicode_1BYTE_KIND) {\n      |             ^\n../Objects/longobject.c:1996:9: note: \u2018kind\u2019 was declared here\n 1996 |     int kind;\n      |         ^~~~\n../Objects/longobject.c: In function \u2018long_to_decimal_string_internal\u2019:\n../Objects/longobject.c:1943:13: warning: \u2018kind\u2019 may be used uninitialized [-Wmaybe-uninitialized]\n 1943 |     else if (kind == PyUnicode_1BYTE_KIND) {\n      |             ^\n../Objects/longobject.c:1767:9: note: \u2018kind\u2019 was declared here\n 1767 |     int kind;\n      |         ^~~~\n\nmake: *** [Makefile:2040: buildbottest] Error 5\n```\n\n</details>\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1726051404/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1726115502",
          "html_url": "https://github.com/python/cpython/pull/109344#issuecomment-1726115502",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/109344",
          "id": 1726115502,
          "node_id": "IC_kwDOBN0Z8c5m4m6u",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2023-09-19T17:14:11Z",
          "updated_at": "2023-09-19T17:14:11Z",
          "author_association": "NONE",
          "body": ":warning::warning::warning: Buildbot failure :warning::warning::warning:\n------------------------------------------------------------------------\n\nHi! The buildbot **s390x RHEL8 LTO 3.x** has failed when building commit 0c89056fe59ac42f09978582479d40e58a236856.\n\nWhat do you need to do:\n\n1. Don't panic.\n2. Check [the buildbot page in the devguide](https://devguide.python.org/buildbots/) if you don't know what the buildbots are or how they work.\n3. Go to the page of the buildbot that failed (https://buildbot.python.org/all/#builders/567/builds/4922) and take a look at the build logs.\n4. Check if the failure is related to this commit (0c89056fe59ac42f09978582479d40e58a236856) or if it is a false positive.\n5. If the failure is related to this commit, please, reflect that on the issue and make a new Pull Request with a fix.\n\nYou can take a look at the buildbot page here:\n\nhttps://buildbot.python.org/all/#builders/567/builds/4922\n\nFailed tests:\n\n- test.test_asyncio.test_subprocess\n- test_tools\n\nFailed subtests:\n\n- test_subprocess_consistent_callbacks - test.test_asyncio.test_subprocess.SubprocessThreadedWatcherTests.test_subprocess_consistent_callbacks\n- test_subprocess_consistent_callbacks - test.test_asyncio.test_subprocess.SubprocessSafeWatcherTests.test_subprocess_consistent_callbacks\n- test_freeze_simple_script - test.test_tools.test_freeze.TestFreeze.test_freeze_simple_script\n\n\nSummary of the results of the build (if available):\n\n== \n\n<details>\n<summary>Click to see traceback logs</summary>\n\n```python-traceback\nTraceback (most recent call last):\n  File \"/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/Lib/test/test_tools/test_freeze.py\", line 28, in test_freeze_simple_script\n    outdir, scriptfile, python = helper.prepare(script, outdir)\n                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/Tools/freeze/test/freeze.py\", line 146, in prepare\n    copy_source_tree(srcdir, SRCDIR)\n  File \"/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/Tools/freeze/test/freeze.py\", line 95, in copy_source_tree\n    shutil.copytree(oldroot, newroot, ignore=ignore_non_src)\n  File \"/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/Lib/shutil.py\", line 588, in copytree\n    return _copytree(entries=entries, src=src, dst=dst, symlinks=symlinks,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/Lib/shutil.py\", line 542, in _copytree\n    raise Error(errors)\nshutil.Error: [('/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/build/test_python_2810433\u00e6/test_python_6n2okkfj.sock', '/tmp/test_python_2ysh974y/tmp0i2d4jz3/cpython/build/test_python_2810433\u00e6/test_python_6n2okkfj.sock', \"[Errno 6] No such device or address: '/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/build/test_python_2810433\u00e6/test_python_6n2okkfj.sock'\")]\n\n\nTraceback (most recent call last):\n  File \"/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/Lib/test/test_asyncio/test_subprocess.py\", line 788, in test_subprocess_consistent_callbacks\n    self.loop.run_until_complete(main())\n  File \"/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/Lib/asyncio/base_events.py\", line 664, in run_until_complete\n    return future.result()\n           ^^^^^^^^^^^^^^^\n  File \"/home/dje/cpython-buildarea/3.x.edelsohn-rhel8-z.lto/build/Lib/test/test_asyncio/test_subprocess.py\", line 780, in main\n    self.assertEqual(events, [\nAssertionError: Lists differ: ['process_exited', ('pipe_data_received', 1, b'stdout')] != [('pipe_data_received', 1, b'stdout'), ('p[95 chars]ted']\n\n```\n\n</details>\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1726115502/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/45943",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/45943/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/45943/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/45943/events",
      "html_url": "https://github.com/python/cpython/issues/45943",
      "id": 1198826385,
      "node_id": "MDU6SXNzdWUxMTk4ODI2Mzg1",
      "number": 45943,
      "title": "windows console doesn't print or input Unicode",
      "user": {
        "login": "a09e2537-b6b9-4978-9d1d-78b1db358cbc",
        "id": 92819789,
        "node_id": "M_kgDOBYhRTQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/92819789?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc",
        "html_url": "https://github.com/mark-summerfield",
        "followers_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/followers",
        "following_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/following{/other_user}",
        "gists_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/subscriptions",
        "organizations_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/orgs",
        "repos_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/repos",
        "events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/events{/privacy}",
        "received_events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 570103914,
          "node_id": "MDU6TGFiZWw1NzAxMDM5MTQ=",
          "url": "https://api.github.com/repos/python/cpython/labels/OS-windows",
          "name": "OS-windows",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 4018694952,
          "node_id": "LA_kwDOBN0Z8c7viGso",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-unicode",
          "name": "topic-unicode",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [
        {
          "login": "zooba",
          "id": 1693688,
          "node_id": "MDQ6VXNlcjE2OTM2ODg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zooba",
          "html_url": "https://github.com/zooba",
          "followers_url": "https://api.github.com/users/zooba/followers",
          "following_url": "https://api.github.com/users/zooba/following{/other_user}",
          "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
          "organizations_url": "https://api.github.com/users/zooba/orgs",
          "repos_url": "https://api.github.com/users/zooba/repos",
          "events_url": "https://api.github.com/users/zooba/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zooba/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 148,
      "created_at": "2007-12-12T09:56:31Z",
      "updated_at": "2022-04-10T01:07:17Z",
      "closed_at": "2016-09-09T16:42:54Z",
      "author_association": "MANNEQUIN",
      "type": null,
      "active_lock_reason": null,
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [1602](https://bugs.python.org/issue1602)\n--- | :---\nNosy | @malemburg, @mhammond, @terryjreedy, @pfmoore, @amauryfa, @ncoghlan, @pitrou, @giampaolo, @tjguk, @mark-summerfield, @ned-deily, @ezio-melotti, @florentx, @4kir4, @lilydjwg, @berkerpeksag, @vadmium, @eryksun, @zooba, @davispuh\nSuperseder | <li>bpo-28217: Add interactive console tests</li>\nFiles | <li>[sys_write_stdout.patch](https://bugs.python.org/file19493/sys_write_stdout.patch \"Uploaded as text/plain at 2010-11-04.15:15:00 by @vstinner\")</li><li>[unicode2.py](https://bugs.python.org/file20320/unicode2.py \"Uploaded as text/plain at 2011-01-09.06:52:49 by v+python\")</li><li>[doc-patch.diff](https://bugs.python.org/file20363/doc-patch.diff \"Uploaded as text/plain at 2011-01-12.05:32:09 by davidsarah\"): Proposed changes to user-visible documentation</li><li>[unicode3.py](https://bugs.python.org/file23461/unicode3.py \"Uploaded as text/plain at 2011-10-19.11:55:12 by @vstinner\")</li><li>[win_console.patch](https://bugs.python.org/file23470/win_console.patch \"Uploaded as text/plain at 2011-10-19.20:57:38 by @vstinner\")</li><li>[test_win_console.py](https://bugs.python.org/file23471/test_win_console.py \"Uploaded as text/plain at 2011-10-19.20:58:45 by @vstinner\")</li><li>[streams.py](https://bugs.python.org/file36120/streams.py \"Uploaded as text/plain at 2014-07-26.20:33:55 by Drekin\")</li><li>[wincontest.py](https://bugs.python.org/file40990/wincontest.py \"Uploaded as text/plain at 2015-11-09.20:56:49 by dead1ne\"): Example io.TextIOWrapper sublcass using WideCharToMultiByte</li><li>[winconsoleio.diff](https://bugs.python.org/file44094/winconsoleio.diff \"Uploaded as text/plain at 2016-08-13.17:17:33 by @zooba\")</li><li>[1602_2.patch](https://bugs.python.org/file44290/1602_2.patch \"Uploaded as text/plain at 2016-08-31.04:28:27 by @zooba\")</li><li>[1602_3.patch](https://bugs.python.org/file44379/1602_3.patch \"Uploaded as text/plain at 2016-09-05.22:24:10 by @zooba\")</li><li>[1602_4.patch](https://bugs.python.org/file44409/1602_4.patch \"Uploaded as text/plain at 2016-09-06.23:50:32 by @zooba\")</li><li>[1602_5.patch](https://bugs.python.org/file44449/1602_5.patch \"Uploaded as text/plain at 2016-09-07.20:49:14 by @zooba\")</li><li>[1602_6.patch](https://bugs.python.org/file44452/1602_6.patch \"Uploaded as text/plain at 2016-09-07.23:08:17 by @zooba\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/zooba'\nclosed_at = <Date 2016-09-09.16:42:53.594>\ncreated_at = <Date 2007-12-12.09:56:30.846>\nlabels = ['type-bug', 'expert-unicode', 'OS-windows']\ntitle = \"windows console doesn't print or input Unicode\"\nupdated_at = <Date 2016-10-22.10:46:13.515>\nuser = 'https://github.com/mark-summerfield'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2016-10-22.10:46:13.515>\nactor = 'THRlWiTi'\nassignee = 'steve.dower'\nclosed = True\nclosed_date = <Date 2016-09-09.16:42:53.594>\ncloser = 'steve.dower'\ncomponents = ['Unicode', 'Windows']\ncreation = <Date 2007-12-12.09:56:30.846>\ncreator = 'mark'\ndependencies = []\nfiles = ['19493', '20320', '20363', '23461', '23470', '23471', '36120', '40990', '44094', '44290', '44379', '44409', '44449', '44452']\nhgrepos = []\nissue_num = 1602\nkeywords = ['patch']\nmessage_count = 148.0\nmessages = ['58487', '58621', '58651', '87086', '88059', '88077', '92854', '94445', '94480', '94483', '94496', '108173', '108228', '116801', '120414', '120415', '120416', '120700', '125823', '125824', '125826', '125833', '125852', '125877', '125889', '125890', '125898', '125899', '125938', '125942', '125947', '125956', '126286', '126288', '126303', '126304', '126308', '126319', '127782', '131657', '131854', '132060', '132061', '132062', '132064', '132065', '132067', '132184', '132191', '132208', '132266', '132268', '145898', '145899', '145963', '145964', '146471', '148990', '157569', '160812', '160813', '160897', '161151', '161153', '161308', '161651', '164572', '164578', '164580', '164618', '164619', '170899', '170915', '170999', '185135', '197700', '197751', '197752', '197773', '221175', '221178', '223403', '223404', '223507', '223509', '223945', '223946', '223947', '223948', '223949', '223951', '223952', '224019', '224086', '224095', '224596', '224605', '224690', '227329', '227330', '227332', '227333', '227337', '227338', '227347', '227354', '227373', '227374', '227441', '227450', '228191', '228208', '228210', '233347', '233350', '233916', '233937', '234019', '234020', '234096', '234371', '242884', '254405', '254407', '272596', '272605', '272645', '272662', '272675', '272716', '272718', '272720', '273999', '274449', '274673', '274884', '274906', '274912', '274939', '275003', '275004', '275005', '275157', '275362', '275510', '277047', '277048', '277050']\nnosy_count = 38.0\nnosy_names = ['lemburg', 'mhammond', 'terry.reedy', 'paul.moore', 'tzot', 'amaury.forgeotdarc', 'ncoghlan', 'pitrou', 'giampaolo.rodola', 'tim.golden', 'mark', 'ned.deily', 'christoph', 'ezio.melotti', 'v+python', 'hippietrail', 'flox', 'THRlWiTi', 'davidsarah', 'santoso.wijaya', 'akira', 'David.Sankel', 'python-dev', 'smerlin', 'lilydjwg', 'berker.peksag', 'martin.panter', 'piotr.dobrogost', 'eryksun', 'Drekin', 'steve.dower', 'wiz21', 'stijn', 'Jonitis', 'gurnec', 'escapewindow', 'dead1ne', 'davispuh']\npr_nums = []\npriority = 'high'\nresolution = 'fixed'\nstage = 'resolved'\nstatus = 'closed'\nsuperseder = '28217'\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue1602'\nversions = ['Python 3.6']\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "zooba",
        "id": 1693688,
        "node_id": "MDQ6VXNlcjE2OTM2ODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1693688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zooba",
        "html_url": "https://github.com/zooba",
        "followers_url": "https://api.github.com/users/zooba/followers",
        "following_url": "https://api.github.com/users/zooba/following{/other_user}",
        "gists_url": "https://api.github.com/users/zooba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zooba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zooba/subscriptions",
        "organizations_url": "https://api.github.com/users/zooba/orgs",
        "repos_url": "https://api.github.com/users/zooba/repos",
        "events_url": "https://api.github.com/users/zooba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zooba/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/45943/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/45943/timeline",
      "performed_via_github_app": null,
      "state_reason": "completed",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402348",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402348",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402348,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNDg=",
          "user": {
            "login": "a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "id": 92819789,
            "node_id": "M_kgDOBYhRTQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "html_url": "https://github.com/mark-summerfield",
            "followers_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/followers",
            "following_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/following{/other_user}",
            "gists_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/subscriptions",
            "organizations_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/orgs",
            "repos_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/repos",
            "events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2007-12-12T09:56:30Z",
          "updated_at": "2007-12-12T09:56:30Z",
          "author_association": "MANNEQUIN",
          "body": "I am not sure if this is a Python bug or simply a limitation of cmd.exe.\n\nI am using Windows XP Home.\nI run cmd.exe with the /u option and I have set my console font to\n\"Lucida Console\" (the only TrueType font offered), and I run chcp 65001\nto set the utf8 code page.\nWhen I run the following program:\n\n```py\nfor x in range(32, 2000):\n    print(\"{0:5X} {0:c}\".format(x))\n```\n\n\none blank line is output.\n\nBut if I do chcp 1252 the program prints up to 7F before hitting a\nunicode encoding error.\n\nThis is different behaviour from Python 2.5.1 which (with a suitably\nmodified print line) after chcp 65001 prints up to 7F and then fails\nwith \"IOError: [Errno 0] Error\".",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402348/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402350",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402350",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402350,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNTA=",
          "user": {
            "login": "a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "id": 92819789,
            "node_id": "M_kgDOBYhRTQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "html_url": "https://github.com/mark-summerfield",
            "followers_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/followers",
            "following_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/following{/other_user}",
            "gists_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/subscriptions",
            "organizations_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/orgs",
            "repos_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/repos",
            "events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2007-12-14T11:31:28Z",
          "updated_at": "2007-12-14T11:31:28Z",
          "author_association": "MANNEQUIN",
          "body": "I've looked into this a bit more, and from what I can see, code page\n65001 just doesn't work---so it is a Windows problem not a Python problem.\nA possible solution might be to read/write UTF16 which \"managed\" Windows\napplications can do.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402350/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402351",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402351",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402351,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNTE=",
          "user": {
            "login": "tiran",
            "id": 444071,
            "node_id": "MDQ6VXNlcjQ0NDA3MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/444071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiran",
            "html_url": "https://github.com/tiran",
            "followers_url": "https://api.github.com/users/tiran/followers",
            "following_url": "https://api.github.com/users/tiran/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiran/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiran/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiran/subscriptions",
            "organizations_url": "https://api.github.com/users/tiran/orgs",
            "repos_url": "https://api.github.com/users/tiran/repos",
            "events_url": "https://api.github.com/users/tiran/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiran/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2007-12-15T02:08:14Z",
          "updated_at": "2007-12-15T02:08:14Z",
          "author_association": "MEMBER",
          "body": "We are aware of multiple Windows related problems. We are planing to\nrewrite parts of the Windows specific API to use the widechar variants.\nMaybe that will help.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402351/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402354",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402354",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402354,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNTQ=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-05-03T23:57:03Z",
          "updated_at": "2009-05-03T23:57:03Z",
          "author_association": "MEMBER",
          "body": "Yes, it is a Windows problem. There simply doesn't seem to be a true\r\nUnicode codepage for command-line apps. Recommend closing.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402354/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402356",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402356",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402356,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNTY=",
          "user": {
            "login": "67e002fe-4fda-4dd4-b591-0911d0f7ec88",
            "id": 92819991,
            "node_id": "M_kgDOBYhSFw",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819991?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88",
            "html_url": "https://github.com/tzot",
            "followers_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/followers",
            "following_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/following{/other_user}",
            "gists_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/subscriptions",
            "organizations_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/orgs",
            "repos_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/repos",
            "events_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/events{/privacy}",
            "received_events_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-05-19T00:08:57Z",
          "updated_at": "2009-05-19T00:08:57Z",
          "author_association": "MANNEQUIN",
          "body": "Just in case it helps, this behaviour is on Win XP Pro, Python 2.5.1:\r\n\r\nFirst, I added an alias for 'cp65001' to 'utf_8' in\r\n[Lib/encodings/aliases.py](https://github.com/python/cpython/blob/main/Lib/encodings/aliases.py) .\r\n\r\nThen, I opened a command prompt with a bitmap font.\r\n\r\n```pycon\nc:\\windows\\system32>python\r\nPython 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit\r\n(Intel)] on\r\nwin32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> print u\"\\N{EM DASH}\"\r\n\u00e2\u20ac\u201d\n```\n\r\n\r\nI switched the font to Lucida Console, and retried (without exiting the\r\npython interpreter, although the behaviour is the same when exiting and\r\nentering again: )\r\n\r\n```pycon\n>>> print u\"\\N{EM DASH}\"\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nIOError: [Errno 13] Permission denied\n```\n\r\n\r\nThen I tried (by pressing Alt+0233 for \u00e9, which is invalid in my normal\r\ncp1253 codepage):\r\n\r\n>\\>\\> print u\"n\u00e9e\"\r\n\r\nand the interpreter exits without any information. So it does for:\r\n\r\n>\\>\\> a=u\"n\u00e9e\"\r\n\r\nThen I created a UTF-8 text file named 'test65001.py':\r\n\r\n```py\n# -*- coding: utf_8 -*-\r\na=u\"n\u00e9e\u03b1\"\r\nprint a\n```\n\r\n\r\nand tried to run it directly from the command line:\r\n\r\n```pytb\nc:\\windows\\system32>python d:\\src\\PYTHON\\test65001.py\r\nn\u00e9e\u03b1Traceback (most recent call last):\r\n  File \"d:\\src\\PYTHON\\test65001.py\", line 4, in <module>\r\n    print a\r\nIOError: [Errno 2] No such file or directory\n```\n\r\n\r\nYou see? It printed all the characters before failing.\r\n\r\nAlso the following works:\r\n\r\nc:\\\\windows\\\\system32\\>echo he\u00e9\u03b5\r\nhe\u00e9\u03b5\r\n\r\nand\r\n\r\nc:\\\\windows\\\\system32\\>echo he\u00e9\u03b5 \\>D:\\\\src\\\\PYTHON\\\\dummy.txt\r\n\r\ncreates successfully a UTF-8 file (without any UTF-8 BOM marks at the\r\nbeginning).\r\n\r\nSo it's possible that it is a python bug, or at least something can be\r\ndone about it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402356/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402358",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402358",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402358,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNTg=",
          "user": {
            "login": "amauryfa",
            "id": 645208,
            "node_id": "MDQ6VXNlcjY0NTIwOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/645208?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/amauryfa",
            "html_url": "https://github.com/amauryfa",
            "followers_url": "https://api.github.com/users/amauryfa/followers",
            "following_url": "https://api.github.com/users/amauryfa/following{/other_user}",
            "gists_url": "https://api.github.com/users/amauryfa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/amauryfa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/amauryfa/subscriptions",
            "organizations_url": "https://api.github.com/users/amauryfa/orgs",
            "repos_url": "https://api.github.com/users/amauryfa/repos",
            "events_url": "https://api.github.com/users/amauryfa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/amauryfa/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-05-19T09:46:12Z",
          "updated_at": "2009-05-19T09:46:12Z",
          "author_association": "CONTRIBUTOR",
          "body": "an immediate thing to do is to declare cp65001 as an encoding:\r\n\r\nIndex: [Lib/encodings/aliases.py](https://github.com/python/cpython/blob/main/Lib/encodings/aliases.py)\r\n\\===================================================================\r\n```diff\n--- Lib/encodings/aliases.py    (revision 72757)\r\n+++ Lib/encodings/aliases.py    (working copy)\r\n@@ -511,6 +511,7 @@\r\n     'utf8'               : 'utf_8',\r\n     'utf8_ucs2'          : 'utf_8',\r\n     'utf8_ucs4'          : 'utf_8',\r\n+    'cp65001'            : 'utf_8',\n```\n\r\n\r\n     ## uu_codec codec\r\n     #'uu'                 : 'uu_codec',\r\n\r\nThis is not enough unfortunately, because the win32 API function\r\nWriteFile() returns the number of characters written, not the number of\r\n(utf8) bytes:\r\n\r\n```pycon\n>>> print(\"\\u0124\\u0102\" + 'abc')\r\n\u0124\u0102abc\r\nc\r\n[44420 refs]\r\n>>>\n```\n\r\n\r\nAdditionally, there is a bug in the ReadFile, which returns an empty\r\nstring (and no error) when a non-ascii character is entered, which is\r\nthe behavior of an EOF condition...\r\n\r\nMaybe the solution is to use the win32 console API directly...",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402358/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402360",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402360",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402360,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNjA=",
          "user": {
            "login": "67e002fe-4fda-4dd4-b591-0911d0f7ec88",
            "id": 92819991,
            "node_id": "M_kgDOBYhSFw",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819991?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88",
            "html_url": "https://github.com/tzot",
            "followers_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/followers",
            "following_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/following{/other_user}",
            "gists_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/subscriptions",
            "organizations_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/orgs",
            "repos_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/repos",
            "events_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/events{/privacy}",
            "received_events_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-09-19T00:38:48Z",
          "updated_at": "2009-09-19T00:38:48Z",
          "author_association": "MANNEQUIN",
          "body": "Another note:\r\nif one creates a dummy Stream object (having a softspace attribute and a\r\nwrite method that writes using os.write, as in\r\nhttp://stackoverflow.com/questions/878972/windows-cmd-encoding-change-causes-python-crash/1432462#1432462\r\n) to replace sys.stdout and sys.stderr, then writes occur correctly,\r\nwithout issues. Pre-requisites:\r\nchcp 65001, Lucida Console font and cp65001 as an alias for UTF-8 in\r\nencodings/aliases.py\r\nThis is Python 2.5.4 on Windows.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402362",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402362",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402362,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNjI=",
          "user": {
            "login": "b5a9ce10-d67f-478f-ab78-b08d099eb753",
            "id": 93804462,
            "node_id": "M_kgDOBZdXrg",
            "avatar_url": "https://avatars.githubusercontent.com/u/93804462?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753",
            "html_url": "https://github.com/vpython",
            "followers_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/followers",
            "following_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/following{/other_user}",
            "gists_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/subscriptions",
            "organizations_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/orgs",
            "repos_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/repos",
            "events_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/events{/privacy}",
            "received_events_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-10-25T00:06:49Z",
          "updated_at": "2009-10-25T00:06:49Z",
          "author_association": "MANNEQUIN",
          "body": "With Python 3.1.1, the following batch file seems to be necessary to use\r\nUTF-8 successfully from an XP console:\r\n\r\nset PYTHONIOENCODING=UTF-8\r\ncmd /u /k chcp 65001\r\nset PYTHONIOENCODING=\r\nexit\r\n\r\nthe cmd line seems to be necessary because of Windows having\r\ncompatibility issues, but it seems that Python should notice the cp65001\r\nand not need the PYTHONIOENCODING stuff.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402362/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402364",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402364",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402364,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNjQ=",
          "user": {
            "login": "a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "id": 92819789,
            "node_id": "M_kgDOBYhRTQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819789?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc",
            "html_url": "https://github.com/mark-summerfield",
            "followers_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/followers",
            "following_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/following{/other_user}",
            "gists_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/subscriptions",
            "organizations_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/orgs",
            "repos_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/repos",
            "events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/a09e2537-b6b9-4978-9d1d-78b1db358cbc/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-10-26T09:07:28Z",
          "updated_at": "2009-10-26T09:07:28Z",
          "author_association": "MANNEQUIN",
          "body": "Glenn Linderman's fix pretty well works for me on XP Home. I can print\r\nevery Unicode character up to and including U+D7FF (although most just\r\ncome out as rectangles, at least I don't get encoding errors).\r\n\r\nIt fails at U+D800 with message:\r\n\r\nUnicodeEncodeError: 'utf-8' codec can't encode character '\\\\ud800' in\r\nposition 17: surrogates not allowed\r\n\r\nI also tried U+D801 and got the same error.\r\n\r\nNonetheless, this is \\*much* better than before.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402364/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402365",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402365",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402365,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNjU=",
          "user": {
            "login": "malemburg",
            "id": 6735498,
            "node_id": "MDQ6VXNlcjY3MzU0OTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6735498?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/malemburg",
            "html_url": "https://github.com/malemburg",
            "followers_url": "https://api.github.com/users/malemburg/followers",
            "following_url": "https://api.github.com/users/malemburg/following{/other_user}",
            "gists_url": "https://api.github.com/users/malemburg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/malemburg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/malemburg/subscriptions",
            "organizations_url": "https://api.github.com/users/malemburg/orgs",
            "repos_url": "https://api.github.com/users/malemburg/repos",
            "events_url": "https://api.github.com/users/malemburg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/malemburg/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-10-26T09:19:55Z",
          "updated_at": "2009-10-26T09:19:55Z",
          "author_association": "MEMBER",
          "body": "Mark Summerfield wrote:\n> \n> Mark Summerfield \\<mark@qtrac.eu\\> added the comment:\n> \n> Glenn Linderman's fix pretty well works for me on XP Home. I can print\n> every Unicode character up to and including U+D7FF (although most just\n> come out as rectangles, at least I don't get encoding errors).\n> \n> It fails at U+D800 with message:\n> \n> UnicodeEncodeError: 'utf-8' codec can't encode character '\\\\ud800' in\n> position 17: surrogates not allowed\n> \n> I also tried U+D801 and got the same error.\n\nThat's normal and expected: D800 is the start of the surrogate\nranges which are only allows in pairs in UTF-8.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402365/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402367",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402367",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402367,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNjc=",
          "user": {
            "login": "b5a9ce10-d67f-478f-ab78-b08d099eb753",
            "id": 93804462,
            "node_id": "M_kgDOBZdXrg",
            "avatar_url": "https://avatars.githubusercontent.com/u/93804462?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753",
            "html_url": "https://github.com/vpython",
            "followers_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/followers",
            "following_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/following{/other_user}",
            "gists_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/subscriptions",
            "organizations_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/orgs",
            "repos_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/repos",
            "events_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/events{/privacy}",
            "received_events_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-10-26T17:06:21Z",
          "updated_at": "2009-10-26T17:06:21Z",
          "author_association": "MANNEQUIN",
          "body": "The choice of the Lucida Consola or the Consolas font cures most of the\r\nrectangle problems.  Those are just a limitation of the selected font\r\nfor the console window.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402367/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402370",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402370",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402370,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNzA=",
          "user": {
            "login": "576fdecd-6e0f-4bb1-b761-7653a4759cf1",
            "id": 101773977,
            "node_id": "M_kgDOBhDymQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/101773977?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1",
            "html_url": "https://github.com/christoph",
            "followers_url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1/followers",
            "following_url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1/following{/other_user}",
            "gists_url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1/subscriptions",
            "organizations_url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1/orgs",
            "repos_url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1/repos",
            "events_url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/576fdecd-6e0f-4bb1-b761-7653a4759cf1/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-06-19T12:04:59Z",
          "updated_at": "2010-06-19T12:04:59Z",
          "author_association": "MANNEQUIN",
          "body": "Will this bug be tackled or Python2.7?\r\n\r\nAnd is there a way to get hold of the access denied error?\r\n\r\nHere are my steps to reproduce:\r\n\r\nI started the console with \"cmd /u /k chcp 65001\"\r\n_______________________________________________________________________\r\nAktive Codepage: 65001.\r\n\r\nC:\\\\Dokumente und Einstellungen\\\\root\\>set PYTHONIOENCODING=UTF-8\r\n\r\nC:\\\\Dokumente und Einstellungen\\\\root\\>d:\r\n\r\nD:\\\\\\>cd Python31\r\n\r\n```pycon\nD:\\Python31>python\r\nPython 3.1.2 (r312:79149, Mar 21 2010, 00:41:52) [MSC v.1500 32 bit (Intel)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> print(\"\\u573a\")\r\n\u573a\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nIOError: [Errno 13] Permission denied\r\n>>>\r\n_______________________________________________________________________\n```\n\r\n\r\nI see a rectangle on screen but obviously c&p works.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402370/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402372",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402372",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402372,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNzI=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-06-20T09:00:57Z",
          "updated_at": "2010-06-20T09:00:57Z",
          "author_association": "MEMBER",
          "body": "> Maybe the solution is to use the win32 console API directly...\r\n\r\nYes, it is the best solution because it avoids the horrible mbcs encoding.\r\n\r\nAbout cp65001: it is not \\*exactly* the same encoding than utf-8 and so it cannot be used as an alias to utf-8: see issue bpo-6058.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402372/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402373",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402373",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402373,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNzM=",
          "user": {
            "login": "83d2e70e-e599-4a04-b820-3814bbdb9bef",
            "id": 92799458,
            "node_id": "M_kgDOBYgB4g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799458?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef",
            "html_url": "https://github.com/BreamoreBoy",
            "followers_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/followers",
            "following_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/following{/other_user}",
            "gists_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/subscriptions",
            "organizations_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/orgs",
            "repos_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/repos",
            "events_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/events{/privacy}",
            "received_events_url": "https://api.github.com/users/83d2e70e-e599-4a04-b820-3814bbdb9bef/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-09-18T15:39:36Z",
          "updated_at": "2010-09-18T15:39:36Z",
          "author_association": "MANNEQUIN",
          "body": "@Brian/Tim what's your take on this?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402373/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402374",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402374",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402374,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzNzQ=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-04T15:09:59Z",
          "updated_at": "2010-11-04T15:09:59Z",
          "author_association": "MEMBER",
          "body": "I wrote a small function to call WriteConsoleOutputA() and  WriteConsoleOutputW() in Python to do some tests. It works correclty, except if I change the code page using chcp command. It looks like the problem is that the chcp command changes the console code page and the ANSI code page, but it should only changes the ANSI code page (and not the console code page).\r\n\r\n\r\nchcp command\r\n\\============\r\n\r\nThe chcp command changes the console code page, but in practice, the console still expects the OEM code page (eg. cp850 on my french setup). Example:\r\n\r\n```pycon\nC:\\...> python.exe -c \"import sys; print(sys.stdout.encoding\")\r\ncp850\r\nC:\\...> chcp 65001\r\nC:\\...> python.exe\r\nFatal Python error: Py_Initialize: can't initialize sys standard streams\r\nLookupError: unknown encoding: cp65001\r\nC:\\...> SET PYTHONIOENCODING=utf-8\r\nC:\\...> python.exe\r\n>>> import sys\r\n>>> sys.stdout.write(\"\\xe9\\n\")\r\n\u00c3\u00a9\r\n2\r\n>>> sys.stdout.buffer.write(\"\\xe9\\n\".encode(\"utf8\"))\r\n\u00c3\u00a9\r\n3\r\n>>> sys.stdout.buffer.write(\"\\xe9\\n\".encode(\"cp850\"))\r\n\u00e9\r\n2\n```\n\r\n\r\nos.device_encoding(1) uses GetConsoleOutputCP() which gives 65001. It should maybe use GetOEMCP() instead? Or chcp command should be fixed?\r\n\r\nSet the console code page looks to be a bad idea, because if I type \"\u00e9\" using my keyboard, a random character (eg. U+0002) is displayed instead...\r\n\r\n\r\nWriteConsoleOutputA() and WriteConsoleOutputW()\r\n\\===============================================\r\n\r\nWithout touching the code page\r\n\\------------------------------\r\n\r\nIf the character can be rendered by the current font (eg. U+00E9): WriteConsoleOutputA() and WriteConsoleOutputW() work correctly.\r\n\r\nIf the character cannot be rendered by the current font, but there is a replacment character (eg. U+0141 replaced by U+0041): WriteConsoleOutputA() cannot be used (U+0141 cannot be encoded to the code page), WriteConsoleOutputW() writes U+0141 but the console contains U+0041 (I checked using ReadConsoleOutputW()) and U+0041 is displayed. It works like the mbcs encoding, the behaviour looks correct.\r\n\r\nIf the character cannot be rendered by the current font, but there is a replacment character (eg. U+042D): WriteConsoleOutputA() cannot be used (U+042D cannot be encoded to the code page), WriteConsoleOutputW() writes U+042D but U+003d (?) is displayed instead. The behaviour looks correct.\r\n\r\nchcp 65001\r\n\\----------\r\n\r\nUsing \"chcp 65001\" command (+ \"set PYTHONIOENCODING=utf-8\" to avoid the fatal error), it becomes worse: the result depends on the font...\r\n\r\nUsing raster font:\r\n - (ANSI) write \"\\\\xe9\".encode(\"cp850\") using WriteConsoleOutputA() displays U+00e9 (\u00e9), whereas the console output code page is cp65001 (I checked using GetConsoleOutputCP())\r\n - (ANSI) write \"\\\\xe9\".encode(\"utf-8\") using WriteConsoleOutputA() displays \u00c3\u00a9 (mojibake!)\r\n - (UNICODE) write \"\\\\xe9\" using WriteConsoleOutputW() displays... a random character (U+0002, U+0008, U+0069, U+00b0, ...)\r\n\r\nUsing Lucida (TrueType font): \r\n - (ANSI) write \"\\\\xe9\".encode(\"cp850\") using WriteConsoleOutputA() displays U+0000 !?\r\n - (UNICODE) write \"\\\\xe9\" using WriteConsoleOutputW() works correctly (display U+00e9), even with \"\\\\u0141\", it works correctly (display U+0141)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402374/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402380",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402380",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402380,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzODA=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-04T15:15:00Z",
          "updated_at": "2010-11-04T15:15:00Z",
          "author_association": "MEMBER",
          "body": "sys_write_stdtout.patch: Create sys.write_stdout() test function to call WriteConsoleOutputA() or WriteConsoleOutputW() depending on the input types (bytes or str).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402380/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402381",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402381",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402381,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzODE=",
          "user": {
            "login": "67e002fe-4fda-4dd4-b591-0911d0f7ec88",
            "id": 92819991,
            "node_id": "M_kgDOBYhSFw",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819991?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88",
            "html_url": "https://github.com/tzot",
            "followers_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/followers",
            "following_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/following{/other_user}",
            "gists_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/subscriptions",
            "organizations_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/orgs",
            "repos_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/repos",
            "events_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/events{/privacy}",
            "received_events_url": "https://api.github.com/users/67e002fe-4fda-4dd4-b591-0911d0f7ec88/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-04T15:22:03Z",
          "updated_at": "2010-11-04T15:22:03Z",
          "author_association": "MANNEQUIN",
          "body": "http://blogs.msdn.com/b/michkap/archive/2008/03/18/8306597.aspx\r\n\r\nIf you want any kind of Unicode output in the console, the font must be an \u201cofficial\u201d MS console TTF (\u201cofficial\u201d as defined by the Windows version); I believe only Lucida Console and Consolas are the ones with all MS private settings turned on inside the font file.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402381/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402383",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402383",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402383,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzODM=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-08T01:26:27Z",
          "updated_at": "2010-11-08T01:26:27Z",
          "author_association": "MEMBER",
          "body": "I don't understand exactly the goal of this issue. Different people described various bugs of the Windows console, but I don't see any problem with Python here. It looks like it's just not possible to display correctly unicode with the Windows console (the whole unicode charset, not the current code page subset).\r\n\r\n- 65001 code page: it's not the same encoding than utf-8 and so it cannot be set as an alias to utf-8 (see bpo-6058) =\\> nothing to do, or maybe document that PYTHONIOENCODING=utf-8 workaround... But if you do that, you may get strange errors when writing to stdout or stderr like \"IOError: [Errno 13] Permission denied\" or \"IOError: [Errno 2] No such file or directory\" ...\r\n- chcp command sets the console encoding, which is stupid because the console still expects text encoded to the previous code page =\\> Windows (chcp command) bug, chcp command should not be used (it doesn't solve any problem, it just makes the situation worse)\r\n- use the console API instead of read()/write() to fix this issue: it doesn't work, the console is completly buggy ([msg120414](https://bugs.python.org/msg120414)) =\\> Windows (console) bug\r\n- use \"Lucida Console\" font avoids some issue =\\> I don't think that the Python interpreter should configure the console (using SetCurrentConsoleFontEx?), it's not the role of Python\r\n\r\nTo me, there is nothing to do, and so I close the bug.\r\n\r\nIf you would like to fix a particular Python bug, open a new specific issue. If you consider that I'm wrong, Python should fix this issue and you know how, please reopen it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402383/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402384",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402384",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402384,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzODQ=",
          "user": {
            "login": "64b73bf9-3de7-49cd-8c73-5a4198eb3429",
            "id": 101767600,
            "node_id": "M_kgDOBhDZsA",
            "avatar_url": "https://avatars.githubusercontent.com/u/101767600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429",
            "html_url": "https://github.com/davidsarah",
            "followers_url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429/followers",
            "following_url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429/following{/other_user}",
            "gists_url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429/subscriptions",
            "organizations_url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429/orgs",
            "repos_url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429/repos",
            "events_url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429/events{/privacy}",
            "received_events_url": "https://api.github.com/users/64b73bf9-3de7-49cd-8c73-5a4198eb3429/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-09T05:32:01Z",
          "updated_at": "2011-01-09T05:32:01Z",
          "author_association": "MANNEQUIN",
          "body": "It is certainly possible to write Unicode to the console successfully using WriteConsoleW. This works regardless of the console code page, including 65001. The code \\<a href=\"http://tahoe-lafs.org/trac/tahoe-lafs/browser/src/allmydata/windows/fixups.py\"\\>here\\</a\\> does so (it's for Python 2.x, but you'd be calling WriteConsoleW from C anyway).\r\n\r\nWriteConsoleW has one bug that I know of, which is that it \\<a href=\"http://tahoe-lafs.org/trac/tahoe-lafs/ticket/1232\"\\>fails when writing more than 26608 characters at once\\</a\\>. That's easy to work around by limiting the amount of data passed in a single call.\r\n\r\nFonts are not Python's problem, but encoding is. It doesn't make sense to fail to output the right characters just because some users might not have selected fonts that can display those characters. This bug should be reopened.\r\n\r\n(For completeness, it is possible to display Unicode on the console using fonts other than Lucida Console and Consolas, but it \\<a href=\"http://stackoverflow.com/questions/878972/windows-cmd-encoding-change-causes-python-crash/3259271#3259271\"\\>requires a registry hack\\</a\\>.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402384/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402385",
          "html_url": "https://github.com/python/cpython/issues/45943#issuecomment-1093402385",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/45943",
          "id": 1093402385,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MDIzODU=",
          "user": {
            "login": "b5a9ce10-d67f-478f-ab78-b08d099eb753",
            "id": 93804462,
            "node_id": "M_kgDOBZdXrg",
            "avatar_url": "https://avatars.githubusercontent.com/u/93804462?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753",
            "html_url": "https://github.com/vpython",
            "followers_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/followers",
            "following_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/following{/other_user}",
            "gists_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/subscriptions",
            "organizations_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/orgs",
            "repos_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/repos",
            "events_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/events{/privacy}",
            "received_events_url": "https://api.github.com/users/b5a9ce10-d67f-478f-ab78-b08d099eb753/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-09T06:52:49Z",
          "updated_at": "2011-01-09T06:52:49Z",
          "author_association": "MANNEQUIN",
          "body": "Interesting!\r\n\r\nI was able to tweak David-Sarah's code to work with Python 3.x, mostly doing things that 2to3 would probably do: changing  unicode() to str(), dropping u from u'...', etc.\r\n\r\nI skipped the unmangling of command-line arguments, because it produced an error I didn't understand, about needing a buffer protocol.  But I'll attach David-Sarah's code + tweaks + a test case showing output of the Cyrillic alphabet to a console with code page 437 (at least, on my Win7-64 box, that is what it is).\r\n\r\nNice work, David-Sarah.  I'm quite sure this is not in a form usable inside Python 3, but it shows exactly what could be done inside Python 3 to make things work... and gives us a workaround if Python 3 is not fixed.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093402385/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/117350",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/117350/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/117350/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/117350/events",
      "html_url": "https://github.com/python/cpython/pull/117350",
      "id": 2214120248,
      "node_id": "PR_kwDOBN0Z8c5rGh-C",
      "number": 117350,
      "title": "gh-117349: Micro-optimize a few `os.path` functions",
      "user": {
        "login": "nineteendo",
        "id": 65588599,
        "node_id": "MDQ6VXNlcjY1NTg4NTk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nineteendo",
        "html_url": "https://github.com/nineteendo",
        "followers_url": "https://api.github.com/users/nineteendo/followers",
        "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
        "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
        "organizations_url": "https://api.github.com/users/nineteendo/orgs",
        "repos_url": "https://api.github.com/users/nineteendo/repos",
        "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nineteendo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 30,
      "created_at": "2024-03-28T20:49:18Z",
      "updated_at": "2024-04-26T08:39:53Z",
      "closed_at": "2024-04-02T20:32:35Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/117350",
        "html_url": "https://github.com/python/cpython/pull/117350",
        "diff_url": "https://github.com/python/cpython/pull/117350.diff",
        "patch_url": "https://github.com/python/cpython/pull/117350.patch",
        "merged_at": "2024-04-02T20:32:35Z"
      },
      "body": "### Benchmarks\r\n\r\n#### ntpath.py\r\n\r\n<details><summary>script</summary>\r\n\r\n```shell\r\n# TODO: test isjunction() on Windows\r\necho \"isreserved()\" && python -m timeit -s \"import before.ntpath\" \"before.ntpath.isreserved('con')\" && python -m timeit -s \"import after.ntpath\" \"after.ntpath.isreserved('con')\"\r\necho \"isreserved('.')\" && python -m timeit -s \"import before.ntpath\" \"before.ntpath.isreserved('.')\" && python -m timeit -s \"import after.ntpath\" \"after.ntpath.isreserved('.')\"\r\necho \"expanduser()\" && python -m timeit -s \"import before.ntpath\" \"before.ntpath.expanduser('~')\" && python -m timeit -s \"import after.ntpath\" \"after.ntpath.expanduser('~')\"\r\necho \"realpath()\"; python -m timeit -s \"import test\" \"test.realpath1('.')\"; python -m timeit -s \"import test\" \"test.realpath2('.')\"\r\necho \"realpath('nul')\"; python -m timeit -s \"import test\" \"test.realpath1('nul')\"; python -m timeit -s \"import test\" \"test.realpath2('nul')\"\r\n```\r\n</details>\r\n\r\n```none\r\nisreserved()\r\n200000 loops, best of 5: 1.66 usec per loop # before\r\n200000 loops, best of 5: 1.65 usec per loop # after\r\n# -> no difference\r\nisreserved('.')\r\n200000 loops, best of 5: 1.31 usec per loop # before\r\n500000 loops, best of 5: 966 nsec per loop # after\r\n# -> 1.36x faster (for . & ..)\r\nexpanduser()\r\n200000 loops, best of 5: 1.72 usec per loop # before\r\n200000 loops, best of 5: 1.72 usec per loop # after\r\n# -> no difference\r\nrealpath()\r\n2000 loops, best of 5: 132 usec per loop # before\r\n2000 loops, best of 5: 131 usec per loop # after\r\n# -> no difference\r\nrealpath('nul')\r\n200000 loops, best of 5: 1.26 usec per loop # before\r\n500000 loops, best of 5: 907 nsec per loop # after\r\n# -> 1.39x faster (for nul)\r\n```\r\n\r\n#### posixpath.py\r\n\r\n<details><summary>script</summary>\r\n\r\n```shell\r\n# test.sh\r\necho \"ismount()\" && python -m timeit -s \"import before.posixpath\" \"before.posixpath.ismount('/Volumes/2GB_001')\" && python -m timeit -s \"import after.posixpath\" \"after.posixpath.ismount('/Volumes/2GB_001')\"\r\necho \"expanduser()\" && python -m timeit -s \"import before.posixpath\" \"before.posixpath.expanduser('~')\" && python -m timeit -s \"import after.posixpath\" \"after.posixpath.expanduser('~')\"\r\necho \"expanduser(b'~root')\" && python -m timeit -s \"import before.posixpath\" \"before.posixpath.expanduser(b'~root')\" && python -m timeit -s \"import after.posixpath\" \"after.posixpath.expanduser(b'~root')\"\r\necho \"_normpath_fallback()\" && python -m timeit -s \"import before.posixpath\" \"before.posixpath._normpath_fallback('foo//bar')\" && python -m timeit -s \"import after.posixpath\" \"after.posixpath._normpath_fallback('foo//bar')\"\r\necho \"abspath()\" && python -m timeit -s \"import before.posixpath\" \"before.posixpath.abspath('foo')\" && python -m timeit -s \"import after.posixpath\" \"after.posixpath.abspath('foo')\"\r\necho \"abspath('/foo')\" && python -m timeit -s \"import before.posixpath\" \"before.posixpath.abspath('/foo')\" && python -m timeit -s \"import after.posixpath\" \"after.posixpath.abspath('/foo')\"\r\necho \"realpath()\" && python -m timeit -s \"import before.posixpath\" \"before.posixpath.realpath('foo/../../..')\" && python -m timeit -s \"import after.posixpath\" \"after.posixpath.realpath('foo/../../..')\"\r\n```\r\n</details>\r\n\r\n```none\r\nismount()\r\n10000 loops, best of 5: 20.3 usec per loop # before\r\n10000 loops, best of 5: 19.3 usec per loop # after\r\n# -> 1.05x faster\r\nexpanduser()\r\n200000 loops, best of 5: 1.43 usec per loop # before\r\n200000 loops, best of 5: 1.42 usec per loop # after\r\n# -> no difference\r\nexpanduser(b'~root')\r\n200000 loops, best of 5: 1.82 usec per loop # before\r\n200000 loops, best of 5: 1.75 usec per loop # after\r\n# -> 1.04x faster (for byte users)\r\n_normpath_fallback()\r\n200000 loops, best of 5: 1.07 usec per loop # before\r\n500000 loops, best of 5: 953 nsec per loop # after\r\n# -> 1.13x faster\r\nabspath()\r\n20000 loops, best of 5: 16.7 usec per loop # before\r\n20000 loops, best of 5: 16.5 usec per loop # after\r\n# -> no difference\r\nabspath('/foo')\r\n500000 loops, best of 5: 509 nsec per loop # before\r\n500000 loops, best of 5: 423 nsec per loop # after\r\n# -> 1.20x faster (for absolute paths)\r\nrealpath()\r\n10000 loops, best of 5: 24.4 usec per loop # before\r\n10000 loops, best of 5: 23.9 usec per loop # after\r\n# -> 1.02x faster\r\n```\r\n\r\n<!-- gh-issue-number: gh-117349 -->\r\n* Issue: gh-117349\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": {
        "login": "AlexWaygood",
        "id": 66076021,
        "node_id": "MDQ6VXNlcjY2MDc2MDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AlexWaygood",
        "html_url": "https://github.com/AlexWaygood",
        "followers_url": "https://api.github.com/users/AlexWaygood/followers",
        "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
        "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
        "repos_url": "https://api.github.com/users/AlexWaygood/repos",
        "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/117350/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/117350/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2027364592",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2027364592",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2027364592,
          "node_id": "IC_kwDOBN0Z8c541yDw",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-29T15:09:30Z",
          "updated_at": "2024-03-29T15:09:30Z",
          "author_association": "CONTRIBUTOR",
          "body": "I believe that's everything. If you would like these changes to be split up in multiple pull requests let me know.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2027364592/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2027509360",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2027509360",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2027509360,
          "node_id": "IC_kwDOBN0Z8c542VZw",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-29T17:13:19Z",
          "updated_at": "2024-03-29T17:13:19Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2027509360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2027526823",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2027526823",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2027526823,
          "node_id": "IC_kwDOBN0Z8c542Zqn",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-29T17:31:07Z",
          "updated_at": "2024-03-29T17:31:07Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Please revert all changes that do not actually have any impact on performance.\r\n\r\nDoes that include unnesting?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2027526823/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2027991220",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2027991220",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2027991220,
          "node_id": "IC_kwDOBN0Z8c544LC0",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-30T09:32:58Z",
          "updated_at": "2024-03-30T09:32:58Z",
          "author_association": "CONTRIBUTOR",
          "body": "AlexWaygood, I have made the requested changes; please review again.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2027991220/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2027991247",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2027991247",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2027991247,
          "node_id": "IC_kwDOBN0Z8c544LDP",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-30T09:33:04Z",
          "updated_at": "2024-03-30T09:33:04Z",
          "author_association": "NONE",
          "body": "Thanks for making the requested changes!\n\n@AlexWaygood: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2027991247/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2028888475",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2028888475",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2028888475,
          "node_id": "IC_kwDOBN0Z8c547mGb",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-03-31T19:50:15Z",
          "updated_at": "2024-03-31T19:50:15Z",
          "author_association": "CONTRIBUTOR",
          "body": "I think that covers everything. Thanks for all the feedback. I'll try to update the benchmarks as soon as possible.\r\n\r\n_Note: I'm never trying to lint cpython without permission again, I'll leave that to my own repositories._",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2028888475/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2029154192",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2029154192",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2029154192,
          "node_id": "IC_kwDOBN0Z8c548m-Q",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T04:50:41Z",
          "updated_at": "2024-04-01T04:50:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "I've updated the benchmarks.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2029154192/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2029971573",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2029971573",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2029971573,
          "node_id": "IC_kwDOBN0Z8c54_uh1",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T15:26:06Z",
          "updated_at": "2024-04-01T15:49:19Z",
          "author_association": "CONTRIBUTOR",
          "body": "> I also can't measure any speedups locally to `ntpath.isreserved()` or `ntpath.commonpath()`, though -- could you revert the changes to those functions?\r\n\r\n- I've modified `ntpath.isreserved()` and it's now a lot faster for `.` & `..` (no compromises for regular names).\r\n- `ntpath.commonpath()` is roughly 88 nsec faster (which is 2%):\r\n    ```python\r\n    sep = '\\\\'\r\n    def test1(paths):\r\n        split_paths = [p.split(sep) for p in paths]\r\n        split_paths = [[c for c in s] for s in split_paths] # obvious duplicate work\r\n        return split_paths\r\n    def test2(paths):\r\n        split_paths = [[c for c in p.split(sep)] for p in paths]\r\n        return split_paths\r\n    ```\r\n\r\n    ```none\r\n    python -m timeit -s \"import test\" \"test.test1(['foo/bar', 'foo/baz'])\"; python -m timeit -s \"import test\" \"test.test2(['foo/bar', 'foo/baz'])\"\r\n    500000 loops, best of 5: 565 nsec per loop\r\n    500000 loops, best of 5: 477 nsec per loop\r\n    # -> 1.18x faster (just the splitting)\r\n    ```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2029971573/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2029978870",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2029978870",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2029978870,
          "node_id": "IC_kwDOBN0Z8c54_wT2",
          "user": {
            "login": "AlexWaygood",
            "id": 66076021,
            "node_id": "MDQ6VXNlcjY2MDc2MDIx",
            "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AlexWaygood",
            "html_url": "https://github.com/AlexWaygood",
            "followers_url": "https://api.github.com/users/AlexWaygood/followers",
            "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
            "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
            "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
            "repos_url": "https://api.github.com/users/AlexWaygood/repos",
            "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T15:31:03Z",
          "updated_at": "2024-04-01T15:31:03Z",
          "author_association": "MEMBER",
          "body": "> * `ntpath.commonpath()` is roughly 256 nsec faster (which is 7%):\r\n\r\nWhat version of Python are you measuring that with? A PGO-optimised build using the `main` branch? The speed of low-level things like list comprehensions is changing a lot with each Python version at the moment due to the work of the Faster CPython team, so it's important to do performance measurements with the `main` branch, especially with very localised micro-optimisations like those we're dealing with here",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2029978870/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030035830",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030035830",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030035830,
          "node_id": "IC_kwDOBN0Z8c54_-N2",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T15:50:25Z",
          "updated_at": "2024-04-01T15:50:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "> What version of Python are you measuring that with?\r\n\r\nIt was 3.11, I incorrectly installed 3.12 and it wasn't on the path. I don't know how to built from the main branch (and I'm on my laptop now).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030035830/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030043564",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030043564",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030043564,
          "node_id": "IC_kwDOBN0Z8c55AAGs",
          "user": {
            "login": "AlexWaygood",
            "id": 66076021,
            "node_id": "MDQ6VXNlcjY2MDc2MDIx",
            "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AlexWaygood",
            "html_url": "https://github.com/AlexWaygood",
            "followers_url": "https://api.github.com/users/AlexWaygood/followers",
            "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
            "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
            "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
            "repos_url": "https://api.github.com/users/AlexWaygood/repos",
            "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T15:55:27Z",
          "updated_at": "2024-04-01T15:55:27Z",
          "author_association": "MEMBER",
          "body": "I'm also on my laptop -- I _only_ have a laptop ;)\r\n\r\nList comprehensions are _much_ faster in Python 3.12+ than in Python <=3.11 due to the changes made as part of PEP-709, so that could easily account for the differences we're seeing between the benchmark results on my machine and yours, since the changes to `ntpath.commonpath()` involve changes to when and where list comprehensions are constructed.\r\n\r\nYou don't have to do so, but if you want to, there are instructions for building Python from source here: https://devguide.python.org/getting-started/setup-building/. (For accurate performance measurements, make sure you create a non-debug PGO-optimized build.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030043564/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030047820",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030047820",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030047820,
          "node_id": "IC_kwDOBN0Z8c55ABJM",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T15:57:46Z",
          "updated_at": "2024-04-01T15:57:46Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Also, it looks like you're making several changes to `ntpath.realpath()`, but I don't see a benchmark for that function in your PR description -- have you done one?\r\n\r\nI couldn't test that on macOS, but I've justed tested it, and it's 1.38x faster for `nul` (in other cases the speedup will be smaller).\r\n\r\nAlso, I have updated the test for `ntpath.commonpath()` for 3.12, now it's only 2%.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030047820/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030081502",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030081502",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030081502,
          "node_id": "IC_kwDOBN0Z8c55AJXe",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T16:17:00Z",
          "updated_at": "2024-04-01T16:17:00Z",
          "author_association": "CONTRIBUTOR",
          "body": "I think that's everything, right? Or do you still want me to benchmark `ntpath.isjunction()`?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030081502/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030111195",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030111195",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030111195,
          "node_id": "IC_kwDOBN0Z8c55AQnb",
          "user": {
            "login": "AlexWaygood",
            "id": 66076021,
            "node_id": "MDQ6VXNlcjY2MDc2MDIx",
            "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AlexWaygood",
            "html_url": "https://github.com/AlexWaygood",
            "followers_url": "https://api.github.com/users/AlexWaygood/followers",
            "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
            "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
            "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
            "repos_url": "https://api.github.com/users/AlexWaygood/repos",
            "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T16:31:54Z",
          "updated_at": "2024-04-01T16:31:54Z",
          "author_association": "MEMBER",
          "body": "We've been discussing in the private Core Dev Discord server whether optimising code by replacing e.g. `if foo.startswith('////')` with `if foo[:4] == '////'`.\r\n\r\nThe underlying performance issue there seems to be that `str.startswith` is slower than it should be -- it would be _better_ if we could figure out why that is, and fix it so that it's just as fast as a slice-comparison, rather than going round changing all uses of `str.startswith` to use slice-comparisons instead. `str.startswith` seems significantly more idiomatic and readable -- and if we do improve the performance of `str.startswith` next week or next month, then we'll have muddied the git history in this module for no reason.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030111195/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030135062",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030135062",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030135062,
          "node_id": "IC_kwDOBN0Z8c55AWcW",
          "user": {
            "login": "AlexWaygood",
            "id": 66076021,
            "node_id": "MDQ6VXNlcjY2MDc2MDIx",
            "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AlexWaygood",
            "html_url": "https://github.com/AlexWaygood",
            "followers_url": "https://api.github.com/users/AlexWaygood/followers",
            "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
            "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
            "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
            "repos_url": "https://api.github.com/users/AlexWaygood/repos",
            "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T16:45:24Z",
          "updated_at": "2024-04-01T16:45:24Z",
          "author_association": "MEMBER",
          "body": "> Also, I have updated the test for `ntpath.commonpath()` for 3.12, now it's only 2%.\r\n\r\nUsing a PGO-optimized build from the `main` branch, here are my results using your benchmark for `ntpath.commonpath`:\r\n\r\n```\r\n(main) % ./python.exe -m timeit -s 'import ntpath' 'ntpath.commonpath([\"foo/bar\", \"foo/baz\"])'                                ~/dev/cpython\r\n200000 loops, best of 5: 1.54 usec per loop\r\n```\r\n\r\nAnd with your PR branch:\r\n\r\n```\r\n(speedup-os.path) % ./python.exe -m timeit -s 'import ntpath' 'ntpath.commonpath([\"foo/bar\", \"foo/baz\"])'                     ~/dev/cpython\r\n200000 loops, best of 5: 1.52 usec per loop\r\n```\r\n\r\nThat's a 1.3% speedup, which is barely above the noise threshhold. I don't think it's worth changing that function for such a small performance improvement, unfortunately. Any change to CPython -- which is a _very_ mature, widely used piece of software -- carries a risk of breaking some other piece of code somewhere else.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030135062/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030148325",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030148325",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030148325,
          "node_id": "IC_kwDOBN0Z8c55AZrl",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T16:52:40Z",
          "updated_at": "2024-04-01T16:52:40Z",
          "author_association": "CONTRIBUTOR",
          "body": "> The underlying performance issue there seems to be that `str.startswith()` is slower than it should be -- it would be _better_ if we could figure out why that is, and fix it so that it's just as fast as a slice-comparison, rather than going round changing all uses of `str.startswith()` to use slice-comparisons instead.\r\n\r\nI believe it should indeed be possible to speed up `str.startswith(prefix)`, but not `str.startswith((prefix1, prefix2))`, because there's not guarantee that the prefixes have the same length. I'll revert the optimisations for the first case.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030148325/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030281598",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030281598",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030281598,
          "node_id": "IC_kwDOBN0Z8c55A6N-",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T18:15:17Z",
          "updated_at": "2024-04-01T18:15:17Z",
          "author_association": "CONTRIBUTOR",
          "body": "Is there anything you still expect from me? Or can this finally be merged? I've listened to basically all the feedback.\r\nIf you want to wait for a benchmark from me, that's understandable of course.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030281598/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030294673",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030294673",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030294673,
          "node_id": "IC_kwDOBN0Z8c55A9aR",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T18:24:13Z",
          "updated_at": "2024-04-01T18:24:13Z",
          "author_association": "CONTRIBUTOR",
          "body": "The speed improvements seem way less impressive now. ;(\r\nAnd I that's even without running my benchmark.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030294673/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2030310150",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2030310150",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2030310150,
          "node_id": "IC_kwDOBN0Z8c55BBMG",
          "user": {
            "login": "nineteendo",
            "id": 65588599,
            "node_id": "MDQ6VXNlcjY1NTg4NTk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/65588599?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nineteendo",
            "html_url": "https://github.com/nineteendo",
            "followers_url": "https://api.github.com/users/nineteendo/followers",
            "following_url": "https://api.github.com/users/nineteendo/following{/other_user}",
            "gists_url": "https://api.github.com/users/nineteendo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nineteendo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nineteendo/subscriptions",
            "organizations_url": "https://api.github.com/users/nineteendo/orgs",
            "repos_url": "https://api.github.com/users/nineteendo/repos",
            "events_url": "https://api.github.com/users/nineteendo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nineteendo/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-01T18:31:47Z",
          "updated_at": "2024-04-01T18:31:47Z",
          "author_association": "CONTRIBUTOR",
          "body": "Are you happy now?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2030310150/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2031569307",
          "html_url": "https://github.com/python/cpython/pull/117350#issuecomment-2031569307",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/117350",
          "id": 2031569307,
          "node_id": "IC_kwDOBN0Z8c55F0mb",
          "user": {
            "login": "AlexWaygood",
            "id": 66076021,
            "node_id": "MDQ6VXNlcjY2MDc2MDIx",
            "avatar_url": "https://avatars.githubusercontent.com/u/66076021?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AlexWaygood",
            "html_url": "https://github.com/AlexWaygood",
            "followers_url": "https://api.github.com/users/AlexWaygood/followers",
            "following_url": "https://api.github.com/users/AlexWaygood/following{/other_user}",
            "gists_url": "https://api.github.com/users/AlexWaygood/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AlexWaygood/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AlexWaygood/subscriptions",
            "organizations_url": "https://api.github.com/users/AlexWaygood/orgs",
            "repos_url": "https://api.github.com/users/AlexWaygood/repos",
            "events_url": "https://api.github.com/users/AlexWaygood/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AlexWaygood/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-04-02T09:55:42Z",
          "updated_at": "2024-04-02T09:55:42Z",
          "author_association": "MEMBER",
          "body": "I re-ran your benchmarks locally. With the latest version of your PR, I'm getting a reasonable _slowdown_ on `posixpath.ismount()` from your PR branch.\r\n\r\nOn `main`:\r\n\r\n```\r\n(main) % ./python.exe -m timeit -s \"import posixpath\" \"posixpath.ismount('/Volumes/2GB_001')\"                                 ~/dev/cpython\r\n500000 loops, best of 5: 602 nsec per loop\r\n(main) % ./python.exe -m timeit -s \"import posixpath\" \"posixpath.ismount('/Volumes/2GB_001')\"                                 ~/dev/cpython\r\n500000 loops, best of 5: 603 nsec per loop\r\n(main) % ./python.exe -m timeit -s \"import posixpath\" \"posixpath.ismount('/Volumes/2GB_001')\"                                 ~/dev/cpython\r\n500000 loops, best of 5: 607 nsec per loop\r\n(main) % ./python.exe -m timeit -s \"import posixpath\" \"posixpath.ismount('/Volumes/2GB_001')\"                                 ~/dev/cpython\r\n500000 loops, best of 5: 601 nsec per loop\r\n```\r\n\r\nWith your PR branch:\r\n\r\n```\r\n(speedup-os.path) % ./python.exe -m timeit -s \"import posixpath\" \"posixpath.ismount('/Volumes/2GB_001')\"                      ~/dev/cpython\r\n500000 loops, best of 5: 637 nsec per loop\r\n(speedup-os.path) % ./python.exe -m timeit -s \"import posixpath\" \"posixpath.ismount('/Volumes/2GB_001')\"                      ~/dev/cpython\r\n500000 loops, best of 5: 650 nsec per loop\r\n(speedup-os.path) % ./python.exe -m timeit -s \"import posixpath\" \"posixpath.ismount('/Volumes/2GB_001')\"                      ~/dev/cpython\r\n500000 loops, best of 5: 646 nsec per loop\r\n(speedup-os.path) % ./python.exe -m timeit -s \"import posixpath\" \"posixpath.ismount('/Volumes/2GB_001')\"                      ~/dev/cpython\r\n500000 loops, best of 5: 643 nsec per loop\r\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2031569307/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/54390",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/54390/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/54390/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/54390/events",
      "html_url": "https://github.com/python/cpython/issues/54390",
      "id": 1198861336,
      "node_id": "MDU6SXNzdWUxMTk4ODYxMzM2",
      "number": 54390,
      "title": "Problems with Py_buffer management in memoryobject.c (and elsewhere?)",
      "user": {
        "login": "8e06f10c-4750-4034-a995-c3e4932e02af",
        "id": 92820218,
        "node_id": "M_kgDOBYhS-g",
        "avatar_url": "https://avatars.githubusercontent.com/u/92820218?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af",
        "html_url": "https://github.com/rupole",
        "followers_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/followers",
        "following_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/following{/other_user}",
        "gists_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/subscriptions",
        "organizations_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/orgs",
        "repos_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/repos",
        "events_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/events{/privacy}",
        "received_events_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 4018668718,
          "node_id": "LA_kwDOBN0Z8c7viASu",
          "url": "https://api.github.com/repos/python/cpython/labels/interpreter-core",
          "name": "interpreter-core",
          "color": "09fc59",
          "default": false,
          "description": "(Objects, Python, Grammar, and Parser dirs)"
        },
        {
          "id": 4018848914,
          "node_id": "LA_kwDOBN0Z8c7visSS",
          "url": "https://api.github.com/repos/python/cpython/labels/type-crash",
          "name": "type-crash",
          "color": "b60205",
          "default": false,
          "description": "A hard crash of the interpreter, possibly with a core dump"
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 147,
      "created_at": "2010-10-23T18:22:37Z",
      "updated_at": "2022-04-10T03:48:28Z",
      "closed_at": "2012-03-01T08:32:51Z",
      "author_association": "MANNEQUIN",
      "type": null,
      "active_lock_reason": null,
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [10181](https://bugs.python.org/issue10181)\n--- | :---\nNosy | @loewis, @pfmoore, @mdickinson, @ncoghlan, @pitrou, @kristjanvalur, @vstinner, @pv, @skrah, @akheron\nFiles | <li>[pybuffer.diff](https://bugs.python.org/file20282/pybuffer.diff \"Uploaded as text/plain at 2011-01-05.19:40:41 by @loewis\")</li><li>[buffer-interface-clarify.patch](https://bugs.python.org/file20756/buffer-interface-clarify.patch \"Uploaded as text/plain at 2011-02-13.19:08:42 by @pv\"): Clarifying the behavior of the buffer interface (for discussion, probably shouldn't be applied as-is)</li><li>[bbe70ca4e0e5.diff](https://bugs.python.org/file22564/bbe70ca4e0e5.diff \"Uploaded as text/plain at 2011-07-04.10:29:39 by @skrah\"): PyManagedBuffer implementation</li><li>[718801740bde.diff](https://bugs.python.org/file22577/718801740bde.diff \"Uploaded as text/plain at 2011-07-05.10:47:47 by @skrah\"): PyManagedBuffer implementation #2</li><li>[78fb1181787a.diff](https://bugs.python.org/file22873/78fb1181787a.diff \"Uploaded as text/plain at 2011-08-10.11:43:21 by @skrah\"): Add Modules/_testbuffer.c and Lib/test/test_buffer.py</li><li>[70a8ccd53ade.diff](https://bugs.python.org/file22909/70a8ccd53ade.diff \"Uploaded as text/plain at 2011-08-16.13:20:19 by @skrah\"): Fixed suboffsets representation in _testbuffer.c</li><li>[51cedae5acfc.diff](https://bugs.python.org/file23119/51cedae5acfc.diff \"Uploaded as text/plain at 2011-09-08.14:46:57 by @skrah\"): PyManagedBuffer, native format, complete 1D slicing, casts</li><li>[4492afe05a07.diff](https://bugs.python.org/file23185/4492afe05a07.diff \"Uploaded as text/plain at 2011-09-18.09:16:46 by @skrah\"): Handle objects with an __index__() method.</li><li>[8dd9f0ea4876.diff](https://bugs.python.org/file24323/8dd9f0ea4876.diff \"Uploaded as text/plain at 2012-01-25.17:43:34 by @skrah\")</li><li>[a5c4a96dc981.diff](https://bugs.python.org/file24381/a5c4a96dc981.diff \"Uploaded as text/plain at 2012-01-31.20:32:48 by @skrah\")</li><li>[issue10181-news.diff](https://bugs.python.org/file24629/issue10181-news.diff \"Uploaded as text/plain at 2012-02-24.15:16:18 by @skrah\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = <Date 2012-03-01.08:32:50.822>\ncreated_at = <Date 2010-10-23.18:22:37.367>\nlabels = ['interpreter-core', 'type-crash']\ntitle = 'Problems with Py_buffer management in memoryobject.c (and elsewhere?)'\nupdated_at = <Date 2012-04-09.08:15:56.593>\nuser = 'https://bugs.python.org/rupole'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2012-04-09.08:15:56.593>\nactor = 'joshtriplett'\nassignee = 'none'\nclosed = True\nclosed_date = <Date 2012-03-01.08:32:50.822>\ncloser = 'skrah'\ncomponents = ['Interpreter Core']\ncreation = <Date 2010-10-23.18:22:37.367>\ncreator = 'rupole'\ndependencies = []\nfiles = ['20282', '20756', '22564', '22577', '22873', '22909', '23119', '23185', '24323', '24381', '24629']\nhgrepos = ['36']\nissue_num = 10181\nkeywords = ['patch']\nmessage_count = 147.0\nmessages = ['119460', '120267', '120268', '120270', '120280', '120281', '120297', '120318', '120319', '120321', '120322', '125296', '125297', '125327', '125328', '125332', '125418', '125424', '125431', '125433', '125462', '125499', '125502', '125507', '125531', '125582', '125618', '125630', '125631', '125635', '125640', '125641', '128475', '128477', '128491', '128495', '128499', '128503', '128505', '128506', '128508', '128514', '128516', '128517', '128518', '128525', '128526', '128527', '128528', '128537', '128538', '128539', '128540', '128542', '128544', '128546', '128551', '128878', '139162', '139172', '139173', '139256', '139257', '139266', '139314', '139316', '139317', '139320', '139323', '139325', '139341', '139747', '139748', '139751', '139758', '139760', '139762', '139764', '139766', '139767', '139775', '139826', '139834', '139846', '139856', '139859', '139861', '139865', '139866', '139868', '139870', '139871', '139872', '139873', '139874', '139875', '139877', '139878', '139883', '139919', '139920', '139921', '139932', '139933', '139935', '139936', '141858', '142191', '143727', '143730', '144234', '151360', '151445', '151447', '151537', '151538', '152086', '152090', '152091', '152124', '152145', '152161', '152173', '152174', '152175', '152188', '152196', '152197', '152206', '152208', '152223', '152245', '152404', '153870', '154138', '154141', '154240', '154323', '154327', '154616', '154651', '154665', '154680', '154764', '154937', '157834', '157835']\nnosy_count = 15.0\nnosy_names = ['loewis', 'teoliphant', 'paul.moore', 'mark.dickinson', 'ncoghlan', 'rupole', 'pitrou', 'kristjan.jonsson', 'vstinner', 'joshtriplett', 'pv', 'skrah', 'python-dev', 'jcon', 'petri.lehtinen']\npr_nums = []\npriority = 'normal'\nresolution = 'fixed'\nstage = 'resolved'\nstatus = 'closed'\nsuperseder = None\ntype = 'crash'\nurl = 'https://bugs.python.org/issue10181'\nversions = ['Python 3.3']\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
        "id": 92819801,
        "node_id": "M_kgDOBYhRWQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/92819801?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c",
        "html_url": "https://github.com/skrah",
        "followers_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/followers",
        "following_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/following{/other_user}",
        "gists_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/subscriptions",
        "organizations_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/orgs",
        "repos_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/repos",
        "events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/events{/privacy}",
        "received_events_url": "https://api.github.com/users/5531d0d8-2a9c-46ba-8b8b-ef76132a492c/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/54390/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/54390/timeline",
      "performed_via_github_app": null,
      "state_reason": "completed",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522478",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522478",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522478,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0Nzg=",
          "user": {
            "login": "8e06f10c-4750-4034-a995-c3e4932e02af",
            "id": 92820218,
            "node_id": "M_kgDOBYhS-g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92820218?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af",
            "html_url": "https://github.com/rupole",
            "followers_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/followers",
            "following_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/following{/other_user}",
            "gists_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/subscriptions",
            "organizations_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/orgs",
            "repos_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/repos",
            "events_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-10-23T18:22:37Z",
          "updated_at": "2010-10-23T18:22:37Z",
          "author_association": "MANNEQUIN",
          "body": "There are a number of places in memoryobject.c where get_shape0 is used without the return value being checked.  If it fails, this leads to hanging exceptions and crashes.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522478/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522479",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522479",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522479,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0Nzk=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-02T22:16:19Z",
          "updated_at": "2010-11-02T22:16:19Z",
          "author_association": "MEMBER",
          "body": "Yes, there are probably many holes like this. I've done what I could to make the simple cases (builtin types) to work, but the spec is rotten from the start. Blame the numpy people, sorry.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522479/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522481",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522481",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522481,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0ODE=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-02T22:30:01Z",
          "updated_at": "2010-11-02T22:30:01Z",
          "author_association": "CONTRIBUTOR",
          "body": "As far as I know, PEP-3118 serves its purpose of allowing extension modules like numpy and PIL to share data without needing to copy it around all the time. It's just that memoryview wasn't really part of that purpose (since all the affected third party libraries have their own objects for looking at memory), and it shows :P\r\n\r\nOur near term goal should be to get memoryview in a good place for handling 1D contiguous data and throw exceptions (rather than crashing) for everything else. I think Antoine has achieved the former, but it sounds like there is still some work to do on the latter.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522481/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522483",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522483",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522483,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0ODM=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-02T22:34:57Z",
          "updated_at": "2010-11-02T22:34:57Z",
          "author_association": "MEMBER",
          "body": "> As far as I know, PEP-3118 serves its purpose of allowing extension\n> modules like numpy and PIL to share data without needing to copy it\n> around all the time. It's just that memoryview wasn't really part of\n> that purpose (since all the affected third party libraries have their\n> own objects for looking at memory), and it shows :P\n\nThe deeper issue is that there are no ownership or lifetime rules for\ndynamically allocated fields in Py_buffer (such as strides and shape),\nwhich itself isn't a PyObject. For very simple objects (such as bytes or\nbytearray) it isn't really a problem, but it is in more complicated\nsituations; and there's no possible solution without a clear spec..\n\n(and I'm not even talking of the issue of making slices of memoryviews,\nsince the buffer API itself doesn't handle slicing, which means the\nmemoryview object has to modify its inner Py_buffer...)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522483/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522485",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522485",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522485,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0ODU=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-02T22:57:06Z",
          "updated_at": "2010-11-02T22:57:06Z",
          "author_association": "CONTRIBUTOR",
          "body": "Read the \"Releasing the buffer\" section in PEP-3118 again. Unless I'm misunderstanding you completely, the rules you're asking for are already in place: those fields are entirely the responsibility of the exporting object, and it needs to ensure they remain valid until the buffer is released.\r\n\r\nNow, it may be that we haven't \\*implemented* this correctly or consistently in the builtin objects, in which case we should do something about it. But the rules are there.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522485/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522488",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522488",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522488,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0ODg=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-02T23:01:12Z",
          "updated_at": "2010-11-02T23:01:12Z",
          "author_association": "MEMBER",
          "body": "> Read the \"Releasing the buffer\" section in PEP-3118 again. Unless I'm\n> misunderstanding you completely, the rules you're asking for are\n> already in place: those fields are entirely the responsibility of the\n> exporting object, and it needs to ensure they remain valid until the\n> buffer is released.\n\nIn practice, though, we copy Py_buffer structs around and there's no way\nfor the original object to know about that. That's the fundamental\ndifference with a PyObject where you would only increase a refcount\ninstead of copying the structure's contents.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522488/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522489",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522489",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522489,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0ODk=",
          "user": {
            "login": "8e06f10c-4750-4034-a995-c3e4932e02af",
            "id": 92820218,
            "node_id": "M_kgDOBYhS-g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92820218?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af",
            "html_url": "https://github.com/rupole",
            "followers_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/followers",
            "following_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/following{/other_user}",
            "gists_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/subscriptions",
            "organizations_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/orgs",
            "repos_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/repos",
            "events_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-03T01:17:30Z",
          "updated_at": "2010-11-03T01:17:30Z",
          "author_association": "MANNEQUIN",
          "body": "The culprit wrt copying Py_buffer structs seems mainly to be dup_buffer, which is called in memory_getbuf.  This seems unnecessary in the case where there's an underlying object and it has returned the view thru its own tp_as_buffer.  The underlying object at that point is solely responsible for releasing the buffer, so memory_getbuf shouldn't mess with it at all.  In the case where there is no underlying object (mainly thru PyMemoryView_FromBuffer), it probably should allocate any memory in the view in such a way that it can be freed in memory_releasebuf when the view-\\>obj is NULL.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522489/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522491",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522491",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522491,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0OTE=",
          "user": {
            "login": "8e06f10c-4750-4034-a995-c3e4932e02af",
            "id": 92820218,
            "node_id": "M_kgDOBYhS-g",
            "avatar_url": "https://avatars.githubusercontent.com/u/92820218?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af",
            "html_url": "https://github.com/rupole",
            "followers_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/followers",
            "following_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/following{/other_user}",
            "gists_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/subscriptions",
            "organizations_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/orgs",
            "repos_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/repos",
            "events_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/events{/privacy}",
            "received_events_url": "https://api.github.com/users/8e06f10c-4750-4034-a995-c3e4932e02af/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-03T11:59:53Z",
          "updated_at": "2010-11-03T11:59:53Z",
          "author_association": "MANNEQUIN",
          "body": "While on the subject, the docs for PyMemoryView_FromBuffer state that the resulting memoryview takes ownership of the Py_buffer struct and is responsible for freeing any associated memory.  It does not do so, which is not surprising.  The absence of a standard for allocation makes it absolutely impossible for it to do so safely.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522491/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522492",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522492",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522492,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0OTI=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-03T12:19:52Z",
          "updated_at": "2010-11-03T12:19:52Z",
          "author_association": "CONTRIBUTOR",
          "body": "Hmm, if we're ever creating a new copy of a Py_buffer without calling GetBuffer again on the original object, then \\*that* is a bug (exactly comparable to copying a PyObject pointer without incrementing the reference count - it's OK if you can guarantee the lifecycle of your borrowed pointer is shorter than the lifecycle of the original, but disallowed otherwise).\r\n\r\nThis still doesn't sound like a problem with the spec to me, it sounds like a problem with the implementation strategy that was originally used when integrating the spec into the interpeter core (which I readily agree received far less attention than the spec itself did).\r\n\r\nIt really sounds like we should be creating a \\_Py_ManagedBuffer internal object, with each instance containing a PyObject* and a Py_buffer instance. We don't need to alter PEP-3118 to do that - such a change is entirely consumer side, so the objects providing the buffers don't need to care how the lifecycle of the Py_buffer struct is managed.\r\n\r\nWhen we need another reference to the buffer, we can then just increment the refcount of the \\_Py_ManagedBuffer instance rather than having to call GetBuffer again on the original object.\r\n\r\nThe contents of Py_buffer objects that have been passed to GetBuffer really shouldn't be getting modified at all - for those cases, we should maintain \\*two* Py_buffer structs, one (unmodified) with the original results of the GetBuffer call, and a second owned by the caller (for manipulation).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522492/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522493",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522493",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522493,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0OTM=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-03T12:51:51Z",
          "updated_at": "2010-11-03T12:51:51Z",
          "author_association": "CONTRIBUTOR",
          "body": "It doesn't help that neither PEP-3118 nor the Py_buffer docs mention the \"obj\" member of the Py_buffer struct that refers back to the original object providing the buffer - that's fairly fundamental to understanding how PyBuffer_Release and PyMemoryView_FromBuffer can work even in theory.\r\n\r\n(Given that, an additional \\_PyManagedBuffer object shouldn't be necessary - MemoryView just needs to call ReleaseBuffer and GetBuffer at the appropriate times)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522493/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522494",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522494",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522494,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0OTQ=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-11-03T13:00:32Z",
          "updated_at": "2010-11-03T13:00:32Z",
          "author_association": "CONTRIBUTOR",
          "body": "So the overall to-do list here is sounding like:\r\n\r\n1. Document \"Py_buffer-\\>obj\" appropriately in both the C API documentation and in PEP-3118\r\n\r\n2. Ensure GetBuffer/ReleaseBuffer are used as the moral equivalent of INCREF/DECREF for Py_buffer objects.\r\n\r\n3. Check builtin types correctly manage the lifecycle of all elements of their exported Py_buffer structs\r\n\r\n4. Check return values and throw exceptions as noted in the original post",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522494/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522495",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522495",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522495,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0OTU=",
          "user": {
            "login": "mdickinson",
            "id": 662003,
            "node_id": "MDQ6VXNlcjY2MjAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/662003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mdickinson",
            "html_url": "https://github.com/mdickinson",
            "followers_url": "https://api.github.com/users/mdickinson/followers",
            "following_url": "https://api.github.com/users/mdickinson/following{/other_user}",
            "gists_url": "https://api.github.com/users/mdickinson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mdickinson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mdickinson/subscriptions",
            "organizations_url": "https://api.github.com/users/mdickinson/orgs",
            "repos_url": "https://api.github.com/users/mdickinson/repos",
            "events_url": "https://api.github.com/users/mdickinson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mdickinson/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-04T08:18:56Z",
          "updated_at": "2011-01-04T08:18:56Z",
          "author_association": "MEMBER",
          "body": "It might be instructive to look at how NumPy itself manages sharing of ndarray data and ownership of the corresponding structs.  I meant to find time to look at this over the break.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522495/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522496",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522496",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522496,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0OTY=",
          "user": {
            "login": "mdickinson",
            "id": 662003,
            "node_id": "MDQ6VXNlcjY2MjAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/662003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mdickinson",
            "html_url": "https://github.com/mdickinson",
            "followers_url": "https://api.github.com/users/mdickinson/followers",
            "following_url": "https://api.github.com/users/mdickinson/following{/other_user}",
            "gists_url": "https://api.github.com/users/mdickinson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mdickinson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mdickinson/subscriptions",
            "organizations_url": "https://api.github.com/users/mdickinson/orgs",
            "repos_url": "https://api.github.com/users/mdickinson/repos",
            "events_url": "https://api.github.com/users/mdickinson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mdickinson/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-04T08:22:38Z",
          "updated_at": "2011-01-04T08:22:38Z",
          "author_association": "MEMBER",
          "body": "BTW, I agree that it looks as though significant changes might be needed.  I wonder whether it would make sense to exclude the Py_buffer struct fro m the Stable ABI PEP for now.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522496/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522498",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522498",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522498,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0OTg=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-04T14:49:16Z",
          "updated_at": "2011-01-04T14:49:16Z",
          "author_association": "CONTRIBUTOR",
          "body": "Agreed. I'll put something on python-dev about that, so MvL sees it.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522498/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522499",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522499",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522499,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI0OTk=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-04T14:54:41Z",
          "updated_at": "2011-01-04T14:54:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "More direct - added MvL to nosy list.\r\n\r\nMartin, we would like to exclude Py_buffer from the stable ABI for Python 3.2, until we have a chance to thrash out the missing pieces of the documentation for 3.3. I \\*think* it is a documentation problem, but until we're certain, it seems safer to leave it out.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522499/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522500",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522500",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522500,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI1MDA=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-04T14:58:15Z",
          "updated_at": "2011-01-04T14:58:15Z",
          "author_association": "CONTRIBUTOR",
          "body": "From Lenard Lindstrom in bpo-10001 (closed as dupe of this issue):\r\n\r\nThe \\~Py_buffer.obj field is undocumented. Yet memoryview, that acts as a wrapper, includes the field in gc traversal. Also, if the field is not initialized by bf_getbuffer its value can be indeterminate. For memoryview the gc can crash (see attached C demo program).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522500/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522501",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522501",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522501,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI1MDE=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-05T12:25:06Z",
          "updated_at": "2011-01-05T12:25:06Z",
          "author_association": "CONTRIBUTOR",
          "body": "Added Travis to nosy list - even if he doesn't have time to finish this off himself, hopefully he can point us in the right direction.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522501/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522502",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522502",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522502,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI1MDI=",
          "user": {
            "login": "mdickinson",
            "id": 662003,
            "node_id": "MDQ6VXNlcjY2MjAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/662003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mdickinson",
            "html_url": "https://github.com/mdickinson",
            "followers_url": "https://api.github.com/users/mdickinson/followers",
            "following_url": "https://api.github.com/users/mdickinson/following{/other_user}",
            "gists_url": "https://api.github.com/users/mdickinson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mdickinson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mdickinson/subscriptions",
            "organizations_url": "https://api.github.com/users/mdickinson/orgs",
            "repos_url": "https://api.github.com/users/mdickinson/repos",
            "events_url": "https://api.github.com/users/mdickinson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mdickinson/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-05T13:51:10Z",
          "updated_at": "2011-01-05T13:51:10Z",
          "author_association": "MEMBER",
          "body": "Nick, it sounds as though you have an idea of how you think things should be working here---perhaps you can help me out.  I'd really like to understand what the implementation should look like from the POV of a 3rd party module that defines some object exporting the buffer interface.\r\n\r\nHere's a specific scenario I'd like to understand:  module foo defines a type Foo that implements the buffer protocol.  For simplicity, suppose it's exporting 1-dim buffers. When I do:\r\n\r\n>\\>\\> from foo import Foo\r\n>\\>\\> foo_object = Foo()\r\n>\\>\\> m = memoryview(foo_object)\r\n>\\>\\> n = m[::2]  # take a slice of m\r\n>\\>\\> del m       # delete the objects, in whichever order.\r\n>\\>\\> del n\r\n\r\nwhat's the sequence of getbuffer and releasebuffer calls that foo_object should expect to see?\r\n\r\nQ1. Does foo get 2 requests to getbuffer (and 2 to releasebuffer), or just one each?  I'm assuming at least that getbuffer and releasebuffer calls should be paired.\r\n\r\nQ2. For each pair of getbuffer/releasebuffer calls, should the 'view' parameter passed into releasebuffer be identical to that provided to getbuffer?  Or is it acceptable for the actual Py_buffer* pointers to be distinct, but the pointed-to Py_buffers to be exact copies.  (The existence of the smalltable field complicates the notion of an exact copy a little bit, but I think that's a detail that can be ignored for these questions.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522502/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522504",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522504",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522504,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI1MDQ=",
          "user": {
            "login": "ncoghlan",
            "id": 1026649,
            "node_id": "MDQ6VXNlcjEwMjY2NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1026649?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncoghlan",
            "html_url": "https://github.com/ncoghlan",
            "followers_url": "https://api.github.com/users/ncoghlan/followers",
            "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions",
            "organizations_url": "https://api.github.com/users/ncoghlan/orgs",
            "repos_url": "https://api.github.com/users/ncoghlan/repos",
            "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncoghlan/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-05T16:30:52Z",
          "updated_at": "2011-01-05T16:30:52Z",
          "author_association": "CONTRIBUTOR",
          "body": "PEP-3118 makes it clear that the underlying object should see \\*two* pairs of calls to the buffer methods:\r\nhttp://www.python.org/dev/peps/pep-3118/#the-py-buffer-struct\r\n\r\nEven if we ignore the undocumented \"obj\" field, the target object needs to ensure the exported buffer remains valid as long as any memory views are referencing it. The only way to do that is to treat GetBuffer/ReleaseBuffer as the moral equivalent of INCREF/DECREF.\r\n\r\nHowever, I believe the current memoryview implementation does the wrong thing and only calls them once, and then duplicates the Py_buffer structures without ever going back to the original objects (that opinion was based on a quick scan of the code a while back, but it would fit with the uncomplimentary sentiments Antoine has expressed in trying to get all this to exhibit some kind of consistency)\r\n\r\nFor point 2, it must be the same pointer. When the PEP says \"the same\", I agree it could be taken as ambiguous, but the later reference to the exporter managing a linked-list of exported views makes it clear that identity is what matters.\r\n\r\nAs far as I can see, some of things in the PEP were found to be a PITA in practice (such as every consumer of the API having to implement the equivalent of the \"base\" attribute in the original memoryview design), so Travis changed them. Unfortunately, those changes never made it back into the protocol documentation, leading to the current confusion.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522504/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522506",
          "html_url": "https://github.com/python/cpython/issues/54390#issuecomment-1093522506",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/54390",
          "id": 1093522506,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1MjI1MDY=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-01-05T16:52:47Z",
          "updated_at": "2011-01-05T16:52:47Z",
          "author_association": "MEMBER",
          "body": "> However, I believe the current memoryview implementation does the\n> wrong thing and only calls them once, and then duplicates the\n> Py_buffer structures without ever going back to the original objects\n> (that opinion was based on a quick scan of the code a while back, but\n> it would fit with the uncomplimentary sentiments Antoine has expressed\n> in trying to get all this to exhibit some kind of consistency)\n\nActually, and unless I made a mistake, it does call them twice.\n(and does the slicing by hand afterwards, which explains part of the\nhilarity with smalltable and friends :-))\n\n> For point 2, it must be the same pointer. When the PEP says \"the\n> same\", I agree it could be taken as ambiguous, but the later reference\n> to the exporter managing a linked-list of exported views makes it\n> clear that identity is what matters.\n\nThe common idiom (including in code not written by me :-)) is currently\nto use Py_buffer variables allocated on the C stack.\n\nAlso, we have the C API function PyMemoryView_FromBuffer() which\nbasically mandates that Py_buffer structs can be copied around. And it's\na very useful function since it allows to create a memoryview from a\nchunk of anonymous memory.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093522506/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/56535",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/56535/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/56535/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/56535/events",
      "html_url": "https://github.com/python/cpython/issues/56535",
      "id": 1198870251,
      "node_id": "MDU6SXNzdWUxMTk4ODcwMjUx",
      "number": 56535,
      "title": "Linux 3: code should avoid using sys.platform == 'linux2'",
      "user": {
        "login": "79528080-9d85-4d18-8a2a-8b1f07640dd7",
        "id": 92819953,
        "node_id": "M_kgDOBYhR8Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/92819953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7",
        "html_url": "https://github.com/neologix",
        "followers_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/followers",
        "following_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/following{/other_user}",
        "gists_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/subscriptions",
        "organizations_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/orgs",
        "repos_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/repos",
        "events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/events{/privacy}",
        "received_events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/received_events",
        "type": "Mannequin",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 4018687099,
          "node_id": "LA_kwDOBN0Z8c7viEx7",
          "url": "https://api.github.com/repos/python/cpython/labels/release-blocker",
          "name": "release-blocker",
          "color": "660205",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 145,
      "created_at": "2011-06-13T14:34:42Z",
      "updated_at": "2022-04-10T04:29:59Z",
      "closed_at": "2011-09-05T20:39:31Z",
      "author_association": "MANNEQUIN",
      "type": null,
      "active_lock_reason": null,
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [12326](https://bugs.python.org/issue12326)\n--- | :---\nNosy | @malemburg, @loewis, @warsaw, @birkenfeld, @doko42, @amauryfa, @pitrou, @vstinner, @larryhastings, @benjaminp, @jwilk, @djc, @ezio-melotti, @merwok, @bitdancer, @davidmalcolm, @sandrotosi, @akheron\nFiles | <li>[linux3-v2.patch](https://bugs.python.org/file22917/linux3-v2.patch \"Uploaded as text/plain at 2011-08-16.21:37:59 by @vstinner\")</li><li>[configure_linux2.python3.2.patch](https://bugs.python.org/file22946/configure_linux2.python3.2.patch \"Uploaded as text/plain at 2011-08-19.14:23:01 by @vstinner\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = None\nclosed_at = <Date 2011-09-05.20:39:30.835>\ncreated_at = <Date 2011-06-13.14:34:41.657>\nlabels = ['type-bug', 'release-blocker']\ntitle = \"Linux 3: code should avoid using sys.platform == 'linux2'\"\nupdated_at = <Date 2011-10-04.14:24:53.642>\nuser = 'https://bugs.python.org/neologix'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2011-10-04.14:24:53.642>\nactor = 'barry'\nassignee = 'none'\nclosed = True\nclosed_date = <Date 2011-09-05.20:39:30.835>\ncloser = 'vstinner'\ncomponents = []\ncreation = <Date 2011-06-13.14:34:41.657>\ncreator = 'neologix'\ndependencies = []\nfiles = ['22917', '22946']\nhgrepos = []\nissue_num = 12326\nkeywords = ['patch']\nmessage_count = 145.0\nmessages = ['138251', '138252', '138253', '138254', '138255', '138271', '138294', '138295', '138298', '138299', '138300', '138306', '138308', '138527', '138582', '138597', '138711', '138730', '138757', '138759', '138816', '138817', '138823', '138824', '139166', '139208', '139224', '139243', '139248', '140012', '140017', '140061', '140062', '140063', '140064', '140065', '140394', '140397', '140684', '140703', '140708', '140710', '140801', '140802', '140830', '140831', '140939', '140944', '140949', '140955', '140985', '141088', '141651', '141659', '142195', '142196', '142197', '142219', '142226', '142272', '142290', '142291', '142297', '142298', '142313', '142344', '142345', '142346', '142350', '142353', '142354', '142356', '142358', '142379', '142380', '142381', '142382', '142384', '142385', '142387', '142389', '142394', '142396', '142398', '142401', '142406', '142407', '142408', '142409', '142410', '142417', '142418', '142419', '142420', '142425', '142440', '142441', '142444', '142446', '142450', '142451', '142453', '142457', '142459', '142460', '142461', '142463', '142482', '142490', '142493', '142498', '142499', '142500', '142524', '142531', '142539', '142541', '142570', '142571', '142574', '142579', '142593', '142605', '142614', '142615', '142628', '142635', '142678', '142694', '142697', '142698', '142700', '142707', '142711', '142762', '142766', '142769', '143455', '143470', '143479', '143557', '143561', '143562', '144889', '144890']\nnosy_count = 25.0\nnosy_names = ['lemburg', 'loewis', 'barry', 'georg.brandl', 'doko', 'amaury.forgeotdarc', 'gagern', 'foom', 'pitrou', 'vstinner', 'larry', 'benjamin.peterson', 'jwilk', 'djc', 'ezio.melotti', 'eric.araujo', 'Arfrever', 'Retro', 'r.david.murray', 'dmalcolm', 'sandro.tosi', 'rosslagerwall', 'python-dev', 'petri.lehtinen', 'Ramchandra Apte']\npr_nums = []\npriority = 'release blocker'\nresolution = 'fixed'\nstage = 'resolved'\nstatus = 'closed'\nsuperseder = None\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue12326'\nversions = ['Python 2.7', 'Python 3.2', 'Python 3.3']\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "vstinner",
        "id": 194129,
        "node_id": "MDQ6VXNlcjE5NDEyOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vstinner",
        "html_url": "https://github.com/vstinner",
        "followers_url": "https://api.github.com/users/vstinner/followers",
        "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
        "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
        "organizations_url": "https://api.github.com/users/vstinner/orgs",
        "repos_url": "https://api.github.com/users/vstinner/repos",
        "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vstinner/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/56535/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/56535/timeline",
      "performed_via_github_app": null,
      "state_reason": "completed",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549089",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549089",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549089,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwODk=",
          "user": {
            "login": "79528080-9d85-4d18-8a2a-8b1f07640dd7",
            "id": 92819953,
            "node_id": "M_kgDOBYhR8Q",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819953?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7",
            "html_url": "https://github.com/neologix",
            "followers_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/followers",
            "following_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/following{/other_user}",
            "gists_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/subscriptions",
            "organizations_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/orgs",
            "repos_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/repos",
            "events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/events{/privacy}",
            "received_events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-13T14:34:41Z",
          "updated_at": "2011-06-13T14:34:41Z",
          "author_association": "MANNEQUIN",
          "body": "Linus recently decided that the next Linux kernel version would 3.0 [1].\r\nAs a consequence, sys.platform (which is actually MACHDEP) will be 'linux3' on machines running Linux 3 kernels, and tests checking explicitely against 'linux2' will either break and won't run.\r\nA quick grep through the code base returns only a couple problematic places, but this should definitely be fixed.\r\nFor information, here's a - probably incomplete - list of such occurrences:\r\n\r\n\"\"\"\r\n./Lib/test/test_logging.py:        if sys.platform in ('linux2', 'darwin'):\r\n./Lib/test/test_sysconfig.py:        sys.platform = 'linux2'\r\n./Lib/test/regrtest.py:    'linux2':\r\n./Lib/test/test_socket.py:    if sys.platform == 'linux2':\r\n./Lib/test/test_tarfile.py:        if sys.platform == \"linux2\":\r\n./Lib/distutils/tests/test_bdist_rpm.py:        if sys.platform != 'linux2':\r\n./Lib/distutils/tests/test_bdist_rpm.py:        if sys.platform != 'linux2':\r\n./Lib/distutils/tests/test_util.py:        sys.platform = 'linux2'\r\n./Lib/packaging/tests/test_config.py:  inotify (0.0.1); sys.platform == 'linux2'\r\n./Lib/packaging/tests/test_config.py:                  \"inotify (0.0.1); sys.platform == 'linux2'\"]\r\n./setup.py:        if (platform in ('linux2', 'freebsd4', 'freebsd5', 'freebsd6',\r\n\"\"\"\r\n\r\n[1] http://thread.gmane.org/gmane.linux.kernel/1147415",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549089/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549090",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549090",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549090,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTA=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-13T14:38:24Z",
          "updated_at": "2011-06-13T14:38:24Z",
          "author_association": "MEMBER",
          "body": "Why should be used instead?\r\n - sys.platform.startswith('linux')\r\n - os.uname()[0] == 'Linux'\r\n - platform.system() == 'Linux'\r\n - other?\r\n\r\nTests like sys.platform in ('linux2', 'darwin') can be replaced by sys.platform in ('linux2', 'linux3', 'darwin'). We will have to patch this test again for Linux 4.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549090/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549091",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549091",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549091,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTE=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-13T14:42:29Z",
          "updated_at": "2011-06-13T14:42:29Z",
          "author_association": "MEMBER",
          "body": "I would expect changing sys.platform will also break a lot of third-party code. Perhaps sys.platform can still be 'linux2' under Linux 3.x? After all, there's no significant change that deserves changing sys.platform.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549091/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549092",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549092",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549092,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTI=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-13T14:50:08Z",
          "updated_at": "2011-06-13T14:50:08Z",
          "author_association": "MEMBER",
          "body": "sys.platform comes from Py_GetPlatform() which comes from PLATFORM define. On Linux, this define comes from Makefile: MACHDEP variable which comes from configure. Finally, MACHDEP is defined by:\r\n\r\n\tac_sys_system=`uname -s`\r\n\tif test \"$ac_sys_system\" = \"AIX\" \\\r\n\t-o \"$ac_sys_system\" = \"UnixWare\" -o \"$ac_sys_system\" = \"OpenUNIX\"; then\r\n\t\tac_sys_release=`uname -v`\r\n\telse\r\n\t\tac_sys_release=`uname -r`\r\n\tfi\r\n\tac_md_system=`echo $ac_sys_system |\r\n\t\t\t   tr -d '/ ' | tr '[A-Z]' '[a-z]'`\r\n\tac_md_release=`echo $ac_sys_release |\r\n\t\t\t   tr -d '/ ' | sed 's/^[A-Z]\\.//' | sed 's/\\..*//'`\r\n\tMACHDEP=\"$ac_md_system$ac_md_release\"",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549092/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549093",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549093",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549093,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTM=",
          "user": {
            "login": "79528080-9d85-4d18-8a2a-8b1f07640dd7",
            "id": 92819953,
            "node_id": "M_kgDOBYhR8Q",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819953?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7",
            "html_url": "https://github.com/neologix",
            "followers_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/followers",
            "following_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/following{/other_user}",
            "gists_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/subscriptions",
            "organizations_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/orgs",
            "repos_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/repos",
            "events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/events{/privacy}",
            "received_events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-13T14:51:12Z",
          "updated_at": "2011-06-13T14:51:12Z",
          "author_association": "MANNEQUIN",
          "body": "> I would expect changing sys.platform will also break a lot of third-\r\n> party code.\r\n\r\nMaybe, but this would be an application bug.\r\n\r\nHere's sys.platform current implementation:\r\n\r\n```c\nconst char *\r\nPy_GetPlatform(void)\r\n{\r\n    return PLATFORM;\r\n}\n```\n\r\n\r\n\r\nAnd here's the documentation, from http://docs.python.org/c-api/init.html\r\n\r\n\"\"\"\r\nReturn the platform identifier for the current platform. On Unix, this is formed from the \u201cofficial\u201d name of the operating system, converted to lower case, followed by the major revision number\"\"\"\r\n\r\nSo it's actually documented.\r\n\r\n> Perhaps sys.platform can still be 'linux2' under Linux 3.x? After\r\n> all, there's no significant change that deserves changing\r\n> sys.platform.\r\n\r\nSounds like a recipe for confusion.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549093/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549094",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549094",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549094,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTQ=",
          "user": {
            "login": "61337411-43fc-4a9c-b8d5-4060aede66d0",
            "id": 92799374,
            "node_id": "M_kgDOBYgBjg",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799374?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0",
            "html_url": "https://github.com/loewis",
            "followers_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/followers",
            "following_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/following{/other_user}",
            "gists_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/subscriptions",
            "organizations_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/orgs",
            "repos_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/repos",
            "events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-13T19:11:05Z",
          "updated_at": "2011-06-13T19:11:05Z",
          "author_association": "MANNEQUIN",
          "body": "I suggest to change sys.platform to 'linux' in future releases (3.3). For bugfix releases (2.7, 3.2), I'd keep it as 'linux2' even on Linux 3. For security-only releases (2.6, 3.1), no change should be made.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549094/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549095",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549095",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549095,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTU=",
          "user": {
            "login": "amauryfa",
            "id": 645208,
            "node_id": "MDQ6VXNlcjY0NTIwOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/645208?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/amauryfa",
            "html_url": "https://github.com/amauryfa",
            "followers_url": "https://api.github.com/users/amauryfa/followers",
            "following_url": "https://api.github.com/users/amauryfa/following{/other_user}",
            "gists_url": "https://api.github.com/users/amauryfa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/amauryfa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/amauryfa/subscriptions",
            "organizations_url": "https://api.github.com/users/amauryfa/orgs",
            "repos_url": "https://api.github.com/users/amauryfa/repos",
            "events_url": "https://api.github.com/users/amauryfa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/amauryfa/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-14T05:47:53Z",
          "updated_at": "2011-06-14T05:47:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "This change is reasonable for the long term.  But it \\*will* break a lot of code.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549095/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549096",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549096",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549096,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTY=",
          "user": {
            "login": "61337411-43fc-4a9c-b8d5-4060aede66d0",
            "id": 92799374,
            "node_id": "M_kgDOBYgBjg",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799374?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0",
            "html_url": "https://github.com/loewis",
            "followers_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/followers",
            "following_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/following{/other_user}",
            "gists_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/subscriptions",
            "organizations_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/orgs",
            "repos_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/repos",
            "events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-14T06:11:19Z",
          "updated_at": "2011-06-14T06:11:19Z",
          "author_association": "MANNEQUIN",
          "body": "> This change is reasonable for the long term.  But it \\*will* break a lot of code.\n\n[If you favor a specific change, please indicate what that is. I'm\nassuming you support my proposal for the moment :-]\n\nI agree it will break a lot of code, but it's also somewhat urgent\nbecause we will get 'linux3' if we don't act, which will also break\na lot of code (but more subtly, since people testing their code may\ndo so on Linux 2, only to get bug reports that it breaks on \"some\"\nLinux systems). I'm sure Linus Torvalds is fully aware of the possible\nconsequences of the version change, and just accepted the breakage\nthat this would cause.\n\nIt's important that we set a policy before the Linux distributions\ndo (which may end up choosing different policies). We don't actually\nhave to \\*release* this change quickly, since Linux distributions\nwho release 3.x kernels will fix their Python packages themselves.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549096/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549097",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549097",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549097,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTc=",
          "user": {
            "login": "amauryfa",
            "id": 645208,
            "node_id": "MDQ6VXNlcjY0NTIwOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/645208?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/amauryfa",
            "html_url": "https://github.com/amauryfa",
            "followers_url": "https://api.github.com/users/amauryfa/followers",
            "following_url": "https://api.github.com/users/amauryfa/following{/other_user}",
            "gists_url": "https://api.github.com/users/amauryfa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/amauryfa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/amauryfa/subscriptions",
            "organizations_url": "https://api.github.com/users/amauryfa/orgs",
            "repos_url": "https://api.github.com/users/amauryfa/repos",
            "events_url": "https://api.github.com/users/amauryfa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/amauryfa/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-14T06:28:02Z",
          "updated_at": "2011-06-14T06:28:02Z",
          "author_association": "CONTRIBUTOR",
          "body": "The change to sys.platform=='linux' would break code even on current platforms.\r\nOTOH, we have sys.platform=='win32' even on Windows 64bit; would this favor keeping 'linux2' on all versions of Linux as well?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549097/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549098",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549098",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549098,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTg=",
          "user": {
            "login": "61337411-43fc-4a9c-b8d5-4060aede66d0",
            "id": 92799374,
            "node_id": "M_kgDOBYgBjg",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799374?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0",
            "html_url": "https://github.com/loewis",
            "followers_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/followers",
            "following_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/following{/other_user}",
            "gists_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/subscriptions",
            "organizations_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/orgs",
            "repos_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/repos",
            "events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-14T06:55:47Z",
          "updated_at": "2011-06-14T06:55:47Z",
          "author_association": "MANNEQUIN",
          "body": "> The change to sys.platform=='linux' would break code even on current platforms.\n\nCorrect. Compared to introducing 'linux3', I consider this the better\nchange - it likely breaks earlier (i.e. when porting to Python 3.3).\n\n> OTOH, we have sys.platform=='win32' even on Windows 64bit; would this\n> favor keeping 'linux2' on all versions of Linux as well?\n\nWhile this has better compatibility, it's also a constant source of\nirritation. Introducing 'win64' would have been a worse choice (just\nas introducing 'linux3' would: incompatibility for no gain, since\nthe distinction between win32 and win64, from a Python POV, is\nirrelevant). Plus, Microsoft dislikes the term Win64 somewhat, and\nrather wants people to refer to the \"Windows API\".\n\nI personally disliked 'linux2' when it was introduced, for its\nincompatibilities. Anticipating that, some day, we may have 'Linux 4',\nand so on, I still claim it is better to fix this now. We could even\ncome up with a 2to3 fixer for people who dual-source their code.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549098/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549099",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549099",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549099,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkwOTk=",
          "user": {
            "login": "79528080-9d85-4d18-8a2a-8b1f07640dd7",
            "id": 92819953,
            "node_id": "M_kgDOBYhR8Q",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819953?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7",
            "html_url": "https://github.com/neologix",
            "followers_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/followers",
            "following_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/following{/other_user}",
            "gists_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/subscriptions",
            "organizations_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/orgs",
            "repos_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/repos",
            "events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/events{/privacy}",
            "received_events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-14T07:00:49Z",
          "updated_at": "2011-06-14T07:00:49Z",
          "author_association": "MANNEQUIN",
          "body": "> I'm sure Linus Torvalds is fully aware of the possible\n> consequences of the version change, and just accepted the breakage\n> that this would cause.\n\nAny application relying on sys.platform == 'linux2' is already broken.\nIt's exactly the same if an application checks for 'freebsd6' or\n'openbsd4' : if you want to check for a specific operating system,\nthere's already POSIX' struct utsname sysname field, i.e. uname()[0].",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549099/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549102",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549102",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549102,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkxMDI=",
          "user": {
            "login": "malemburg",
            "id": 6735498,
            "node_id": "MDQ6VXNlcjY3MzU0OTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6735498?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/malemburg",
            "html_url": "https://github.com/malemburg",
            "followers_url": "https://api.github.com/users/malemburg/followers",
            "following_url": "https://api.github.com/users/malemburg/following{/other_user}",
            "gists_url": "https://api.github.com/users/malemburg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/malemburg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/malemburg/subscriptions",
            "organizations_url": "https://api.github.com/users/malemburg/orgs",
            "repos_url": "https://api.github.com/users/malemburg/repos",
            "events_url": "https://api.github.com/users/malemburg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/malemburg/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-14T09:13:12Z",
          "updated_at": "2011-06-14T09:13:12Z",
          "author_association": "MEMBER",
          "body": "Martin v. L\u00f6wis wrote:\n> \n> Martin v. L\u00f6wis \\<martin@v.loewis.de\\> added the comment:\n> \n>\\> The change to sys.platform=='linux' would break code even on current platforms.\n> \n> Correct. Compared to introducing 'linux3', I consider this the better\n> change - it likely breaks earlier (i.e. when porting to Python 3.3).\n> \n>\\> OTOH, we have sys.platform=='win32' even on Windows 64bit; would this\n>\\> favor keeping 'linux2' on all versions of Linux as well?\n> \n> While this has better compatibility, it's also a constant source of\n> irritation. Introducing 'win64' would have been a worse choice (just\n> as introducing 'linux3' would: incompatibility for no gain, since\n> the distinction between win32 and win64, from a Python POV, is\n> irrelevant). Plus, Microsoft dislikes the term Win64 somewhat, and\n> rather wants people to refer to the \"Windows API\".\n> \n> I personally disliked 'linux2' when it was introduced, for its\n> incompatibilities. Anticipating that, some day, we may have 'Linux 4',\n> and so on, I still claim it is better to fix this now. We could even\n> come up with a 2to3 fixer for people who dual-source their code.\n\nI think we should consider adding a better mechanism and just\nkeep the old mechanism for determining sys.platform in place\n(letting it break on Linux to raise awareness) and add a new better\nattribute along the lines of what Martin suggested:\n\nsys.system == 'linux', 'freebsd', 'openbsd', 'windows', etc.\n              (without version)\n\nand a new\n\nsys.system_info == system release info (named) tuple similar to\n                   sys.version_info\n\nto query a specific system version.\n\nAs already noted, direct sys.platform testing already breaks for\nOpenBSD, FreeBSD and probably a few other OSes as well with\nevery major OS release, so the Linux breakage is not really new\nin any way.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549102/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549104",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549104",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549104,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkxMDQ=",
          "user": {
            "login": "pitrou",
            "id": 1721820,
            "node_id": "MDQ6VXNlcjE3MjE4MjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1721820?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pitrou",
            "html_url": "https://github.com/pitrou",
            "followers_url": "https://api.github.com/users/pitrou/followers",
            "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
            "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
            "organizations_url": "https://api.github.com/users/pitrou/orgs",
            "repos_url": "https://api.github.com/users/pitrou/repos",
            "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pitrou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-14T10:28:39Z",
          "updated_at": "2011-06-14T10:28:39Z",
          "author_association": "MEMBER",
          "body": "> \\> The change to sys.platform=='linux' would break code even on current platforms.\n> \n> Correct. Compared to introducing 'linux3', I consider this the better\n> change - it likely breaks earlier (i.e. when porting to Python 3.3).\n\nFWIW, I also agree that sys.platform == 'linux' would be the better\nchoice. It seems there's little point having the kernel's major version\nthere. It's both disruptive and useless (because features are introduced\nat any point, not just at new major versions).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549104/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549106",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549106",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549106,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkxMDY=",
          "user": {
            "login": "merwok",
            "id": 635179,
            "node_id": "MDQ6VXNlcjYzNTE3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/635179?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/merwok",
            "html_url": "https://github.com/merwok",
            "followers_url": "https://api.github.com/users/merwok/followers",
            "following_url": "https://api.github.com/users/merwok/following{/other_user}",
            "gists_url": "https://api.github.com/users/merwok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/merwok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/merwok/subscriptions",
            "organizations_url": "https://api.github.com/users/merwok/orgs",
            "repos_url": "https://api.github.com/users/merwok/repos",
            "events_url": "https://api.github.com/users/merwok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/merwok/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-17T17:27:36Z",
          "updated_at": "2011-06-17T17:27:36Z",
          "author_association": "MEMBER",
          "body": "Martin\u2019s sys.platform = 'linux' sounds good to me too.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549106/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549107",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549107",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549107,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkxMDc=",
          "user": {
            "login": "ec31e85c-a35c-494f-805f-21a63c135c1b",
            "id": 93632796,
            "node_id": "M_kgDOBZS5HA",
            "avatar_url": "https://avatars.githubusercontent.com/u/93632796?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b",
            "html_url": "https://github.com/jwilk",
            "followers_url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b/followers",
            "following_url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b/following{/other_user}",
            "gists_url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b/subscriptions",
            "organizations_url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b/orgs",
            "repos_url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b/repos",
            "events_url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ec31e85c-a35c-494f-805f-21a63c135c1b/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-18T14:02:26Z",
          "updated_at": "2011-06-18T14:02:26Z",
          "author_association": "MANNEQUIN",
          "body": "Just to give some statistic, in Debian we have \\>80 binary packages that check if sys.platform is linux2. However, it appears to me that vast majority of them is broken anyway, because what they really mean to check is:\r\n- is this a non-Windows sytem? or\r\n- is this a UNIX-like system? or\r\n- is this a system with GNU userland?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549107/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549108",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549108",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549108,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkxMDg=",
          "user": {
            "login": "merwok",
            "id": 635179,
            "node_id": "MDQ6VXNlcjYzNTE3OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/635179?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/merwok",
            "html_url": "https://github.com/merwok",
            "followers_url": "https://api.github.com/users/merwok/followers",
            "following_url": "https://api.github.com/users/merwok/following{/other_user}",
            "gists_url": "https://api.github.com/users/merwok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/merwok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/merwok/subscriptions",
            "organizations_url": "https://api.github.com/users/merwok/orgs",
            "repos_url": "https://api.github.com/users/merwok/repos",
            "events_url": "https://api.github.com/users/merwok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/merwok/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-18T20:50:41Z",
          "updated_at": "2011-06-18T20:50:41Z",
          "author_association": "MEMBER",
          "body": "IOW, they should check os.name == 'posix'?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549108/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549110",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549110",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549110,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkxMTA=",
          "user": {
            "login": "79528080-9d85-4d18-8a2a-8b1f07640dd7",
            "id": 92819953,
            "node_id": "M_kgDOBYhR8Q",
            "avatar_url": "https://avatars.githubusercontent.com/u/92819953?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7",
            "html_url": "https://github.com/neologix",
            "followers_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/followers",
            "following_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/following{/other_user}",
            "gists_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/subscriptions",
            "organizations_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/orgs",
            "repos_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/repos",
            "events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/events{/privacy}",
            "received_events_url": "https://api.github.com/users/79528080-9d85-4d18-8a2a-8b1f07640dd7/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-20T13:48:45Z",
          "updated_at": "2011-06-20T13:48:45Z",
          "author_association": "MANNEQUIN",
          "body": "> However, it appears to me that vast majority of them is broken anyway,\n> because what they really mean to check is\n\nThat's exactly my point.\nCode checking sys.platform against 'linux2' is already broken, there's\nno point in complicating the code further, or adding a new constant.\nIf you want to check for a specific operating system, there's already\nplatform.system().",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549110/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549111",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549111",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549111,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkxMTE=",
          "user": {
            "login": "a04be92c-af4e-4c3d-ab01-017f3a697ce8",
            "id": 99431782,
            "node_id": "M_kgDOBe01Zg",
            "avatar_url": "https://avatars.githubusercontent.com/u/99431782?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8",
            "html_url": "https://github.com/rosslagerwall",
            "followers_url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8/followers",
            "following_url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8/following{/other_user}",
            "gists_url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8/subscriptions",
            "organizations_url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8/orgs",
            "repos_url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8/repos",
            "events_url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8/events{/privacy}",
            "received_events_url": "https://api.github.com/users/a04be92c-af4e-4c3d-ab01-017f3a697ce8/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-20T15:22:25Z",
          "updated_at": "2011-06-20T15:22:25Z",
          "author_association": "MANNEQUIN",
          "body": "> That's exactly my point.\r\n> Code checking sys.platform against 'linux2' is already broken, there's\r\n> no point in complicating the code further, or adding a new constant.\r\n> If you want to check for a specific operating system, there's already\r\n> platform.system().\r\n\r\nI would agree with this. Perhaps the documentation for sys.platform could be changed to mention that platform.system() should maybe be used instead.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549111/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549112",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549112",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549112,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkxMTI=",
          "user": {
            "login": "61337411-43fc-4a9c-b8d5-4060aede66d0",
            "id": 92799374,
            "node_id": "M_kgDOBYgBjg",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799374?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0",
            "html_url": "https://github.com/loewis",
            "followers_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/followers",
            "following_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/following{/other_user}",
            "gists_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/subscriptions",
            "organizations_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/orgs",
            "repos_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/repos",
            "events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-20T20:17:24Z",
          "updated_at": "2011-06-20T20:17:24Z",
          "author_association": "MANNEQUIN",
          "body": "So people who say sys.platform shouldn't be used: what do you propose to do with [Lib/plat-linux2](https://github.com/python/cpython/blob/main/Lib/plat-linux2) (or, more generally, [Lib/plat](https://github.com/python/cpython/blob/main/Lib/plat)-*)?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549112/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549113",
          "html_url": "https://github.com/python/cpython/issues/56535#issuecomment-1093549113",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/56535",
          "id": 1093549113,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM1NDkxMTM=",
          "user": {
            "login": "vstinner",
            "id": 194129,
            "node_id": "MDQ6VXNlcjE5NDEyOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/194129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vstinner",
            "html_url": "https://github.com/vstinner",
            "followers_url": "https://api.github.com/users/vstinner/followers",
            "following_url": "https://api.github.com/users/vstinner/following{/other_user}",
            "gists_url": "https://api.github.com/users/vstinner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vstinner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vstinner/subscriptions",
            "organizations_url": "https://api.github.com/users/vstinner/orgs",
            "repos_url": "https://api.github.com/users/vstinner/repos",
            "events_url": "https://api.github.com/users/vstinner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vstinner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-06-20T20:37:36Z",
          "updated_at": "2011-06-20T20:37:36Z",
          "author_association": "MEMBER",
          "body": "> what do you propose to do with [Lib/plat-linux2](https://github.com/python/cpython/blob/main/Lib/plat-linux2)\r\n> (or, more generally, [Lib/plat](https://github.com/python/cpython/blob/main/Lib/plat)-*)?\r\n\r\nWhat are these directories? Are they still used?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093549113/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/47020",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/47020/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/47020/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/47020/events",
      "html_url": "https://github.com/python/cpython/issues/47020",
      "id": 1198831420,
      "node_id": "MDU6SXNzdWUxMTk4ODMxNDIw",
      "number": 47020,
      "title": "Test issue",
      "user": {
        "login": "gvanrossum",
        "id": 2894642,
        "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gvanrossum",
        "html_url": "https://github.com/gvanrossum",
        "followers_url": "https://api.github.com/users/gvanrossum/followers",
        "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
        "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
        "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
        "repos_url": "https://api.github.com/users/gvanrossum/repos",
        "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 536871770,
          "node_id": "MDU6TGFiZWw1MzY4NzE3NzA=",
          "url": "https://api.github.com/repos/python/cpython/labels/type-bug",
          "name": "type-bug",
          "color": "e99695",
          "default": false,
          "description": "An unexpected behavior, bug, or error"
        },
        {
          "id": 537044141,
          "node_id": "MDU6TGFiZWw1MzcwNDQxNDE=",
          "url": "https://api.github.com/repos/python/cpython/labels/tests",
          "name": "tests",
          "color": "09fc59",
          "default": false,
          "description": "Tests in the Lib/test dir"
        },
        {
          "id": 4018733900,
          "node_id": "LA_kwDOBN0Z8c7viQNM",
          "url": "https://api.github.com/repos/python/cpython/labels/3.11",
          "name": "3.11",
          "color": "2e730f",
          "default": false,
          "description": "only security fixes"
        },
        {
          "id": 4018743106,
          "node_id": "LA_kwDOBN0Z8c7viSdC",
          "url": "https://api.github.com/repos/python/cpython/labels/easy",
          "name": "easy",
          "color": "0e8a16",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": true,
      "assignee": null,
      "assignees": [
        {
          "login": "ezio-melotti",
          "id": 25624924,
          "node_id": "MDQ6VXNlcjI1NjI0OTI0",
          "avatar_url": "https://avatars.githubusercontent.com/u/25624924?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ezio-melotti",
          "html_url": "https://github.com/ezio-melotti",
          "followers_url": "https://api.github.com/users/ezio-melotti/followers",
          "following_url": "https://api.github.com/users/ezio-melotti/following{/other_user}",
          "gists_url": "https://api.github.com/users/ezio-melotti/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ezio-melotti/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ezio-melotti/subscriptions",
          "organizations_url": "https://api.github.com/users/ezio-melotti/orgs",
          "repos_url": "https://api.github.com/users/ezio-melotti/repos",
          "events_url": "https://api.github.com/users/ezio-melotti/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ezio-melotti/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 145,
      "created_at": "2008-05-05T16:40:44Z",
      "updated_at": "2023-04-21T05:19:37Z",
      "closed_at": "2023-04-21T05:19:37Z",
      "author_association": "MEMBER",
      "type": null,
      "active_lock_reason": "resolved",
      "sub_issues_summary": {
        "total": 0,
        "completed": 0,
        "percent_completed": 0
      },
      "body": "BPO | [2771](https://bugs.python.org/issue2771)\n--- | :---\nNosy | @pitrou, @nedbat, @ezio-melotti, @zware, @matrixise, @ewdurbin\nPRs | <li>python/cpython#46</li><li>python/cpython#56</li><li>python/cpython#55</li><li>python/cpython#59</li><li>python/cpython#60</li><li>python/cpython#61</li><li>python/cpython#62</li><li>python/cpython#63</li><li>python/cpython#70</li><li>python/cpython#107</li><li>python/cpython#18614</li>\nDependencies | <li>bpo-12345: Add math.tau</li><li>bpo-12346: Python source code build fails with old mercurial</li>\nSuperseder | <li>bpo-2771: Test issue</li>\nFiles | <li>[README.diff](https://bugs.python.org/file19097/README.diff \"Uploaded as text/plain at 2010-10-01.22:09:31 by @loewis\")</li><li>[a.diff](https://bugs.python.org/file21018/a.diff \"Uploaded as text/plain at 2011-03-06.16:49:20 by @loewis\")</li><li>[6a1c8fcce229.diff](https://bugs.python.org/file21103/6a1c8fcce229.diff \"Uploaded as text/plain at 2011-03-13.16:15:05 by @loewis\")</li><li>[sometext.txt](https://bugs.python.org/file21659/sometext.txt \"Uploaded as text/plain at 2011-04-13.23:12:54 by @pitrou\")</li><li>[foo](https://bugs.python.org/file21665/foo \"Uploaded as text/plain at 2011-04-14.19:31:38 by @loewis\")</li><li>[test.txt](https://bugs.python.org/file23266/test.txt \"Uploaded as text/plain at 2011-09-29.22:19:21 by vsemionov\"): test</li><li>[unnamed](https://bugs.python.org/file23322/unnamed \"Uploaded as text/plain at 2011-10-06.10:41:28 by @ezio-melotti\")</li><li>[issue12753-3.diff](https://bugs.python.org/file23323/issue12753-3.diff \"Uploaded as text/plain at 2011-10-06.10:41:29 by @ezio-melotti\")</li><li>[issue12753-3.diff](https://bugs.python.org/file23324/issue12753-3.diff \"Uploaded as text/plain at 2011-10-06.10:48:51 by @ezio-melotti\")</li><li>[unnamed](https://bugs.python.org/file23325/unnamed \"Uploaded as text/plain at 2011-10-06.10:50:52 by @ezio-melotti\"): This is a \"test\"</li><li>[issue12753-3.diff](https://bugs.python.org/file23326/issue12753-3.diff \"Uploaded as text/plain at 2011-10-06.10:50:52 by @ezio-melotti\")</li><li>[b17f9a10235f.diff](https://bugs.python.org/file27089/b17f9a10235f.diff \"Uploaded as text/plain at 2012-09-01.19:24:48 by @ezio-melotti\")</li><li>[entities.py](https://bugs.python.org/file27301/entities.py \"Uploaded as text/plain at 2012-09-25.18:37:29 by @ezio-melotti\")</li><li>[issue18958-2.diff](https://bugs.python.org/file35887/issue18958-2.diff \"Uploaded as text/plain at 2014-07-07.17:23:37 by @ezio-melotti\")</li><li>[testtestpatch](https://bugs.python.org/file39817/testtestpatch \"Uploaded at 2015-06-26.15:18:33 by testbpo\"): test</li><li>[issue18958-2.diff](https://bugs.python.org/file39819/issue18958-2.diff \"Uploaded as text/plain at 2015-06-26.15:38:50 by testbpo\")</li>\n\n<sup>*Note: these values reflect the state of the issue at the time it was migrated and might not reflect the current state.*</sup>\n\n<details><summary>Show more details</summary><p>\n\nGitHub fields:\n```python\nassignee = 'https://github.com/ezio-melotti'\nclosed_at = None\ncreated_at = <Date 2008-05-05.16:40:44.378>\nlabels = ['easy', 'type-bug', 'tests', '3.11']\ntitle = 'Test issue'\nupdated_at = <Date 2022-04-08.18:14:51.526>\nuser = 'https://github.com/gvanrossum'\n```\n\nbugs.python.org fields:\n```python\nactivity = <Date 2022-04-08.18:14:51.526>\nactor = 'ezio.melotti'\nassignee = 'ezio.melotti'\nclosed = False\nclosed_date = None\ncloser = None\ncomponents = ['Tests']\ncreation = <Date 2008-05-05.16:40:44.378>\ncreator = 'gvanrossum'\ndependencies = ['12345', '12346']\nfiles = ['19097', '21018', '21103', '21659', '21665', '23266', '23322', '23323', '23324', '23325', '23326', '27089', '27301', '35887', '39817', '39819']\nhgrepos = ['1', '2', '148']\nissue_num = 2771\nkeywords = ['easy']\nmessage_count = 145.0\nmessages = ['66272', '70327', '82492', '82495', '82496', '83238', '83244', '83245', '83438', '85703', '85704', '85706', '85707', '85709', '85711', '85712', '117840', '123996', '123997', '130141', '130313', '130314', '130315', '130316', '130317', '130318', '130320', '130323', '130325', '130328', '130352', '130353', '130354', '130355', '130356', '130357', '130358', '130359', '130360', '130363', '130364', '130365', '130371', '130708', '130711', '130746', '131876', '131877', '131887', '132862', '143322', '144642', '144643', '144644', '144988', '144989', '144990', '144991', '147556', '147558', '148435', '154050', '158528', '161311', '164482', '164498', '164499', '166660', '169819', '171493', '171496', '171545', '171565', '171566', '171569', '175115', '175117', '175601', '175602', '175604', '175609', '175610', '175611', '175612', '175613', '175614', '175801', '177455', '184606', '185210', '185211', '186162', '186457', '190899', '200373', '210887', '210888', '210899', '216745', '216749', '222481', '226864', '226865', '240911', '244636', '244637', '281623', '282111', '282209', '284785', '284786', '284856', '285373', '286827', '296933', '301677', '303086', '326188', '326189', '326190', '326354', '326503', '326930', '327448', '330748', '330753', '332292', '332369', '335253', '335254', '335258', '335263', '335266', '335267', '335270', '338799', '338800', '344722', '344723', '352015', '394297', '394298', '394456', '405354', '416999']\nnosy_count = 7.0\nnosy_names = ['pitrou', 'nedbat', 'ezio.melotti', 'python-dev', 'zach.ware', 'matrixise', 'EWDurbin']\npr_nums = ['46', '56', '55', '59', '60', '61', '62', '63', '70', '107', '18614']\npriority = 'low'\nresolution = 'fixed'\nstage = 'resolved'\nstatus = 'open'\nsuperseder = '2771'\ntype = 'behavior'\nurl = 'https://bugs.python.org/issue2771'\nversions = ['Python 3.11']\n```\n\n</p></details>\n",
      "closed_by": {
        "login": "terryjreedy",
        "id": 19036496,
        "node_id": "MDQ6VXNlcjE5MDM2NDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/19036496?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/terryjreedy",
        "html_url": "https://github.com/terryjreedy",
        "followers_url": "https://api.github.com/users/terryjreedy/followers",
        "following_url": "https://api.github.com/users/terryjreedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/terryjreedy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/terryjreedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/terryjreedy/subscriptions",
        "organizations_url": "https://api.github.com/users/terryjreedy/orgs",
        "repos_url": "https://api.github.com/users/terryjreedy/repos",
        "events_url": "https://api.github.com/users/terryjreedy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/terryjreedy/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/47020/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/47020/timeline",
      "performed_via_github_app": null,
      "state_reason": "not_planned",
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420459",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420459",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420459,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0NTk=",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-05-05T16:40:39Z",
          "updated_at": "2008-05-05T16:40:39Z",
          "author_association": "MEMBER",
          "body": "This is a very long line.  I am wondering how it will be wrapped. What\nwill happen to this exceedingly long line? Will it be wrapped? Will it?\nReally? What will happen?\n\nHere's an example:\n\n```py\n  def fact(n):\n    if n > 1:\n      return n * fact(n-1)\n    else:\n      assert n in (0, 1)\n      return 1\n```\n\n\nWhat do you think of that?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420459/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420461",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420461",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420461,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0NjE=",
          "user": {
            "login": "61337411-43fc-4a9c-b8d5-4060aede66d0",
            "id": 92799374,
            "node_id": "M_kgDOBYgBjg",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799374?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0",
            "html_url": "https://github.com/loewis",
            "followers_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/followers",
            "following_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/following{/other_user}",
            "gists_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/subscriptions",
            "organizations_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/orgs",
            "repos_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/repos",
            "events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2008-07-27T17:54:36Z",
          "updated_at": "2008-07-27T17:54:36Z",
          "author_association": "MANNEQUIN",
          "body": "Testing authorage",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420461/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420463",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420463",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420463,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0NjM=",
          "user": {
            "login": "61337411-43fc-4a9c-b8d5-4060aede66d0",
            "id": 92799374,
            "node_id": "M_kgDOBYgBjg",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799374?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0",
            "html_url": "https://github.com/loewis",
            "followers_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/followers",
            "following_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/following{/other_user}",
            "gists_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/subscriptions",
            "organizations_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/orgs",
            "repos_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/repos",
            "events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-02-19T19:58:53Z",
          "updated_at": "2009-02-19T19:58:53Z",
          "author_association": "MANNEQUIN",
          "body": "Does this still work?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420463/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420464",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420464",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420464,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0NjQ=",
          "user": {
            "login": "61337411-43fc-4a9c-b8d5-4060aede66d0",
            "id": 92799374,
            "node_id": "M_kgDOBYgBjg",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799374?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0",
            "html_url": "https://github.com/loewis",
            "followers_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/followers",
            "following_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/following{/other_user}",
            "gists_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/subscriptions",
            "organizations_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/orgs",
            "repos_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/repos",
            "events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-02-19T20:28:58Z",
          "updated_at": "2009-02-19T20:28:58Z",
          "author_association": "MANNEQUIN",
          "body": "More testing.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420464/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420468",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420468",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420468,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0Njg=",
          "user": {
            "login": "61337411-43fc-4a9c-b8d5-4060aede66d0",
            "id": 92799374,
            "node_id": "M_kgDOBYgBjg",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799374?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0",
            "html_url": "https://github.com/loewis",
            "followers_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/followers",
            "following_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/following{/other_user}",
            "gists_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/subscriptions",
            "organizations_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/orgs",
            "repos_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/repos",
            "events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-02-19T20:29:47Z",
          "updated_at": "2009-02-19T20:29:47Z",
          "author_association": "MANNEQUIN",
          "body": "Testing 1..2..3",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420468/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420469",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420469",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420469,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0Njk=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-03-06T05:29:01Z",
          "updated_at": "2009-03-06T05:29:01Z",
          "author_association": "MANNEQUIN",
          "body": "Reviewers: ,\n\nDescription:\n\"This is a very long line.  I am wondering how it will be wrapped. What\nwill happen to this exceedingly long line? Will it be wrapped? Will it?\nReally? What will happen?\n\nHere's an example:\n\n```py\n   def fact(n):\n     if n > 1:\n       return n * fact(n-1)\n     else:\n       assert n in (0, 1)\n       return 1\n```\n\n\nWhat do you think of that?\"\n\nPlease review this at http://codereview.appspot.com/24075\n\nAffected files:\n   M     static/upload.py\n\nIndex: static/upload.py\n\\===================================================================\n--- static/upload.py\t(revision 402)\n+++ static/upload.py\t(working copy)\n@@ -61,7 +61,30 @@\n  \\# Max size of patch or base file.\n  MAX_UPLOAD_SIZE = 900 * 1024\n\n+#python static/upload.py -R 2771 -F [msg66272](https://bugs.python.org/msg66272) --send_mail\n+fields = {'issue':'title', 'msg':'content', 'file':'description', }\n+def fetch_item(nodeid, kind='issue', tracker='http://bugs.python.org'):\n\\+  query_tpl = [('@action', 'export_csv'), ('@filter', 'id'),\n\\+  ('id', nodeid), ('@columns', fields[kind])]\n\\+  item_url = '/%s?%s' % (kind, urllib.urlencode(query_tpl))\n\\+  content = urllib.urlopen(tracker + item_url).read().split('\\\\r\\\\n')\n\\+  if content[0] == 'title':\n\\+    return '[issue%s] %s' % (nodeid, content[1].strip())\n\\+  elif content[0] == 'content' or content[0] == 'description':\n\\+    return content[1].strip()\n\n+def fetch(nodeid, debug=True):\n\\+  kind = 'issue'\n\\+  if nodeid.startswith('msg'):\n\\+    kind = 'msg'\n\\+  elif nodeid.startswith('file'):\n\\+    kind = 'file'\n\\+  nodeid = nodeid.replace(kind, '')\n\\+  result = fetch_item(int(nodeid), kind)\n\\+  if debug:\n\\+    logging.info('Fetched \"%s: %s\"' % (kind, result))\n\\+  return result\n\\+\n  def GetEmail(prompt):\n    \"\"\"Prompts the user for their email address and returns it.\n\n```diff\n@@ -453,6 +476,14 @@\n  group.add_option(\"--send_mail\", action=\"store_true\",\n                   dest=\"send_mail\", default=False,\n                   help=\"Send notification email to reviewers.\")\n+# Link options\n+group = parser.add_option_group(\"Link options\")\n+group.add_option(\"-R\", \"--roundup\", action=\"store\", dest=\"roundup\",\n+                 metavar=\"ROUNDUP\", default=None,\n+                 help=\"Python tracker issue number to link with.\")\n+group.add_option(\"-F\", \"--fetch_descr\", action=\"store\", dest=\"fetch_descr\",\n+                 metavar=\"FETCHDESCR\", default=None,\n+                 help=\"Tracker file or message to fetch description from.\")\n\n  def GetRpcServer(options):\n@@ -1291,7 +1322,10 @@\n      prompt = \"Message describing this patch set: \"\n    else:\n      prompt = \"New issue subject: \"\n-  message = options.message or raw_input(prompt).strip()\n+  if options.roundup:\n+    message = fetch(options.roundup)\n+  else:\n+    message = options.message or raw_input(prompt).strip()\n    if not message:\n      ErrorExit(\"A non-empty message is required\")\n    rpc_server = GetRpcServer(options)\n@@ -1307,11 +1341,16 @@\n        if \"@\" in reviewer and not reviewer.split(\"@\")[1].count(\".\") == 1:\n          ErrorExit(\"Invalid email address: %s\" % reviewer)\n      form_fields.append((\"reviewers\", options.reviewers))\n+  tracker_email = 'report@bugs.python.org,'\n    if options.cc:\n      for cc in options.cc.split(','):\n        if \"@\" in cc and not cc.split(\"@\")[1].count(\".\") == 1:\n          ErrorExit(\"Invalid email address: %s\" % cc)\n-    form_fields.append((\"cc\", options.cc))\n+    if options.roundup:\n+      cc = tracker_email + options.cc\n+    form_fields.append((\"cc\", cc))\n+  elif options.roundup:\n+    form_fields.append((\"cc\", tracker_email[:-1]))\n    description = options.description\n    if options.description_file:\n      if options.description:\n@@ -1319,6 +1358,9 @@\n      file = open(options.description_file, 'r')\n      description = file.read()\n      file.close()\n+  elif options.fetch_descr:\n+    # XXX Add error handling as above\n+    description = fetch(options.fetch_descr)\n    if description:\n      form_fields.append((\"description\", description))\n    # Send a hash of all the base file so the server can determine if a copy\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420469/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420471",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420471",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420471,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0NzE=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-03-06T14:40:02Z",
          "updated_at": "2009-03-06T14:40:02Z",
          "author_association": "MANNEQUIN",
          "body": "http://codereview.appspot.com/24075",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420471/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420472",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420472",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420472,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0NzI=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-03-06T14:42:32Z",
          "updated_at": "2009-03-06T14:42:32Z",
          "author_association": "MANNEQUIN",
          "body": "Reviewers: ,\n\nDescription:\n From http://bugs.python.org/issue2771\n\n\"This is a very long line.  I am wondering how it will be wrapped. What\nwill happen to this exceedingly long line? Will it be wrapped? Will it?\nReally? What will happen?\n\nHere's an example:\n\n```py\n   def fact(n):\n     if n > 1:\n       return n * fact(n-1)\n     else:\n       assert n in (0, 1)\n       return 1\n```\n\n\nWhat do you think of that?\"\n\nDescription fetched from: http://bugs.python.org/msg66272\n\nPlease review this at http://codereview.appspot.com/25076\n\nAffected files:\n   M     static/upload.py",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420472/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420473",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420473",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420473,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0NzM=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-03-10T16:22:14Z",
          "updated_at": "2009-03-10T16:22:14Z",
          "author_association": "MANNEQUIN",
          "body": "Reviewers: ,\n\nDescription:\n From http://bugs.python.org/issue2771\n\nTesting 1..2..3\n\nDescription fetched from: http://bugs.python.org/msg82496\n\nPlease review this at http://codereview.appspot.com/22062\n\nAffected files:\n   M     static/upload.py",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420473/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420474",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420474",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420474,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0NzQ=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-04-07T14:51:42Z",
          "updated_at": "2009-04-07T14:51:42Z",
          "author_association": "MANNEQUIN",
          "body": "Testing how email handles quotes.\r\n\r\n[mailgw]\r\n\r\n```py\n# Keep email citations when accepting messages.\r\n# Setting this to \"no\" strips out \"quoted\" text from the message.\r\n# Signatures are also stripped.\r\n# Allowed values: yes, no\r\n# Default: yes\r\nkeep_quoted_text = yes\r\n\r\n# Preserve the email body as is - that is,\r\n# keep the citations _and_ signatures.\r\n# Allowed values: yes, no\r\n# Default: no\r\nleave_body_unchanged = no\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420474/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420475",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420475",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420475,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0NzU=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-04-07T14:53:40Z",
          "updated_at": "2009-04-07T14:53:40Z",
          "author_association": "MANNEQUIN",
          "body": "Dumb whole message quote.\n\nOn Tue, Apr 7, 2009 at 11:51 AM, Daniel Diniz \\<report@bugs.python.org\\> wrote:\n>\n> Daniel Diniz \\<ajaksu@gmail.com\\> added the comment:\n>\n> Testing how email handles quotes.\n>\n> [mailgw]\n>\n> # Keep email citations when accepting messages.\n> # Setting this to \"no\" strips out \"quoted\" text from the message.\n> # Signatures are also stripped.\n> # Allowed values: yes, no\n> # Default: yes\n> keep_quoted_text = yes\n>\n> # Preserve the email body as is - that is,\n> # keep the citations \\_and_ signatures.\n> # Allowed values: yes, no\n> # Default: no\n> leave_body_unchanged = no\n>\n> \\----------\n>\n> _______________________________________\n> Python tracker \\<report@bugs.python.org\\>\n> \\<http://bugs.python.org/issue2771\\>\n> _______________________________________\n>",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420475/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420477",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420477",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420477,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0Nzc=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-04-07T14:54:54Z",
          "updated_at": "2009-04-07T14:54:54Z",
          "author_association": "MANNEQUIN",
          "body": "Nested quotes.\n\nOn Tue, Apr 7, 2009 at 11:53 AM, Daniel Diniz \\<report@bugs.python.org\\> wrote:\n>\n> Daniel Diniz \\<ajaksu@gmail.com\\> added the comment:\n>\n> Dumb whole message quote.\n>\n> On Tue, Apr 7, 2009 at 11:51 AM, Daniel Diniz \\<report@bugs.python.org\\> wrote:\n>\\>\n>\\> Daniel Diniz \\<ajaksu@gmail.com\\> added the comment:\n>\\>\n>\\> Testing how email handles quotes.\n>\\>\n>\\> [mailgw]\n>\\>\n>\\> # Keep email citations when accepting messages.\n>\\> # Setting this to \"no\" strips out \"quoted\" text from the message.\n>\\> # Signatures are also stripped.\n>\\> # Allowed values: yes, no\n>\\> # Default: yes\n>\\> keep_quoted_text = yes\n>\\>\n>\\> # Preserve the email body as is - that is,\n>\\> # keep the citations \\_and_ signatures.\n>\\> # Allowed values: yes, no\n>\\> # Default: no\n>\\> leave_body_unchanged = no\n>\\>\n>\\> \\----------\n>\\>\n>\\> _______________________________________\n>\\> Python tracker \\<report@bugs.python.org\\>\n>\\> \\<http://bugs.python.org/issue2771\\>\n>\\> _______________________________________\n>\\>\n>\n> \\----------\n>\n> _______________________________________\n> Python tracker \\<report@bugs.python.org\\>\n> \\<http://bugs.python.org/issue2771\\>\n> _______________________________________\n>",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420477/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420480",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420480",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420480,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0ODA=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-04-07T14:57:09Z",
          "updated_at": "2009-04-07T14:57:09Z",
          "author_association": "MANNEQUIN",
          "body": ">\\>\\> Testing how email handles quotes.\n>\\>\\>\n>\\>\\> [mailgw]\n>\\>\\>\n>\\>\\> # Keep email citations when accepting messages.\n>\\>\\> # Setting this to \"no\" strips out \"quoted\" text from the message.\n>\\>\\> # Signatures are also stripped.\n>\\>\\> # Allowed values: yes, no\n>\\>\\> # Default: yes\n>\\>\\> keep_quoted_text = yes\n>\\>\\>\n>\\>\\> # Preserve the email body as is - that is,\n>\\>\\> # keep the citations \\_and_ signatures.\n>\\>\\> # Allowed values: yes, no\n>\\>\\> # Default: no\n>\\>\\> leave_body_unchanged = no\n>\\>\\>\n\nBottom posting, less hints about quotes.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420480/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420481",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420481",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420481,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0ODE=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-04-07T15:03:50Z",
          "updated_at": "2009-04-07T15:03:50Z",
          "author_association": "MANNEQUIN",
          "body": "> The reason I noticed this is that since they compare and hash equal, if\n> you put two such methods into a set, you end up with a set with one\n> method.  Currently, this is preventing me from running two test methods\n> because the method itself is defined on a base class and two subclasses\n> which customize several other methods inherit it.  I can only run one\n> test at a time.\n\nBut you acknowledge they are really the same method attached to\ndifferent classes, right? The notion of \"unbound method\" is mostly an\nimplementation detail. The term occurs only 4 times in the whole Python\ndocumentation (according to Google). And in py3k they are gone. (*)\n\nMoreover, you say you want them to compare unequal because you\n\\*explicitly* want the same method called separately for each class it is\ndefined on. Is there anything preventing you to have a set of (class,\nmethod) tuples instead? Because it sounds like the logical thing to do\nin your case.\n\n> Having them compare unequal means you can't actually trust unbound\n> method comparison, nor using unbound methods as keys in a dictionary.\n\n\"Trust\" is a strong word. You can trust the comparison operator if you\nagree with its semantics, you cannot trust it if you want different\nsemantics. But that doesn't mean it is generally trustworthy or\nuntrustworthy.\n\nReally, this is the same as with numbers:\n\n'b'\n\nThere are probably use cases where the above is annoying. But,\nconversely, there are probably use cases where a stricter behaviour\nwould be annoying too.\n\n> This means some other mapping structure is required if you want to keep\n> around a bunch of methods and arguments to pass to them.\n\nI disagree. The general use case of keeping a bunch of callables with\ntheir respective arguments implies storing bound, not unbound, methods.\n(how often do you feed an unbound method to an addCallback() ?)\n\n> It also means\n> that any time you want to check two methods against each other with the\n> goal of eventually calling one or both of them, you need to use\n> something other than \\`==\u00b4.\n\nI don't think there are lots of use cases for comparing \\*unbound\\*\nmethods. One such use case is checking for redefinition of inherited\nmethods, and the current \\_\\_eq__ semantics look fine for that.\n\n```pycon\n(*)\nPython 3.0b2+ (py3k, Jul 29 2008, 20:37:34)\n[GCC 4.3.1 20080626 (prerelease)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> class A:\n...  def f(): pass\n...\n>>> type(A.f)\n<class 'function'>\n>>> a = A()\n>>> type(a.f)\n<class 'method'>\n>>> def g(): pass\n...\n>>> class B:\n...  g = g\n...\n>>> B.g is g\nTrue\n```",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420481/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420483",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420483",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420483,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0ODM=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-04-07T15:06:42Z",
          "updated_at": "2009-04-07T15:06:42Z",
          "author_association": "MANNEQUIN",
          "body": "> Having them compare unequal means you can't actually trust unbound\n> method comparison, nor using unbound methods as keys in a dictionary.\n\n\"Trust\" is a strong word. You can trust the comparison operator if you\nagree with its semantics, you cannot trust it if you want different\nsemantics. But that doesn't mean it is generally trustworthy or\nuntrustworthy.\n\nReally, this is the same as with numbers:\n\n'b'",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420483/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420484",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420484",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420484,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0ODQ=",
          "user": {
            "login": "90baf024-6604-450d-8341-d796fe6858f3",
            "id": 96538112,
            "node_id": "M_kgDOBcEOAA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96538112?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3",
            "html_url": "https://github.com/devdanzin",
            "followers_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/followers",
            "following_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/following{/other_user}",
            "gists_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/subscriptions",
            "organizations_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/orgs",
            "repos_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/repos",
            "events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/90baf024-6604-450d-8341-d796fe6858f3/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2009-04-07T15:09:31Z",
          "updated_at": "2009-04-07T15:09:31Z",
          "author_association": "MANNEQUIN",
          "body": "> Quote\n\nUnquote\n\ncode snippet:\n\n'b'",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420484/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420485",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420485",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420485,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0ODU=",
          "user": {
            "login": "61337411-43fc-4a9c-b8d5-4060aede66d0",
            "id": 92799374,
            "node_id": "M_kgDOBYgBjg",
            "avatar_url": "https://avatars.githubusercontent.com/u/92799374?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0",
            "html_url": "https://github.com/loewis",
            "followers_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/followers",
            "following_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/following{/other_user}",
            "gists_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/subscriptions",
            "organizations_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/orgs",
            "repos_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/repos",
            "events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/61337411-43fc-4a9c-b8d5-4060aede66d0/received_events",
            "type": "Mannequin",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-10-01T22:09:32Z",
          "updated_at": "2010-10-01T22:09:32Z",
          "author_association": "MANNEQUIN",
          "body": "Attach some file",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420485/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420487",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420487",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420487,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0ODc=",
          "user": {
            "login": "ezio-melotti",
            "id": 25624924,
            "node_id": "MDQ6VXNlcjI1NjI0OTI0",
            "avatar_url": "https://avatars.githubusercontent.com/u/25624924?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ezio-melotti",
            "html_url": "https://github.com/ezio-melotti",
            "followers_url": "https://api.github.com/users/ezio-melotti/followers",
            "following_url": "https://api.github.com/users/ezio-melotti/following{/other_user}",
            "gists_url": "https://api.github.com/users/ezio-melotti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ezio-melotti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ezio-melotti/subscriptions",
            "organizations_url": "https://api.github.com/users/ezio-melotti/orgs",
            "repos_url": "https://api.github.com/users/ezio-melotti/repos",
            "events_url": "https://api.github.com/users/ezio-melotti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ezio-melotti/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-12-15T01:18:50Z",
          "updated_at": "2010-12-15T01:18:50Z",
          "author_association": "MEMBER",
          "body": "testing autonosy for release managers with release blockers",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420487/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420488",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420488",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420488,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0ODg=",
          "user": {
            "login": "ezio-melotti",
            "id": 25624924,
            "node_id": "MDQ6VXNlcjI1NjI0OTI0",
            "avatar_url": "https://avatars.githubusercontent.com/u/25624924?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ezio-melotti",
            "html_url": "https://github.com/ezio-melotti",
            "followers_url": "https://api.github.com/users/ezio-melotti/followers",
            "following_url": "https://api.github.com/users/ezio-melotti/following{/other_user}",
            "gists_url": "https://api.github.com/users/ezio-melotti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ezio-melotti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ezio-melotti/subscriptions",
            "organizations_url": "https://api.github.com/users/ezio-melotti/orgs",
            "repos_url": "https://api.github.com/users/ezio-melotti/repos",
            "events_url": "https://api.github.com/users/ezio-melotti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ezio-melotti/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2010-12-15T01:20:33Z",
          "updated_at": "2010-12-15T01:20:33Z",
          "author_association": "MEMBER",
          "body": "Works fine. Now release managers will be added automatically to the nosy list when the priority of an issue is set to 'release blocker'.\r\nSee http://psf.upfronthosting.co.za/roundup/meta/issue363",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420488/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420489",
          "html_url": "https://github.com/python/cpython/issues/47020#issuecomment-1093420489",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/47020",
          "id": 1093420489,
          "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTM0MjA0ODk=",
          "user": {
            "login": "ned-deily",
            "id": 5833005,
            "node_id": "MDQ6VXNlcjU4MzMwMDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5833005?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ned-deily",
            "html_url": "https://github.com/ned-deily",
            "followers_url": "https://api.github.com/users/ned-deily/followers",
            "following_url": "https://api.github.com/users/ned-deily/following{/other_user}",
            "gists_url": "https://api.github.com/users/ned-deily/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ned-deily/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ned-deily/subscriptions",
            "organizations_url": "https://api.github.com/users/ned-deily/orgs",
            "repos_url": "https://api.github.com/users/ned-deily/repos",
            "events_url": "https://api.github.com/users/ned-deily/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ned-deily/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2011-03-06T03:31:44Z",
          "updated_at": "2011-03-06T03:31:44Z",
          "author_association": "MEMBER",
          "body": "Testing legacy svn references here r88479 and new hg references here 284026e00342.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1093420489/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/31394",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/31394/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/31394/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/31394/events",
      "html_url": "https://github.com/python/cpython/pull/31394",
      "id": 1141936618,
      "node_id": "PR_kwDOBN0Z8c4zBZX0",
      "number": 31394,
      "title": "bpo-46771: Implement asyncio context managers for handling timeouts",
      "user": {
        "login": "asvetlov",
        "id": 356399,
        "node_id": "MDQ6VXNlcjM1NjM5OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/356399?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/asvetlov",
        "html_url": "https://github.com/asvetlov",
        "followers_url": "https://api.github.com/users/asvetlov/followers",
        "following_url": "https://api.github.com/users/asvetlov/following{/other_user}",
        "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions",
        "organizations_url": "https://api.github.com/users/asvetlov/orgs",
        "repos_url": "https://api.github.com/users/asvetlov/repos",
        "events_url": "https://api.github.com/users/asvetlov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/asvetlov/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 51,
      "created_at": "2022-02-17T21:51:25Z",
      "updated_at": "2022-03-10T16:06:18Z",
      "closed_at": "2022-03-10T16:05:21Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/31394",
        "html_url": "https://github.com/python/cpython/pull/31394",
        "diff_url": "https://github.com/python/cpython/pull/31394.diff",
        "patch_url": "https://github.com/python/cpython/pull/31394.patch",
        "merged_at": "2022-03-10T16:05:21Z"
      },
      "body": "\n\n<!-- issue-number: [bpo-46771](https://bugs.python.org/issue46771) -->\nhttps://bugs.python.org/issue46771\n<!-- /issue-number -->\n",
      "closed_by": {
        "login": "gvanrossum",
        "id": 2894642,
        "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gvanrossum",
        "html_url": "https://github.com/gvanrossum",
        "followers_url": "https://api.github.com/users/gvanrossum/followers",
        "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
        "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
        "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
        "repos_url": "https://api.github.com/users/gvanrossum/repos",
        "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/31394/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/31394/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1044777488",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1044777488",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1044777488,
          "node_id": "IC_kwDOBN0Z8c4-RgoQ",
          "user": {
            "login": "Tinche",
            "id": 1909233,
            "node_id": "MDQ6VXNlcjE5MDkyMzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1909233?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tinche",
            "html_url": "https://github.com/Tinche",
            "followers_url": "https://api.github.com/users/Tinche/followers",
            "following_url": "https://api.github.com/users/Tinche/following{/other_user}",
            "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions",
            "organizations_url": "https://api.github.com/users/Tinche/orgs",
            "repos_url": "https://api.github.com/users/Tinche/repos",
            "events_url": "https://api.github.com/users/Tinche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Tinche/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T16:17:17Z",
          "updated_at": "2022-02-18T16:17:17Z",
          "author_association": "CONTRIBUTOR",
          "body": "@asvetlov Thanks for starting this, I will dedicate some time over the weekend. How can I contribute tests to this though? You invited me to asvetlov/cpython, but this PR is from python/cpython. Sorry, I have not done this before :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1044777488/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1044805011",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1044805011",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1044805011,
          "node_id": "IC_kwDOBN0Z8c4-RnWT",
          "user": {
            "login": "asvetlov",
            "id": 356399,
            "node_id": "MDQ6VXNlcjM1NjM5OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/356399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asvetlov",
            "html_url": "https://github.com/asvetlov",
            "followers_url": "https://api.github.com/users/asvetlov/followers",
            "following_url": "https://api.github.com/users/asvetlov/following{/other_user}",
            "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions",
            "organizations_url": "https://api.github.com/users/asvetlov/orgs",
            "repos_url": "https://api.github.com/users/asvetlov/repos",
            "events_url": "https://api.github.com/users/asvetlov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asvetlov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T16:37:36Z",
          "updated_at": "2022-02-18T16:37:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "Clone my repo locally `git clone git@github.com:asvetlov/cpython.git`\r\nUse `issue-46771` branch to work on.\r\nWhen you push into this remote branch, the upstream `python/cpython` reflects all changes.\r\n\r\nBTW, I use GitHub CLI (https://cli.github.com/), it allows to checkout forks very easily.\r\nLook on the top of this PR page for line `asvetlov wants to merge 9 commits into main from issue-46771`.\r\n\r\nClick 'copy-to-clipboard' button right to the branch name.\r\nRun `gh pr checkout <paste-from-clipboard>`.\r\n\r\nThe tool setups remote, checkouts branch, and switches to it.\r\n`git commit` and `git push` updates the PR even if it is from a fork if you have access (admins and maintainers can edit contributors' PRs). Super easy.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1044805011/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1044824510",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1044824510",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1044824510,
          "node_id": "IC_kwDOBN0Z8c4-RsG-",
          "user": {
            "login": "asvetlov",
            "id": 356399,
            "node_id": "MDQ6VXNlcjM1NjM5OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/356399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asvetlov",
            "html_url": "https://github.com/asvetlov",
            "followers_url": "https://api.github.com/users/asvetlov/followers",
            "following_url": "https://api.github.com/users/asvetlov/following{/other_user}",
            "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions",
            "organizations_url": "https://api.github.com/users/asvetlov/orgs",
            "repos_url": "https://api.github.com/users/asvetlov/repos",
            "events_url": "https://api.github.com/users/asvetlov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asvetlov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T16:50:13Z",
          "updated_at": "2022-02-18T16:50:13Z",
          "author_association": "CONTRIBUTOR",
          "body": "Sorry, I was over-optimistic :(\r\nA cancellation message is still required if CancelScope wants to swallow self-initiated cancellations (as Quatro does).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1044824510/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1044849307",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1044849307",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1044849307,
          "node_id": "IC_kwDOBN0Z8c4-RyKb",
          "user": {
            "login": "Tinche",
            "id": 1909233,
            "node_id": "MDQ6VXNlcjE5MDkyMzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1909233?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tinche",
            "html_url": "https://github.com/Tinche",
            "followers_url": "https://api.github.com/users/Tinche/followers",
            "following_url": "https://api.github.com/users/Tinche/following{/other_user}",
            "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions",
            "organizations_url": "https://api.github.com/users/Tinche/orgs",
            "repos_url": "https://api.github.com/users/Tinche/repos",
            "events_url": "https://api.github.com/users/Tinche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Tinche/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T17:03:58Z",
          "updated_at": "2022-02-18T17:03:58Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks for the explanation. The asvetlov repo has no `issue-46771` branch but `gh pr checkout` did the trick.\r\n\r\nCan `CancelScope` be a dataclass?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1044849307/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1044864364",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1044864364",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1044864364,
          "node_id": "IC_kwDOBN0Z8c4-R11s",
          "user": {
            "login": "Tinche",
            "id": 1909233,
            "node_id": "MDQ6VXNlcjE5MDkyMzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1909233?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tinche",
            "html_url": "https://github.com/Tinche",
            "followers_url": "https://api.github.com/users/Tinche/followers",
            "following_url": "https://api.github.com/users/Tinche/following{/other_user}",
            "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions",
            "organizations_url": "https://api.github.com/users/Tinche/orgs",
            "repos_url": "https://api.github.com/users/Tinche/repos",
            "events_url": "https://api.github.com/users/Tinche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Tinche/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T17:14:59Z",
          "updated_at": "2022-02-18T17:14:59Z",
          "author_association": "CONTRIBUTOR",
          "body": "@asvetlov Ok, for the discussion about more sophisticated nonce handling. Would you like me to do a writeup here, or open an issue on the asvetlov repo? I will try to explain the issue and a proposed solution.\r\n\r\nYou were right saying on the mailing list that asyncio doesn't have priorities, but I think with a little logic we can do better and maybe save our users from a potential footgun.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1044864364/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1044877944",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1044877944",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1044877944,
          "node_id": "IC_kwDOBN0Z8c4-R5J4",
          "user": {
            "login": "1st1",
            "id": 239003,
            "node_id": "MDQ6VXNlcjIzOTAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/239003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/1st1",
            "html_url": "https://github.com/1st1",
            "followers_url": "https://api.github.com/users/1st1/followers",
            "following_url": "https://api.github.com/users/1st1/following{/other_user}",
            "gists_url": "https://api.github.com/users/1st1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/1st1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/1st1/subscriptions",
            "organizations_url": "https://api.github.com/users/1st1/orgs",
            "repos_url": "https://api.github.com/users/1st1/repos",
            "events_url": "https://api.github.com/users/1st1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/1st1/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T17:26:05Z",
          "updated_at": "2022-02-18T17:26:14Z",
          "author_association": "MEMBER",
          "body": "@asvetlov \r\n\r\n> A cancellation message is still required if CancelScope wants to swallow self-initiated cancellations (as Quatro does).\r\n\r\nCan you add a test that can only be fixed with a nonce? I'd like to take a look, because I'm still -1 on the nonce idea. We should figure out another way.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1044877944/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1044887198",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1044887198",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1044887198,
          "node_id": "IC_kwDOBN0Z8c4-R7ae",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T17:33:11Z",
          "updated_at": "2022-02-18T17:33:11Z",
          "author_association": "MEMBER",
          "body": "I'm not sure if the discussion about cancel edge cases should move here, but my comments on that so far are:\r\n- Yes, there really is something that we need to solve.\r\n- Yes, the cancel-message solution works (I have a version for TaskGroup in a [branch](https://github.com/gvanrossum/cpython/commits/new-cancel)).\r\n- Solutions introducing a new \"nonce\" field seem to just add complications (e.g. the CancelledError exception would have to be modified to accept the nonce arg and store it, or if we make it positional, we'd end up with the awkward `CancelledError(None, nonce)` if there's a nonce but no message -- and usually there isn't a message.\r\n- If you make the nonce a float and order them, it's no longer a nonce. And despite using `time.monotonic()`, using timestamps to deal with races feels wrong.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1044887198/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1045005918",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1045005918",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1045005918,
          "node_id": "IC_kwDOBN0Z8c4-SYZe",
          "user": {
            "login": "Tinche",
            "id": 1909233,
            "node_id": "MDQ6VXNlcjE5MDkyMzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1909233?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tinche",
            "html_url": "https://github.com/Tinche",
            "followers_url": "https://api.github.com/users/Tinche/followers",
            "following_url": "https://api.github.com/users/Tinche/following{/other_user}",
            "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions",
            "organizations_url": "https://api.github.com/users/Tinche/orgs",
            "repos_url": "https://api.github.com/users/Tinche/repos",
            "events_url": "https://api.github.com/users/Tinche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Tinche/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T18:51:05Z",
          "updated_at": "2022-02-18T18:51:05Z",
          "author_association": "CONTRIBUTOR",
          "body": "@1st1 Here's a test that fails without nonces:\r\n\r\n```python\r\n    async def test_nested_timeouts_concurrent(self):\r\n        with self.assertRaises(TimeoutError):\r\n            with asyncio.timeout(0.002):\r\n                try:\r\n                    with asyncio.timeout(0.003):\r\n                        # Pretend we crunch some numbers.\r\n                        time.sleep(0.005)\r\n                        await asyncio.sleep(1)\r\n                except asyncio.TimeoutError:\r\n                    pass\r\n```\r\nBoth timeouts are marked as cancelled, but the inner timeout swallows the cancellation for the outer timeout. So the outer timeout never triggers.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1045005918/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1045013278",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1045013278",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1045013278,
          "node_id": "IC_kwDOBN0Z8c4-SaMe",
          "user": {
            "login": "asvetlov",
            "id": 356399,
            "node_id": "MDQ6VXNlcjM1NjM5OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/356399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asvetlov",
            "html_url": "https://github.com/asvetlov",
            "followers_url": "https://api.github.com/users/asvetlov/followers",
            "following_url": "https://api.github.com/users/asvetlov/following{/other_user}",
            "gists_url": "https://api.github.com/users/asvetlov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asvetlov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asvetlov/subscriptions",
            "organizations_url": "https://api.github.com/users/asvetlov/orgs",
            "repos_url": "https://api.github.com/users/asvetlov/repos",
            "events_url": "https://api.github.com/users/asvetlov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asvetlov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T18:55:23Z",
          "updated_at": "2022-02-18T18:55:23Z",
          "author_association": "CONTRIBUTOR",
          "body": "@Tinche up to you.\r\nI wanted to share access to work on timeouts/cancellation scopes work with you.\r\nAs the cpython core, I can write to any of your pull requests if you don't clear the corresponding check box.\r\nYou are not core dev (yet), so I granted you the write access to my clone. You cannot write to the main repo but can apply changes without PR-over-PR, apply, and merge workflow.\r\nI believe it reduces friction.\r\nIf you want to demonstrate an alternative approach and a separate branch and PR works better for you -- please go ahead. \r\nIf you have a feeling that direct commit to this PR is more comfortable -- I'm fine with it.\r\nFor example, adding a new test is a perfect example for the second case.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1045013278/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1045167836",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1045167836",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1045167836,
          "node_id": "IC_kwDOBN0Z8c4-S_7c",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T20:50:54Z",
          "updated_at": "2022-02-18T20:50:54Z",
          "author_association": "MEMBER",
          "body": "> @1st1 Here's a test that fails without nonces:\r\n\r\n<details>\r\n\r\n> ```python\r\n>     async def test_nested_timeouts_concurrent(self):\r\n>         with self.assertRaises(TimeoutError):\r\n>             with asyncio.timeout(0.002):\r\n>                 try:\r\n>                     with asyncio.timeout(0.003):\r\n>                         # Pretend we crunch some numbers.\r\n>                         time.sleep(0.005)\r\n>                         await asyncio.sleep(1)\r\n>                 except asyncio.TimeoutError:\r\n>                     pass\r\n> ```\r\n\r\n</details>\r\n\r\n> Both timeouts are marked as cancelled, but the inner timeout swallows the cancellation for the outer timeout. So the outer timeout never triggers.\r\n\r\nThinking about what happens here: When we reach the `await asyncio.sleep(1)`, both callbacks run, both try to cancel the task, the inner `__exit__()` receives CancelledError, uncancels the task, and raises TimeoutError, which is called by the user code's except clause. Then the outer cancel scope's `__exit__()` is entered without an exception, and overall the task completes successfully.\r\n\r\nThe expectation is that the outer cancel scope should also raise TimeoutError, because its deadline is also exceeded. So perhaps the outer `__exit__()` should check whether its deadline is exceeded, and raise TimeoutError even though it did not see a CancelledError?\r\n\r\nBut it looks like there's a variant of the example that isn't fixed by such a check -- for example, we could add\r\n```py\r\n        await asyncio.sleep(2)\r\n```\r\nafter the try/except block (or even in the except clause), inside the outer cancel scope. Since the CancelledError exception has been wholly swallowed by the inner `__exit__()` this second await is not interrupted.\r\n\r\nI'm guessing the fix for that would be to use a nonce (either using an explicit nonce API or via the cancel message). However, that still depends on the order in which the callbacks run. With the new cancel semantics (where extra cancels are ignored) whoever runs first wins, while with the old cancel semantics (where the most recent cancel gets to set the cancel message / nonce) whoever runs last wins -- but we don't want to rely on the order in which the callbacks run (since I have no idea in which order the current implementation runs them, given that they both become \"ready\" simultaneously, and we shouldn't depend on that). **So that's why Tin is proposing to use timestamps (or a cancel stack, or some other mechanism that lets us arbitrate between the two cancel calls).**\r\n\r\nNote that this case is slightly different from the \"web server cancels\" problem, which was solvable without resorting to timestamps (the cancel scope callback would have to check whether the task was already being cancelled, using t.cancelling()).\r\n\r\nI'm not sure yet what the right solution would be, but I'm glad that we're thingking about this scenario carefully.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1045167836/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1045228865",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1045228865",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1045228865,
          "node_id": "IC_kwDOBN0Z8c4-TO1B",
          "user": {
            "login": "the-knights-who-say-ni",
            "id": 18121554,
            "node_id": "MDQ6VXNlcjE4MTIxNTU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/18121554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/the-knights-who-say-ni",
            "html_url": "https://github.com/the-knights-who-say-ni",
            "followers_url": "https://api.github.com/users/the-knights-who-say-ni/followers",
            "following_url": "https://api.github.com/users/the-knights-who-say-ni/following{/other_user}",
            "gists_url": "https://api.github.com/users/the-knights-who-say-ni/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/the-knights-who-say-ni/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/the-knights-who-say-ni/subscriptions",
            "organizations_url": "https://api.github.com/users/the-knights-who-say-ni/orgs",
            "repos_url": "https://api.github.com/users/the-knights-who-say-ni/repos",
            "events_url": "https://api.github.com/users/the-knights-who-say-ni/events{/privacy}",
            "received_events_url": "https://api.github.com/users/the-knights-who-say-ni/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T21:48:23Z",
          "updated_at": "2022-02-19T00:57:53Z",
          "author_association": "NONE",
          "body": "Hello, and thanks for your contribution!\n\nI'm a bot set up to make sure that the project can legally accept this contribution by verifying everyone involved has signed the [PSF contributor agreement](https://www.python.org/psf/contrib/contrib-form/) (CLA).\n\n\n\n## CLA Missing\n\nOur records indicate the following people have not signed the CLA:\n\n@Tinche\n\nFor legal reasons we need all the people listed to sign the CLA before we can look at your contribution. Please follow [the steps outlined in the CPython devguide](https://devguide.python.org/pullrequest/#licensing) to rectify this issue.\n\nIf you have recently signed the CLA, please wait at least one business day\nbefore our records are updated.\n\n\nYou can [check yourself](https://check-python-cla.herokuapp.com/) to see if the CLA has been received.\n\nThanks again for the contribution, we look forward to reviewing it!\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1045228865/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1045293642",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1045293642",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1045293642,
          "node_id": "IC_kwDOBN0Z8c4-TepK",
          "user": {
            "login": "Tinche",
            "id": 1909233,
            "node_id": "MDQ6VXNlcjE5MDkyMzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1909233?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tinche",
            "html_url": "https://github.com/Tinche",
            "followers_url": "https://api.github.com/users/Tinche/followers",
            "following_url": "https://api.github.com/users/Tinche/following{/other_user}",
            "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions",
            "organizations_url": "https://api.github.com/users/Tinche/orgs",
            "repos_url": "https://api.github.com/users/Tinche/repos",
            "events_url": "https://api.github.com/users/Tinche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Tinche/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-18T22:43:17Z",
          "updated_at": "2022-02-18T22:43:17Z",
          "author_association": "CONTRIBUTOR",
          "body": "@gvanrossum thanks for the great write up, I believe you hit the nail on the head. I think to get this 100% correct, we need a way to throw the highest priority cancellation into the task on its iteration. The highest priority is the cancel scope that was entered first. It doesn't have to be a timestamp, we could have a global (or thread-local, but that's overthinking it) counter that the cancel scope takes from on `__enter__`.\r\n\r\nThe cancellation data could also be in a context var instead of on the CancelledError, I suppose? Would that be cleaner?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1045293642/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1046044709",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1046044709",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1046044709,
          "node_id": "IC_kwDOBN0Z8c4-WWAl",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-19T15:36:41Z",
          "updated_at": "2022-02-19T15:36:41Z",
          "author_association": "MEMBER",
          "body": "I have a new proposal. Thinking about @asvetlov's diagrams some more, I think we can make everything work if the cancel state of a task kept a *count* of cancellations. This would replace the `t._cancel_requested` flag -- we could just make that flag an int instead of a bool. `t.cancel()` increments the flag. `t.uncancel()` decrements it (asserting that it stays >= 0). `t.cancelling()` returns the value of the flag, i.e. the number of pending cancellations.\r\n\r\nNow any context manager cleanup handler, like `CancelScope.__exit__()` or `TaskGroup.__aexit__()`, when it has to decide whether to let a CancellationError bubble out or swallow it, can just look at the number of pending cancellations to decide. Such context managers should still keep track of whether they cancelled the task themselves or not (at least TaskGroup needs this to avoid cancelling multiple times), and if they did, they should always call `t.uncancel()`. If after that's done there's still a nonzero number of pending cancellations (as reported by `t.cancelling()`), they should let the cancellation bubble out, other wise they can swallow or replace it.\r\n\r\nThe only thing that's painful with this scheme is how to handle cancel messages. Hoever, (this is for @cjerdonek to disagree with :-) I think cancel messages were a bad idea to begin with -- if I read the bpo where it started, it came from a user who misunderstood how to print exceptions. It seems they are not always preserved regardless. I believe that any scheme that allows for multiple pending cancellations will have a hard time to keep track of which cancel message should be allowed to bubbled out. I'm guessing it could be solved by making `t._cancel_requested` a list, and giving `t.uncancel()` an optional argument that indicates which cancel message to remove from that list (`None` by default), but that feels like a complication I'd much rather avoid.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1046044709/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1046055015",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1046055015",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1046055015,
          "node_id": "IC_kwDOBN0Z8c4-WYhn",
          "user": {
            "login": "Tinche",
            "id": 1909233,
            "node_id": "MDQ6VXNlcjE5MDkyMzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1909233?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tinche",
            "html_url": "https://github.com/Tinche",
            "followers_url": "https://api.github.com/users/Tinche/followers",
            "following_url": "https://api.github.com/users/Tinche/following{/other_user}",
            "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions",
            "organizations_url": "https://api.github.com/users/Tinche/orgs",
            "repos_url": "https://api.github.com/users/Tinche/repos",
            "events_url": "https://api.github.com/users/Tinche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Tinche/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-19T16:29:13Z",
          "updated_at": "2022-02-19T16:29:13Z",
          "author_association": "CONTRIBUTOR",
          "body": "@gvanrossum what happens to the count when the exception is thrown? Does it reset to 0 (I guess this would have to happen after the entire iteration is done) or does it stay, and only `t.uncancel()` can decrement it?\r\n\r\nIf it stays, I think essentially you have level-triggered cancellation then. Which I like, but it would be a compatibility break, right?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1046055015/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1046060318",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1046060318",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1046060318,
          "node_id": "IC_kwDOBN0Z8c4-WZ0e",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-19T17:00:28Z",
          "updated_at": "2022-02-19T17:00:28Z",
          "author_association": "MEMBER",
          "body": "It stays, but this is not the flag that causes the exception to be thrown -- for that we have `_must_cancel`, which remains a bool and is reset when the exception is actually thrown (this reset logic is [here](https://github.com/python/cpython/blob/7a4791e03613bfbdc0d3ddfabfc0b59e6a6f7358/Lib/asyncio/tasks.py#L233-L236), the actual throw [here](https://github.com/python/cpython/blob/7a4791e03613bfbdc0d3ddfabfc0b59e6a6f7358/Lib/asyncio/tasks.py#L248).\r\n\r\nSo I don't think it's quite the same as level-triggered, IIUC (that would keep interrupting every await governed by the cancel scope until its `__exit__()` is reached, right?).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1046060318/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1046106305",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1046106305",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1046106305,
          "node_id": "IC_kwDOBN0Z8c4-WlDB",
          "user": {
            "login": "Tinche",
            "id": 1909233,
            "node_id": "MDQ6VXNlcjE5MDkyMzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1909233?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tinche",
            "html_url": "https://github.com/Tinche",
            "followers_url": "https://api.github.com/users/Tinche/followers",
            "following_url": "https://api.github.com/users/Tinche/following{/other_user}",
            "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions",
            "organizations_url": "https://api.github.com/users/Tinche/orgs",
            "repos_url": "https://api.github.com/users/Tinche/repos",
            "events_url": "https://api.github.com/users/Tinche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Tinche/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-19T21:26:39Z",
          "updated_at": "2022-02-19T21:26:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "Cool, I'm on board with this proposal then. (I got a little confused on `_must_cancel` vs `_cancel_requested`.) Want me to tinker around and try implementing this?\r\n\r\nYour understanding of level-based cancellation is correct. In practice it helps remove a few footguns, especially around `finally` clauses. I feel like this counter approach might open the door to enable it (on an opt-in basis) in a future version of Python, but that's not a concern for the matter at hand.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1046106305/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1046106693",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1046106693",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1046106693,
          "node_id": "IC_kwDOBN0Z8c4-WlJF",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-19T21:28:46Z",
          "updated_at": "2022-02-19T21:28:46Z",
          "author_association": "MEMBER",
          "body": "Sure, go ahead and send a draft PR!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1046106693/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1046136610",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1046136610",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1046136610,
          "node_id": "IC_kwDOBN0Z8c4-Wsci",
          "user": {
            "login": "Tinche",
            "id": 1909233,
            "node_id": "MDQ6VXNlcjE5MDkyMzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1909233?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tinche",
            "html_url": "https://github.com/Tinche",
            "followers_url": "https://api.github.com/users/Tinche/followers",
            "following_url": "https://api.github.com/users/Tinche/following{/other_user}",
            "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions",
            "organizations_url": "https://api.github.com/users/Tinche/orgs",
            "repos_url": "https://api.github.com/users/Tinche/repos",
            "events_url": "https://api.github.com/users/Tinche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Tinche/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-20T01:15:43Z",
          "updated_at": "2022-02-20T01:15:43Z",
          "author_association": "CONTRIBUTOR",
          "body": "Got a working version here: https://github.com/python/cpython/pull/31434.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1046136610/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1046434895",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1046434895",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1046434895,
          "node_id": "IC_kwDOBN0Z8c4-X1RP",
          "user": {
            "login": "gvanrossum",
            "id": 2894642,
            "node_id": "MDQ6VXNlcjI4OTQ2NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2894642?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gvanrossum",
            "html_url": "https://github.com/gvanrossum",
            "followers_url": "https://api.github.com/users/gvanrossum/followers",
            "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}",
            "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions",
            "organizations_url": "https://api.github.com/users/gvanrossum/orgs",
            "repos_url": "https://api.github.com/users/gvanrossum/repos",
            "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gvanrossum/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-21T03:23:42Z",
          "updated_at": "2022-02-21T03:23:42Z",
          "author_association": "MEMBER",
          "body": "FWIW Things are moving so fast here, I'm probably going to come back in a few days to look at this again.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1046434895/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/1046572075",
          "html_url": "https://github.com/python/cpython/pull/31394#issuecomment-1046572075",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/31394",
          "id": 1046572075,
          "node_id": "IC_kwDOBN0Z8c4-YWwr",
          "user": {
            "login": "bedevere-bot",
            "id": 28579281,
            "node_id": "MDQ6VXNlcjI4NTc5Mjgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/28579281?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-bot",
            "html_url": "https://github.com/bedevere-bot",
            "followers_url": "https://api.github.com/users/bedevere-bot/followers",
            "following_url": "https://api.github.com/users/bedevere-bot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-bot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-bot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-bot/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-bot/orgs",
            "repos_url": "https://api.github.com/users/bedevere-bot/repos",
            "events_url": "https://api.github.com/users/bedevere-bot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-bot/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2022-02-21T08:01:07Z",
          "updated_at": "2022-02-21T08:01:07Z",
          "author_association": "NONE",
          "body": ":robot: New build scheduled with the buildbot fleet by @asvetlov for commit f31f2d0f51b729c8fe8d86552234bd54beeb68f2 :robot:\n\nIf you want to schedule another build, you need to add the \":hammer: test-with-buildbots\" label again.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/1046572075/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/130771",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/130771/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/130771/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/130771/events",
      "html_url": "https://github.com/python/cpython/pull/130771",
      "id": 2889789762,
      "node_id": "PR_kwDOBN0Z8c6NEz5c",
      "number": 130771,
      "title": "gh-128942: make arraymodule.c free-thread safe (lock-free)",
      "user": {
        "login": "tom-pytel",
        "id": 51921719,
        "node_id": "MDQ6VXNlcjUxOTIxNzE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tom-pytel",
        "html_url": "https://github.com/tom-pytel",
        "followers_url": "https://api.github.com/users/tom-pytel/followers",
        "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
        "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
        "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
        "repos_url": "https://api.github.com/users/tom-pytel/repos",
        "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 666979821,
          "node_id": "MDU6TGFiZWw2NjY5Nzk4MjE=",
          "url": "https://api.github.com/repos/python/cpython/labels/awaiting%20review",
          "name": "awaiting review",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 6140426713,
          "node_id": "LA_kwDOBN0Z8c8AAAABbf952Q",
          "url": "https://api.github.com/repos/python/cpython/labels/topic-free-threading",
          "name": "topic-free-threading",
          "color": "0052cc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 38,
      "created_at": "2025-03-02T21:07:18Z",
      "updated_at": "2025-07-06T11:58:28Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/130771",
        "html_url": "https://github.com/python/cpython/pull/130771",
        "diff_url": "https://github.com/python/cpython/pull/130771.diff",
        "patch_url": "https://github.com/python/cpython/pull/130771.patch",
        "merged_at": null
      },
      "body": "I added lock-free single element reads and writes by mostly copying the `list` object's homework. TL;DR: pyperformance scimark seems to be back to about what it was without the free-thread safe stuff (pending confirmation of course). Tried a few other things but the list strategy seems good enough (except for the negative index thing I mentioned in #130744, if that is an issue).\r\n\r\nTimings, the relevant ones are \"OLD\" - non free-thread safe arraymodule, \"SLOW\" - the previous slower PR and the last two \"LFREERW\".\r\n```\r\n### scimark_fft ###\r\nWITHGIL: Mean +- std dev: 200 ms +- 6 ms\r\nOLD:     Mean +- std dev: 238 ms +- 7 ms\r\nSLOW:    Mean +- std dev: 274 ms +- 4 ms\r\nITEMFIX: Mean +- std dev: 272 ms +- 14 ms\r\nNOLOCK:  Mean +- std dev: 240 ms +- 4 ms\r\nTEST1:   Mean +- std dev: 267 ms +- 4 ms\r\nTEST2:   Mean +- std dev: 255 ms +- 6 ms\r\nLFREERD: Mean +- std dev: 256 ms +- 7 ms   # left in standard Py_SIZE() in getarrayitem\r\nLFREERD: Mean +- std dev: 262 ms +- 7 ms   # atomic read of size in getarrayitem\r\nLFREERD: Mean +- std dev: 270 ms +- 7 ms   # build and run again\r\nLFREERD: Mean +- std dev: 255 ms +- 10 ms  # orthodox\r\nLFREERD: Mean +- std dev: 259 ms +- 8 ms   # build and run again\r\nLFREERW: Mean +- std dev: 239 ms +- 7 ms   # lockfree write single element\r\nLFREERW: Mean +- std dev: 242 ms +- 6 ms   # build and run again\r\nSTATICL: Mean +- std dev: 223 ms +- 6 ms   # statically linked\r\nSTATICL: Mean +- std dev: 223 ms +- 5 ms   # build and run again\r\nCLEANUP: Mean +- std dev: 224 ms +- 5 ms   # including atomic get/set\r\nAMEMCPY: Mean +- std dev: 226 ms +- 6 ms   # atomic item copy on resize (instead of memcpy)\r\nAMEMCPY: Mean +- std dev: 222 ms +- 5 ms   # build and run again\r\nLOCKWR:  Mean +- std dev: 226 ms +- 4 ms   # locked writes again, but much better with static linking\r\nLOCKWR:  Mean +- std dev: 226 ms +- 5 ms   # build and run again\r\nAMCAGG:  Mean +- std dev: 222 ms +- 7 ms   # aggregate memcpy (just using best build)\r\n\r\n### scimark_lu ###\r\nWITHGIL: Mean +- std dev: 64.6 ms +- 1.9 ms\r\nOLD:     Mean +- std dev: 89.0 ms +- 2.1 ms\r\nSLOW:    Mean +- std dev: 95.4 ms +- 3.1 ms\r\nITEMFIX: Mean +- std dev: 92.0 ms +- 2.1 ms\r\nNOLOCK:  Mean +- std dev: 88.5 ms +- 2.5 ms\r\nTEST1:   Mean +- std dev: 89.7 ms +- 2.1 ms\r\nTEST2:   Mean +- std dev: 90.5 ms +- 2.4 ms\r\nLFREERD: Mean +- std dev: 89.9 ms +- 2.7 ms\r\nLFREERD: Mean +- std dev: 90.9 ms +- 2.6 ms\r\nLFREERD: Mean +- std dev: 93.4 ms +- 4.0 ms\r\nLFREERD: Mean +- std dev: 91.9 ms +- 3.7 ms\r\nLFREERD: Mean +- std dev: 91.0 ms +- 5.0 ms\r\nLFREERW: Mean +- std dev: 89.2 ms +- 2.8 ms\r\nLFREERW: Mean +- std dev: 88.8 ms +- 2.5 ms\r\nSTATICL: Mean +- std dev: 86.9 ms +- 1.9 ms\r\nSTATICL: Mean +- std dev: 87.1 ms +- 2.2 ms\r\nCLEANUP: Mean +- std dev: 88.9 ms +- 2.5 ms\r\nAMEMCPY: Mean +- std dev: 87.9 ms +- 1.9 ms\r\nAMEMCPY: Mean +- std dev: 88.7 ms +- 4.8 ms\r\nLOCKWR:  Mean +- std dev: 88.0 ms +- 2.4 ms\r\nLOCKWR:  Mean +- std dev: 88.5 ms +- 3.5 ms\r\nAMCAGG:  Mean +- std dev: 88.5 ms +- 3.5 ms\r\n\r\n### scimark_monte_carlo ###\r\nWITHGIL: Mean +- std dev: 40.1 ms +- 2.3 ms\r\nOLD:     Mean +- std dev: 53.4 ms +- 1.0 ms\r\nSLOW:    Mean +- std dev: 56.8 ms +- 1.4 ms\r\nITEMFIX: Mean +- std dev: 55.9 ms +- 0.7 ms\r\nNOLOCK:  Mean +- std dev: 54.4 ms +- 1.3 ms\r\nTEST1:   Mean +- std dev: 54.1 ms +- 0.6 ms\r\nTEST2:   Mean +- std dev: 54.1 ms +- 0.6 ms\r\nLFREERD: Mean +- std dev: 54.3 ms +- 0.9 ms\r\nLFREERD: Mean +- std dev: 55.9 ms +- 0.9 ms\r\nLFREERD: Mean +- std dev: 55.4 ms +- 1.1 ms\r\nLFREERD: Mean +- std dev: 55.4 ms +- 1.1 ms\r\nLFREERD: Mean +- std dev: 55.2 ms +- 1.5 ms\r\nLFREERW: Mean +- std dev: 53.2 ms +- 1.1 ms\r\nLFREERW: Mean +- std dev: 53.9 ms +- 1.5 ms\r\nSTATICL: Mean +- std dev: 55.0 ms +- 1.9 ms\r\nSTATICL: Mean +- std dev: 53.3 ms +- 1.0 ms\r\nCLEANUP: Mean +- std dev: 52.6 ms +- 0.5 ms\r\nAMEMCPY: Mean +- std dev: 53.3 ms +- 0.6 ms\r\nAMEMCPY: Mean +- std dev: 53.4 ms +- 1.2 ms\r\nLOCKWR:  Mean +- std dev: 55.4 ms +- 4.0 ms\r\nLOCKWR:  Mean +- std dev: 54.8 ms +- 1.8 ms\r\nAMCAGG:  Mean +- std dev: 53.1 ms +- 1.0 ms\r\n\r\n### scimark_sor ###\r\nWITHGIL: Mean +- std dev: 70.3 ms +- 3.3 ms\r\nOLD:     Mean +- std dev: 98.1 ms +- 1.8 ms\r\nSLOW:    Mean +- std dev: 99.9 ms +- 1.1 ms\r\nITEMFIX: Mean +- std dev:  100 ms +- 1 ms\r\nNOLOCK:  Mean +- std dev: 97.3 ms +- 1.4 ms\r\nTEST1:   Mean +- std dev: 97.5 ms +- 0.7 ms\r\nTEST2:   Mean +- std dev: 98.5 ms +- 1.5 ms\r\nLFREERD: Mean +- std dev: 97.0 ms +- 2.0 ms\r\nLFREERD: Mean +- std dev: 98.2 ms +- 1.4 ms\r\nLFREERD: Mean +- std dev: 98.4 ms +- 2.7 ms\r\nLFREERD: Mean +- std dev: 97.6 ms +- 1.5 ms\r\nLFREERD: Mean +- std dev: 97.9 ms +- 1.8 ms\r\nLFREERW: Mean +- std dev: 97.2 ms +- 1.6 ms\r\nLFREERW: Mean +- std dev: 96.9 ms +- 2.0 ms\r\nSTATICL: Mean +- std dev: 97.8 ms +- 1.9 ms\r\nSTATICL: Mean +- std dev: 97.2 ms +- 1.7 ms\r\nCLEANUP: Mean +- std dev: 97.7 ms +- 1.2 ms\r\nAMEMCPY: Mean +- std dev: 96.0 ms +- 2.0 ms\r\nAMEMCPY: Mean +- std dev: 96.4 ms +- 1.5 ms\r\nLOCKWR:  Mean +- std dev: 97.7 ms +- 1.5 ms\r\nLOCKWR:  Mean +- std dev: 96.8 ms +- 2.5 ms\r\nAMCAGG:  Mean +- std dev: 95.6 ms +- 0.5 ms\r\n\r\n### scimark_sparse_mat_mult ###\r\nWITHGIL: Mean +- std dev: 2.89 ms +- 0.11 ms\r\nOLD:     Mean +- std dev: 3.94 ms +- 0.15 ms\r\nSLOW:    Mean +- std dev: 4.68 ms +- 0.07 ms\r\nITEMFIX: Mean +- std dev: 4.34 ms +- 0.07 ms\r\nNOLOCK:  Mean +- std dev: 3.94 ms +- 0.58 ms\r\nTEST1:   Mean +- std dev: 3.99 ms +- 0.12 ms\r\nTEST2:   Mean +- std dev: 3.80 ms +- 0.12 ms\r\nLFREERD: Mean +- std dev: 3.84 ms +- 0.17 ms\r\nLFREERD: Mean +- std dev: 3.83 ms +- 0.15 ms\r\nLFREERD: Mean +- std dev: 3.94 ms +- 0.12 ms\r\nLFREERD: Mean +- std dev: 3.74 ms +- 0.12 ms\r\nLFREERD: Mean +- std dev: 3.83 ms +- 0.19 ms\r\nLFREERW: Mean +- std dev: 3.84 ms +- 0.19 ms\r\nLFREERW: Mean +- std dev: 3.87 ms +- 0.17 ms\r\nSTATICL: Mean +- std dev: 3.37 ms +- 0.08 ms\r\nSTATICL: Mean +- std dev: 3.49 ms +- 0.12 ms\r\nCLEANUP: Mean +- std dev: 3.45 ms +- 0.14 ms\r\nAMEMCPY: Mean +- std dev: 3.44 ms +- 0.13 ms\r\nAMEMCPY: Mean +- std dev: 3.46 ms +- 0.14 ms\r\nLOCKWR:  Mean +- std dev: 3.52 ms +- 0.47 ms\r\nLOCKWR:  Mean +- std dev: 3.44 ms +- 0.10 ms\r\nAMCAGG:  Mean +- std dev: 3.38 ms +- 0.09 ms\r\n```\r\n\r\n\r\n<!-- gh-issue-number: gh-128942 -->\r\n* Issue: gh-128942\r\n<!-- /gh-issue-number -->\r\n",
      "closed_by": null,
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/130771/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/130771/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2692929778",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2692929778",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2692929778,
          "node_id": "IC_kwDOBN0Z8c6ggtjy",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-02T22:01:53Z",
          "updated_at": "2025-03-02T22:01:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "ping @colesbury ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2692929778/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2694347152",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2694347152",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2694347152,
          "node_id": "IC_kwDOBN0Z8c6gmHmQ",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-03T13:10:49Z",
          "updated_at": "2025-03-03T13:10:49Z",
          "author_association": "CONTRIBUTOR",
          "body": "Note, this is not ready to go, there is the memory issue which needs resolving.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2694347152/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2694544651",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2694544651",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2694544651,
          "node_id": "IC_kwDOBN0Z8c6gm30L",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-03T14:17:41Z",
          "updated_at": "2025-03-03T14:17:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "@ZeroIntensity you can remove the do-not-merge, its not an `arraymodule` issue, its a QSBR issue, see #130794.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2694544651/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2695755342",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2695755342",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2695755342,
          "node_id": "IC_kwDOBN0Z8c6grfZO",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-03T22:56:54Z",
          "updated_at": "2025-03-03T22:56:54Z",
          "author_association": "CONTRIBUTOR",
          "body": "The main thing here for acceptance is a benchmark run which I am not able to start (I only did local pyperformance check against main), so someone with access will have to initiate that to compare with main.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2695755342/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2701816902",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2701816902",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2701816902,
          "node_id": "IC_kwDOBN0Z8c6hCnRG",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-05T19:00:17Z",
          "updated_at": "2025-03-05T19:06:51Z",
          "author_association": "CONTRIBUTOR",
          "body": "The actual `arraymodule` cleanup is fine, just one thing you should pay attention to when looking at this:\r\n\r\n`data->items` is not a deref but pointer arithmetic so is safe to use if `data` is `NULL` in memcopies and `_PyBytes_Repeat` when associated size is 0. But there are places where this might not be safe which are accomodated, specifically:\r\n\r\n* `array_array_buffer_info_impl`\r\n* `array_array_tobytes_impl`\r\n* `array_array_fromunicode_impl`\r\n* `array_array_tounicode_impl`\r\n* `array_buffer_getbuf_lock_held`\r\n\r\nAre there any other places where this needs to take place?\r\n\r\n\r\nIts the test and trying to run it with `parallel-threads` with tsan that's problematic.\r\n\r\n* `warnings` doesn't play nice with `--parallel-threads`, found a least evil solution but its not wonderful. This still gets \"env changed\" but at least can run. Is there a way to check for `parallel-threads` other than this?\r\n```\r\n    def setUp(self):\r\n        if (not support.Py_GIL_DISABLED or\r\n                any('\"parallel_threads\": null' in a for a in sys.argv) or\r\n                all('parallel_threads' not in a for a in sys.argv)):\r\n            self.enterContext(warnings.catch_warnings())\r\n```\r\n\r\n* `--parallel-threads` doesn't play well with the threaded `FreeThreadingTest`, get dangling threads sometimes.\r\n\r\n* ./Include/cpython/pyatomic_gcc.h:615:3: warning: \u2018atomic_thread_fence\u2019 is not supported with \u2018-fsanitize=thread\u2019 [-Wtsan]\r\n  Do we care?\r\n\r\n* And worst of all, cleaned up data races in `arraymodule` (as far as I can see). I used to be able to run test stuff setting supperssions without problems but with `test_array` I get:\r\n\r\n```\r\n$ ./python -m test --parallel-threads=4 -j4 test_array\r\nUsing random seed: 2354862211\r\n0:00:00 load avg: 0.55 Run 1 test in parallel using 1 worker process\r\n0:00:30 load avg: 0.80 running (1): test_array (30.1 sec)\r\n0:00:41 load avg: 0.75 [1/1/1] test_array worker non-zero exit code (Exit code 66)\r\n==================\r\n\r\nWARNING: ThreadSanitizer: data race (pid=1075807)\r\n  Read of size 8 at 0x7f58e22c0098 by thread T4:\r\n    #0 _Py_TYPE Include/object.h:268 (python+0x22a21a)\r\n    #1 Py_IS_TYPE Include/object.h:291 (python+0x22a21a)\r\n    #2 compare_unicode_unicode_threadsafe Objects/dictobject.c:1413 (python+0x22a21a)\r\n    #3 do_lookup Objects/dictobject.c:1010 (python+0x22bb38)\r\n    #4 unicodekeys_lookup_unicode_threadsafe Objects/dictobject.c:1438 (python+0x22bd9b)\r\n    #5 _Py_dict_lookup_threadsafe Objects/dictobject.c:1493 (python+0x232e50)\r\n    #6 _PyDict_GetItemRef_KnownHash Objects/dictobject.c:2342 (python+0x233f39)\r\n    #7 PyDict_GetItemRef Objects/dictobject.c:2378 (python+0x234070)\r\n    #8 cache_struct_converter Modules/_struct.c:2524 (_struct.cpython-314td-x86_64-linux-gnu.so+0xc916)\r\n    #9 calcsize Modules/clinic/_struct.c.h:249 (_struct.cpython-314td-x86_64-linux-gnu.so+0xceb0)\r\n    #10 cfunction_vectorcall_O Objects/methodobject.c:523 (python+0x25961c)\r\n    #11 _PyObject_VectorcallTstate Include/internal/pycore_call.h:167 (python+0x1896b3)\r\n    #12 PyObject_Vectorcall Objects/call.c:327 (python+0x189810)\r\n    #13 _PyEval_EvalFrameDefault Python/generated_cases.c.h:1371 (python+0x42310d)\r\n    ...\r\n\r\n  Previous write of size 8 at 0x7f58e22c0098 by thread T1:\r\n    #0 memset ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:799 (libtsan.so.0+0x614cb)\r\n    #1 memset ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:797 (libtsan.so.0+0x614cb)\r\n    #2 memset /usr/include/x86_64-linux-gnu/bits/string_fortified.h:59 (python+0x274169)\r\n    #3 fill_mem_debug Objects/obmalloc.c:2739 (python+0x274169)\r\n    #4 _PyMem_DebugRawAlloc Objects/obmalloc.c:2823 (python+0x27429d)\r\n    #5 _PyMem_DebugRawMalloc Objects/obmalloc.c:2839 (python+0x2742d6)\r\n    #6 _PyMem_DebugMalloc Objects/obmalloc.c:3004 (python+0x274331)\r\n    #7 PyObject_Malloc Objects/obmalloc.c:1412 (python+0x296e92)\r\n    #8 PyUnicode_New Objects/unicodeobject.c:1407 (python+0x31fd7d)\r\n    #9 PyUnicode_Concat Objects/unicodeobject.c:11647 (python+0x335e53)\r\n    #10 PyNumber_Add Objects/abstract.c:1135 (python+0x14e11c)\r\n    #11 _PyEval_EvalFrameDefault Python/generated_cases.c.h:62 (python+0x41b60b)\r\n    ...\r\n\r\nWARNING: ThreadSanitizer: data race (pid=1079529)\r\n  Write of size 8 at 0x7f0050cbd0f0 by thread T17:\r\n    #0 descr_get_qualname Objects/descrobject.c:624 (python+0x1ac687)\r\n    #1 getset_get Objects/descrobject.c:193 (python+0x1aaf41)\r\n    #2 _PyObject_GenericGetAttrWithDict Objects/object.c:1694 (python+0x268a4e)\r\n    ...\r\n\r\n  Previous write of size 8 at 0x7f0050cbd0f0 by thread T20:\r\n    #0 descr_get_qualname Objects/descrobject.c:624 (python+0x1ac687)\r\n    #1 getset_get Objects/descrobject.c:193 (python+0x1aaf41)\r\n    #2 _PyObject_GenericGetAttrWithDict Objects/object.c:1694 (python+0x268a4e)\r\n    ...\r\n```\r\n\r\nWhich is not `arraymodule` stuff and not suppressed. So as of now its not runnable clean under tsan (at least on my system how I am running it).\r\n\r\nLeft the bad `setUp()` in `test_array` for now so u can see but it will be getting removed (or fixed).\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2701816902/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2701849567",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2701849567",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2701849567,
          "node_id": "IC_kwDOBN0Z8c6hCvPf",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-05T19:16:41Z",
          "updated_at": "2025-03-05T19:17:00Z",
          "author_association": "CONTRIBUTOR",
          "body": "I'd like `test_array` added to `TSAN_TESTS`, not `TSAN_PARALLEL_TESTS`.\r\n\r\n> warnings doesn't play nice with --parallel-threads\r\n\r\nYes, `warnings` is not therad-safe (even with the GIL). Neil is work on making it thread-safe, but for now we shouldn't add the test to `TSAN_PARALLEL_TESTS` for now. It's not worth trying to work around the warnings stuff.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2701849567/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2703672659",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2703672659",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2703672659,
          "node_id": "IC_kwDOBN0Z8c6hJsVT",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T12:11:27Z",
          "updated_at": "2025-03-06T12:11:27Z",
          "author_association": "CONTRIBUTOR",
          "body": "Ok, I've been playing with the races and have been able to shut up the ones between reads and writes by using atomic operations in get/set, but not between reads/writes and resize without a mutex.\r\n\r\nAre you sure that tsan is supposed to be quiet here? After all, tsan detects when multiple threads access the same memory without synchronization, which is the whole point of lockfree operation, to allow multiple threads to access the same memory without synchronization. Which makes me think the tsan warnings should be expected?\r\n\r\nI'm sending up a version with atomic reads/writes in get and set so you can have a look, but I don't think they should be there. They don't slow anything down on Intel but could be bad on other architectures (ARM? not an expert). Adding links to three places in `arraymodule` which I think should be sufficient make sure the bad memory is never read/written, regardless of tsan, and also a reproducer to cause tsan warnings with `list` in the same manner.\r\n\r\nThoughts?\r\n\r\nhttps://github.com/tom-pytel/cpython/blob/04a8f9dc9fe07f432ef206c90e660a0dfe74ac48/Modules/arraymodule.c#L295\r\n\r\nhttps://github.com/tom-pytel/cpython/blob/04a8f9dc9fe07f432ef206c90e660a0dfe74ac48/Modules/arraymodule.c#L872\r\n\r\nhttps://github.com/tom-pytel/cpython/blob/04a8f9dc9fe07f432ef206c90e660a0dfe74ac48/Modules/arraymodule.c#L947\r\n\r\nList behavior:\r\n```\r\nimport threading\r\n# from array import array\r\n\r\n\r\ndef copy_back_and_forth(b, a, count):\r\n    b.wait()\r\n    for _ in range(count):\r\n        a[0] = a[1]\r\n        a[1] = a[0]\r\n\r\n\r\ndef check(funcs, *args):\r\n    barrier = threading.Barrier(len(funcs))\r\n    thrds = []\r\n\r\n    for func in funcs:\r\n        thrd = threading.Thread(target=func, args=(barrier, *args))\r\n\r\n        thrds.append(thrd)\r\n        thrd.start()\r\n\r\n    for thrd in thrds:\r\n        thrd.join()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    check([copy_back_and_forth] * 10, [0, 1], 100)\r\n    # check([copy_back_and_forth] * 10, array('i', [0, 1]), 100)  # currently shut up by atomics in get/set\r\n```\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2703672659/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2703683424",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2703683424",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2703683424,
          "node_id": "IC_kwDOBN0Z8c6hJu9g",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T12:16:10Z",
          "updated_at": "2025-03-06T12:16:10Z",
          "author_association": "MEMBER",
          "body": "Are you using the [TSan suppressions](https://github.com/python/cpython/blob/main/Tools/tsan/suppressions_free_threading.txt)?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2703683424/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2703684496",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2703684496",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2703684496,
          "node_id": "IC_kwDOBN0Z8c6hJvOQ",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T12:16:38Z",
          "updated_at": "2025-03-06T12:51:45Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Are you using the [TSan suppressions](https://github.com/python/cpython/blob/main/Tools/tsan/suppressions_free_threading.txt)?\r\n\r\nYes. And also no warnings if you run for fewer iterations.\r\n\r\nList tsan warnings:\r\n```\r\nWARNING: ThreadSanitizer: data race (pid=20569)\r\n  Atomic read of size 8 at 0x7fd6062b6260 by thread T1:\r\n    #0 __tsan_atomic64_load ../../../../src/libsanitizer/tsan/tsan_interface_atomic.cpp:539 (libtsan.so.0+0x7fe0e)\r\n    #1 _Py_atomic_load_ptr Include/cpython/pyatomic_gcc.h:300 (python+0x20433f)\r\n    #2 _Py_TryXGetRef Include/internal/pycore_object.h:649 (python+0x20433f)\r\n    #3 list_get_item_ref Objects/listobject.c:364 (python+0x20433f)\r\n    #4 _PyList_GetItemRef Objects/listobject.c:415 (python+0x20a558)\r\n    #5 _PyEval_EvalFrameDefault Python/generated_cases.c.h:686 (python+0x41e883)\r\n    #6 _PyEval_EvalFrame Include/internal/pycore_ceval.h:116 (python+0x46da0b)\r\n    #7 _PyEval_Vector Python/ceval.c:1820 (python+0x46da0b)\r\n    #8 _PyFunction_Vectorcall Objects/call.c:413 (python+0x188eb4)\r\n    #9 _PyObject_VectorcallTstate Include/internal/pycore_call.h:167 (python+0x190b2c)\r\n    #10 method_vectorcall Objects/classobject.c:72 (python+0x190b2c)\r\n    #11 _PyVectorcall_Call Objects/call.c:273 (python+0x18c9a7)\r\n    #12 _PyObject_Call Objects/call.c:348 (python+0x18ce9f)\r\n    #13 PyObject_Call Objects/call.c:373 (python+0x18cf24)\r\n    #14 thread_run Modules/_threadmodule.c:354 (python+0x6689d4)\r\n    #15 pythread_wrapper Python/thread_pthread.h:242 (python+0x57d02b)\r\n\r\n  Previous write of size 8 at 0x7fd6062b6260 by thread T10:\r\n    #0 PyList_SET_ITEM Include/cpython/listobject.h:47 (python+0x40aa2c)\r\n    #1 _PyEval_EvalFrameDefault Python/generated_cases.c.h:11260 (python+0x466bd8)\r\n    #2 _PyEval_EvalFrame Include/internal/pycore_ceval.h:116 (python+0x46da0b)\r\n    #3 _PyEval_Vector Python/ceval.c:1820 (python+0x46da0b)\r\n    #4 _PyFunction_Vectorcall Objects/call.c:413 (python+0x188eb4)\r\n    #5 _PyObject_VectorcallTstate Include/internal/pycore_call.h:167 (python+0x190b2c)\r\n    #6 method_vectorcall Objects/classobject.c:72 (python+0x190b2c)\r\n    #7 _PyVectorcall_Call Objects/call.c:273 (python+0x18c9a7)\r\n    #8 _PyObject_Call Objects/call.c:348 (python+0x18ce9f)\r\n    #9 PyObject_Call Objects/call.c:373 (python+0x18cf24)\r\n    #10 thread_run Modules/_threadmodule.c:354 (python+0x6689d4)\r\n    #11 pythread_wrapper Python/thread_pthread.h:242 (python+0x57d02b)\r\n```\r\nTo be clear, I am not saying this is an error in `list`, but rather expected correct behavior.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2703684496/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2704151267",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2704151267",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2704151267,
          "node_id": "IC_kwDOBN0Z8c6hLhLj",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T15:18:37Z",
          "updated_at": "2025-03-06T15:18:37Z",
          "author_association": "CONTRIBUTOR",
          "body": "- Yes, that's a bug in the `STORE_SUBSCR_LIST_INT` code. You can file an issue with data race warning.\r\n- Atomic reads and writes with `memory_order_releaxed` have no [ordering or synchronization](https://en.cppreference.com/w/cpp/atomic/memory_order#:~:text=synchronization%20or%20ordering%20constraints), but they are not data races by [definition](https://en.cppreference.com/w/cpp/language/multithread#:~:text=both%20conflicting%20evaluations%20are%20atomic%20operations).\r\n- Don't use explicit memory fences. They're more complicated then using atomic operations, TSAN doesn't handle them, and I don't think they're necessary here.\r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2704151267/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2704159438",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2704159438",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2704159438,
          "node_id": "IC_kwDOBN0Z8c6hLjLO",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T15:21:26Z",
          "updated_at": "2025-03-06T15:21:26Z",
          "author_association": "CONTRIBUTOR",
          "body": "> * Yes, that's a bug in the `STORE_SUBSCR_LIST_INT` code. You can file an issue with data race warning.\r\n> * Atomic reads and writes with `memory_order_releaxed` have no [ordering or synchronization](https://en.cppreference.com/w/cpp/atomic/memory_order#:~:text=synchronization%20or%20ordering%20constraints), but they are not data races by [definition](https://en.cppreference.com/w/cpp/language/multithread#:~:text=both%20conflicting%20evaluations%20are%20atomic%20operations).\r\n> * Don't use explicit memory fences. They're more complicated then using atomic operations, TSAN doesn't handle them, and I don't think they're necessary here.\r\n\r\nI don't think the memory fence is necessary either, but doesn't hurt. Will remove anyway. Point is, are you sure its a bug. Would you not expect tsan to complain with lock-free operation?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2704159438/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2704204711",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2704204711",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2704204711,
          "node_id": "IC_kwDOBN0Z8c6hLuOn",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T15:37:28Z",
          "updated_at": "2025-03-06T15:37:28Z",
          "author_association": "CONTRIBUTOR",
          "body": "Yes, it's a bug because it's a data race and [data races are undefined behavior](https://en.cppreference.com/w/cpp/language/multithread#:~:text=If%20a%20data%20race%20occurs%2C%20the%20behavior%20of%20the%20program%20is%20undefined.). More concretely, it's important that we write the list element with at least `memory_order_release` so that any previously written  contents of `PyObject` are visible before the write to the list. In general, we want to avoid undefined behavior in C even when if it doesn't necessarily lead to noticeable change in program behavior.\r\n\r\n> Would you not expect tsan to complain with lock-free operation?\r\n\r\nYou need to use atomic operations with the appropriate memory order. In some cases, `memory_order_relaxed` is sufficient, such as for the elements of array. Atomic loads and stores with `memory_order_relaxed` compile to plain machine load and store instructions on every architecture [^1].\r\n\r\n[^1]: Assuming normal data sizes, etc.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2704204711/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2704258593",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2704258593",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2704258593,
          "node_id": "IC_kwDOBN0Z8c6hL7Yh",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T15:57:17Z",
          "updated_at": "2025-03-06T15:57:17Z",
          "author_association": "MEMBER",
          "body": "Don't we want acquire ordering, not release? That's what I originally suggested before the impl switched to relaxed.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2704258593/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2704264295",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2704264295",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2704264295,
          "node_id": "IC_kwDOBN0Z8c6hL8xn",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T15:59:14Z",
          "updated_at": "2025-03-06T15:59:14Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Don't we want acquire ordering, not release? That's what I originally suggested before the impl switched to relaxed.\r\n\r\nYes you were right about that one, but he's talking about writing the list element in `STORE_SUBSCR_LIST_INT`.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2704264295/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2704340381",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2704340381",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2704340381,
          "node_id": "IC_kwDOBN0Z8c6hMPWd",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T16:27:26Z",
          "updated_at": "2025-03-06T16:27:26Z",
          "author_association": "CONTRIBUTOR",
          "body": "> * Yes, that's a bug in the `STORE_SUBSCR_LIST_INT` code. You can file an issue with data race warning.\r\n\r\nIssue posted #130920.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2704340381/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2705102401",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2705102401",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2705102401,
          "node_id": "IC_kwDOBN0Z8c6hPJZB",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-06T22:41:22Z",
          "updated_at": "2025-03-06T23:13:48Z",
          "author_association": "CONTRIBUTOR",
          "body": "So if you insist on appeasing the tsan gods then as far as I can see its either this or locked `ass_subscr` / `ass_item` because otherwise random writes keep landing in the middle of non-atomic `memcpy`. Or could spinlock it... Luckily statically linked they are both fast. For the record `list` has all writes locked.\r\n\r\nRelevant timings:\r\n```\r\n### scimark_fft ###\r\nWITHGIL: Mean +- std dev: 200 ms +- 6 ms\r\nOLD:     Mean +- std dev: 238 ms +- 7 ms\r\n...\r\nAMEMCPY: Mean +- std dev: 226 ms +- 6 ms   # atomic item copy on resize (instead of memcpy)\r\nAMEMCPY: Mean +- std dev: 222 ms +- 5 ms   # build and run again\r\nLOCKWR:  Mean +- std dev: 226 ms +- 4 ms   # locked writes again, but much better with static linking\r\nLOCKWR:  Mean +- std dev: 226 ms +- 5 ms   # build and run again\r\n```\r\nNote: This instead of locked writes could have data integrity isssues.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2705102401/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2712061191",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2712061191",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2712061191,
          "node_id": "IC_kwDOBN0Z8c6hpsUH",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-10T23:18:49Z",
          "updated_at": "2025-03-10T23:18:49Z",
          "author_association": "CONTRIBUTOR",
          "body": "Funny thing, TSAN doesn't complain if you atomically write chars in one thread and atomically read int64s in another, and vice versa, as long as its all written atomically. Alows optimization of \"atomic memcpy\" of smaller elements to use larger element copies, leading to the following performance improvement:\r\n\r\n```\r\nnon-atomic memcpy:\r\n  0.044028882002749015\r\n  0.044700402999296784\r\n  0.04466814400075236\r\n  0.04454725100367796\r\n  0.04401889700238826\r\n\r\natomic byte copy:\r\n  0.048465549996763\r\n  0.04840844099817332\r\n  0.04901572599919746\r\n  0.04825975900166668\r\n  0.04838893200212624\r\n\r\natomic aggregate copy:\r\n  0.044760226002836134\r\n  0.04449189099977957\r\n  0.04424205699615413\r\n  0.04455110400158446\r\n  0.04446567200648133\r\n```\r\n\r\nTiming script:\r\n```\r\nprint(timeit('a.append(2)', 'a = array(\"b\", [1]*40_000_000)', number=1_000_000, globals=globals()))  # append() causes resize and memcpy\r\n```\r\n\r\nNote that this `_Py_atomic_source_memcpy_relaxed()` is what I am referring to in #130977. Enforcing alignment for guaranteed atomicity on all platforms. Still some other `mem` functions to do.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2712061191/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2714626003",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2714626003",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2714626003,
          "node_id": "IC_kwDOBN0Z8c6hzefT",
          "user": {
            "login": "colesbury",
            "id": 655866,
            "node_id": "MDQ6VXNlcjY1NTg2Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/655866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colesbury",
            "html_url": "https://github.com/colesbury",
            "followers_url": "https://api.github.com/users/colesbury/followers",
            "following_url": "https://api.github.com/users/colesbury/following{/other_user}",
            "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions",
            "organizations_url": "https://api.github.com/users/colesbury/orgs",
            "repos_url": "https://api.github.com/users/colesbury/repos",
            "events_url": "https://api.github.com/users/colesbury/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colesbury/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-11T14:50:38Z",
          "updated_at": "2025-03-11T14:50:38Z",
          "author_association": "CONTRIBUTOR",
          "body": "Here are some high level thoughts:\r\n\r\n* Currently, only a small subset of tests run under TSAN, but I want to get to the point where the entire test suite runs under TSAN without warnings. If necessary, we can split up the newly added tests and skip the ones under TSAN that would issue warnings.\r\n* The main thread-safety benefit here is related to resizing the array concurrently with other operations. That needs to be correct and use the appropriate memory orderings. Without it, you can end up with crashes.\r\n* I care a lot less about data races when reading and writing elements of the array. If we can avoid them with judicious use of relaxed loads and stores, then that's fine, but I don't want to go overboard. In particular, I think it's fine if users get TSAN warnings if they have racy code that reads and writes the same array concurrently. This is a different case than `list` because the elements of `array` are not objects, and `array` is not nearly as fundamental a type in Python as `list` is.\r\n* I don't want to deal with a complicated atomic memcpy at this point.\r\n* We should be careful not to regress performance here.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2714626003/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2715100202",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2715100202",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2715100202,
          "node_id": "IC_kwDOBN0Z8c6h1SQq",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-11T17:06:10Z",
          "updated_at": "2025-03-11T17:15:33Z",
          "author_association": "CONTRIBUTOR",
          "body": "## TL;DR: \r\n\r\nIf you are fine with data race on resize (due to memcpy from current array buffer to new array buffer not being atomic), then this PR is ready to go (or at least review and benchmark properly). If you want to eliminate race on resize then its either atomic memcpy or locked writes.\r\n\r\n### With respect to this this PR:\r\n\r\n> I don't want to deal with a complicated atomic memcpy at this point.\r\n\r\nThat's fine, I only added it because I was under the impression you wanted to eliminate ALL data races. Removed.\r\n\r\n> The main thread-safety benefit here is related to resizing the array concurrently with other operations.\r\n\r\nData race on memcpy or no, I am fairly confident the resize here happens correctly. New `arraydata` is stored when ready after resize with release ordering and loaded for use with acquire ordering in both individual element lock-free get and set. All other accesses for other operations are locked like resize is. I've also been stress testing this constantly in the background and haven't run into anything so far for what that's worth. To be concise, the following operations are lock-free, all others are locked:\r\n\r\n* `array_item`\r\n* `array_ass_item` - when its an assign and not a delete\r\n* `array_subscr` - when its a single element access and not a slice\r\n* `array_ass_subscr` - when its a single element replacing assign and not a delete or slice\r\n\r\n> I care a lot less about data races when reading and writing elements of the array. If we can avoid them with judicious use of relaxed loads and stores, then that's fine,\r\n\r\nSo ... Seeing as the elementwise atomic reads / writes as they are here don't appear to affect performance I would say they are fine to leave in.\r\n\r\n### Other points:\r\n\r\n> We should be careful not to regress performance here.\r\n\r\nEDIT: If you mean vs. non-free-thread-safe, updated scimark numbers are in header of this PR.\r\n\r\nI was surprised that the aggregate atomic memcpy had the same performance as vanilla memcpy (at least according to the quick timings I did). For reference the atomic memcpy inner loop compiled to the asm below, and the code preceding it appears to align this block to a cache line:\r\n\r\n```\r\n.L733:\r\n\tmov\tr11, QWORD PTR [rdi]\r\n\tadd\trsi, 64\t# dest,\r\n\tadd\trdi, 64\t# src,\r\n\tmov\tQWORD PTR -64[rsi], r11\r\n\tmov\tr8, QWORD PTR -56[rdi]\r\n\tmov\tQWORD PTR -56[rsi], r8\r\n\tmov\tr11, QWORD PTR -48[rdi]\r\n\tmov\tQWORD PTR -48[rsi], r11\r\n\tmov\tr8, QWORD PTR -40[rdi]\r\n\tmov\tQWORD PTR -40[rsi], r8\r\n\tmov\tr11, QWORD PTR -32[rdi]\r\n\tmov\tQWORD PTR -32[rsi], r11\r\n\tmov\tr8, QWORD PTR -24[rdi]\r\n\tmov\tQWORD PTR -24[rsi], r8\r\n\tmov\tr11, QWORD PTR -16[rdi]\r\n\tmov\tQWORD PTR -16[rsi], r11\r\n\tmov\tr8, QWORD PTR -8[rdi]\r\n\tmov\tQWORD PTR -8[rsi], r8\r\n\tcmp\tr10, rsi\r\n\tja\t.L733\r\n```\r\n\r\nSo maybe performance not a worry with that when/if decide to do atomic memory ops eventually.\r\n\r\n> Currently, only a small subset of tests run under TSAN, but I want to get to the point where the entire test suite runs under TSAN without warnings. If necessary, we can split up the newly added tests and skip the ones under TSAN that would issue warnings.\r\n\r\nWrt tests added here, that big blob of tests in `test_free_threading` is for data integrity, not data races. The data race tests added in `test_free_threading_tsan` are only ones that I know to be safe from races (note the ones commented out after removing atomic memcpy). Did you want to add more that may race and separate them?\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2715100202/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2721454554",
          "html_url": "https://github.com/python/cpython/pull/130771#issuecomment-2721454554",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/130771",
          "id": 2721454554,
          "node_id": "IC_kwDOBN0Z8c6iNhna",
          "user": {
            "login": "tom-pytel",
            "id": 51921719,
            "node_id": "MDQ6VXNlcjUxOTIxNzE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/51921719?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tom-pytel",
            "html_url": "https://github.com/tom-pytel",
            "followers_url": "https://api.github.com/users/tom-pytel/followers",
            "following_url": "https://api.github.com/users/tom-pytel/following{/other_user}",
            "gists_url": "https://api.github.com/users/tom-pytel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tom-pytel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tom-pytel/subscriptions",
            "organizations_url": "https://api.github.com/users/tom-pytel/orgs",
            "repos_url": "https://api.github.com/users/tom-pytel/repos",
            "events_url": "https://api.github.com/users/tom-pytel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tom-pytel/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-13T14:25:17Z",
          "updated_at": "2025-03-13T14:25:17Z",
          "author_association": "CONTRIBUTOR",
          "body": "In the meantime, is there any particular test or module which needs attention for your clean tsan project or just everything?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2721454554/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/129607",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/129607/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/129607/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/129607/events",
      "html_url": "https://github.com/python/cpython/pull/129607",
      "id": 2826874852,
      "node_id": "PR_kwDOBN0Z8c6J0LLI",
      "number": 129607,
      "title": "gh-85162: Add HTTPSServer to http.server ",
      "user": {
        "login": "donBarbos",
        "id": 47272787,
        "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donBarbos",
        "html_url": "https://github.com/donBarbos",
        "followers_url": "https://api.github.com/users/donBarbos/followers",
        "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
        "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
        "organizations_url": "https://api.github.com/users/donBarbos/orgs",
        "repos_url": "https://api.github.com/users/donBarbos/repos",
        "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
        "received_events_url": "https://api.github.com/users/donBarbos/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [],
      "state": "closed",
      "locked": false,
      "assignee": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "picnixz",
          "id": 10796600,
          "node_id": "MDQ6VXNlcjEwNzk2NjAw",
          "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/picnixz",
          "html_url": "https://github.com/picnixz",
          "followers_url": "https://api.github.com/users/picnixz/followers",
          "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
          "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
          "organizations_url": "https://api.github.com/users/picnixz/orgs",
          "repos_url": "https://api.github.com/users/picnixz/repos",
          "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/picnixz/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 15,
      "created_at": "2025-02-03T09:10:44Z",
      "updated_at": "2025-04-05T09:53:55Z",
      "closed_at": "2025-04-05T08:49:49Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/129607",
        "html_url": "https://github.com/python/cpython/pull/129607",
        "diff_url": "https://github.com/python/cpython/pull/129607.diff",
        "patch_url": "https://github.com/python/cpython/pull/129607.patch",
        "merged_at": "2025-04-05T08:49:49Z"
      },
      "body": "I decided to resume the work on the implementation of HTTPS server in `http.server` module.\r\nI am ready to respond in time and make changes :-)\r\n\r\nI'm opening a new PR because this #20923 had been clearly abandoned.\r\n\r\nI took the liberty of defining a single style in `Lib/http/server.py` file, otherwise everything would have been completely confusing.\r\n\r\ncc @tiran @remilapeyre @jaswdr\r\n(who was involved with the previous PR)\r\n\r\n<!-- gh-issue-number: gh-85162 -->\r\n* Issue: gh-85162\r\n<!-- /gh-issue-number -->\r\n\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\r\n\ud83d\udcda Documentation preview \ud83d\udcda: https://cpython-previews--129607.org.readthedocs.build/\r\n\r\n<!-- readthedocs-preview cpython-previews end -->",
      "closed_by": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/129607/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/129607/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2631098773",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2631098773",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2631098773,
          "node_id": "IC_kwDOBN0Z8c6c02GV",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-03T14:05:20Z",
          "updated_at": "2025-02-03T14:05:20Z",
          "author_association": "NONE",
          "body": "<!-- changes-requested -->\nA Python core developer has requested some changes be made to your pull request before we can consider merging it. If you could please address their requests along with any other requests in other reviews from core developers that would be appreciated.\n\nOnce you have made the requested changes, please leave a comment on this pull request containing the phrase `I have made the requested changes; please review again`. I will then notify any core developers who have left a review that you're ready for them to take another look at this pull request.\n<!-- /changes-requested -->\n\n\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2631098773/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2631130125",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2631130125",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2631130125,
          "node_id": "IC_kwDOBN0Z8c6c09wN",
          "user": {
            "login": "donBarbos",
            "id": 47272787,
            "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/donBarbos",
            "html_url": "https://github.com/donBarbos",
            "followers_url": "https://api.github.com/users/donBarbos/followers",
            "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
            "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
            "organizations_url": "https://api.github.com/users/donBarbos/orgs",
            "repos_url": "https://api.github.com/users/donBarbos/repos",
            "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/donBarbos/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-03T14:17:27Z",
          "updated_at": "2025-02-03T14:17:27Z",
          "author_association": "CONTRIBUTOR",
          "body": "I have made the requested changes; please review again",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2631130125/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2631130344",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2631130344",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2631130344,
          "node_id": "IC_kwDOBN0Z8c6c09zo",
          "user": {
            "login": "bedevere-app[bot]",
            "id": 144688460,
            "node_id": "BOT_kgDOCJ_FTA",
            "avatar_url": "https://avatars.githubusercontent.com/in/388350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bedevere-app%5Bbot%5D",
            "html_url": "https://github.com/apps/bedevere-app",
            "followers_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bedevere-app%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-03T14:17:32Z",
          "updated_at": "2025-02-03T14:17:32Z",
          "author_association": "NONE",
          "body": "Thanks for making the requested changes!\n\n@picnixz: please review the changes made to this pull request.\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2631130344/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": {
            "id": 388350,
            "client_id": "Iv1.67e0d657f9e6ea3c",
            "slug": "bedevere-app",
            "node_id": "A_kwHOABdI3c4ABez-",
            "owner": {
              "login": "python",
              "id": 1525981,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1MjU5ODE=",
              "avatar_url": "https://avatars.githubusercontent.com/u/1525981?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/python",
              "html_url": "https://github.com/python",
              "followers_url": "https://api.github.com/users/python/followers",
              "following_url": "https://api.github.com/users/python/following{/other_user}",
              "gists_url": "https://api.github.com/users/python/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/python/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/python/subscriptions",
              "organizations_url": "https://api.github.com/users/python/orgs",
              "repos_url": "https://api.github.com/users/python/repos",
              "events_url": "https://api.github.com/users/python/events{/privacy}",
              "received_events_url": "https://api.github.com/users/python/received_events",
              "type": "Organization",
              "user_view_type": "public",
              "site_admin": false
            },
            "name": "bedevere-app",
            "description": "This bot is meant to help identify issues with a CPython pull request.",
            "external_url": "https://github.com/python/bedevere",
            "html_url": "https://github.com/apps/bedevere-app",
            "created_at": "2023-09-11T12:01:43Z",
            "updated_at": "2024-02-29T20:58:33Z",
            "permissions": {
              "issues": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "write"
            },
            "events": [
              "issues",
              "issue_comment",
              "pull_request",
              "pull_request_review",
              "repository"
            ]
          }
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2631440707",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2631440707",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2631440707,
          "node_id": "IC_kwDOBN0Z8c6c2JlD",
          "user": {
            "login": "donBarbos",
            "id": 47272787,
            "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/donBarbos",
            "html_url": "https://github.com/donBarbos",
            "followers_url": "https://api.github.com/users/donBarbos/followers",
            "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
            "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
            "organizations_url": "https://api.github.com/users/donBarbos/orgs",
            "repos_url": "https://api.github.com/users/donBarbos/repos",
            "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/donBarbos/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-03T16:10:17Z",
          "updated_at": "2025-02-03T16:13:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "@picnixz\r\nInitially, I was guided by the comment left by @tiran in the previous PR:\r\nhttps://github.com/python/cpython/pull/20923#pullrequestreview-432294582\r\n\r\nI don't want to change the HTTP server interface and overcomplicate it. I also think this matches the principle of separation of responsibilities.\r\n\r\nbut I'm open to discussion ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2631440707/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2631463003",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2631463003",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2631463003,
          "node_id": "IC_kwDOBN0Z8c6c2PBb",
          "user": {
            "login": "picnixz",
            "id": 10796600,
            "node_id": "MDQ6VXNlcjEwNzk2NjAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/picnixz",
            "html_url": "https://github.com/picnixz",
            "followers_url": "https://api.github.com/users/picnixz/followers",
            "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
            "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
            "organizations_url": "https://api.github.com/users/picnixz/orgs",
            "repos_url": "https://api.github.com/users/picnixz/repos",
            "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/picnixz/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-03T16:19:04Z",
          "updated_at": "2025-02-03T16:19:04Z",
          "author_association": "MEMBER",
          "body": "Ok for a separate class but whether it should be a subclass or not is something I don't know if we should do. I don't know which layout will be the best one in the long term (for now let's keep it as a subclass).\n\nI don't think I have thought enough about the broader implications so I will hold future reviews for now. I think I need another opinion on this interface (btw, I'm not sure tiran is still active actually, hence the reason why I requested gpshead's opinion).",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2631463003/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2632117170",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2632117170",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2632117170,
          "node_id": "IC_kwDOBN0Z8c6c4uuy",
          "user": {
            "login": "donBarbos",
            "id": 47272787,
            "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/donBarbos",
            "html_url": "https://github.com/donBarbos",
            "followers_url": "https://api.github.com/users/donBarbos/followers",
            "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
            "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
            "organizations_url": "https://api.github.com/users/donBarbos/orgs",
            "repos_url": "https://api.github.com/users/donBarbos/repos",
            "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/donBarbos/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-03T21:29:10Z",
          "updated_at": "2025-02-03T21:29:10Z",
          "author_association": "CONTRIBUTOR",
          "body": "I think it's important to add this because there are many useful use cases.\nall such people first go to the documentation before opening an issue.\n\nAnd I don't see any reason why they would open an issue if they were already familiar with the concept of `http.server`",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2632117170/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2633276340",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2633276340",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2633276340,
          "node_id": "IC_kwDOBN0Z8c6c9Ju0",
          "user": {
            "login": "picnixz",
            "id": 10796600,
            "node_id": "MDQ6VXNlcjEwNzk2NjAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/picnixz",
            "html_url": "https://github.com/picnixz",
            "followers_url": "https://api.github.com/users/picnixz/followers",
            "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
            "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
            "organizations_url": "https://api.github.com/users/picnixz/orgs",
            "repos_url": "https://api.github.com/users/picnixz/repos",
            "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/picnixz/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-04T09:02:15Z",
          "updated_at": "2025-02-04T09:02:15Z",
          "author_association": "MEMBER",
          "body": "I will review some wording when I'm on a laptop (namely this weekend). And will do a more thorough review as well.\n\nConcerning the usefulnes of this, I would say it could be useful for testing stuff related to SSL. It vould be useful to check if a certificate could be correctly used, or for providing HTTPS servers in tests. Maybe we could use it in our own test suite as well? ",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2633276340/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2633285914",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2633285914",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2633285914,
          "node_id": "IC_kwDOBN0Z8c6c9MEa",
          "user": {
            "login": "donBarbos",
            "id": 47272787,
            "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/donBarbos",
            "html_url": "https://github.com/donBarbos",
            "followers_url": "https://api.github.com/users/donBarbos/followers",
            "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
            "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
            "organizations_url": "https://api.github.com/users/donBarbos/orgs",
            "repos_url": "https://api.github.com/users/donBarbos/repos",
            "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/donBarbos/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-04T09:06:26Z",
          "updated_at": "2025-02-09T23:05:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "@picnixz \r\n> Concerning the usefulnes of this, I would say it could be useful for testing stuff related to SSL. It vould be useful to check if a certificate could be correctly used, or for providing HTTPS servers in tests. Maybe we could use it in our own test suite as well? \r\n\r\nI'll try to add these new test cases soon, I look forward to your review :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2633285914/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2660886029",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2660886029",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2660886029,
          "node_id": "IC_kwDOBN0Z8c6emeYN",
          "user": {
            "login": "donBarbos",
            "id": 47272787,
            "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/donBarbos",
            "html_url": "https://github.com/donBarbos",
            "followers_url": "https://api.github.com/users/donBarbos/followers",
            "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
            "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
            "organizations_url": "https://api.github.com/users/donBarbos/orgs",
            "repos_url": "https://api.github.com/users/donBarbos/repos",
            "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/donBarbos/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-15T11:47:34Z",
          "updated_at": "2025-02-15T11:47:34Z",
          "author_association": "CONTRIBUTOR",
          "body": "@picnixz sorry for ping. but could you make review? I hope you have some free time this weekend :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2660886029/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2661032517",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2661032517",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2661032517,
          "node_id": "IC_kwDOBN0Z8c6enCJF",
          "user": {
            "login": "donBarbos",
            "id": 47272787,
            "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/donBarbos",
            "html_url": "https://github.com/donBarbos",
            "followers_url": "https://api.github.com/users/donBarbos/followers",
            "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
            "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
            "organizations_url": "https://api.github.com/users/donBarbos/orgs",
            "repos_url": "https://api.github.com/users/donBarbos/repos",
            "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/donBarbos/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-15T18:17:04Z",
          "updated_at": "2025-02-15T18:17:04Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Do we have tests for the command-line?\r\n\r\nsorry, i didn't find them (we don't have at least for the `http.server`)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2661032517/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2661032824",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2661032824",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2661032824,
          "node_id": "IC_kwDOBN0Z8c6enCN4",
          "user": {
            "login": "picnixz",
            "id": 10796600,
            "node_id": "MDQ6VXNlcjEwNzk2NjAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/picnixz",
            "html_url": "https://github.com/picnixz",
            "followers_url": "https://api.github.com/users/picnixz/followers",
            "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
            "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
            "organizations_url": "https://api.github.com/users/picnixz/orgs",
            "repos_url": "https://api.github.com/users/picnixz/repos",
            "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/picnixz/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-15T18:17:55Z",
          "updated_at": "2025-02-15T18:18:10Z",
          "author_association": "MEMBER",
          "body": "> sorry, i didn't find them (we don't have at least for the http.server)\r\n\r\nFollow-up PR if you want, otherwise, we can create an issue for that for someone else. Or just don't test anything (but without an issue, I will forget about it, or maybe not)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2661032824/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2661044974",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2661044974",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2661044974,
          "node_id": "IC_kwDOBN0Z8c6enFLu",
          "user": {
            "login": "donBarbos",
            "id": 47272787,
            "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/donBarbos",
            "html_url": "https://github.com/donBarbos",
            "followers_url": "https://api.github.com/users/donBarbos/followers",
            "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
            "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
            "organizations_url": "https://api.github.com/users/donBarbos/orgs",
            "repos_url": "https://api.github.com/users/donBarbos/repos",
            "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/donBarbos/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-15T18:52:50Z",
          "updated_at": "2025-02-15T18:52:50Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Follow-up PR if you want, otherwise, we can create an issue for that for someone else. Or just don't test anything (but without an issue, I will forget about it, or maybe not)\r\n\r\nI will definitely open this issue but a little later (I won't forget it :)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2661044974/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2705507984",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2705507984",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2705507984,
          "node_id": "IC_kwDOBN0Z8c6hQsaQ",
          "user": {
            "login": "donBarbos",
            "id": 47272787,
            "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/donBarbos",
            "html_url": "https://github.com/donBarbos",
            "followers_url": "https://api.github.com/users/donBarbos/followers",
            "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
            "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
            "organizations_url": "https://api.github.com/users/donBarbos/orgs",
            "repos_url": "https://api.github.com/users/donBarbos/repos",
            "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/donBarbos/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-07T04:35:47Z",
          "updated_at": "2025-03-07T04:35:47Z",
          "author_association": "CONTRIBUTOR",
          "body": "@gpshead what do you think now about the merge of this PR?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2705507984/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2779908172",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2779908172",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2779908172,
          "node_id": "IC_kwDOBN0Z8c6lsghM",
          "user": {
            "login": "picnixz",
            "id": 10796600,
            "node_id": "MDQ6VXNlcjEwNzk2NjAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/picnixz",
            "html_url": "https://github.com/picnixz",
            "followers_url": "https://api.github.com/users/picnixz/followers",
            "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
            "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
            "organizations_url": "https://api.github.com/users/picnixz/orgs",
            "repos_url": "https://api.github.com/users/picnixz/repos",
            "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/picnixz/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-04T23:44:02Z",
          "updated_at": "2025-04-04T23:44:02Z",
          "author_association": "MEMBER",
          "body": "I'll let it open a few days so that @gpshead can have a look, else I'll merge this before the end of the week.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2779908172/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2780605068",
          "html_url": "https://github.com/python/cpython/pull/129607#issuecomment-2780605068",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/129607",
          "id": 2780605068,
          "node_id": "IC_kwDOBN0Z8c6lvKqM",
          "user": {
            "login": "donBarbos",
            "id": 47272787,
            "node_id": "MDQ6VXNlcjQ3MjcyNzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/47272787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/donBarbos",
            "html_url": "https://github.com/donBarbos",
            "followers_url": "https://api.github.com/users/donBarbos/followers",
            "following_url": "https://api.github.com/users/donBarbos/following{/other_user}",
            "gists_url": "https://api.github.com/users/donBarbos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/donBarbos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/donBarbos/subscriptions",
            "organizations_url": "https://api.github.com/users/donBarbos/orgs",
            "repos_url": "https://api.github.com/users/donBarbos/repos",
            "events_url": "https://api.github.com/users/donBarbos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/donBarbos/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-04-05T08:58:21Z",
          "updated_at": "2025-04-05T08:58:21Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks a lot everyone",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2780605068/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    },
    {
      "url": "https://api.github.com/repos/python/cpython/issues/125962",
      "repository_url": "https://api.github.com/repos/python/cpython",
      "labels_url": "https://api.github.com/repos/python/cpython/issues/125962/labels{/name}",
      "comments_url": "https://api.github.com/repos/python/cpython/issues/125962/comments",
      "events_url": "https://api.github.com/repos/python/cpython/issues/125962/events",
      "html_url": "https://github.com/python/cpython/pull/125962",
      "id": 2613387563,
      "node_id": "PR_kwDOBN0Z8c5_3gW_",
      "number": 125962,
      "title": "gh-75459: Doc: C API: Improve object life cycle documentation",
      "user": {
        "login": "rhansen",
        "id": 1612291,
        "node_id": "MDQ6VXNlcjE2MTIyOTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1612291?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rhansen",
        "html_url": "https://github.com/rhansen",
        "followers_url": "https://api.github.com/users/rhansen/followers",
        "following_url": "https://api.github.com/users/rhansen/following{/other_user}",
        "gists_url": "https://api.github.com/users/rhansen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rhansen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rhansen/subscriptions",
        "organizations_url": "https://api.github.com/users/rhansen/orgs",
        "repos_url": "https://api.github.com/users/rhansen/repos",
        "events_url": "https://api.github.com/users/rhansen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rhansen/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "labels": [
        {
          "id": 538516109,
          "node_id": "MDU6TGFiZWw1Mzg1MTYxMDk=",
          "url": "https://api.github.com/repos/python/cpython/labels/docs",
          "name": "docs",
          "color": "09fc59",
          "default": false,
          "description": "Documentation in the Doc dir"
        },
        {
          "id": 667924166,
          "node_id": "MDU6TGFiZWw2Njc5MjQxNjY=",
          "url": "https://api.github.com/repos/python/cpython/labels/skip%20news",
          "name": "skip news",
          "color": "000000",
          "default": false,
          "description": null
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 27,
      "created_at": "2024-10-25T08:01:38Z",
      "updated_at": "2025-05-20T15:19:50Z",
      "closed_at": "2025-05-20T12:25:50Z",
      "author_association": "CONTRIBUTOR",
      "type": null,
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/python/cpython/pulls/125962",
        "html_url": "https://github.com/python/cpython/pull/125962",
        "diff_url": "https://github.com/python/cpython/pull/125962.diff",
        "patch_url": "https://github.com/python/cpython/pull/125962.patch",
        "merged_at": "2025-05-20T12:25:50Z"
      },
      "body": "  * Add \"cyclic isolate\" to the glossary.\r\n  * Add a new \"Object Life Cycle\" page.\r\n    * Illustrate the order of life cycle functions.\r\n    * Document `PyObject_CallFinalizer` and `PyObject_CallFinalizerFromDealloc`.\r\n  * `PyObject_Init` does not call `tp_init`.\r\n  * `PyObject_New`:\r\n    * also initializes the memory\r\n    * does not call `tp_alloc`, `tp_new`, or `tp_init`\r\n    * should not be used for GC-enabled objects\r\n    * memory must be freed by `PyObject_Free`\r\n  * `PyObject_GC_New` memory must be freed by `PyObject_GC_Del`.\r\n  * Warn that garbage collector functions can be called from any thread.\r\n  * `tp_finalize` and `tp_clear`:\r\n    * Only called when there's a cyclic isolate.\r\n    * Only one object in the cyclic isolate is finalized/cleared at a time.\r\n    * Clearly warn that they might not be called.\r\n    * They can optionally be manually called from `tp_dealloc` (via `PyObject_CallFinalizerFromDealloc` in the case of `tp_finalize`).\r\n  * `tp_finalize`:\r\n    * Reference `object.__del__`.\r\n    * The finalizer can resurrect the object.\r\n    * Suggest `PyErr_GetRaisedException` and `PyErr_SetRaisedException` instead of the deprecated `PyErr_Fetch` and `PyErr_Restore` functions.\r\n    * Add links to `PyErr_GetRaisedException` and `PyErr_SetRaisedException`.\r\n    * Suggest using `PyErr_WriteUnraisable` if an exception is raised during finalization.\r\n    * Rename the example function from `local_finalize` to `foo_finalize` for consistency with the `tp_dealloc` documentation and as a hint that the name isn't special.\r\n    * Minor wording and sylistic tweaks.\r\n    * Warn that `tp_finalize` can be called during shutdown.\r\n\r\n<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\ngh-NNNNN: Summary of the changes made\r\n```\r\n\r\nWhere: gh-NNNNN refers to the GitHub issue number.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `main`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `main`.\r\n\r\n-->\r\n\n\n<!-- gh-issue-number: gh-75459 -->\n* Issue: gh-75459\n<!-- /gh-issue-number -->\n\r\n\r\n<!-- readthedocs-preview cpython-previews start -->\r\n----\n\ud83d\udcda Documentation preview \ud83d\udcda: https://cpython-previews--125962.org.readthedocs.build/\n\r\n<!-- readthedocs-preview cpython-previews end -->",
      "closed_by": {
        "login": "encukou",
        "id": 302922,
        "node_id": "MDQ6VXNlcjMwMjkyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/encukou",
        "html_url": "https://github.com/encukou",
        "followers_url": "https://api.github.com/users/encukou/followers",
        "following_url": "https://api.github.com/users/encukou/following{/other_user}",
        "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
        "organizations_url": "https://api.github.com/users/encukou/orgs",
        "repos_url": "https://api.github.com/users/encukou/repos",
        "events_url": "https://api.github.com/users/encukou/events{/privacy}",
        "received_events_url": "https://api.github.com/users/encukou/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "reactions": {
        "url": "https://api.github.com/repos/python/cpython/issues/125962/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/python/cpython/issues/125962/timeline",
      "performed_via_github_app": null,
      "state_reason": null,
      "comments_data": [
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2437149894",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2437149894",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2437149894,
          "node_id": "IC_kwDOBN0Z8c6RQ_TG",
          "user": {
            "login": "rhansen",
            "id": 1612291,
            "node_id": "MDQ6VXNlcjE2MTIyOTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1612291?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhansen",
            "html_url": "https://github.com/rhansen",
            "followers_url": "https://api.github.com/users/rhansen/followers",
            "following_url": "https://api.github.com/users/rhansen/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhansen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhansen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhansen/subscriptions",
            "organizations_url": "https://api.github.com/users/rhansen/orgs",
            "repos_url": "https://api.github.com/users/rhansen/repos",
            "events_url": "https://api.github.com/users/rhansen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhansen/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-25T08:03:12Z",
          "updated_at": "2024-10-25T08:03:12Z",
          "author_association": "CONTRIBUTOR",
          "body": "I'm not familiar enough with CPython's internals to be super confident about these changes.  I would appreciate it if a GC expert would carefully review this.\r\n\r\nThanks!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2437149894/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2437240300",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2437240300",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2437240300,
          "node_id": "IC_kwDOBN0Z8c6RRVXs",
          "user": {
            "login": "hugovk",
            "id": 1324225,
            "node_id": "MDQ6VXNlcjEzMjQyMjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hugovk",
            "html_url": "https://github.com/hugovk",
            "followers_url": "https://api.github.com/users/hugovk/followers",
            "following_url": "https://api.github.com/users/hugovk/following{/other_user}",
            "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions",
            "organizations_url": "https://api.github.com/users/hugovk/orgs",
            "repos_url": "https://api.github.com/users/hugovk/repos",
            "events_url": "https://api.github.com/users/hugovk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hugovk/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-25T08:48:50Z",
          "updated_at": "2024-10-25T08:48:50Z",
          "author_association": "MEMBER",
          "body": "Hmm, I'm not sure if we can require graphviz for the docs.\r\n\r\nWe'd have to consider installing it on the main docs server in addition to Read the Docs, and also make sure the docs can still build without it, for downstream redistributors who might only want to build with \"vanilla\" Sphinx and no extra extensions. Plus other developers would need an easy way to build the docs on their machines.\r\n\r\ncc @AA-Turner \r\n\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2437240300/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2437325950",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2437325950",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2437325950,
          "node_id": "IC_kwDOBN0Z8c6RRqR-",
          "user": {
            "login": "rhansen",
            "id": 1612291,
            "node_id": "MDQ6VXNlcjE2MTIyOTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1612291?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhansen",
            "html_url": "https://github.com/rhansen",
            "followers_url": "https://api.github.com/users/rhansen/followers",
            "following_url": "https://api.github.com/users/rhansen/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhansen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhansen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhansen/subscriptions",
            "organizations_url": "https://api.github.com/users/rhansen/orgs",
            "repos_url": "https://api.github.com/users/rhansen/repos",
            "events_url": "https://api.github.com/users/rhansen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhansen/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-25T09:30:48Z",
          "updated_at": "2024-10-25T09:30:48Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Hmm, I'm not sure if we can require graphviz for the docs.\r\n\r\nMaybe I should just commit the generated `.svg` (and the input dot file so it can be revised easily).  Would that be acceptable?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2437325950/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2437366944",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2437366944",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2437366944,
          "node_id": "IC_kwDOBN0Z8c6RR0Sg",
          "user": {
            "login": "rhansen",
            "id": 1612291,
            "node_id": "MDQ6VXNlcjE2MTIyOTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1612291?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhansen",
            "html_url": "https://github.com/rhansen",
            "followers_url": "https://api.github.com/users/rhansen/followers",
            "following_url": "https://api.github.com/users/rhansen/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhansen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhansen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhansen/subscriptions",
            "organizations_url": "https://api.github.com/users/rhansen/orgs",
            "repos_url": "https://api.github.com/users/rhansen/repos",
            "events_url": "https://api.github.com/users/rhansen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhansen/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-25T09:51:39Z",
          "updated_at": "2024-10-25T09:51:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "I committed the generated `.svg` so that the substance of this PR can be reviewed while we figure out if it is acceptable to add graphviz as a dependency.  (Note that `sphinx.ext.graphviz` is a built-in extension, so enabling it doesn't add any new sphinx dependencies.)",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2437366944/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2437373106",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2437373106",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2437373106,
          "node_id": "IC_kwDOBN0Z8c6RR1yy",
          "user": {
            "login": "AA-Turner",
            "id": 9087854,
            "node_id": "MDQ6VXNlcjkwODc4NTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9087854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AA-Turner",
            "html_url": "https://github.com/AA-Turner",
            "followers_url": "https://api.github.com/users/AA-Turner/followers",
            "following_url": "https://api.github.com/users/AA-Turner/following{/other_user}",
            "gists_url": "https://api.github.com/users/AA-Turner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AA-Turner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AA-Turner/subscriptions",
            "organizations_url": "https://api.github.com/users/AA-Turner/orgs",
            "repos_url": "https://api.github.com/users/AA-Turner/repos",
            "events_url": "https://api.github.com/users/AA-Turner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AA-Turner/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-25T09:54:44Z",
          "updated_at": "2024-10-25T09:54:44Z",
          "author_association": "MEMBER",
          "body": "I think that requiring `graphviz` should be fine -- Debian, Fedora, Gentoo, and OpenSUSE all package it. As Richard notes, it's a built-in extension, so should be fine from the \"Vanilla\" perspective.\r\n\r\nI would want to include a NEWS entry to say that `graphviz` is now required to build the docs, though.\r\n\r\nA",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2437373106/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2438388034",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2438388034",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2438388034,
          "node_id": "IC_kwDOBN0Z8c6RVtlC",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-25T17:18:24Z",
          "updated_at": "2024-10-25T17:18:24Z",
          "author_association": "MEMBER",
          "body": "My main concern with documenting nitty-gritty details of the lifecycle is that we're technically documenting implementation details, which are subject to change (and we've been bad at updating these kind of things from version-to-version in past). I suggest the SVG go into the [InternalDocs](https://github.com/python/cpython/tree/main/InternalDocs) folder instead.\r\n\r\nIt's also worth noting here that `tp_finalize` isn't 100% related to garbage collection, it's supposed to be used over `tp_dealloc` if complicated things are being done upon finalization, even for non-GC types. And while we're here, I think it would be a good idea to document the cases that `tp_clear` should exist for a tracked type.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2438388034/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2439395458",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2439395458",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2439395458,
          "node_id": "IC_kwDOBN0Z8c6RZjiC",
          "user": {
            "login": "rhansen",
            "id": 1612291,
            "node_id": "MDQ6VXNlcjE2MTIyOTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1612291?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhansen",
            "html_url": "https://github.com/rhansen",
            "followers_url": "https://api.github.com/users/rhansen/followers",
            "following_url": "https://api.github.com/users/rhansen/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhansen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhansen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhansen/subscriptions",
            "organizations_url": "https://api.github.com/users/rhansen/orgs",
            "repos_url": "https://api.github.com/users/rhansen/repos",
            "events_url": "https://api.github.com/users/rhansen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhansen/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-26T06:42:02Z",
          "updated_at": "2024-10-26T06:42:02Z",
          "author_association": "CONTRIBUTOR",
          "body": "> My main concern with documenting nitty-gritty details of the lifecycle is that we're technically documenting implementation details, which are subject to change (and we've been bad at updating these kind of things from version-to-version in past). I suggest the SVG go into the [InternalDocs](https://github.com/python/cpython/tree/main/InternalDocs) folder instead.\r\n\r\nI don't want to document any implementation details here, so I'm happy to remove what isn't necessary.  It's hard to tell what is and isn't necessary because the end of an object's life is especially fraught with peril.  I think that it is better to err on the side of over-documenting this topic than under-documenting.\r\n\r\nI wrote this PR because there were several things that I needed to know that the existing documentation didn't make clear:\r\n  * The order the `tp_*` functions might be called (to know what invariants are possible).\r\n  * Which threads might execute the functions (for locking correctness).\r\n  * Details about when a function is called (or not) that are necessary for locking correctness.  (e.g., if multiple objects in the same cyclic isolate are never finalized concurrently then a lock-free design might be possible)\r\n  * Approximately how often a `tp_*` function might be called: maybe never, exactly once, at most once, at least once, very frequently, etc.\r\n  * Which other objects might be in an inconsistent state.\r\n\r\n> \r\n> It's also worth noting here that `tp_finalize` isn't 100% related to garbage collection, it's supposed to be used over `tp_dealloc` if complicated things are being done upon finalization, even for non-GC types.\r\n\r\nIf I understand correctly, `tp_finalize` is never called for non-GC types unless the class designer calls it from `tp_dealloc`.  In that case `tp_finalize` is just like any other helper function that might be called from `tp_dealloc`.  (Maybe this is only true for [static types](https://docs.python.org/3.14/c-api/typeobj.html#static-types) and not [heap types](https://docs.python.org/3.14/c-api/typeobj.html#heap-types)?  I don't fully understand the difference.)\r\n\r\n> And while we're here, I think it would be a good idea to document the cases that `tp_clear` should exist for a tracked type.\r\n\r\nI thought that was already sufficiently explained, even before this PR.  Can you explain what you think is lacking?",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2439395458/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2439604005",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2439604005",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2439604005,
          "node_id": "IC_kwDOBN0Z8c6RaWcl",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-10-26T14:33:58Z",
          "updated_at": "2024-10-26T14:33:58Z",
          "author_association": "MEMBER",
          "body": "First, thanks for doing this!\r\n\r\n> I think that it is better to err on the side of over-documenting this topic than under-documenting.\r\n\r\nI don't, that limits our ability to modify the lifecycle in the future (especially because there's no good way to deprecate things here). I'll point this out when doing a more in-depth review though, I don't see anything particularly bad right now.\r\n\r\n> If I understand correctly, `tp_finalize` is never called for non-GC types unless the class designer calls it from `tp_dealloc`.\r\n\r\nYou're right, it's not, but I don't think we should limit ourselves to that in the future. It might be possible someday to automatically do this for untracked types as well. We should just document that *all* types, even GC, require `PyObject_CallFinalizerFromDealloc` in the destructor if they want `tp_finalize` to get *eventually* called--we can note that it could happen automatically, though.\r\n\r\n> I thought that was already sufficiently explained, even before this PR. Can you explain what you think is lacking?\r\n\r\nBasically, it's not documented which types need to have a `tp_clear`, because not all GC types have it. *I'm* not even sure which cases require it. I think it's only needed if the type can have a direct reference cycle to itself? (As in, running its finalizer will try to `Py_DECREF` itself.)\r\n\r\nAlso, I don't think it should be documented that `tp_clear` is related to `tp_dealloc` by making an \"optional call\", that's sort of incidental. They tend to do the same thing, and the destructor can utilize the clear function for convenience, but they're for different purposes.\r\n\r\n---\r\n\r\nA few other notes:\r\n\r\n- It's fine to document what the specific allocators (e.g. `PyObject_GC_New` and `PyObject_GC_Del`) do, but we should point users to using `tp_alloc` and `tp_free` instead. \r\n- That said, I don't see the need to mention that functions like `PyObject_New` don't call `tp_init`. Those are strictly allocators, and currently documented as such.\r\n- This isn't exhaustive--static objects and some immortal objects don't follow this lifecycle (single-phase modules don't either, I think). Other objects might not follow this in the future either.\r\n- If I read \"called from any thread\" in the docs, I would be worried about holding the GIL. Maybe mention that while it can be called from any thread, it will still hold the GIL.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2439604005/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2461670859",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2461670859",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2461670859,
          "node_id": "IC_kwDOBN0Z8c6Suh3L",
          "user": {
            "login": "rhansen",
            "id": 1612291,
            "node_id": "MDQ6VXNlcjE2MTIyOTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1612291?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhansen",
            "html_url": "https://github.com/rhansen",
            "followers_url": "https://api.github.com/users/rhansen/followers",
            "following_url": "https://api.github.com/users/rhansen/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhansen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhansen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhansen/subscriptions",
            "organizations_url": "https://api.github.com/users/rhansen/orgs",
            "repos_url": "https://api.github.com/users/rhansen/repos",
            "events_url": "https://api.github.com/users/rhansen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhansen/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-07T08:59:40Z",
          "updated_at": "2024-11-07T08:59:40Z",
          "author_association": "CONTRIBUTOR",
          "body": "I did a major rewrite to hopefully address all of the feedback (thanks for reviewing!).  Please take another look.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2461670859/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2464797979",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2464797979",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2464797979,
          "node_id": "IC_kwDOBN0Z8c6S6dUb",
          "user": {
            "login": "encukou",
            "id": 302922,
            "node_id": "MDQ6VXNlcjMwMjkyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/encukou",
            "html_url": "https://github.com/encukou",
            "followers_url": "https://api.github.com/users/encukou/followers",
            "following_url": "https://api.github.com/users/encukou/following{/other_user}",
            "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
            "organizations_url": "https://api.github.com/users/encukou/orgs",
            "repos_url": "https://api.github.com/users/encukou/repos",
            "events_url": "https://api.github.com/users/encukou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/encukou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-08T13:42:29Z",
          "updated_at": "2024-11-08T13:42:29Z",
          "author_association": "MEMBER",
          "body": "Thank you very much for taking this on, @rhansen. I often wanted this documented better, to answer questions like:\r\n- Which functions can be called more than once?\r\n- Which can be skipped/bypassed?\r\n- Which should be called by Python itself, and which by the user?\r\n- Which functions can \u201csee\u201d a partially constructed/finalized object?\r\n- What's guaranteed, and what's an accident of the implementation that might change?\r\n\r\nAs you know, the API grew organically -- into quite a maze.\r\n\r\nI don't think anyone has all of this in their head, so I think we need a two-stage review process here:\r\n- First, decide on the \u201cshape\u201d of the docs -- what kind of notes go here, what tooling/markup to use.\r\n- Then, do thorough fact-checking.\r\n\r\nI'm in stage 1 now: what I write here might not necessarily be correct, I'll need to re-check it all later.\r\n\r\n---\r\n\r\n> Maybe I should just commit the generated .svg (and the input dot file so it can be revised easily). Would that be acceptable?\r\n\r\nI'd prefer that. Even if Graphviz is easy to install (and it not always is), it's an additional obstacle, unless you already have it.\r\nAnd if the graph is checked in, we get to see it in diffs. We want that! (To check *intended* changes, but also to prevent a future Graphviz version, or an OS upgrade that uninstalls a font, making the graph unreadable.)\r\n\r\n>  I didn't use `.. image::` because that breaks the clickable parts of the image.\r\n\r\nIMO, we can do without the clickable parts, especially since the explanation below should have the same links. Would you be OK with leaving this, as a HTML-specific enhancement, to a later PR?\r\n\r\n---\r\n\r\n`tp_finalize` should get a note that the interpreter never calls it more than once.\r\nThen, `PyObject_CallFinalizer*` might get a note that this is why you should call them, rather than `tp_finalize` directly. (Correspondingly: if your `tp_finalize` is idempotent, you can just call it directly.)\r\n\r\n---\r\n\r\nHere's my take on the graph.\r\n- IMO, it needs a \u201cdirect call\u201d arrow type in addition to a \u201chappens after\u201d one.\r\n- The `PyObject_CallFinalizerFromDealloc` recommendation would IMO work better in text, with a reference.\r\n\r\n![z](https://github.com/user-attachments/assets/ac727373-4061-4a18-a085-873147d1bf97)\r\n\r\n<details>\r\n<summary>(click for source)</summary>\r\n\r\n```dot\r\ndigraph G {\r\n   compound=true\r\n   graph [\r\n     fontname=\"svg\"\r\n     fontsize=10.0\r\n     layout=\"dot\"\r\n     ranksep=0.25\r\n   ]\r\n   node [\r\n     fontname=\"Monospace\"\r\n     fontsize=10.0\r\n   ]\r\n   edge [\r\n     fontsize=10.0\r\n   ]\r\n\r\n   subgraph cluster_type_call {\r\n      label=\"Type call\"\r\n      shape=box\r\n      {\r\n        rank=\"same\"\r\n        \"tp_new\" [href=\"typeobj.html#c.PyTypeObject.tp_new\"]\r\n        \"tp_alloc\" [href=\"typeobj.html#c.PyTypeObject.tp_alloc\"]\r\n        \"tp_new\" -> \"tp_alloc\" [label=\"  calls  \" style=bold arrowhead=open]\r\n      }\r\n      \"tp_init\" [href=\"typeobj.html#c.PyTypeObject.tp_init\"]\r\n      \"tp_new\" -> \"tp_init\" [label=\"  (tp_init can be  \\n  bypassed \\n or repeated) \"]\r\n   }\r\n   \"reachable\" [fontname=\"Times-Italic\" shape=box label=\" object \\n is in use \"]\r\n   {\r\n     rank=\"same\"\r\n     \"gc\" [fontname=\"Times-Italic\" shape=box label=\" cyclic isolate \\n detection \"]\r\n     \"tp_traverse\" [href=\"typeobj.html#c.PyTypeObject.tp_traverse\"]\r\n     \"gc\" -> \"tp_traverse\" [label=\"  calls  \" style=bold arrowhead=open]\r\n   }\r\n   \"is_finalized\" [label=\" tp_finalize \\n called \\n before? \" shape=diamond fontname=\"Times-Italic\" ]\r\n   \"tp_finalize\" [href=\"typeobj.html#c.PyTypeObject.tp_finalize\"]\r\n   \"reachable\" -> \"gc\"\r\n   \"gc\" -> \"reachable\" //[label=\" still reachable \"]\r\n   \"gc\" -> \"is_finalized\" [label=\" unreachable \"]\r\n   \"is_finalized\" -> \"tp_finalize\" [label=\"no\"]\r\n   \"is_finalized\" -> \"tp_clear\" [label=\"yes\"]\r\n   \"tp_clear\" [href=\"typeobj.html#c.PyTypeObject.tp_clear\"]\r\n   \"tp_dealloc\" [href=\"typeobj.html#c.PyTypeObject.tp_dealloc\"]\r\n   \"tp_free\" [href=\"typeobj.html#c.PyTypeObject.tp_free\"]\r\n\r\n   \"tp_init\" -> \"reachable\" [ltail=cluster_type_call]\r\n   \"tp_finalize\" -> \"tp_clear\"\r\n   \"tp_finalize\" -> \"reachable\" [label=\" resurrected \"]\r\n   \"tp_dealloc\" -> \"tp_finalize\" [\r\n     style=dashed\r\n     arrowhead=open\r\n     href=\"lifecycle.html#c.PyObject_CallFinalizerFromDealloc\"\r\n     label=\"recommended call\\n(see note)\"\r\n   ]\r\n   \"tp_clear\" -> \"tp_dealloc\"\r\n   \"garbage\" [fontname=\"Times-Italic\" shape=box label=\"uncollectable\\n(gc.garbage)\"]\r\n   \"tp_clear\" -> \"garbage\"\r\n   \"tp_clear\" -> \"reachable\" [label=\" resurrected \"]\r\n   \"tp_finalize\" -> \"tp_dealloc\"\r\n   \"tp_dealloc\" -> \"tp_free\" [label=\"  calls  \" style=bold arrowhead=open]\r\n   \"reachable\" -> \"tp_dealloc\" [label=\" unused \\n (refcount \\n dropped \\n to 0) \"]\r\n}\r\n```\r\n\r\n</details>",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2464797979/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2487907396",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2487907396",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2487907396,
          "node_id": "IC_kwDOBN0Z8c6USnRE",
          "user": {
            "login": "rhansen",
            "id": 1612291,
            "node_id": "MDQ6VXNlcjE2MTIyOTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1612291?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhansen",
            "html_url": "https://github.com/rhansen",
            "followers_url": "https://api.github.com/users/rhansen/followers",
            "following_url": "https://api.github.com/users/rhansen/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhansen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhansen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhansen/subscriptions",
            "organizations_url": "https://api.github.com/users/rhansen/orgs",
            "repos_url": "https://api.github.com/users/rhansen/repos",
            "events_url": "https://api.github.com/users/rhansen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhansen/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-20T08:43:25Z",
          "updated_at": "2024-11-20T08:43:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Thank you very much for taking this on, @rhansen.\r\n\r\nThank you for the thoughtful review @encukou!\r\n\r\n> > Maybe I should just commit the generated .svg (and the input dot file so it can be revised easily). Would that be acceptable?\r\n> \r\n> I'd prefer that. Even if Graphviz is easy to install (and it not always is), it's an additional obstacle, unless you already have it. And if the graph is checked in, we get to see it in diffs. We want that! (To check _intended_ changes, but also to prevent a future Graphviz version, or an OS upgrade that uninstalls a font, making the graph unreadable.)\r\n\r\n:+1: \r\n\r\n> \r\n> > I didn't use `.. image::` because that breaks the clickable parts of the image.\r\n> \r\n> IMO, we can do without the clickable parts, especially since the explanation below should have the same links.\r\n> Would you be OK with leaving this, as a HTML-specific enhancement, to a later PR?\r\n\r\nI actually kinda like the current accessibility solution\u2014it reuses the \"Explanation\" text below the image as the overall image description (at least that's the intention), and hovering over each component in the image shows alt text specific to that component.  I'm not sure how to recreate that if we switch to `.. image::`.\r\n\r\nIs the reason you want to switch to `.. image::` because it's simpler and easier to review for correctness?  Or have you noticed a problem with the current `.. raw:: html`?\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2487907396/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2488495704",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2488495704",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2488495704,
          "node_id": "IC_kwDOBN0Z8c6UU25Y",
          "user": {
            "login": "encukou",
            "id": 302922,
            "node_id": "MDQ6VXNlcjMwMjkyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/encukou",
            "html_url": "https://github.com/encukou",
            "followers_url": "https://api.github.com/users/encukou/followers",
            "following_url": "https://api.github.com/users/encukou/following{/other_user}",
            "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
            "organizations_url": "https://api.github.com/users/encukou/orgs",
            "repos_url": "https://api.github.com/users/encukou/repos",
            "events_url": "https://api.github.com/users/encukou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/encukou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-20T12:46:48Z",
          "updated_at": "2024-11-20T12:46:48Z",
          "author_association": "MEMBER",
          "body": "Thank you! The new graph looks great at first glance. I'll get to a more thorough review this or next week.\r\n\r\n> have you noticed a problem with the current `.. raw:: html`?\r\n\r\nThe main issue is that it's HTML-only, so in [PDF or EPUB](https://docs.python.org/3/download.html) it won't appear at all.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2488495704/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2488536248",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2488536248",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2488536248,
          "node_id": "IC_kwDOBN0Z8c6UVAy4",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-20T13:06:09Z",
          "updated_at": "2024-11-21T16:30:12Z",
          "author_association": "MEMBER",
          "body": "I'll do a review sometime today :)\n\nEdit: Still working on the review, this is quite a big PR",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2488536248/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2502321750",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2502321750",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2502321750,
          "node_id": "IC_kwDOBN0Z8c6VJmZW",
          "user": {
            "login": "rhansen",
            "id": 1612291,
            "node_id": "MDQ6VXNlcjE2MTIyOTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1612291?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rhansen",
            "html_url": "https://github.com/rhansen",
            "followers_url": "https://api.github.com/users/rhansen/followers",
            "following_url": "https://api.github.com/users/rhansen/following{/other_user}",
            "gists_url": "https://api.github.com/users/rhansen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rhansen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rhansen/subscriptions",
            "organizations_url": "https://api.github.com/users/rhansen/orgs",
            "repos_url": "https://api.github.com/users/rhansen/repos",
            "events_url": "https://api.github.com/users/rhansen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rhansen/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-11-27T00:16:25Z",
          "updated_at": "2024-11-27T00:16:25Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thank you so much for the thoughtful and thorough review, @ZeroIntensity!  I'm a firm believer in code reviews, so I appreciate you taking the time to carefully go over everything.\r\n\r\nI'm going to mark this as draft until I have completed another pass to address your feedback.  I'll mark it as ready to review once I'm satisfied that it is ready for another look.  In the meantime, feel free to add more comments if you think of anything.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2502321750/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2509782661",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2509782661",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2509782661,
          "node_id": "IC_kwDOBN0Z8c6VmD6F",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2024-12-01T14:00:34Z",
          "updated_at": "2024-12-01T14:00:34Z",
          "author_association": "MEMBER",
          "body": "I'll start the second pass today, but it will definitely take a few days for me to finish the whole review.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2509782661/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2671518663",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2671518663",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2671518663,
          "node_id": "IC_kwDOBN0Z8c6fPCPH",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-02-20T13:34:21Z",
          "updated_at": "2025-02-20T13:34:21Z",
          "author_association": "MEMBER",
          "body": "@rhansen Are you still planning on working on this? If not, I'm happy to take over.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2671518663/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2713598620",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2713598620",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2713598620,
          "node_id": "IC_kwDOBN0Z8c6hvjqc",
          "user": {
            "login": "encukou",
            "id": 302922,
            "node_id": "MDQ6VXNlcjMwMjkyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/encukou",
            "html_url": "https://github.com/encukou",
            "followers_url": "https://api.github.com/users/encukou/followers",
            "following_url": "https://api.github.com/users/encukou/following{/other_user}",
            "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
            "organizations_url": "https://api.github.com/users/encukou/orgs",
            "repos_url": "https://api.github.com/users/encukou/repos",
            "events_url": "https://api.github.com/users/encukou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/encukou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-03-11T10:33:55Z",
          "updated_at": "2025-03-11T10:33:55Z",
          "author_association": "MEMBER",
          "body": "Updating to resolve a conflict with GH-129850.\r\n\r\nIMO, the warnings about `PyObject_New[Var]` not being usable with `Py_TPFLAGS_HAVE_GC` should have at least as strong as the ones about not initializing memory, but, I posted that out before. I didn't want to start reorganizing the PR.\r\n\r\n@rhansen, do you have any work in progress on this?\r\nThis is stuff that can burn a person out; don't feel bad if you want to delegate it.\r\n",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2713598620/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2850635783",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2850635783",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2850635783,
          "node_id": "IC_kwDOBN0Z8c6p6UAH",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-05T11:00:50Z",
          "updated_at": "2025-05-05T11:00:50Z",
          "author_association": "MEMBER",
          "body": "I'm going to be taking this over. I've addressed my own comments and most of Petr's. Other reviews would be appreciated!",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2850635783/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2850785576",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2850785576",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2850785576,
          "node_id": "IC_kwDOBN0Z8c6p64ko",
          "user": {
            "login": "encukou",
            "id": 302922,
            "node_id": "MDQ6VXNlcjMwMjkyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/encukou",
            "html_url": "https://github.com/encukou",
            "followers_url": "https://api.github.com/users/encukou/followers",
            "following_url": "https://api.github.com/users/encukou/following{/other_user}",
            "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/encukou/subscriptions",
            "organizations_url": "https://api.github.com/users/encukou/orgs",
            "repos_url": "https://api.github.com/users/encukou/repos",
            "events_url": "https://api.github.com/users/encukou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/encukou/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-05T12:07:04Z",
          "updated_at": "2025-05-05T12:07:04Z",
          "author_association": "MEMBER",
          "body": "Thank you! I definitely want to take another look -- after Beta 1, next week or so.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2850785576/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        },
        {
          "url": "https://api.github.com/repos/python/cpython/issues/comments/2888340253",
          "html_url": "https://github.com/python/cpython/pull/125962#issuecomment-2888340253",
          "issue_url": "https://api.github.com/repos/python/cpython/issues/125962",
          "id": 2888340253,
          "node_id": "IC_kwDOBN0Z8c6sKJMd",
          "user": {
            "login": "ZeroIntensity",
            "id": 49501366,
            "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ZeroIntensity",
            "html_url": "https://github.com/ZeroIntensity",
            "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
            "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
            "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
            "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
            "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
            "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "created_at": "2025-05-17T12:00:02Z",
          "updated_at": "2025-05-17T12:00:02Z",
          "author_association": "MEMBER",
          "body": "> Let's do one more pass, merge, and leave the rest for a future PR?\r\n\r\nSounds good to me.",
          "reactions": {
            "url": "https://api.github.com/repos/python/cpython/issues/comments/2888340253/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
          },
          "performed_via_github_app": null
        }
      ]
    }
  ],
  "recent_commits": [
    {
      "sha": "246be21de1e2a51d757c747902108dfec13e0605",
      "node_id": "C_kwDOBN0Z8doAKDI0NmJlMjFkZTFlMmE1MWQ3NTdjNzQ3OTAyMTA4ZGZlYzEzZTA2MDU",
      "commit": {
        "author": {
          "name": "AN Long",
          "email": "aisk@users.noreply.github.com",
          "date": "2025-07-20T23:34:32Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T23:34:32Z"
        },
        "message": "gh-136470: Correct InterpreterPoolExecutor's default thread name (GH-136472)\n\nThe OS thread name is now correctly prefixed with `InterpreterPoolExecutor` instead of `ThreadPoolExecutor`.",
        "tree": {
          "sha": "51881d52bf56a0520fbe4aa82ad54a845a27aa6a",
          "url": "https://api.github.com/repos/python/cpython/git/trees/51881d52bf56a0520fbe4aa82ad54a845a27aa6a"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/246be21de1e2a51d757c747902108dfec13e0605",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofX0ICRC1aQ7uu5UhlAAAjlkQACWQiFR43KDnAigxsuDIIFKo\nZalwwxoeGNN2K+Ndjs5JD5WICAfTrnrQwQwTgK4dUY65Y6cwtg5h9Cj3b6hq/7Gx\ncSZWo2I9HbwUK16scTYdJ/Oakcb7TCK9DtNg8pPokgsG2stz/gS277IkOkCY7zde\n5cqU3rcqy0/NdRh9FTZN5PPTJ8WyaylM0/3daTXHRLzVG8KWUGKCHh1/b8jQFqb+\nV7kSq2Byh7PrGi0rMNBR5qNUz5Bl5iVyRtEOJcvzFj/PjqV5DWt7zACEpphFtNCV\ny+VNxJOu0DrsDiORq6tv4aD/UNxQ7rrZbSeTx8svIXmjG4WO/tGmuXgNqzXfoKcS\nvsPEAW5sANBNcOIcWopzKJth5x47mJX6dljfWaQLqPba2+Ulom2bNAKlUMCoMTjp\noe3PKb/jP7ARzpliYiHng207VFx5buJecFawUL+LSRVrQ9mGC8TkwYxEIo0V5m/Q\nCRC667mGNuKiYIS3/7cQRBWX7lF8t61P99Nqca+YfTukYtHVH8K4F8E0NdKv9EFp\nM+WMKgMm2OAXbbMbgPqdBgIgAEbVzDEoOCYdRdEBRyw3jP9NSAOBJzuactN+0B2j\nNetrd/j302fi2lj0m02KEaRFWmZMDYqh7ScP8sRnahfS8nXSqSkYA+b/Me03F8Vu\nDbpgbQD3lzIAmWhYP+4S\n=/2UO\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 51881d52bf56a0520fbe4aa82ad54a845a27aa6a\nparent aec7f5f8b2e8b5e02869cdb4e1f8a9ef87c9f953\nauthor AN Long <aisk@users.noreply.github.com> 1753054472 +0900\ncommitter GitHub <noreply@github.com> 1753054472 +0000\n\ngh-136470: Correct InterpreterPoolExecutor's default thread name (GH-136472)\n\nThe OS thread name is now correctly prefixed with `InterpreterPoolExecutor` instead of `ThreadPoolExecutor`.",
          "verified_at": "2025-07-20T23:34:32Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/246be21de1e2a51d757c747902108dfec13e0605",
      "html_url": "https://github.com/python/cpython/commit/246be21de1e2a51d757c747902108dfec13e0605",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/246be21de1e2a51d757c747902108dfec13e0605/comments",
      "author": {
        "login": "aisk",
        "id": 699636,
        "node_id": "MDQ6VXNlcjY5OTYzNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/699636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aisk",
        "html_url": "https://github.com/aisk",
        "followers_url": "https://api.github.com/users/aisk/followers",
        "following_url": "https://api.github.com/users/aisk/following{/other_user}",
        "gists_url": "https://api.github.com/users/aisk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aisk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aisk/subscriptions",
        "organizations_url": "https://api.github.com/users/aisk/orgs",
        "repos_url": "https://api.github.com/users/aisk/repos",
        "events_url": "https://api.github.com/users/aisk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aisk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "aec7f5f8b2e8b5e02869cdb4e1f8a9ef87c9f953",
          "url": "https://api.github.com/repos/python/cpython/commits/aec7f5f8b2e8b5e02869cdb4e1f8a9ef87c9f953",
          "html_url": "https://github.com/python/cpython/commit/aec7f5f8b2e8b5e02869cdb4e1f8a9ef87c9f953"
        }
      ]
    },
    {
      "sha": "aec7f5f8b2e8b5e02869cdb4e1f8a9ef87c9f953",
      "node_id": "C_kwDOBN0Z8doAKGFlYzdmNWY4YjJlOGI1ZTAyODY5Y2RiNGUxZjhhOWVmODdjOWY5NTM",
      "commit": {
        "author": {
          "name": "Hood Chatham",
          "email": "roberthoodchatham@gmail.com",
          "date": "2025-07-20T22:30:35Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T22:30:35Z"
        },
        "message": "gh-136852: Emscripten: Add PYTHON_NODE_VERSION environment variable (#136853)\n\nTo choose the node version we use. Together with:\nhttps://github.com/python/buildmaster-config/pull/614\ncloses #136852.",
        "tree": {
          "sha": "f31a87e947dbc0fd30051f0e6b55a0ecb9de2334",
          "url": "https://api.github.com/repos/python/cpython/git/trees/f31a87e947dbc0fd30051f0e6b55a0ecb9de2334"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/aec7f5f8b2e8b5e02869cdb4e1f8a9ef87c9f953",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofW4LCRC1aQ7uu5UhlAAAWDgQACju5w6swZxmHslIfYHPWcFG\npfww8biogfqO1UQ6JwUxnKdEpu8nH1FuQTSiTs/50aVmJi1xEaZ7pkU2iuFh/GT9\nMIskNidPOiME4n+I89RwHwGw4/e6QifbuwgyxDX6hAgfC12fdxsWkldnZw6YYqUP\nuwdkwS0w8qPpe5TxkRtAYYOjqrGufsv498CZBH2x4My01ADT5mJv6+m5hMVr9ps6\n80M7dCIzSqsr4gpsIgKedS+d9t4760hcl4WjA4nblXIL+KX4/vRw6yL4xtvlCbiL\nB7TeKGOATB1/gy0jWVYyy7/YlB4WvwSDp50IvSEcUiN1knw8c3vvagpH7p0rJklE\nmCnJdgSjQ364gL8M1+si4/ItHoPCbTt5rGmvoMOBEuYzm3xGd79UoBpeK7jwdYI1\nWfgFiVjgU3MQcZVp+ahqgXXeYQ3qm7c7K378yHN5ap/w59SdHoJw+H/6YohXxcnR\npYV+TLKXXUf8OgQ537dMNPQqQVzsvQmiZXHUWzXeK9TwvXO918T+knR3BxBPf51S\nbr/9wE8l1oJmtvtYd31crappZIlD6lImDQ8jH7fxxCC/UL3ksJMf1FqANwrhvZ7o\nfAJnGqqKQnDbC9gUX1cslYUDj3MS9235XFkWWjv2Z7SuaUooMC/4YgmZEa53oLxN\nkj5m2H7WlwwDdpjbORps\n=zolg\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f31a87e947dbc0fd30051f0e6b55a0ecb9de2334\nparent acbe896cb12d6a92e6150fff22921756f6928035\nauthor Hood Chatham <roberthoodchatham@gmail.com> 1753050635 +0200\ncommitter GitHub <noreply@github.com> 1753050635 +0200\n\ngh-136852: Emscripten: Add PYTHON_NODE_VERSION environment variable (#136853)\n\nTo choose the node version we use. Together with:\nhttps://github.com/python/buildmaster-config/pull/614\ncloses #136852.",
          "verified_at": "2025-07-20T22:30:35Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/aec7f5f8b2e8b5e02869cdb4e1f8a9ef87c9f953",
      "html_url": "https://github.com/python/cpython/commit/aec7f5f8b2e8b5e02869cdb4e1f8a9ef87c9f953",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/aec7f5f8b2e8b5e02869cdb4e1f8a9ef87c9f953/comments",
      "author": {
        "login": "hoodmane",
        "id": 8739626,
        "node_id": "MDQ6VXNlcjg3Mzk2MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoodmane",
        "html_url": "https://github.com/hoodmane",
        "followers_url": "https://api.github.com/users/hoodmane/followers",
        "following_url": "https://api.github.com/users/hoodmane/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions",
        "organizations_url": "https://api.github.com/users/hoodmane/orgs",
        "repos_url": "https://api.github.com/users/hoodmane/repos",
        "events_url": "https://api.github.com/users/hoodmane/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoodmane/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "acbe896cb12d6a92e6150fff22921756f6928035",
          "url": "https://api.github.com/repos/python/cpython/commits/acbe896cb12d6a92e6150fff22921756f6928035",
          "html_url": "https://github.com/python/cpython/commit/acbe896cb12d6a92e6150fff22921756f6928035"
        }
      ]
    },
    {
      "sha": "acbe896cb12d6a92e6150fff22921756f6928035",
      "node_id": "C_kwDOBN0Z8doAKGFjYmU4OTZjYjEyZDZhOTJlNjE1MGZmZjIyOTIxNzU2ZjY5MjgwMzU",
      "commit": {
        "author": {
          "name": "Pablo Galindo Salgado",
          "email": "Pablogsal@gmail.com",
          "date": "2025-07-20T21:55:44Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T21:55:44Z"
        },
        "message": "GH-130645: Default to color help in argparse (#136809)\n\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>\nCo-authored-by: Adam Turner <9087854+aa-turner@users.noreply.github.com>",
        "tree": {
          "sha": "9caac8897ee4eaaf6f6986546eacf2ea4401fc38",
          "url": "https://api.github.com/repos/python/cpython/git/trees/9caac8897ee4eaaf6f6986546eacf2ea4401fc38"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/acbe896cb12d6a92e6150fff22921756f6928035",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofWXgCRC1aQ7uu5UhlAAAMQQQAFr+gURSVsueNS25uO8fcqt0\nBFE2lgsk1visK+55AqQiqyhx+uKlgi4pGNkjYD435FREaWywspg1h3AlTqqGVGPj\nLV84/sbelxMCL6RHYRBTPNNrDqnJAhKp8M/druQy7aJ6DcJRkSQUllKcIASlJcNP\nqvbpoZdfqQmnFCchZ3nPzDigqEaOPj6hnkwSGuA4jnsDweJHB/ItDAJRchFnph1e\nK0XRUtw0WXVw+m1CZ9VJaBksZI6/OoiN9Y7WRrLAkieWhtW0iUa65O7RV9OitONL\nkjHsd/FzDl/PanGeekjBr3ZaFADXaxoUVF6zgiUSDCXYIwYPO2bNUAPt72UKtdrV\nVu1qGxPMYT/Kt3KuJZda2wnxQBb95oicWx20gQGzizA+pPVpAxxmy4ArTYdc8Rh3\nJEhBSKvgzfq4jJ3sDyrMblifdkBPdXH9GQHKv+f0zNkdV4b0nTyePmhf0rpNapRH\nsode9quQJNs+jFFaRmLhwSz67EigwpzOwmHA17z88smI+N8idPqWRxdqcqQfk1S7\nISC30/koYWSBDVyAl1Z4W55O5DZIjhqCo6yRZ6LnTYnjCaXFhS2QtJMurQU3//Nw\nMB/EqXHNirL0o+PWiWDhIKWvaWoyC4jxJKegp+ZiN2To8srwUF3vW29HG9zCAK47\nTPjUuET5TwUmidvAozRu\n=Ndx3\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 9caac8897ee4eaaf6f6986546eacf2ea4401fc38\nparent 65d2c51c10425dcfacc0a13810d58c41240d7ff9\nauthor Pablo Galindo Salgado <Pablogsal@gmail.com> 1753048544 +0200\ncommitter GitHub <noreply@github.com> 1753048544 -0700\n\nGH-130645: Default to color help in argparse (#136809)\n\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>\nCo-authored-by: Adam Turner <9087854+aa-turner@users.noreply.github.com>",
          "verified_at": "2025-07-20T21:55:45Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/acbe896cb12d6a92e6150fff22921756f6928035",
      "html_url": "https://github.com/python/cpython/commit/acbe896cb12d6a92e6150fff22921756f6928035",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/acbe896cb12d6a92e6150fff22921756f6928035/comments",
      "author": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "65d2c51c10425dcfacc0a13810d58c41240d7ff9",
          "url": "https://api.github.com/repos/python/cpython/commits/65d2c51c10425dcfacc0a13810d58c41240d7ff9",
          "html_url": "https://github.com/python/cpython/commit/65d2c51c10425dcfacc0a13810d58c41240d7ff9"
        }
      ]
    },
    {
      "sha": "65d2c51c10425dcfacc0a13810d58c41240d7ff9",
      "node_id": "C_kwDOBN0Z8doAKDY1ZDJjNTFjMTA0MjVkY2ZhY2MwYTEzODEwZDU4YzQxMjQwZDdmZjk",
      "commit": {
        "author": {
          "name": "\ud83c\uddfa\ud83c\udde6 Sviatoslav Sydorenko (\u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u0421\u0438\u0434\u043e\u0440\u0435\u043d\u043a\u043e)",
          "email": "wk.cvs.github@sydorenko.org.ua",
          "date": "2025-07-20T20:03:46Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T20:03:46Z"
        },
        "message": "GH-111758: Merge TSan and UBSan reusable GHA workflows (#136820)\n\nCo-authored-by: Sviatoslav Sydorenko <webknjaz@redhat.com>\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>",
        "tree": {
          "sha": "e3dd78a8ead0134225d12b76ecb2e8b0c6a46a3a",
          "url": "https://api.github.com/repos/python/cpython/git/trees/e3dd78a8ead0134225d12b76ecb2e8b0c6a46a3a"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/65d2c51c10425dcfacc0a13810d58c41240d7ff9",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofUuiCRC1aQ7uu5UhlAAADqgQAEfUC/NonqesvWcqS+E44ux7\no6c3icjtXRdNf6lhf6pdYfvSu6ja5bX7vf3ljqW/afr+PLnHDTeiEaqV0wo7Ym+6\nJAaX9jgkymmkKuXyHNdw2AMBN0WHW7/k1tWwtbA173i20YlAx5Dd/kk7kwv/k///\n1IoGuSbLUY2/px51l3GbJ+CfpC0BHg9GNcZBprTotF5VO9EF+0uDFmwmGuFQC1qH\nEciwi1C5UlH0Otu1K/+OuKV4WOdCJI0ptBJEZ7DHOuAofoEvUHZUsfzt1SCFU2lt\nBA5MfOHcLTCNgZzAE/TrgHYpOu8E3C+SAZvPGtDBlROsiJ2/8jioVOCAqzmuRCwL\n9BuBl6UaJROQaqDaDr+FyXrnHtf+/9sJZA9SibrSZUXa3k72MjuUF2AeTEnBHpGm\nH4Q2Vcn4mdUaPnJ+E5tIIfR+tgYTZguG65C3PjzndPGGdZ8IQFNqrt1fNfMSEx84\nCuDtqlUyvcGp86EnUOZKJ9Dw9fHrZnpyoh6+Ss6ZaKR4NYbql7AKyxn2wnEnICfT\nGyX9PJSubIL5gieFQbiOeYcqoH5sNebM/C9NhRCIOu+I2mzPQT4k2oMw9bKOpbLO\nhgUCX79lW36hOzGvzVhzxnTLdMgjyjwrjRJ0yZ9Pfsa10+fstF/967pyK3KUiKmV\n1cHkDB40Ts143iKnY9DX\n=SgKk\n-----END PGP SIGNATURE-----\n",
          "payload": "tree e3dd78a8ead0134225d12b76ecb2e8b0c6a46a3a\nparent 8f59fbb082a4d64619aeededc47b3b45212d2341\nauthor \ud83c\uddfa\ud83c\udde6 Sviatoslav Sydorenko (\u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u0421\u0438\u0434\u043e\u0440\u0435\u043d\u043a\u043e) <wk.cvs.github@sydorenko.org.ua> 1753041826 +0200\ncommitter GitHub <noreply@github.com> 1753041826 +0300\n\nGH-111758: Merge TSan and UBSan reusable GHA workflows (#136820)\n\nCo-authored-by: Sviatoslav Sydorenko <webknjaz@redhat.com>\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>\n",
          "verified_at": "2025-07-20T20:03:47Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/65d2c51c10425dcfacc0a13810d58c41240d7ff9",
      "html_url": "https://github.com/python/cpython/commit/65d2c51c10425dcfacc0a13810d58c41240d7ff9",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/65d2c51c10425dcfacc0a13810d58c41240d7ff9/comments",
      "author": {
        "login": "webknjaz",
        "id": 578543,
        "node_id": "MDQ6VXNlcjU3ODU0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/578543?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/webknjaz",
        "html_url": "https://github.com/webknjaz",
        "followers_url": "https://api.github.com/users/webknjaz/followers",
        "following_url": "https://api.github.com/users/webknjaz/following{/other_user}",
        "gists_url": "https://api.github.com/users/webknjaz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/webknjaz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/webknjaz/subscriptions",
        "organizations_url": "https://api.github.com/users/webknjaz/orgs",
        "repos_url": "https://api.github.com/users/webknjaz/repos",
        "events_url": "https://api.github.com/users/webknjaz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/webknjaz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8f59fbb082a4d64619aeededc47b3b45212d2341",
          "url": "https://api.github.com/repos/python/cpython/commits/8f59fbb082a4d64619aeededc47b3b45212d2341",
          "html_url": "https://github.com/python/cpython/commit/8f59fbb082a4d64619aeededc47b3b45212d2341"
        }
      ]
    },
    {
      "sha": "8f59fbb082a4d64619aeededc47b3b45212d2341",
      "node_id": "C_kwDOBN0Z8doAKDhmNTlmYmIwODJhNGQ2NDYxOWFlZWRlZGM0N2IzYjQ1MjEyZDIzNDE",
      "commit": {
        "author": {
          "name": "Peter Bierma",
          "email": "zintensitydev@gmail.com",
          "date": "2025-07-20T18:49:00Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T18:49:00Z"
        },
        "message": "gh-136492: Add `FrameLocalsProxyType` to `types` (GH-136546)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\nCo-authored-by: Adam Turner <9087854+AA-Turner@users.noreply.github.com>",
        "tree": {
          "sha": "8e1b07233543a768bdb08ed1e202ebb22715fea0",
          "url": "https://api.github.com/repos/python/cpython/git/trees/8e1b07233543a768bdb08ed1e202ebb22715fea0"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/8f59fbb082a4d64619aeededc47b3b45212d2341",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofTocCRC1aQ7uu5UhlAAAVzYQAF4goSdegTLjexU9DhJfkzk+\npZau54MJDn3ySGvNq2QSWo+2pvaxG2Rb+JL7SzVwVe81HoYVZKnaCBbv3ebC9qGF\nZf5RBb1gEfWA8p5KZzzcYBWJ5a+muEUqyRDIWwAA7k/q6cfSNnpJybXPH6hT8rlG\nlh8vgrEE1qlcNWoXzQaFcDbvl8UCu0qx6ILckCIVITEpYboPs/yk6npPi7ZHlIhP\nuFROnkaQrMai8HHP7FvJIICClMjHAWcGS0b4BW0ChPxU++eGYuUb6x5D3iZY8/YZ\ng976WvDlP+9y7MU4csaADHXCny9b16gp61hJHsrr4fY9hqKiySNlOrSvysen3Vh7\nGdJu0dKZRjOFUh177fzh+DkLEkboD47gKVmHDwJ7jtaEAUunjlVf5oolCdL7MJwl\nqnykwVkauRSmuXJVk3GYQqvdxz5/Aq6VQYUNil8heIXEl2RKgSrYpG/cjPGst6c0\nn4LKyx6GNjbGY4/CnMHWYyX8+4efSsyrreE7lfXDmMwSeLyXvjgQPlCnQvyGELjv\nfRp8SnHOy75xikT40cCvbtkB2p4lwZv+P485tsMfp5UtQ8sh77To0t1De+uSK1xp\nQg/mMRBWY5lYaRmC2FlH+zk8SStoiqebzjpL/efMBfE9XJdxdc2h1rwDncPt+Bak\n0PRzRtf+voLTOgYayAry\n=+/t4\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 8e1b07233543a768bdb08ed1e202ebb22715fea0\nparent e24c66d55a4fd2c56017f8f4e1bcb154db4ba50a\nauthor Peter Bierma <zintensitydev@gmail.com> 1753037340 +0200\ncommitter GitHub <noreply@github.com> 1753037340 +0200\n\ngh-136492: Add `FrameLocalsProxyType` to `types` (GH-136546)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\nCo-authored-by: Adam Turner <9087854+AA-Turner@users.noreply.github.com>",
          "verified_at": "2025-07-20T18:49:01Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/8f59fbb082a4d64619aeededc47b3b45212d2341",
      "html_url": "https://github.com/python/cpython/commit/8f59fbb082a4d64619aeededc47b3b45212d2341",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/8f59fbb082a4d64619aeededc47b3b45212d2341/comments",
      "author": {
        "login": "ZeroIntensity",
        "id": 49501366,
        "node_id": "MDQ6VXNlcjQ5NTAxMzY2",
        "avatar_url": "https://avatars.githubusercontent.com/u/49501366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ZeroIntensity",
        "html_url": "https://github.com/ZeroIntensity",
        "followers_url": "https://api.github.com/users/ZeroIntensity/followers",
        "following_url": "https://api.github.com/users/ZeroIntensity/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZeroIntensity/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ZeroIntensity/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZeroIntensity/subscriptions",
        "organizations_url": "https://api.github.com/users/ZeroIntensity/orgs",
        "repos_url": "https://api.github.com/users/ZeroIntensity/repos",
        "events_url": "https://api.github.com/users/ZeroIntensity/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ZeroIntensity/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e24c66d55a4fd2c56017f8f4e1bcb154db4ba50a",
          "url": "https://api.github.com/repos/python/cpython/commits/e24c66d55a4fd2c56017f8f4e1bcb154db4ba50a",
          "html_url": "https://github.com/python/cpython/commit/e24c66d55a4fd2c56017f8f4e1bcb154db4ba50a"
        }
      ]
    },
    {
      "sha": "e24c66d55a4fd2c56017f8f4e1bcb154db4ba50a",
      "node_id": "C_kwDOBN0Z8doAKGUyNGM2NmQ1NWE0ZmQyYzU2MDE3ZjhmNGUxYmNiMTU0ZGI0YmE1MGE",
      "commit": {
        "author": {
          "name": "morotti",
          "email": "r.morotti@gmail.com",
          "date": "2025-07-20T16:43:40Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T16:43:40Z"
        },
        "message": "gh-91349: Adjust default compression level to 6 (down from 9) in gzip and tarfile (GH-131470)\n\ngh-91349: Adjust default compression level to 6 (down from 9) in gzip and tarfile\n\nIt is the default level used by most compression tools and a\nbetter tradeoff between speed and performance.\n\nCo-authored-by: rmorotti <romain.morotti@man.com>\nCo-authored-by: Pieter Eendebak <pieter.eendebak@gmail.com>",
        "tree": {
          "sha": "a4cf815a285b38511f288acc8195a996386601e3",
          "url": "https://api.github.com/repos/python/cpython/git/trees/a4cf815a285b38511f288acc8195a996386601e3"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/e24c66d55a4fd2c56017f8f4e1bcb154db4ba50a",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofRy8CRC1aQ7uu5UhlAAAoYQQAByzYg4MTv90GiPbMEqYMhen\n4+yu6DllwLHGDtzU54dAxhGDR+yl5vNQ6rxkL7ZH2GmdBlXx5a8WB48Wqal3JkFr\ndBXSOTIEyZI0+jZof6qxVWdnSnD60V5hnNSMKPGNU4GaK91TyJJ0FMffWf6aTkVv\nTuISWL9G9gpNXv2sotE6FgqDYTX4C6M0sU35TBhLkC/au+OUtsNlHAqp85X5RdsU\nKQYG+vrfn2MNkNsUCCfEiQgpD67WlKMYOycOF7nN4SMG+vwH56O0BTKCm9aZMPS9\niDHst+TA6h6hq9ZUepUCO5+wPfa1TeLZxijbR/nDSRs4dtP7e00unXobYbcfakaM\nWEQ8dwWM9as8GWCACorQUnkcoQCk9Wq0g89cwOgqBea42w2I03OB4iEs+aVndXJh\nWe2X2FpY7yy25phP8w3CMWfY7BV5/ai6NRqkX5d/pnmTdCfSlYp6mQN0uvsWR812\nUKVUl0SXZ2JB9OB7VMp8ubn8xAawnXhMChsNDYt9Ja8TBERJ44fOCxevcSjPyBKU\nSj3Yyx2MkmBaHcbSlkSUlTWQKBBrJSvkSl+TZ6HQXrkxf+ovHSFLUWFJ+NW+nQ9d\nhlUVI6wCqgTMCbhcx/V6cFaCWG+ucuBgfzWXZUcI4mVLqUNUVoyPU3hCtVzCSyN4\nIcCEK+mlKeq81A0vY5ln\n=nkEW\n-----END PGP SIGNATURE-----\n",
          "payload": "tree a4cf815a285b38511f288acc8195a996386601e3\nparent 958657bbc3351c66dd8e319503675521bfdea49a\nauthor morotti <r.morotti@gmail.com> 1753029820 +0100\ncommitter GitHub <noreply@github.com> 1753029820 -0700\n\ngh-91349: Adjust default compression level to 6 (down from 9) in gzip and tarfile (GH-131470)\n\ngh-91349: Adjust default compression level to 6 (down from 9) in gzip and tarfile\n\nIt is the default level used by most compression tools and a\nbetter tradeoff between speed and performance.\n\nCo-authored-by: rmorotti <romain.morotti@man.com>\nCo-authored-by: Pieter Eendebak <pieter.eendebak@gmail.com>",
          "verified_at": "2025-07-20T16:43:41Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/e24c66d55a4fd2c56017f8f4e1bcb154db4ba50a",
      "html_url": "https://github.com/python/cpython/commit/e24c66d55a4fd2c56017f8f4e1bcb154db4ba50a",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/e24c66d55a4fd2c56017f8f4e1bcb154db4ba50a/comments",
      "author": {
        "login": "morotti",
        "id": 13528994,
        "node_id": "MDQ6VXNlcjEzNTI4OTk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/13528994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morotti",
        "html_url": "https://github.com/morotti",
        "followers_url": "https://api.github.com/users/morotti/followers",
        "following_url": "https://api.github.com/users/morotti/following{/other_user}",
        "gists_url": "https://api.github.com/users/morotti/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/morotti/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/morotti/subscriptions",
        "organizations_url": "https://api.github.com/users/morotti/orgs",
        "repos_url": "https://api.github.com/users/morotti/repos",
        "events_url": "https://api.github.com/users/morotti/events{/privacy}",
        "received_events_url": "https://api.github.com/users/morotti/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "958657bbc3351c66dd8e319503675521bfdea49a",
          "url": "https://api.github.com/repos/python/cpython/commits/958657bbc3351c66dd8e319503675521bfdea49a",
          "html_url": "https://github.com/python/cpython/commit/958657bbc3351c66dd8e319503675521bfdea49a"
        }
      ]
    },
    {
      "sha": "958657bbc3351c66dd8e319503675521bfdea49a",
      "node_id": "C_kwDOBN0Z8doAKDk1ODY1N2JiYzMzNTFjNjZkZDhlMzE5NTAzNjc1NTIxYmZkZWE0OWE",
      "commit": {
        "author": {
          "name": "Alexander Urieles",
          "email": "aeurielesn@users.noreply.github.com",
          "date": "2025-07-20T13:53:54Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T13:53:54Z"
        },
        "message": "gh-131724: Add a new max_response_headers param to HTTP/HTTPSConnection (GH-136814)\n\n\nCo-authored-by: blurb-it[bot] <43283697+blurb-it[bot]@users.noreply.github.com>\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
        "tree": {
          "sha": "d52acf6366bd63c0915fee6eca872836ff6c569c",
          "url": "https://api.github.com/repos/python/cpython/git/trees/d52acf6366bd63c0915fee6eca872836ff6c569c"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/958657bbc3351c66dd8e319503675521bfdea49a",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofPTyCRC1aQ7uu5UhlAAAEUMQAHvyIu4Xa5V4sZoi/C58Cr70\n3xPNvp2uSqB6CtYsgvHYtQ4h3IdEDvhEyiEfcu8Y76FYgkyg2g43E5rIkOAFjahs\nqa4rcVlG21WjEndcQ9xRupSP8xSZR0nO/ah3H35ZpbHo7jiewa/nrFpiUiXsYbSa\n6tlRlGci8VtmvgFjCv2DUexlUZfnLYwBiCMhQ2hXvUnfayoqQAKMUN4k1mDjl/CF\nn8QbeIq82XWWgIhMx5O8y2cZ4M+cS7sAsZV6bcN0Bqzmb1FteAGxB/M2h+auFkhm\nIjQukan3nS6i7B2MaCzeKlaf7gJKzYRBjqvqoX8/dhGdtAqjtTO5dvZI2xsKKByA\nP5lW0SZKQrWVK6zIoPrYSNrjz4fItfEw/RCCHN2kJMyuVhFDQsCiz6tT2z/bbAKS\nBH8YBfhUWhgT8knhUiHs8Mmz9cfiPmFbRcNdlTrztkaBfiihsmM6srTCCsH7oK+o\n8jy71BXXyazzbqc96r4Vj4KPs6XFiSN15L3OPGP2SHcSZrXsSeChFUXNHQHWtD8H\n9+dMFRhIEoJuN3xWhth1Zv5gMOUfyfVP//d+Fr/73oXf+t8KUPn3URBQRHkSJ0Re\np8IoDlYsITqaGONn6GXwOW10jkBLQ0UnDHCgQFjdqEMY/+nlpaEzmGh3hzgKrgdT\nUCRO0D5rOxth0ERfItWQ\n=UZna\n-----END PGP SIGNATURE-----\n",
          "payload": "tree d52acf6366bd63c0915fee6eca872836ff6c569c\nparent 18a7f5dad832488e8965fe29159a62abc18368e2\nauthor Alexander Urieles <aeurielesn@users.noreply.github.com> 1753019634 +0200\ncommitter GitHub <noreply@github.com> 1753019634 +0000\n\ngh-131724: Add a new max_response_headers param to HTTP/HTTPSConnection (GH-136814)\n\n\nCo-authored-by: blurb-it[bot] <43283697+blurb-it[bot]@users.noreply.github.com>\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
          "verified_at": "2025-07-20T13:53:54Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/958657bbc3351c66dd8e319503675521bfdea49a",
      "html_url": "https://github.com/python/cpython/commit/958657bbc3351c66dd8e319503675521bfdea49a",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/958657bbc3351c66dd8e319503675521bfdea49a/comments",
      "author": {
        "login": "aeurielesn",
        "id": 253676,
        "node_id": "MDQ6VXNlcjI1MzY3Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/253676?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aeurielesn",
        "html_url": "https://github.com/aeurielesn",
        "followers_url": "https://api.github.com/users/aeurielesn/followers",
        "following_url": "https://api.github.com/users/aeurielesn/following{/other_user}",
        "gists_url": "https://api.github.com/users/aeurielesn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aeurielesn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aeurielesn/subscriptions",
        "organizations_url": "https://api.github.com/users/aeurielesn/orgs",
        "repos_url": "https://api.github.com/users/aeurielesn/repos",
        "events_url": "https://api.github.com/users/aeurielesn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aeurielesn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "18a7f5dad832488e8965fe29159a62abc18368e2",
          "url": "https://api.github.com/repos/python/cpython/commits/18a7f5dad832488e8965fe29159a62abc18368e2",
          "html_url": "https://github.com/python/cpython/commit/18a7f5dad832488e8965fe29159a62abc18368e2"
        }
      ]
    },
    {
      "sha": "18a7f5dad832488e8965fe29159a62abc18368e2",
      "node_id": "C_kwDOBN0Z8doAKDE4YTdmNWRhZDgzMjQ4OGU4OTY1ZmUyOTE1OWE2MmFiYzE4MzY4ZTI",
      "commit": {
        "author": {
          "name": "MonadChains",
          "email": "monadchains@gmail.com",
          "date": "2025-07-20T13:33:58Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T13:33:58Z"
        },
        "message": "gh-127598: Improve ModuleNotFoundError when -S is passed (GH-136821)",
        "tree": {
          "sha": "d2589f14a71434070922c18f244e9990efbcb271",
          "url": "https://api.github.com/repos/python/cpython/git/trees/d2589f14a71434070922c18f244e9990efbcb271"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/18a7f5dad832488e8965fe29159a62abc18368e2",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofPBHCRC1aQ7uu5UhlAAAf/EQAJd6XxeCFCnpy1ie7t8FkV/C\nL4lTMAeF0R/ZipcXKXkk6abtXVOCY61Fr+16hSeUpejPcJvt+sTTxIhaGGyMYAvY\nCRGHxBxrQ8v52wzkpIVaoxBb04LnyXE/bjBtt4e9mkm2D0dQgenymGxlBgtOg6ru\nUNFt3o4fZ70pcUZXP6zbtsTlE4Ckf7ObXhBe6XfZET0qikbgrGHmxHhZYBpXVjOr\n2FmSC4uzBIbo+MoJ8HdrAN/ufQ2O28DX8Z+RemX4cJt4s4O9x86ryuk3k2nMlWy6\nBDyP9T28SF9/1qSF+uWif9yJ7r40562Hmo11z6vn2vRpg6EHNPJHO/FfSMKDZ3/f\ngKNGR35vakZ4HsQyGcjPy3ox3+QE6nBjy5y94M/AcTeASYQoRE3wVFMsa5i5WLJz\n/OQ3otuFVYX/IkSpV5UT/lG0okaJxJly3kXaQvYgZG2F7btp24I5s8UWy0Nr5LsN\nCYytNLsLC9ZHFZrfFitlL/M1gGRYudeE9rG8rt2MmzWqUDd21+oUIVBB4Zoy3Up2\nedqj/GsD9tqk4XNXaWKib4LP+nS7gODgv64dlCd1CNJTIvIYzQlq6gQdn/toVwOR\nvp+EUboElPeJ7dt5rrRhSx/LMerD/1Z2U3Mpb6tJwfp97mS/x9KO/jBzM16e+Yrz\nej0GCT8Llgj3guhGsWXh\n=aqb8\n-----END PGP SIGNATURE-----\n",
          "payload": "tree d2589f14a71434070922c18f244e9990efbcb271\nparent 4a151cae3317ce133bdf0792fb1064c5030e588c\nauthor MonadChains <monadchains@gmail.com> 1753018438 +0100\ncommitter GitHub <noreply@github.com> 1753018438 +0200\n\ngh-127598: Improve ModuleNotFoundError when -S is passed (GH-136821)\n\n",
          "verified_at": "2025-07-20T13:33:59Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/18a7f5dad832488e8965fe29159a62abc18368e2",
      "html_url": "https://github.com/python/cpython/commit/18a7f5dad832488e8965fe29159a62abc18368e2",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/18a7f5dad832488e8965fe29159a62abc18368e2/comments",
      "author": {
        "login": "MonadChains",
        "id": 105170638,
        "node_id": "U_kgDOBkTGzg",
        "avatar_url": "https://avatars.githubusercontent.com/u/105170638?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MonadChains",
        "html_url": "https://github.com/MonadChains",
        "followers_url": "https://api.github.com/users/MonadChains/followers",
        "following_url": "https://api.github.com/users/MonadChains/following{/other_user}",
        "gists_url": "https://api.github.com/users/MonadChains/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/MonadChains/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MonadChains/subscriptions",
        "organizations_url": "https://api.github.com/users/MonadChains/orgs",
        "repos_url": "https://api.github.com/users/MonadChains/repos",
        "events_url": "https://api.github.com/users/MonadChains/events{/privacy}",
        "received_events_url": "https://api.github.com/users/MonadChains/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4a151cae3317ce133bdf0792fb1064c5030e588c",
          "url": "https://api.github.com/repos/python/cpython/commits/4a151cae3317ce133bdf0792fb1064c5030e588c",
          "html_url": "https://github.com/python/cpython/commit/4a151cae3317ce133bdf0792fb1064c5030e588c"
        }
      ]
    },
    {
      "sha": "4a151cae3317ce133bdf0792fb1064c5030e588c",
      "node_id": "C_kwDOBN0Z8doAKDRhMTUxY2FlMzMxN2NlMTMzYmRmMDc5MmZiMTA2NGM1MDMwZTU4OGM",
      "commit": {
        "author": {
          "name": "B\u00e9n\u00e9dikt Tran",
          "email": "10796600+picnixz@users.noreply.github.com",
          "date": "2025-07-20T13:10:36Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T13:10:36Z"
        },
        "message": "gh-134531: prefer using `_hashlib` module state instead of module object (#136865)\n\nSome internal helper functions taking the module object to retrieve its state\nunder some conditions now directly take the module's state instead as those\nconditions hold most of the time.",
        "tree": {
          "sha": "8a77c8f4f5f505af63125d495c6e545bd0813d0c",
          "url": "https://api.github.com/repos/python/cpython/git/trees/8a77c8f4f5f505af63125d495c6e545bd0813d0c"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/4a151cae3317ce133bdf0792fb1064c5030e588c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofOrMCRC1aQ7uu5UhlAAArIoQABLziptZUaNUMQc0BLGWdH/w\nyAkhR18IG/rxC8rS/rgiNuGXYw/d8oYKl1UGmeY8azPeYAzz/QpXINjXC+vQ3ARK\nDYrpXrEGocolwLQNI6+V0WbAMWgB2gvvJdV8MgWT2pTnQilSfjsTmRTtgAQMRw/d\n6i5zTYvkv8S3IOQZRdOUJZscaTelqcYQ4tuz3Z+5kTlrX/IrsD+V6+vHoQYsGzWl\nCO8NK4C0wwlKTAxXjLnvp2IUYrF8tu9PXMKStpiZln21sOASgbPaIySKdQdKlwAV\nxqU0LZQpE06s3sWSj2IwuSSC+30N6MmVahVz1SOnGTO/0XlKqja/+1GJAKV2kSGs\nrFZkKOmmqDYjCV2RJtxFxkzUcay0TYxs1oVOldAahDezCSxN6yWCOsmjbyht5NLQ\nlx/lK8waEq/ym6LHGTuUuPhraLWOU0ebvoh0xfsuKIsznqacisusqadyHgREy5Wi\n5bHg8m29vWouvh8uBT6YA+i6arGOOxBIjFOpmh7v502UhDFu2tOi5RsCvIZoDMfD\nAFpycAtdLzFbBS72sKCKhXRdJe2Vn2oucI8kYZNCOJCFfJ7P3vQ9qxI7ejG8BPKP\nUMTps7VCC/7q0eYpJyXlvIsTXdFqYz452UnakQPmGDda/sazyQGdO0ngocPbgq9y\nyxFw/itzef/ubmxyjxAC\n=dMRh\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 8a77c8f4f5f505af63125d495c6e545bd0813d0c\nparent c504f62fe2ebd86c93fb001b62478e0e3249fb6c\nauthor B\u00e9n\u00e9dikt Tran <10796600+picnixz@users.noreply.github.com> 1753017036 +0200\ncommitter GitHub <noreply@github.com> 1753017036 +0000\n\ngh-134531: prefer using `_hashlib` module state instead of module object (#136865)\n\nSome internal helper functions taking the module object to retrieve its state\nunder some conditions now directly take the module's state instead as those\nconditions hold most of the time.",
          "verified_at": "2025-07-20T13:10:36Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/4a151cae3317ce133bdf0792fb1064c5030e588c",
      "html_url": "https://github.com/python/cpython/commit/4a151cae3317ce133bdf0792fb1064c5030e588c",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/4a151cae3317ce133bdf0792fb1064c5030e588c/comments",
      "author": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c504f62fe2ebd86c93fb001b62478e0e3249fb6c",
          "url": "https://api.github.com/repos/python/cpython/commits/c504f62fe2ebd86c93fb001b62478e0e3249fb6c",
          "html_url": "https://github.com/python/cpython/commit/c504f62fe2ebd86c93fb001b62478e0e3249fb6c"
        }
      ]
    },
    {
      "sha": "c504f62fe2ebd86c93fb001b62478e0e3249fb6c",
      "node_id": "C_kwDOBN0Z8doAKGM1MDRmNjJmZTJlYmQ4NmM5M2ZiMDAxYjYyNDc4ZTBlMzI0OWZiNmM",
      "commit": {
        "author": {
          "name": "B\u00e9n\u00e9dikt Tran",
          "email": "10796600+picnixz@users.noreply.github.com",
          "date": "2025-07-20T12:32:35Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T12:32:35Z"
        },
        "message": "gh-136547: fix `hashlib_helper` for blocking and requesting digests (#136762)\n\n- Fix `hashlib_helper.block_algorithm` where the dummy functions were incorrectly defined.\n- Rename `hashlib_helper.HashAPI` to `hashlib_helper.HashInfo` and add more helper methods.\n- Simplify `hashlib_helper.requires_*()` functions.\n- Rewrite some private helpers in `hashlib_helper`.\n- Remove `find_{builtin,openssl}_hashdigest_constructor()` as they are no more needed and were\n  not meant to be public in the first place.\n- Fix some tests in `test_hashlib` when FIPS mode is on.",
        "tree": {
          "sha": "7af7acfe7530121672605b4e0857e8915bbd2b82",
          "url": "https://api.github.com/repos/python/cpython/git/trees/7af7acfe7530121672605b4e0857e8915bbd2b82"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/c504f62fe2ebd86c93fb001b62478e0e3249fb6c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofOHjCRC1aQ7uu5UhlAAAnvIQAJhGZMA1n8Xw0f66Cl7w/7rU\nnrFEcHG+yAaXoBd7R1eeIY5ZZd9nDE76Oii0+0PS4JMAiWDqBg8Y1tghVhYbxtgv\nefWyJJOwrZEMWyBJzclq+jRSUHBc5hXXNskW5Mc+bD67xt485QQmldA4nR3UL/dj\n8zk3j8WDLSFzhgateHWkXXTnTi3bApig61AOQ7Wsc+Lo/LAoL8t9j9E5eKbs39dk\nQADxG+wjlg4t5dKaOsT0TITDrHysEyx2VybjQR6uHbhzqAD48XRt1s38wO+UIzQJ\ngbanddoIsFegJ2xrm1Il+U02kG4HV20fBAjkKddDhOqcnWI078iENFrHm9o6aqoJ\nwdHz2KxCzY8sVf2R/niOR4TobF0bddT6xzOX32AzRdK5GkiIkforG5C2r3bs7FJK\nUJdK142KNj6DfBWZsyWUBUlV0LIZA/VZr1edgBybVTrsdkSzysBlTZnSftRfGpFk\n89ni2myNPaQTPaV9eSeDGkhhnwIZ4D0RFyspQRTapitjoYeiEX7h7eDHccq3fQ2u\n9drhH/I5e75Nq7JPuCIn/uLdJ1X0fV1NXp9PG+AgiS/K/hzK53ZAHb4dMBhFP7og\nGmgqq+mBIFcWUC5kLmi5Bqlyx0BeFQAh1YzkCobKrCwQ2XdgCAFqU+zWTo3+u7PW\ndlUce2Ht3DFrr4Yg+6zn\n=Foq5\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 7af7acfe7530121672605b4e0857e8915bbd2b82\nparent cc81b4e501138b5793d419c81c3a2859a17207a7\nauthor B\u00e9n\u00e9dikt Tran <10796600+picnixz@users.noreply.github.com> 1753014755 +0200\ncommitter GitHub <noreply@github.com> 1753014755 +0200\n\ngh-136547: fix `hashlib_helper` for blocking and requesting digests (#136762)\n\n- Fix `hashlib_helper.block_algorithm` where the dummy functions were incorrectly defined.\n- Rename `hashlib_helper.HashAPI` to `hashlib_helper.HashInfo` and add more helper methods.\n- Simplify `hashlib_helper.requires_*()` functions.\n- Rewrite some private helpers in `hashlib_helper`.\n- Remove `find_{builtin,openssl}_hashdigest_constructor()` as they are no more needed and were\n  not meant to be public in the first place.\n- Fix some tests in `test_hashlib` when FIPS mode is on.",
          "verified_at": "2025-07-20T12:32:36Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/c504f62fe2ebd86c93fb001b62478e0e3249fb6c",
      "html_url": "https://github.com/python/cpython/commit/c504f62fe2ebd86c93fb001b62478e0e3249fb6c",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/c504f62fe2ebd86c93fb001b62478e0e3249fb6c/comments",
      "author": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "cc81b4e501138b5793d419c81c3a2859a17207a7",
          "url": "https://api.github.com/repos/python/cpython/commits/cc81b4e501138b5793d419c81c3a2859a17207a7",
          "html_url": "https://github.com/python/cpython/commit/cc81b4e501138b5793d419c81c3a2859a17207a7"
        }
      ]
    },
    {
      "sha": "cc81b4e501138b5793d419c81c3a2859a17207a7",
      "node_id": "C_kwDOBN0Z8doAKGNjODFiNGU1MDExMzhiNTc5M2Q0MTljODFjM2EyODU5YTE3MjA3YTc",
      "commit": {
        "author": {
          "name": "Dominic H.",
          "email": "dom@dominic.sk",
          "date": "2025-07-20T12:19:47Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T12:19:47Z"
        },
        "message": "gh-86608: Improve and restructure tarfile examples (#121771)\n\nAdd an example on how to write a tarfile to stdout; general improvements.\n\nCo-authored-by: Adam Turner <9087854+AA-Turner@users.noreply.github.com>",
        "tree": {
          "sha": "16803cb5096a18c3fe0fc998ab8037e9f482cc7a",
          "url": "https://api.github.com/repos/python/cpython/git/trees/16803cb5096a18c3fe0fc998ab8037e9f482cc7a"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/cc81b4e501138b5793d419c81c3a2859a17207a7",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofN7jCRC1aQ7uu5UhlAAAO2wQAAeVOAP4H2X+emS5hLgWCoLB\nc+GqiP6/8zceMOalnULP5kscsaIjhRGPokQ6FAc40tMvrSTSxJMxFEahpqq5Y8Cj\nySufAZeCjqeyLHe4u8LFQHbhXomHZ0GkU84w/LU1Erk5JCBdPqAxRytsgvYbLMGL\nsphiaMfeHQ81sL+RASp3fsCnlx4ThntymaXg8Tnn6UjupsNLmmijmC8Oayc1hIlF\ny9Hw/EWTJOXr1AHmpW8JdRzcXUMuZy2L287ovppriit4rWWCtZvIR5Y012SejeHr\n+8kA7o1kjSa1XBTcjvY2FAl/8646xUiO7Mwd2EsQWTyMtNEMIlKWyJSUQ7MduoEo\nWD6JCWmhCNPLkzcRc5inoIlccNb1nkH2bEb5iDQNeLnRDM4aab9vjHmMZETLXZgK\nsLc7O3i6v4sbu1FDc2pCoAE9rKz9SuBISMQFaW9erQkj345cvEbkYm/uevyguU0d\n18HE/HBs4wFXl5YIQCizijZQCW5LhfUj8BCoGGwNHvTfRqkMdAiLJBpiG4XNl2vV\nqE8Hm8ncQ0W1/zOEbz/bMV4fmz+ufpF1E9jOcjmPz7UCR6/O0fdkp77QI3fhSHpk\n6IZua9QoEelzxAbqKtEbjkPgMIulVkZPnUW6ky6mmUF0JBkX7Isqz80P4TXqtYmu\nXQ0u9RiY/8bqcFjwWs+8\n=eDqs\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 16803cb5096a18c3fe0fc998ab8037e9f482cc7a\nparent c6e6fe92cd8b90d546652764e3eaf1631da16f8f\nauthor Dominic H. <dom@dominic.sk> 1753013987 +0200\ncommitter GitHub <noreply@github.com> 1753013987 +0000\n\ngh-86608: Improve and restructure tarfile examples (#121771)\n\nAdd an example on how to write a tarfile to stdout; general improvements.\n\nCo-authored-by: Adam Turner <9087854+AA-Turner@users.noreply.github.com>\n",
          "verified_at": "2025-07-20T12:19:47Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/cc81b4e501138b5793d419c81c3a2859a17207a7",
      "html_url": "https://github.com/python/cpython/commit/cc81b4e501138b5793d419c81c3a2859a17207a7",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/cc81b4e501138b5793d419c81c3a2859a17207a7/comments",
      "author": {
        "login": "GovernmentPlates",
        "id": 7736654,
        "node_id": "MDQ6VXNlcjc3MzY2NTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7736654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GovernmentPlates",
        "html_url": "https://github.com/GovernmentPlates",
        "followers_url": "https://api.github.com/users/GovernmentPlates/followers",
        "following_url": "https://api.github.com/users/GovernmentPlates/following{/other_user}",
        "gists_url": "https://api.github.com/users/GovernmentPlates/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/GovernmentPlates/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/GovernmentPlates/subscriptions",
        "organizations_url": "https://api.github.com/users/GovernmentPlates/orgs",
        "repos_url": "https://api.github.com/users/GovernmentPlates/repos",
        "events_url": "https://api.github.com/users/GovernmentPlates/events{/privacy}",
        "received_events_url": "https://api.github.com/users/GovernmentPlates/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c6e6fe92cd8b90d546652764e3eaf1631da16f8f",
          "url": "https://api.github.com/repos/python/cpython/commits/c6e6fe92cd8b90d546652764e3eaf1631da16f8f",
          "html_url": "https://github.com/python/cpython/commit/c6e6fe92cd8b90d546652764e3eaf1631da16f8f"
        }
      ]
    },
    {
      "sha": "c6e6fe92cd8b90d546652764e3eaf1631da16f8f",
      "node_id": "C_kwDOBN0Z8doAKGM2ZTZmZTkyY2Q4YjkwZDU0NjY1Mjc2NGUzZWFmMTYzMWRhMTZmOGY",
      "commit": {
        "author": {
          "name": "Dominic H.",
          "email": "dom@dominic.sk",
          "date": "2025-07-20T12:08:13Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T12:08:13Z"
        },
        "message": "gh-130655: gettext: Add fallback testcase (#136857)",
        "tree": {
          "sha": "532164808e9f817068c6669a4b766dda08d1f87a",
          "url": "https://api.github.com/repos/python/cpython/git/trees/532164808e9f817068c6669a4b766dda08d1f87a"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/c6e6fe92cd8b90d546652764e3eaf1631da16f8f",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofNwtCRC1aQ7uu5UhlAAA5ZkQAFszT6Y7+6JpSptRtQfEODpD\nxjj7vcSWZDNCk8yT+n80F4CRMxPsdUJHEEkpkbfhHkdUIFwmzta7Zk4cNuwUgWsU\nZ71rLyIuGpWJf/tf/sH0wf+MYXXXnW58zP1z3ZrlGxneCcja/BVSzlGRMUyugIxP\nG43NzAFd7AADagA2RA+70P/kC7+fEC6uIRXHc96uQ7oE/UlQl73MJn+yzPtOY58X\nvAJOWpGJaNQi7oiSSVYpG8nYLZQP2JKFy8Qpeh2X3+V1QAu6eIbnOufcc114ZWSp\nGVd9xIx2PxJ+WxOSJvH9mbvK+fEOwpjT2t8e8GEwuLjVRDvAmcaHsAnY8bskJWLE\nnauFfdRHk9bpibKYF2OP/Tlkgh2Ckql5aO73t3zD3HKW1GrF36EuZmSpS8HSZHRN\n8poKohJ9mgExUmUhAhveTfXm8UpH9ArJHYnBAtgbzYAQQVMpS6F5JSKDLhFtzF8x\nxWKkvHFBPJ/oUg8YY9WBvo43oyFbhURoGTviA8pSaI2+jfllj1ZAP9KaGMVE1nxS\nzAn20fArOD9xLRkAbNyveiB8vNgoy9BRLrWBExaxO/EPW6hnc934UmvIA59I2PIW\nid2V9e8pOBV0RmNFRTFWa+NJv+OoLRPjLMGl6TOYsyaxsxDlujSZPNkCvaL8+/Cm\n5t0XIBNi3/q/AGXnH5QP\n=ia2E\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 532164808e9f817068c6669a4b766dda08d1f87a\nparent 9c2f91cde80a6758e0c1390323bf6f7eb4b5d6b5\nauthor Dominic H. <dom@dominic.sk> 1753013293 +0200\ncommitter GitHub <noreply@github.com> 1753013293 +0200\n\ngh-130655: gettext: Add fallback testcase (#136857)\n\n",
          "verified_at": "2025-07-20T12:08:13Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/c6e6fe92cd8b90d546652764e3eaf1631da16f8f",
      "html_url": "https://github.com/python/cpython/commit/c6e6fe92cd8b90d546652764e3eaf1631da16f8f",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/c6e6fe92cd8b90d546652764e3eaf1631da16f8f/comments",
      "author": {
        "login": "GovernmentPlates",
        "id": 7736654,
        "node_id": "MDQ6VXNlcjc3MzY2NTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7736654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GovernmentPlates",
        "html_url": "https://github.com/GovernmentPlates",
        "followers_url": "https://api.github.com/users/GovernmentPlates/followers",
        "following_url": "https://api.github.com/users/GovernmentPlates/following{/other_user}",
        "gists_url": "https://api.github.com/users/GovernmentPlates/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/GovernmentPlates/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/GovernmentPlates/subscriptions",
        "organizations_url": "https://api.github.com/users/GovernmentPlates/orgs",
        "repos_url": "https://api.github.com/users/GovernmentPlates/repos",
        "events_url": "https://api.github.com/users/GovernmentPlates/events{/privacy}",
        "received_events_url": "https://api.github.com/users/GovernmentPlates/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9c2f91cde80a6758e0c1390323bf6f7eb4b5d6b5",
          "url": "https://api.github.com/repos/python/cpython/commits/9c2f91cde80a6758e0c1390323bf6f7eb4b5d6b5",
          "html_url": "https://github.com/python/cpython/commit/9c2f91cde80a6758e0c1390323bf6f7eb4b5d6b5"
        }
      ]
    },
    {
      "sha": "9c2f91cde80a6758e0c1390323bf6f7eb4b5d6b5",
      "node_id": "C_kwDOBN0Z8doAKDljMmY5MWNkZTgwYTY3NThlMGMxMzkwMzIzYmY2ZjdlYjRiNWQ2YjU",
      "commit": {
        "author": {
          "name": "Nacho Caballero",
          "email": "nachocab@gmail.com",
          "date": "2025-07-20T12:08:00Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T12:08:00Z"
        },
        "message": "gh-136854: Exit on error in `make venv` (#136856)\n\nCo-authored-by: Nacho Caballero <nacho.caballero@astrazeneca.com>",
        "tree": {
          "sha": "4e1a99731b7e8775d5d594504bf760717a3736af",
          "url": "https://api.github.com/repos/python/cpython/git/trees/4e1a99731b7e8775d5d594504bf760717a3736af"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/9c2f91cde80a6758e0c1390323bf6f7eb4b5d6b5",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofNwgCRC1aQ7uu5UhlAAA7m0QAKPQ6ncsiUtauV70hAi65b4e\nJaqipG+5cugJo7le9+lV+CaQsstZzdi28DSSrT71WWICUli7elcQ0S9GLF4OA1f4\npmuLlxoX5GXLykE8x5ozxnDjDNK3xLoFOkZR+e32pN6YsoTypvl9vq+NmVsN3LMF\n0hMlNK9DEwpXQLvbKMkXumhtffxMnuS7Vns13Z8rbzgC3rGppoFTzhCzBG2d1B1N\nkeDaL9+bYpEr6ovccQCdhx3R0HMhTURbN2eWIdvd7u54eGozlXdTp+7YU9TkbuL7\n1j9q9AiK1dq4+yvlhpkwpOkOY9kX6fr3AJx0EWzo9kMjPlqTeOxFgjPXji4Mu/BN\n4wuzemV7VFh9d6O4eTAu+jvZxSxpQFIJe150hkFBsIYzOLWqmv2fIEpfE8gsfSqJ\ndMRWRifD6K5kagOxOWYWzVegXlCkjCWoqCLZoa7VbljmKawW/BBk0EUibIdfIGL/\nTRsWMBgqWY+aOXNNhNhzbOuWs1kI7Vzki9nBe8/BO8q4qgHUl2XGgzkyrmzYueWO\ntmOgXDCrFcHE9qoNwSmRu2jj9InRNFAO32PXgQ6pkZp8qTFDBXb8sa/1JkSp9oXY\na+0WFJtKaWQwWk6jrInDqdAyczSiwsvPlhfDm3XTcINb7k+eFmEBxMkut82fJUQ2\nllTVgfyKDgryLHSHrtNo\n=a6Ic\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 4e1a99731b7e8775d5d594504bf760717a3736af\nparent dda9d0011fc3d3f561ca00ac83bf7a55a6325aa9\nauthor Nacho Caballero <nachocab@gmail.com> 1753013280 +0200\ncommitter GitHub <noreply@github.com> 1753013280 +0000\n\ngh-136854: Exit on error in `make venv` (#136856)\n\nCo-authored-by: Nacho Caballero <nacho.caballero@astrazeneca.com>\n",
          "verified_at": "2025-07-20T12:08:01Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/9c2f91cde80a6758e0c1390323bf6f7eb4b5d6b5",
      "html_url": "https://github.com/python/cpython/commit/9c2f91cde80a6758e0c1390323bf6f7eb4b5d6b5",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/9c2f91cde80a6758e0c1390323bf6f7eb4b5d6b5/comments",
      "author": {
        "login": "nachocab",
        "id": 27538,
        "node_id": "MDQ6VXNlcjI3NTM4",
        "avatar_url": "https://avatars.githubusercontent.com/u/27538?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nachocab",
        "html_url": "https://github.com/nachocab",
        "followers_url": "https://api.github.com/users/nachocab/followers",
        "following_url": "https://api.github.com/users/nachocab/following{/other_user}",
        "gists_url": "https://api.github.com/users/nachocab/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nachocab/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nachocab/subscriptions",
        "organizations_url": "https://api.github.com/users/nachocab/orgs",
        "repos_url": "https://api.github.com/users/nachocab/repos",
        "events_url": "https://api.github.com/users/nachocab/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nachocab/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "dda9d0011fc3d3f561ca00ac83bf7a55a6325aa9",
          "url": "https://api.github.com/repos/python/cpython/commits/dda9d0011fc3d3f561ca00ac83bf7a55a6325aa9",
          "html_url": "https://github.com/python/cpython/commit/dda9d0011fc3d3f561ca00ac83bf7a55a6325aa9"
        }
      ]
    },
    {
      "sha": "dda9d0011fc3d3f561ca00ac83bf7a55a6325aa9",
      "node_id": "C_kwDOBN0Z8doAKGRkYTlkMDAxMWZjM2QzZjU2MWNhMDBhYzgzYmY3YTU1YTYzMjVhYTk",
      "commit": {
        "author": {
          "name": "Hugo van Kemenade",
          "email": "1324225+hugovk@users.noreply.github.com",
          "date": "2025-07-20T09:56:55Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T09:56:55Z"
        },
        "message": "gh-108362: Retarget incremental GC changes to 3.14 (#125453)",
        "tree": {
          "sha": "d1804fc0198a8bf5e8faf08f1d3c749987296d1e",
          "url": "https://api.github.com/repos/python/cpython/git/trees/d1804fc0198a8bf5e8faf08f1d3c749987296d1e"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/dda9d0011fc3d3f561ca00ac83bf7a55a6325aa9",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofL1oCRC1aQ7uu5UhlAAAZb4QAIFhXuwnZcPMIu3lRq0Ff1LW\nElj6i7lGhbBS5tnh1n+g7DJts2Fr6If2W0feTcKJ9sK2CjFt28NVVHACVg4bMxPy\nwtywgd0i98+cAA9D5AbaxqoKUJEpsrod+97yjxMZn3mv25Xoy6m8OWG2GlG5jBbF\nJkG8eV6B7phyc50FzXKZj6qUEcWXXXSykh30BzrX7sJGVl+Uuu2OPtIJQvZ+lzy3\nrKuVnL5YgAypaJw1CpaH9Dpj+Xl7Q8M020wteQ3zc0Zhc6DO6Vp6U6dpKCRKlfYT\nfirzzWmem11wuhlLjosGMrxWVfI6U/Dx/jyI5Izlczl9W+adKxCSCLtWg6k2awNJ\nI/l79rVZp4+u3JATHR/mHpFodFB5vLu6rXUSB8VmV8jufQdGSaHpwXr4riJRsfX0\nRutOCYvxlPevAXzUAwmP4R0tCho9D9XZU+coFf0ovG7WJvETF9l0PS2nFToTPfix\nMAFX9mzMD5pmaQ7yYAGdoaShQ3vsK7UBUJrYp6POMDcGFy2v+bRufZ61DfZyVv1G\nHmOz+WNGvMvgilNaC+LWGGwMOQIqmTNwX5IhWzbVM5tE7G7k0tZkMvlEBTHNMTgJ\n8whPKQSkyM9aPBtaNbwgA/Pa26qRVPyaCGHX/YgRbnH4a9IZncMT0YURT+wN52vI\n+43b+opoC6ovJP/ZB7dn\n=/fnv\n-----END PGP SIGNATURE-----\n",
          "payload": "tree d1804fc0198a8bf5e8faf08f1d3c749987296d1e\nparent 588d9fb84ae014502811ec8580411ea0df7200fe\nauthor Hugo van Kemenade <1324225+hugovk@users.noreply.github.com> 1753005415 +0300\ncommitter GitHub <noreply@github.com> 1753005415 +0300\n\ngh-108362: Retarget incremental GC changes to 3.14 (#125453)\n\n",
          "verified_at": "2025-07-20T09:56:56Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/dda9d0011fc3d3f561ca00ac83bf7a55a6325aa9",
      "html_url": "https://github.com/python/cpython/commit/dda9d0011fc3d3f561ca00ac83bf7a55a6325aa9",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/dda9d0011fc3d3f561ca00ac83bf7a55a6325aa9/comments",
      "author": {
        "login": "hugovk",
        "id": 1324225,
        "node_id": "MDQ6VXNlcjEzMjQyMjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugovk",
        "html_url": "https://github.com/hugovk",
        "followers_url": "https://api.github.com/users/hugovk/followers",
        "following_url": "https://api.github.com/users/hugovk/following{/other_user}",
        "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions",
        "organizations_url": "https://api.github.com/users/hugovk/orgs",
        "repos_url": "https://api.github.com/users/hugovk/repos",
        "events_url": "https://api.github.com/users/hugovk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hugovk/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "588d9fb84ae014502811ec8580411ea0df7200fe",
          "url": "https://api.github.com/repos/python/cpython/commits/588d9fb84ae014502811ec8580411ea0df7200fe",
          "html_url": "https://github.com/python/cpython/commit/588d9fb84ae014502811ec8580411ea0df7200fe"
        }
      ]
    },
    {
      "sha": "588d9fb84ae014502811ec8580411ea0df7200fe",
      "node_id": "C_kwDOBN0Z8doAKDU4OGQ5ZmI4NGFlMDE0NTAyODExZWM4NTgwNDExZWEwZGY3MjAwZmU",
      "commit": {
        "author": {
          "name": "Olga Pustovalova",
          "email": "162949+olp-cs@users.noreply.github.com",
          "date": "2025-07-20T08:57:54Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T08:57:54Z"
        },
        "message": "gh-136438: Make sure `test_remote_pdb` pass with all optimization levels (GH-136788)",
        "tree": {
          "sha": "6b74cf94385a557c8f22573c39f363e1897babcc",
          "url": "https://api.github.com/repos/python/cpython/git/trees/6b74cf94385a557c8f22573c39f363e1897babcc"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/588d9fb84ae014502811ec8580411ea0df7200fe",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofK+SCRC1aQ7uu5UhlAAA5BYQABQxpGwi5wy5GuPoGn0/9Owq\nmJefjL6IFiFvX9ElHm/rIlVAjd50loH4Ky6owb6+Al8XiudM7selKWx/+m8kMwL4\nZcDnKRZ6tk9BeuQu88XtuQKwlegUutqSg8y/VZhk+hkB8cCFf0BncwMWfAV7L9Rt\nVHHfcJPQWw1ttO0AofaNbrQRh+SBtnCkjf4VjDn0VdNC+doQH0GkaQ8FXToprIXP\n/mRsqOqsu07X/A+3Q53qlN3ncvo8MIFtwSyxpG9Mnrt8EdwQCkQ/c6guZffBvJsK\nd4+MJUkXcFL4nB1Eu1AZvv3ejkeFM3j/hO3dl5QquvgO7ukQf32K7cdUQ89fG7Bp\nKH4rIe35uEmKpOxnZ5+3W9iuf0NlAh3oJBlzDR+Jtg3gA9ki0zMDuuKuOJuro1pI\nXrxDeoPiRBUraJk2W1/uUlxei6/Ue//zCm2++R5oi4IyJ842mEjqTQYlSgl6Df42\nNK7dEstRfawQvkhSGYas5EHhZotEsGYeh33XG1wMXyzEeV6OSXhxQMm+X1a0cGMF\ndrbnRtdq/9Zgq9zrJMHr3Ha0ys90v5XjGUTtAuN12Qdis4Ov6zbeYwO9tTq1j4CZ\n/7ZdPLuUhYNlhAJhBtaZUeSjL2mKSUNa+GzPxdmAkxv77Zlk441ZBqouB78p3LBq\n6lQDL7OKs93R5iGankhP\n=DHcW\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 6b74cf94385a557c8f22573c39f363e1897babcc\nparent 6be49ee517258281357aa6846d2564bc5626b7ca\nauthor Olga Pustovalova <162949+olp-cs@users.noreply.github.com> 1753001874 +0200\ncommitter GitHub <noreply@github.com> 1753001874 +0200\n\ngh-136438: Make sure `test_remote_pdb` pass with all optimization levels (GH-136788)\n\n",
          "verified_at": "2025-07-20T08:57:55Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/588d9fb84ae014502811ec8580411ea0df7200fe",
      "html_url": "https://github.com/python/cpython/commit/588d9fb84ae014502811ec8580411ea0df7200fe",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/588d9fb84ae014502811ec8580411ea0df7200fe/comments",
      "author": {
        "login": "olp-cs",
        "id": 162949,
        "node_id": "MDQ6VXNlcjE2Mjk0OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/162949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olp-cs",
        "html_url": "https://github.com/olp-cs",
        "followers_url": "https://api.github.com/users/olp-cs/followers",
        "following_url": "https://api.github.com/users/olp-cs/following{/other_user}",
        "gists_url": "https://api.github.com/users/olp-cs/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olp-cs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olp-cs/subscriptions",
        "organizations_url": "https://api.github.com/users/olp-cs/orgs",
        "repos_url": "https://api.github.com/users/olp-cs/repos",
        "events_url": "https://api.github.com/users/olp-cs/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olp-cs/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6be49ee517258281357aa6846d2564bc5626b7ca",
          "url": "https://api.github.com/repos/python/cpython/commits/6be49ee517258281357aa6846d2564bc5626b7ca",
          "html_url": "https://github.com/python/cpython/commit/6be49ee517258281357aa6846d2564bc5626b7ca"
        }
      ]
    },
    {
      "sha": "6be49ee517258281357aa6846d2564bc5626b7ca",
      "node_id": "C_kwDOBN0Z8doAKDZiZTQ5ZWU1MTcyNTgyODEzNTdhYTY4NDZkMjU2NGJjNTYyNmI3Y2E",
      "commit": {
        "author": {
          "name": "B\u00e9n\u00e9dikt Tran",
          "email": "10796600+picnixz@users.noreply.github.com",
          "date": "2025-07-20T08:49:34Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-20T08:49:34Z"
        },
        "message": "gh-136787: improve exception messages for invalid hash algorithms (#136802)",
        "tree": {
          "sha": "dbba75cc753d8a4118db5d99a2f8036043f92d9d",
          "url": "https://api.github.com/repos/python/cpython/git/trees/dbba75cc753d8a4118db5d99a2f8036043f92d9d"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/6be49ee517258281357aa6846d2564bc5626b7ca",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJofK2eCRC1aQ7uu5UhlAAAVwQQAKxH7tQf739vMrpwMrY3F3Ha\n7W09oUodzEbXB09jiPhpwwb0+WruYhRXZpYNKna/rIQiSO+xmxXdT2cf9x0+Eusi\n3rCQLLCIccca8oEzCVicW5iOE/gKbp5DETamQ1gLEPi2H1hjnZ0DQ+WYAIZsYQMe\nfHK/J1yV5DDhPw3EW9Gik2xPKGWKsAHbnv6/9mpLATigXmRZJyzvhZgRE/Y/cTex\n7hYYAkQ5zOUKSwByv+ZZ+wHjUXhekmLVzfr5swOemkuowOXgEary/UHXTiQZ85EM\nj5EKWwtqZi9G7T9gaeGGidTI6bE0fH+CDjfiIeo+XbSuwqkaSORbjA4Win59Jw4J\np/Oz9/SLLc0atxvZIJPAhqHnJxGZwQI7qtNBQm39jP0P8as/o3Wch3PoOoB7PonA\nCtqqOIMvCc+iiddA2CWLODcbFozQBVVC7szdzXJj9qjgU6OLn+Z7RyMTJCV/5LNG\n4XQox4rwvAwyrRuggB77VAtcuc6kpEX4OOSC2xtpNkay8HLJJQVHxeLcyWPpDqWl\nKFZn416Mqhh11zmREom+aCgydVlWZrx+DLvshrMMalx9jxJioQkMs7DsxsRdwUfC\nKbyUB2rBuebr9XgzaFQAOQTntLAOcTZRyIjNYvG9dYiLM4r9NmNonaTwCqvH1Oo3\nnqaWT7i5GMQUc9NMKxRO\n=wZY3\n-----END PGP SIGNATURE-----\n",
          "payload": "tree dbba75cc753d8a4118db5d99a2f8036043f92d9d\nparent 800d37feca2e0ea3343995b3b817b653db2f9034\nauthor B\u00e9n\u00e9dikt Tran <10796600+picnixz@users.noreply.github.com> 1753001374 +0200\ncommitter GitHub <noreply@github.com> 1753001374 +0000\n\ngh-136787: improve exception messages for invalid hash algorithms (#136802)\n\n",
          "verified_at": "2025-07-20T08:49:35Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/6be49ee517258281357aa6846d2564bc5626b7ca",
      "html_url": "https://github.com/python/cpython/commit/6be49ee517258281357aa6846d2564bc5626b7ca",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/6be49ee517258281357aa6846d2564bc5626b7ca/comments",
      "author": {
        "login": "picnixz",
        "id": 10796600,
        "node_id": "MDQ6VXNlcjEwNzk2NjAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10796600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/picnixz",
        "html_url": "https://github.com/picnixz",
        "followers_url": "https://api.github.com/users/picnixz/followers",
        "following_url": "https://api.github.com/users/picnixz/following{/other_user}",
        "gists_url": "https://api.github.com/users/picnixz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/picnixz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/picnixz/subscriptions",
        "organizations_url": "https://api.github.com/users/picnixz/orgs",
        "repos_url": "https://api.github.com/users/picnixz/repos",
        "events_url": "https://api.github.com/users/picnixz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/picnixz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "800d37feca2e0ea3343995b3b817b653db2f9034",
          "url": "https://api.github.com/repos/python/cpython/commits/800d37feca2e0ea3343995b3b817b653db2f9034",
          "html_url": "https://github.com/python/cpython/commit/800d37feca2e0ea3343995b3b817b653db2f9034"
        }
      ]
    },
    {
      "sha": "800d37feca2e0ea3343995b3b817b653db2f9034",
      "node_id": "C_kwDOBN0Z8doAKDgwMGQzN2ZlY2EyZTBlYTMzNDM5OTViM2I4MTdiNjUzZGIyZjkwMzQ",
      "commit": {
        "author": {
          "name": "Hood Chatham",
          "email": "roberthoodchatham@gmail.com",
          "date": "2025-07-19T19:43:50Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T19:43:50Z"
        },
        "message": "gh-124621: Emscripten: Fix regression in use-after-close error handling (#136837)",
        "tree": {
          "sha": "798839ff5298f629d3ca831026a358fe39e7c372",
          "url": "https://api.github.com/repos/python/cpython/git/trees/798839ff5298f629d3ca831026a358fe39e7c372"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/800d37feca2e0ea3343995b3b817b653db2f9034",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe/V2CRC1aQ7uu5UhlAAAFWAQABwxd9JoRxOYeliVO5rn03Tf\nOUKRj6dbTgnA0dvCfNPJkS+UG/ASQmrNhtRQpvTwElXVRwgMUspoDmPrqEf/mxNB\ndmRRMP92WVM3OcljAR1iIVLdsduYxHLKIeS7VWcbACRhsniT2dzju0Iau6DeDkZQ\n9HWFyYz5utIK8A3ZnQ+VKaKbNFEDgEEU6y0anuaeA6UajEyXeoqFCc+TyrRu8wE8\nioOwUOO8hO9L50b1flPadSBOGgnJo70n/3nPjUZgKCZSvq7Dm6oEVCfW+fhPC3Wf\nJgWEOrDVdglL30mR2tGPUncVt/y0+4c9H6fNWRGxaYdOvZwaWIG9cjwzUGOnr5+v\nTfyNti9QU/4W73Hrry5bqUrAZ0qSk3CDkbf4KX27gZF7a0YzinBhvFUcoEEZBv3t\n4v1+YBc2UkxWDKfxoB5rwvXkz63+bx6jPCqZwIK8UiBa9dM9DV2B09E5yVNd3Udr\nrQYSUtWVAZAPxNhsjQcBwEvpA8zielId//HEIMNBTb97DyDraG7UOc4J2uR75SS0\nBXX2b5tu+njxzQq7HaAL9o1l3t87PFoLGoBzpQKDCw6I1Pfx7oW3IhJMUlMYVNkV\nmOfNVKwJKdvFBhggXKhmR4rRVC8AO9bqhGssdS8O30aqZo3vBvN9oWynZn6bsvHB\ndZUvhAw8Va4lexJsSuXw\n=0c+x\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 798839ff5298f629d3ca831026a358fe39e7c372\nparent 69ea1b3a8f45fec46add3272ad47f14ff5321ae8\nauthor Hood Chatham <roberthoodchatham@gmail.com> 1752954230 +0200\ncommitter GitHub <noreply@github.com> 1752954230 +0200\n\ngh-124621: Emscripten: Fix regression in use-after-close error handling (#136837)\n\n",
          "verified_at": "2025-07-19T19:43:51Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/800d37feca2e0ea3343995b3b817b653db2f9034",
      "html_url": "https://github.com/python/cpython/commit/800d37feca2e0ea3343995b3b817b653db2f9034",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/800d37feca2e0ea3343995b3b817b653db2f9034/comments",
      "author": {
        "login": "hoodmane",
        "id": 8739626,
        "node_id": "MDQ6VXNlcjg3Mzk2MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoodmane",
        "html_url": "https://github.com/hoodmane",
        "followers_url": "https://api.github.com/users/hoodmane/followers",
        "following_url": "https://api.github.com/users/hoodmane/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions",
        "organizations_url": "https://api.github.com/users/hoodmane/orgs",
        "repos_url": "https://api.github.com/users/hoodmane/repos",
        "events_url": "https://api.github.com/users/hoodmane/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoodmane/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "69ea1b3a8f45fec46add3272ad47f14ff5321ae8",
          "url": "https://api.github.com/repos/python/cpython/commits/69ea1b3a8f45fec46add3272ad47f14ff5321ae8",
          "html_url": "https://github.com/python/cpython/commit/69ea1b3a8f45fec46add3272ad47f14ff5321ae8"
        }
      ]
    },
    {
      "sha": "69ea1b3a8f45fec46add3272ad47f14ff5321ae8",
      "node_id": "C_kwDOBN0Z8doAKDY5ZWExYjNhOGY0NWZlYzQ2YWRkMzI3MmFkNDdmMTRmZjUzMjFhZTg",
      "commit": {
        "author": {
          "name": "Disconnect3d",
          "email": "dominik.b.czarnota@gmail.com",
          "date": "2025-07-19T17:12:10Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T17:12:10Z"
        },
        "message": "gh-136839: Refactor simple dict.update calls (#136811)\n\nRefactor simple dict.update calls\n\nThis commit refactors simple `dict.update({key: value})` calls which can\nbe done via `dict[key] = value` instead.\n\nI found those cases with the [semgrep](https://semgrep.dev/) tool:\n\n```\n$ semgrep --lang python --pattern '$DICT.update({$A: ...})'\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 5 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    Lib/dataclasses.py\n         1268\u2506 slots.update({slot: doc})\n\n    Lib/multiprocessing/resource_tracker.py\n           50\u2506 _CLEANUP_FUNCS.update({\n           51\u2506     'semaphore': _multiprocessing.sem_unlink,\n           52\u2506 })\n            \u22ee\u2506----------------------------------------\n           53\u2506 _CLEANUP_FUNCS.update({\n           54\u2506     'shared_memory': _posixshmem.shm_unlink,\n           55\u2506 })\n\n    Lib/tkinter/scrolledtext.py\n           26\u2506 kw.update({'yscrollcommand': self.vbar.set})\n\n    Lib/xmlrpc/server.py\n          242\u2506 self.funcs.update({'system.multicall' : self.system_multicall})\n```",
        "tree": {
          "sha": "8f6bade56410c6f506ccf932bdeeb8691de87b31",
          "url": "https://api.github.com/repos/python/cpython/git/trees/8f6bade56410c6f506ccf932bdeeb8691de87b31"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/69ea1b3a8f45fec46add3272ad47f14ff5321ae8",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe9HqCRC1aQ7uu5UhlAAAWBUQAD4o10iZ35UhyiFvMZikFUF5\na4na4sdLOqCVpUXvN7wsmdAEOEhHyVJUvWySC3g5+nBJnQBIRvG6fhvcxMG2FM/0\n/k2uCKxDvOu66hklrTXaY53hpo04WATnusWYlGZqWQhllbkEJ4RZqirrttPcu6p+\nToMgSJjpYIL+ld2Cw3UtqG9PKEEKf9MYS90pPU7EPh0Tx3yeuLw6cgzYo6pMTCs8\nFpNp2VZ8WP92KC/32Qy+xmRzzccPh50ee3gMhEl6pzjYaJv6+TBNEbGfvFUtds4P\nINNtOlbqjFM1J0OF5vKiFmIWNtJFzNJICz5W18du3js7gQ4eXrYeT6sEzBxWcnN3\no8/kHncVxnlGvC8oEwhRwYSLjyVXPjeML1ogTJBIpEaToAurDnKn91LBRX7I5zp9\n0ArpTABl/0f+mXHbeofv/36b117S4gwhIHT9su7D2dKps8CtmlgHkaLfWin+be8h\ngubHk/5rzeV8n0ZsuGJpRxheyFTcQV0OBcPBYOjv//kdBoJKkyh8fjWEmInwDA/m\naVLlOFg/czgRGhGp6Txf+1Gx/ZO7Nqtx8dkFG8ZowhGAMW6+5AaYc48Mb9Lef7CY\npuAFYck4mHCLSzwr/LqWz8/BgqxteMvmjJMGysxvF2C9Ug5PQ2TUZ68JtSsd1TII\n3okHUqy8eSK7fWQINvJJ\n=cNu5\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 8f6bade56410c6f506ccf932bdeeb8691de87b31\nparent 67036f1ee1c23257d320a80c152090235b8ca892\nauthor Disconnect3d <dominik.b.czarnota@gmail.com> 1752945130 +0200\ncommitter GitHub <noreply@github.com> 1752945130 -0700\n\ngh-136839: Refactor simple dict.update calls (#136811)\n\nRefactor simple dict.update calls\n\nThis commit refactors simple `dict.update({key: value})` calls which can\nbe done via `dict[key] = value` instead.\n\nI found those cases with the [semgrep](https://semgrep.dev/) tool:\n\n```\n$ semgrep --lang python --pattern '$DICT.update({$A: ...})'\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 5 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    Lib/dataclasses.py\n         1268\u2506 slots.update({slot: doc})\n\n    Lib/multiprocessing/resource_tracker.py\n           50\u2506 _CLEANUP_FUNCS.update({\n           51\u2506     'semaphore': _multiprocessing.sem_unlink,\n           52\u2506 })\n            \u22ee\u2506----------------------------------------\n           53\u2506 _CLEANUP_FUNCS.update({\n           54\u2506     'shared_memory': _posixshmem.shm_unlink,\n           55\u2506 })\n\n    Lib/tkinter/scrolledtext.py\n           26\u2506 kw.update({'yscrollcommand': self.vbar.set})\n\n    Lib/xmlrpc/server.py\n          242\u2506 self.funcs.update({'system.multicall' : self.system_multicall})\n```",
          "verified_at": "2025-07-19T17:12:10Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/69ea1b3a8f45fec46add3272ad47f14ff5321ae8",
      "html_url": "https://github.com/python/cpython/commit/69ea1b3a8f45fec46add3272ad47f14ff5321ae8",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/69ea1b3a8f45fec46add3272ad47f14ff5321ae8/comments",
      "author": {
        "login": "disconnect3d",
        "id": 10009354,
        "node_id": "MDQ6VXNlcjEwMDA5MzU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/10009354?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/disconnect3d",
        "html_url": "https://github.com/disconnect3d",
        "followers_url": "https://api.github.com/users/disconnect3d/followers",
        "following_url": "https://api.github.com/users/disconnect3d/following{/other_user}",
        "gists_url": "https://api.github.com/users/disconnect3d/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/disconnect3d/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/disconnect3d/subscriptions",
        "organizations_url": "https://api.github.com/users/disconnect3d/orgs",
        "repos_url": "https://api.github.com/users/disconnect3d/repos",
        "events_url": "https://api.github.com/users/disconnect3d/events{/privacy}",
        "received_events_url": "https://api.github.com/users/disconnect3d/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "67036f1ee1c23257d320a80c152090235b8ca892",
          "url": "https://api.github.com/repos/python/cpython/commits/67036f1ee1c23257d320a80c152090235b8ca892",
          "html_url": "https://github.com/python/cpython/commit/67036f1ee1c23257d320a80c152090235b8ca892"
        }
      ]
    },
    {
      "sha": "67036f1ee1c23257d320a80c152090235b8ca892",
      "node_id": "C_kwDOBN0Z8doAKDY3MDM2ZjFlZTFjMjMyNTdkMzIwYTgwYzE1MjA5MDIzNWI4Y2E4OTI",
      "commit": {
        "author": {
          "name": "sobolevn",
          "email": "mail@sobolevn.me",
          "date": "2025-07-19T17:07:46Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T17:07:46Z"
        },
        "message": "gh-133875: Remove deprecated `pathlib.PurePath.is_reserved` (#133876)",
        "tree": {
          "sha": "88f86514d21e76ece7996849458407f777b16243",
          "url": "https://api.github.com/repos/python/cpython/git/trees/88f86514d21e76ece7996849458407f777b16243"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/67036f1ee1c23257d320a80c152090235b8ca892",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe9DiCRC1aQ7uu5UhlAAA/s4QABku8GfUq86sQQ0szdDiq/Qe\nzVE5WKXOsh1VgKq1eoqPHRvWenbhLbPnIY/7X6P0bcncFNKt7H5KvnPe5viYP4WX\nB4O2BLfokrtZCPR/Nw24qRnxMw5IwwgO39CAW0xETP59Ir2/uqwymeGHCW0vWYCh\nImkCSNDxtHP5yxCCYSHO3v3XCaOMH9nB1CZCaeMoRNHzgboRRnnZcv9wDcKyA3G7\npNJmLYfqFgYNiI+gITWCHe2VIZKsOZj09sdAs31pzBG/Z7dxSzQCujt998pgD8Wy\nRbdQDRRIpmVR3PAb0kgJgfZRZJl9fgIGEx9DtTbtDzlbuHqajZB2cUJWVgH4eX5U\nUdIzGBo/xYymrs1dlk4Pq9vtzNm/uGwDsGPSAAerDGrK+2TLdCSHxnKCidF3u4em\nAOhuJlbKHAgh75d4GTpT3KoboQw6ar4pG3JwTGrdOJoYEqjLpYmaq933dNx9ejbN\nh0gUscbxCegSsfQmq0lsqtIRfux4Uj9jqpAm80TVaMmLWFAqK2vJ05LWBD6QIpTp\nVEZ/WEu2zLBGx2/6BB/ZQA4HIgUlN68wnvuAGJSL3FRMl4QDlCo7VIDhp2Sx/zSR\niwc9QtOdV8nK4jTfjq0nZIfUNPyQO2pBNJAUYECOUTOlzJS7x5ejDQaoyeUw0uLl\nY3Lfu4F0P7C3dhaLWfGw\n=1Ukx\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 88f86514d21e76ece7996849458407f777b16243\nparent 7ae4749d064bd49b0dd96172fee20c1f1678d9e9\nauthor sobolevn <mail@sobolevn.me> 1752944866 +0300\ncommitter GitHub <noreply@github.com> 1752944866 +0000\n\ngh-133875: Remove deprecated `pathlib.PurePath.is_reserved` (#133876)\n\n",
          "verified_at": "2025-07-19T17:07:47Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/67036f1ee1c23257d320a80c152090235b8ca892",
      "html_url": "https://github.com/python/cpython/commit/67036f1ee1c23257d320a80c152090235b8ca892",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/67036f1ee1c23257d320a80c152090235b8ca892/comments",
      "author": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7ae4749d064bd49b0dd96172fee20c1f1678d9e9",
          "url": "https://api.github.com/repos/python/cpython/commits/7ae4749d064bd49b0dd96172fee20c1f1678d9e9",
          "html_url": "https://github.com/python/cpython/commit/7ae4749d064bd49b0dd96172fee20c1f1678d9e9"
        }
      ]
    },
    {
      "sha": "7ae4749d064bd49b0dd96172fee20c1f1678d9e9",
      "node_id": "C_kwDOBN0Z8doAKDdhZTQ3NDlkMDY0YmQ0OWIwZGQ5NjE3MmZlZTIwYzFmMTY3OGQ5ZTk",
      "commit": {
        "author": {
          "name": "Hood Chatham",
          "email": "roberthoodchatham@gmail.com",
          "date": "2025-07-19T15:14:29Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T15:14:29Z"
        },
        "message": "gh-124621: Emscripten: Add support for async input devices (GH-136822)\n\nThis is useful for implementing proper `input()`. It requires the\nJavaScript engine to support the wasm JSPI spec which is now stage 4.\nIt is supported on Chrome since version 137 and on Firefox and node\nbehind a flag.\n\nWe override the `__wasi_fd_read()` syscall with our own variant that\nchecks for a readAsync operation. If it has it, we use our own async\nvariant of `fd_read()`, otherwise we use the original `fd_read()`.\nWe also add a variant of `FS.createDevice()` called\n`FS.createAsyncInputDevice()`.\n\nFinally, if JSPI is available, we wrap the `main()` symbol with\n`WebAssembly.promising()` so that we can stack switch from `fd_read()`.\nIf JSPI is not available, attempting to read from an AsyncInputDevice\nwill raise an `OSError`.",
        "tree": {
          "sha": "1da9b1ce6cef794f2077ab9e74aae5331d5a72df",
          "url": "https://api.github.com/repos/python/cpython/git/trees/1da9b1ce6cef794f2077ab9e74aae5331d5a72df"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/7ae4749d064bd49b0dd96172fee20c1f1678d9e9",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe7ZVCRC1aQ7uu5UhlAAALs0QALC5pao7rKhGwtqSXJRsrmRn\njymoPAcELL/g6BU0yzXwbdb4Kz1/fVzo1l2PnVTi14iCjGMZhoDro50m4y1HYjds\nPld6sxM8R+F5KUkgEKcmfWzJuJlTj05ZbhMayDj2+blmnOJpnmmLBS1fziMgREXU\nr9x3mTnde3m09qRROJfUrFTV5gFxBbUscq5shZMBJYaZ/9nK+zTw9hDI2sxU93cV\n95ZMtKxRl/dE+3I5t+f7Wk/miAiceKkRsnumegAm+Qo8FXvI8C3EkC49SW2oEgG3\nSNJokBD358cjMv6cyN3J2ETvd5iH2mEDYSYj5Q+9vH0lwROs+IuwI4dk09r4oAGS\nd8rzSrShg1UpCw5QeDvR6vO75Wm6UeF4rQtELGzYiAqEe2nRsIHqNEjXi7tBRNrR\nx8lU66xSqyzzhAQXhp42+BM+YaI8pxeMZrhdidohqfFmPP2TqhLepIyjjhuzNoaR\nkVTSvQ5iZGpogoc2Cy5dQxzNRZhU7Naq7IUaJztTeoSu0S4X38uk9VWLgCbYhywk\nwUdjP0vXbl1UEtcsdYkNAagQGjd0ShBQjCsILzICx3XYyeMAVDmmn/6xOdCsovzh\nLWHzLUiUo2rGWExIFev/pdL3vyO3gGStRrw5l3K/2NLTqI8Y3SzS84PETBA9SeWo\nmh6JScesDlAln+WeJsHX\n=tKv9\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 1da9b1ce6cef794f2077ab9e74aae5331d5a72df\nparent 1ba23244f3306aa8d19eb4b98cfee6ad4cf514c9\nauthor Hood Chatham <roberthoodchatham@gmail.com> 1752938069 +0200\ncommitter GitHub <noreply@github.com> 1752938069 +0200\n\ngh-124621: Emscripten: Add support for async input devices (GH-136822)\n\nThis is useful for implementing proper `input()`. It requires the\nJavaScript engine to support the wasm JSPI spec which is now stage 4.\nIt is supported on Chrome since version 137 and on Firefox and node\nbehind a flag.\n\nWe override the `__wasi_fd_read()` syscall with our own variant that\nchecks for a readAsync operation. If it has it, we use our own async\nvariant of `fd_read()`, otherwise we use the original `fd_read()`.\nWe also add a variant of `FS.createDevice()` called\n`FS.createAsyncInputDevice()`.\n\nFinally, if JSPI is available, we wrap the `main()` symbol with\n`WebAssembly.promising()` so that we can stack switch from `fd_read()`.\nIf JSPI is not available, attempting to read from an AsyncInputDevice\nwill raise an `OSError`.\n",
          "verified_at": "2025-07-19T15:14:30Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/7ae4749d064bd49b0dd96172fee20c1f1678d9e9",
      "html_url": "https://github.com/python/cpython/commit/7ae4749d064bd49b0dd96172fee20c1f1678d9e9",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/7ae4749d064bd49b0dd96172fee20c1f1678d9e9/comments",
      "author": {
        "login": "hoodmane",
        "id": 8739626,
        "node_id": "MDQ6VXNlcjg3Mzk2MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoodmane",
        "html_url": "https://github.com/hoodmane",
        "followers_url": "https://api.github.com/users/hoodmane/followers",
        "following_url": "https://api.github.com/users/hoodmane/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions",
        "organizations_url": "https://api.github.com/users/hoodmane/orgs",
        "repos_url": "https://api.github.com/users/hoodmane/repos",
        "events_url": "https://api.github.com/users/hoodmane/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoodmane/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1ba23244f3306aa8d19eb4b98cfee6ad4cf514c9",
          "url": "https://api.github.com/repos/python/cpython/commits/1ba23244f3306aa8d19eb4b98cfee6ad4cf514c9",
          "html_url": "https://github.com/python/cpython/commit/1ba23244f3306aa8d19eb4b98cfee6ad4cf514c9"
        }
      ]
    },
    {
      "sha": "1ba23244f3306aa8d19eb4b98cfee6ad4cf514c9",
      "node_id": "C_kwDOBN0Z8doAKDFiYTIzMjQ0ZjMzMDZhYThkMTllYjRiOThjZmVlNmFkNGNmNTE0Yzk",
      "commit": {
        "author": {
          "name": "Slavaqq",
          "email": "1911009+Slavaqq@users.noreply.github.com",
          "date": "2025-07-19T15:00:46Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T15:00:46Z"
        },
        "message": "gh-136793: Update the sampling rate in the documentation (#136829)",
        "tree": {
          "sha": "355e78e540db95d270130db4ec5f34ad07eb3205",
          "url": "https://api.github.com/repos/python/cpython/git/trees/355e78e540db95d270130db4ec5f34ad07eb3205"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/1ba23244f3306aa8d19eb4b98cfee6ad4cf514c9",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe7MeCRC1aQ7uu5UhlAAAQPkQAAOknacBE36NqZVm7UpgXBjJ\n/juOXXU9W1VuPHHcteFC24pc49MN3emB/QJiGPuCt/ADcYDwkPhUCG5f0aY3gNUN\nPVLIQH7vqRvpYXGrtzvwUFoKDiZFoq5AT2SwZYDToL79iJEiBbrHrntnVSGnKfyU\nkCETuAv94zu09SzNrT9G/tRJK9zE0UwPrIMzFfojF4TKPvX3tXpSMX/VHlBHpG26\nugddV88mlDZQQ1Y4lZXMG+gyP7KfRsyjQu9QuK2TIVyfA1XBQz7uzC2LEC1u2PP2\nfMF/PlMZVv8FUnXpa78Rn7JeALV5+XuzeNpPIlezINv1nYdjfj+AR+VLicL7SYR+\nkm+3wYDpV6tN6B7YQwDzcNnMjVTSWpNrsH3gxLj4lOgI21mi+LGN6vlPqi+x322a\nxbwtKhOfmEHqZPvXCTAsY3aCnLNi9rcZlNup1FLVC5rrV1+Yk2bSEA22c5gmODjv\nxtE1HG7hKBRZft21SQji5q25GWOI31hOZI5pgNeqBNCKkNBcVL53+ZD3SGCtrMi2\n8MVG1YfLfnO/4+I+QBscEK5VqASeac8iEHqlrBfjQ1Shl0/YiSaaRsMfZvJxOkg9\nZLegHgdVWgHdLHa5fPZW0PUQ7jSgq7s8mdvPs/ppk+jxl0WYBfTutKB0/oSECIrC\n8qJwPE+neE2zFmvrATT+\n=1O4C\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 355e78e540db95d270130db4ec5f34ad07eb3205\nparent 6293d8a1a648a498b7ac899631b74fa25c71c1ac\nauthor Slavaqq <1911009+Slavaqq@users.noreply.github.com> 1752937246 +0200\ncommitter GitHub <noreply@github.com> 1752937246 +0000\n\ngh-136793: Update the sampling rate in the documentation (#136829)\n\n",
          "verified_at": "2025-07-19T15:00:47Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/1ba23244f3306aa8d19eb4b98cfee6ad4cf514c9",
      "html_url": "https://github.com/python/cpython/commit/1ba23244f3306aa8d19eb4b98cfee6ad4cf514c9",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/1ba23244f3306aa8d19eb4b98cfee6ad4cf514c9/comments",
      "author": {
        "login": "Slavaqq",
        "id": 1911009,
        "node_id": "MDQ6VXNlcjE5MTEwMDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1911009?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Slavaqq",
        "html_url": "https://github.com/Slavaqq",
        "followers_url": "https://api.github.com/users/Slavaqq/followers",
        "following_url": "https://api.github.com/users/Slavaqq/following{/other_user}",
        "gists_url": "https://api.github.com/users/Slavaqq/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Slavaqq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Slavaqq/subscriptions",
        "organizations_url": "https://api.github.com/users/Slavaqq/orgs",
        "repos_url": "https://api.github.com/users/Slavaqq/repos",
        "events_url": "https://api.github.com/users/Slavaqq/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Slavaqq/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6293d8a1a648a498b7ac899631b74fa25c71c1ac",
          "url": "https://api.github.com/repos/python/cpython/commits/6293d8a1a648a498b7ac899631b74fa25c71c1ac",
          "html_url": "https://github.com/python/cpython/commit/6293d8a1a648a498b7ac899631b74fa25c71c1ac"
        }
      ]
    },
    {
      "sha": "6293d8a1a648a498b7ac899631b74fa25c71c1ac",
      "node_id": "C_kwDOBN0Z8doAKDYyOTNkOGExYTY0OGE0OThiN2FjODk5NjMxYjc0ZmEyNWM3MWMxYWM",
      "commit": {
        "author": {
          "name": "Matthieu Lienart",
          "email": "50069805+mlnrt@users.noreply.github.com",
          "date": "2025-07-19T14:43:56Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T14:43:56Z"
        },
        "message": "gh-136752: Clarify documentation for ``IPv{N}Address.is_reserved`` (#136794)\n\nCo-authored-by: Matthieu Lienart <matthieu.lienart@axians.com>\nCo-authored-by: Adam Turner <9087854+AA-Turner@users.noreply.github.com>",
        "tree": {
          "sha": "64f0149225e76316f333ef2f56f8647312129df5",
          "url": "https://api.github.com/repos/python/cpython/git/trees/64f0149225e76316f333ef2f56f8647312129df5"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/6293d8a1a648a498b7ac899631b74fa25c71c1ac",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe68sCRC1aQ7uu5UhlAAASNAQAAf26FNCjABZM1GqtfDnrncZ\n3aVAmAOZNT/gT+KnQ9flAfhHYGsNiSeJBHEWI+BqZJF/O7ees76EicioyhrVdNNl\nQcABBzDe5EaW7lz2H0DdqGZOblEl30RTlOp7sEsJ5hOkIGi2naMi2QoMbTk8aGXu\nYyNsl4qfVoFAJ1CNEzEfj2TA2z+dJvqJhlz6rTLfZg9AUmbLcb751Rn8p8tIJPHQ\nxrhh/WalBYNhVdTJe3t4CXqiutCL4014kWCMrbblfwWybWKYGWUJ8C2bCZSPoJ97\nPUfYsniGQxCnODakDXFTILjNm4PP/7F+Q0mHpfoEvty9T9HTsH2whVNG5kNxWGKO\nzbFvcQO7dsZkerlsTaiuLT4akj3g/lqG5ZlsXjcew3Cvrqnf3e9yBBzcdO6pYqAG\nDOLGJYYrfg9mGHqJ+6YXspfUEtsQwgx0UIlptyfq881PiR0l9NGMv8jcpbuyiWLw\nS/6KYl1PmBOPf9GYZsp056z9ZQLfqkm2lRhI2XH5afhj+UwfDn9etDhsDMuzisIj\ny5EIm+Fc7xx+d/Z29IMyzyzAo+03dzjZi4PqbJmgw1WTq50oZJ4dxNmSlBI8/hUi\nNZWRai9ulE+IsLOvqlrKJC5cb44iBKBGniu50qtVuTz7KLdzZyeUf4IQVY3OHiWQ\nMCzOwIS9vUxuVUZwwny1\n=0EHT\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 64f0149225e76316f333ef2f56f8647312129df5\nparent 57acd65a30f8cb1f3a3cc01322f03215017f5caa\nauthor Matthieu Lienart <50069805+mlnrt@users.noreply.github.com> 1752936236 +0200\ncommitter GitHub <noreply@github.com> 1752936236 +0000\n\ngh-136752: Clarify documentation for ``IPv{N}Address.is_reserved`` (#136794)\n\nCo-authored-by: Matthieu Lienart <matthieu.lienart@axians.com>\nCo-authored-by: Adam Turner <9087854+AA-Turner@users.noreply.github.com>",
          "verified_at": "2025-07-19T14:43:57Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/6293d8a1a648a498b7ac899631b74fa25c71c1ac",
      "html_url": "https://github.com/python/cpython/commit/6293d8a1a648a498b7ac899631b74fa25c71c1ac",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/6293d8a1a648a498b7ac899631b74fa25c71c1ac/comments",
      "author": {
        "login": "mlnrt",
        "id": 50069805,
        "node_id": "MDQ6VXNlcjUwMDY5ODA1",
        "avatar_url": "https://avatars.githubusercontent.com/u/50069805?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mlnrt",
        "html_url": "https://github.com/mlnrt",
        "followers_url": "https://api.github.com/users/mlnrt/followers",
        "following_url": "https://api.github.com/users/mlnrt/following{/other_user}",
        "gists_url": "https://api.github.com/users/mlnrt/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mlnrt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mlnrt/subscriptions",
        "organizations_url": "https://api.github.com/users/mlnrt/orgs",
        "repos_url": "https://api.github.com/users/mlnrt/repos",
        "events_url": "https://api.github.com/users/mlnrt/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mlnrt/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "57acd65a30f8cb1f3a3cc01322f03215017f5caa",
          "url": "https://api.github.com/repos/python/cpython/commits/57acd65a30f8cb1f3a3cc01322f03215017f5caa",
          "html_url": "https://github.com/python/cpython/commit/57acd65a30f8cb1f3a3cc01322f03215017f5caa"
        }
      ]
    },
    {
      "sha": "57acd65a30f8cb1f3a3cc01322f03215017f5caa",
      "node_id": "C_kwDOBN0Z8doAKDU3YWNkNjVhMzBmOGNiMWYzYTNjYzAxMzIyZjAzMjE1MDE3ZjVjYWE",
      "commit": {
        "author": {
          "name": "Valerio Gianella",
          "email": "49408327+valeriogianella@users.noreply.github.com",
          "date": "2025-07-19T14:43:00Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T14:43:00Z"
        },
        "message": "gh-135468: Improve ``BaseHandler.http_error_default()`` parameter descriptions (#136797)\n\nCo-authored-by: Adam Turner <9087854+aa-turner@users.noreply.github.com>",
        "tree": {
          "sha": "c6789444df8b7446685d7606df170b96562bde75",
          "url": "https://api.github.com/repos/python/cpython/git/trees/c6789444df8b7446685d7606df170b96562bde75"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/57acd65a30f8cb1f3a3cc01322f03215017f5caa",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe670CRC1aQ7uu5UhlAAAGyAQAF/TVqDWnfy8FoNLzUEX5C4R\nMmugTFlpWYB+Pdcz3m6PMK00xoypMz9RWsIu6eVe5+XYtm/+ALA+09mN0BibyUVR\nsJbySKAHbz7fyO8l8HKPxkmwwra6Itouf19oKEr61mAHcKTjNanAS7na72/Gw0vq\nGpdMDyEGixGNukv+4IPvmcacWT13g10nAfoJq4yKyS+Bwsa04g51DdhU/Cw66orm\nMMNv7HID0k3KYDzNle6jgVB4UPjGVidvbAC/aZWMMkBW6FVqj/8VJhIavWEbc35r\nRDDxB8ORF/qaVLScN/7JAdL/P06Stq5oWfQ9OG3cLvEDT/WXAxt7GGbdMsBjh9lo\n67EbmDJLRNBlsWnC/H+OaYER0ROy5/ono4FuU1vgm8rtOa3nWE9ZyhtkGy7n9Aqe\nt9k1/vPwzw5/1A+BiiL22ToBKZ5bDuqzHD67XWgoqzsp51PJGr1yN8WRgC//qpBQ\nBzEULLuTZm5Ii1L4xMhl9ziHK4r8N9FjmnuzitIOjzFjkHPpKmr36OfQTiwk1wW1\nb/Fdwjt/+UElmbUf1cvvn90v9hLU2FfC6eOC+ThLWEbYtWPC00T/PC30q4V+0n4j\nHEKPlbzPcK8LUYwo8MJ5AZvtK5QabvrW6eWe95r7AKdgyn87zdjgEFsJuc+D6Yvy\nH0vf47NaW/hJ/tgnT1YJ\n=TyNa\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c6789444df8b7446685d7606df170b96562bde75\nparent 8ffc3ef01e83ffe629c6107082677de4d23974d5\nauthor Valerio Gianella <49408327+valeriogianella@users.noreply.github.com> 1752936180 +0200\ncommitter GitHub <noreply@github.com> 1752936180 +0100\n\ngh-135468: Improve ``BaseHandler.http_error_default()`` parameter descriptions (#136797)\n\nCo-authored-by: Adam Turner <9087854+aa-turner@users.noreply.github.com>",
          "verified_at": "2025-07-19T14:43:01Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/57acd65a30f8cb1f3a3cc01322f03215017f5caa",
      "html_url": "https://github.com/python/cpython/commit/57acd65a30f8cb1f3a3cc01322f03215017f5caa",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/57acd65a30f8cb1f3a3cc01322f03215017f5caa/comments",
      "author": {
        "login": "valeriogianella",
        "id": 49408327,
        "node_id": "MDQ6VXNlcjQ5NDA4MzI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/49408327?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/valeriogianella",
        "html_url": "https://github.com/valeriogianella",
        "followers_url": "https://api.github.com/users/valeriogianella/followers",
        "following_url": "https://api.github.com/users/valeriogianella/following{/other_user}",
        "gists_url": "https://api.github.com/users/valeriogianella/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/valeriogianella/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/valeriogianella/subscriptions",
        "organizations_url": "https://api.github.com/users/valeriogianella/orgs",
        "repos_url": "https://api.github.com/users/valeriogianella/repos",
        "events_url": "https://api.github.com/users/valeriogianella/events{/privacy}",
        "received_events_url": "https://api.github.com/users/valeriogianella/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8ffc3ef01e83ffe629c6107082677de4d23974d5",
          "url": "https://api.github.com/repos/python/cpython/commits/8ffc3ef01e83ffe629c6107082677de4d23974d5",
          "html_url": "https://github.com/python/cpython/commit/8ffc3ef01e83ffe629c6107082677de4d23974d5"
        }
      ]
    },
    {
      "sha": "8ffc3ef01e83ffe629c6107082677de4d23974d5",
      "node_id": "C_kwDOBN0Z8doAKDhmZmMzZWYwMWU4M2ZmZTYyOWM2MTA3MDgyNjc3ZGU0ZDIzOTc0ZDU",
      "commit": {
        "author": {
          "name": "jdunter",
          "email": "2ve@mailbox.org",
          "date": "2025-07-19T14:08:19Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T14:08:19Z"
        },
        "message": "gh-54732: Make argparse error caused by empty rows in option files explicit (#136795)\n\nCo-authored-by: Adam Turner <9087854+AA-Turner@users.noreply.github.com>",
        "tree": {
          "sha": "812e60192990a2f06e66094ac091dcb00c4da5f7",
          "url": "https://api.github.com/repos/python/cpython/git/trees/812e60192990a2f06e66094ac091dcb00c4da5f7"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/8ffc3ef01e83ffe629c6107082677de4d23974d5",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe6bTCRC1aQ7uu5UhlAAABAAQAJ8feKBG/bEUqAkL70sZc5UO\nYtYrL7RtQ8iPfuB85U+QysC5R5IsZcCPjtVUZtNoTGyOT9K4v7pNsul/VMPHsH1i\nXkVjUysoUmcqSFKNFrJGBEORTvcXR+Z2OjJsRLeq687PU9F1nZEKe7OigPFjtc9h\nS1bQGuvRgjfpHRGZukLSBW5RFO8rWOdS/XRKc45PhbEGEiX7qSbV4621bKEWW62m\nlrg9QUz/v1thgWpZLVKU6l9t7vJVZqzUEk3wEiFva53BXpA9V+NQiLccfVUwyChQ\n1p8x4HvKt8uGU6xkqHb9ruU6qzqvx2pFRfm9xpw65O6s2ThbD0LEjVnMeGncoUMt\nzM+YxIqKEDOjEwCw5ZH+83QfpujZcpwUVcRaRp+Se6Qzeb5nuAk/vVdbCwVmWpPo\nIdy+j3HazNRpcr3eYi4OVFOcEmmsj53ODRqPzOqag7lbYlmWxurqQXSgcRihBYof\nsSaRHXOB87FeTrTE8MY0chuDVq+WhEObvrAYV2Poz9OYtIuDQ3QoGa+nfJ2BZAdk\nhBkOyaLMmlzsf9HczQG7+OJ6zLhr/6qA12jD+2w4IS+D+gf8FYqrkKsHcztX3hBg\ncrEVx2SEFj3O3pDsYO44pNEPqRR4g66CgkJHG7Ycewz6361NlKcq7jbrWAF1Da5L\ndElLZaAlGAcemM9cLLH9\n=/tqm\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 812e60192990a2f06e66094ac091dcb00c4da5f7\nparent 3a648445337098abf22c7faa296389dab597797c\nauthor jdunter <2ve@mailbox.org> 1752934099 +0200\ncommitter GitHub <noreply@github.com> 1752934099 +0000\n\ngh-54732: Make argparse error caused by empty rows in option files explicit (#136795)\n\nCo-authored-by: Adam Turner <9087854+AA-Turner@users.noreply.github.com>",
          "verified_at": "2025-07-19T14:08:20Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/8ffc3ef01e83ffe629c6107082677de4d23974d5",
      "html_url": "https://github.com/python/cpython/commit/8ffc3ef01e83ffe629c6107082677de4d23974d5",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/8ffc3ef01e83ffe629c6107082677de4d23974d5/comments",
      "author": {
        "login": "jdunter",
        "id": 19793199,
        "node_id": "MDQ6VXNlcjE5NzkzMTk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19793199?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jdunter",
        "html_url": "https://github.com/jdunter",
        "followers_url": "https://api.github.com/users/jdunter/followers",
        "following_url": "https://api.github.com/users/jdunter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jdunter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jdunter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jdunter/subscriptions",
        "organizations_url": "https://api.github.com/users/jdunter/orgs",
        "repos_url": "https://api.github.com/users/jdunter/repos",
        "events_url": "https://api.github.com/users/jdunter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jdunter/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3a648445337098abf22c7faa296389dab597797c",
          "url": "https://api.github.com/repos/python/cpython/commits/3a648445337098abf22c7faa296389dab597797c",
          "html_url": "https://github.com/python/cpython/commit/3a648445337098abf22c7faa296389dab597797c"
        }
      ]
    },
    {
      "sha": "3a648445337098abf22c7faa296389dab597797c",
      "node_id": "C_kwDOBN0Z8doAKDNhNjQ4NDQ1MzM3MDk4YWJmMjJjN2ZhYTI5NjM4OWRhYjU5Nzc5N2M",
      "commit": {
        "author": {
          "name": "Olga Matoula",
          "email": "olgamatoula@gmail.com",
          "date": "2025-07-19T13:15:49Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T13:15:49Z"
        },
        "message": "gh-136801: Fix PyREPL syntax highlightning on match cases after multi-line case (GH-136804)",
        "tree": {
          "sha": "4f27edebe8fba6d73c8eb7a6519ff6204c5bdea4",
          "url": "https://api.github.com/repos/python/cpython/git/trees/4f27edebe8fba6d73c8eb7a6519ff6204c5bdea4"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/3a648445337098abf22c7faa296389dab597797c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe5qFCRC1aQ7uu5UhlAAAqsEQAIKgaOgyxCJWP35W6KumI3vW\n3nFNyLWnD9YMu961o0qw45W1jcr+cr3Y+3uuVC1t9MJOCoz0puM/q6DqpY8UC8+/\nW5XcfGQwgGdVIVZSRcD7RClCUICTeCJ5CQPulIySkunbgSBD2l0sq9Kg0damM4GJ\nPy41+GYrS2ERcdQds5QD+cULAK2ry3X/8fR4Y7dUWPvTX9FNw9yIYvz1sGPSqfNn\nmwrd4zOQvtVLulp8c7BZerk0DR6hzyoBUYQRDkjmgwNenrtAcX/8TeFATHTVL8ep\nbO4Q6r24rvYJPiHJXiXeQLVnPz0EE5FVMgnbGT6tz6Jx/omRueDQuCRV1rpR3goQ\nrJM1OseOvigrdBE54Ikdg1bQgqNjjZJ4Vtd35xrBvuRpqr5ZDDax/LnoQMtrF9bl\nMB85s995JuWv1AonG5npXNeUw7E00zTUdZ31w8UwjDVqr5FGPMvOf/xnm69R1ie8\ngctrk+aTeoCA1zXenuS2OtaXFm/qSwilwhMnsPyDV8wJgvNo4qAjn65bfHyOEO3B\nLUjpSXY8PYF2Y3lT35cn+lVIciZUa1cGGacctwpEmlbLzDt5SWLc0BdZC2FYZOWc\n+qhrKTuCztSE/ZPZe5tGb2/1Gmq9Xpvsr7R0NcAI+q3ygJ8A343DRKO2SFs96mTj\njz8isJb6Kyu+DNORMhNY\n=vWy3\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 4f27edebe8fba6d73c8eb7a6519ff6204c5bdea4\nparent 6a1c93af806d0ca5d3fb86cd183d00013bbf28d1\nauthor Olga Matoula <olgamatoula@gmail.com> 1752930949 +0100\ncommitter GitHub <noreply@github.com> 1752930949 +0200\n\ngh-136801: Fix PyREPL syntax highlightning on match cases after multi-line case (GH-136804)\n\n",
          "verified_at": "2025-07-19T13:15:50Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/3a648445337098abf22c7faa296389dab597797c",
      "html_url": "https://github.com/python/cpython/commit/3a648445337098abf22c7faa296389dab597797c",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/3a648445337098abf22c7faa296389dab597797c/comments",
      "author": {
        "login": "olgarithms",
        "id": 9518805,
        "node_id": "MDQ6VXNlcjk1MTg4MDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9518805?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olgarithms",
        "html_url": "https://github.com/olgarithms",
        "followers_url": "https://api.github.com/users/olgarithms/followers",
        "following_url": "https://api.github.com/users/olgarithms/following{/other_user}",
        "gists_url": "https://api.github.com/users/olgarithms/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olgarithms/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olgarithms/subscriptions",
        "organizations_url": "https://api.github.com/users/olgarithms/orgs",
        "repos_url": "https://api.github.com/users/olgarithms/repos",
        "events_url": "https://api.github.com/users/olgarithms/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olgarithms/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6a1c93af806d0ca5d3fb86cd183d00013bbf28d1",
          "url": "https://api.github.com/repos/python/cpython/commits/6a1c93af806d0ca5d3fb86cd183d00013bbf28d1",
          "html_url": "https://github.com/python/cpython/commit/6a1c93af806d0ca5d3fb86cd183d00013bbf28d1"
        }
      ]
    },
    {
      "sha": "6a1c93af806d0ca5d3fb86cd183d00013bbf28d1",
      "node_id": "C_kwDOBN0Z8doAKDZhMWM5M2FmODA2ZDBjYTVkM2ZiODZjZDE4M2QwMDAxM2JiZjI4ZDE",
      "commit": {
        "author": {
          "name": "Saurav Singh",
          "email": "sauravsinghshakya@yahoo.com",
          "date": "2025-07-19T12:55:02Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T12:55:02Z"
        },
        "message": "gh-136764: improve comment in enum.verify.__call__ (GH-136774)",
        "tree": {
          "sha": "3884522a51a2f1c065c24a33db257e24720c645f",
          "url": "https://api.github.com/repos/python/cpython/git/trees/3884522a51a2f1c065c24a33db257e24720c645f"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/6a1c93af806d0ca5d3fb86cd183d00013bbf28d1",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe5WmCRC1aQ7uu5UhlAAAmlsQAE3yk7ncLEu4rvs5VxFyyWpR\nQ5frA1D9+DAab4tcydqLUNUfmz36ApjV0Vw+pKUdjtsK26qfhMXEKSfFLerHX5o2\nIEQpBpPdxt42ZD8PjYVbDg9IfZiKErVmUBHC5+Gjs5ZklN4OyM5I9Nn0pntW07GZ\nDCgVJarl72cNrVlxh3eBaWx8UNKqsl+lAe8e1WKOGLvAa+5sQGiSiDUzoINv5QgG\n1hcyjNDoLZxlqbf8/v6oxl0obIeq1TBuiWY+b+En/MkqukKnXx1IxhT/f8FLm84T\ngdvC791advEYs2Rjj/uAsWSGZzMidxjtlLz//coga+umGJtljR3RVq6iw2CvVRIW\nq35TDtAvygYP9qpmaesRtdZs3xOwEJTVbRyw57wwp/MBw5ObdpRam17+xwPAE/29\nokvwzLEvizIBnlXSZeofhPyDZ/gJZ7FbBcHzA/9/f8oORqF1/IioHvBKI0U9HQZa\nnU7PYgzlCk8c/HGekwuq4mnFI7mM6xUxzNonPFWMyDeE9blcF14I+DW5Vj/TBr8R\nmJkDWHg9OZHIyXma0oZ/D7q7rmKhAWA7K/DcK2nAZAIscYzC9spTvVSYK9fHnPG1\nsDWflgUQ3MOXOaysPRABqq7PyNN1fGnsZphJHkZXKaUVyqRTYL/ufXBvGgKJf+f/\ndb8haz/fRTxQ4GxzlM6C\n=j5BN\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 3884522a51a2f1c065c24a33db257e24720c645f\nparent f575588ccf27d8d54a1e99cfda944f2614b3255c\nauthor Saurav Singh <sauravsinghshakya@yahoo.com> 1752929702 +0200\ncommitter GitHub <noreply@github.com> 1752929702 -0700\n\ngh-136764: improve comment in enum.verify.__call__ (GH-136774)\n\n",
          "verified_at": "2025-07-19T12:55:03Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/6a1c93af806d0ca5d3fb86cd183d00013bbf28d1",
      "html_url": "https://github.com/python/cpython/commit/6a1c93af806d0ca5d3fb86cd183d00013bbf28d1",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/6a1c93af806d0ca5d3fb86cd183d00013bbf28d1/comments",
      "author": {
        "login": "damngamerz",
        "id": 13048113,
        "node_id": "MDQ6VXNlcjEzMDQ4MTEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13048113?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/damngamerz",
        "html_url": "https://github.com/damngamerz",
        "followers_url": "https://api.github.com/users/damngamerz/followers",
        "following_url": "https://api.github.com/users/damngamerz/following{/other_user}",
        "gists_url": "https://api.github.com/users/damngamerz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/damngamerz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/damngamerz/subscriptions",
        "organizations_url": "https://api.github.com/users/damngamerz/orgs",
        "repos_url": "https://api.github.com/users/damngamerz/repos",
        "events_url": "https://api.github.com/users/damngamerz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/damngamerz/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f575588ccf27d8d54a1e99cfda944f2614b3255c",
          "url": "https://api.github.com/repos/python/cpython/commits/f575588ccf27d8d54a1e99cfda944f2614b3255c",
          "html_url": "https://github.com/python/cpython/commit/f575588ccf27d8d54a1e99cfda944f2614b3255c"
        }
      ]
    },
    {
      "sha": "f575588ccf27d8d54a1e99cfda944f2614b3255c",
      "node_id": "C_kwDOBN0Z8doAKGY1NzU1ODhjY2YyN2Q4ZDU0YTFlOTljZmRhOTQ0ZjI2MTRiMzI1NWM",
      "commit": {
        "author": {
          "name": "aggshruti99",
          "email": "aggshruti99@gmail.com",
          "date": "2025-07-19T12:24:39Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T12:24:39Z"
        },
        "message": "gh-135730: Clarify multiprocessing.Queue close() documentation (#136803)\n\nAdd a copy of the text from SimpleQueue.close()\n\n---------\n\nCo-authored-by: saggarwal145 <saggarwal145@bloomberg.net>\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
        "tree": {
          "sha": "12ab744906ee8b6ea33edce1717276208faed023",
          "url": "https://api.github.com/repos/python/cpython/git/trees/12ab744906ee8b6ea33edce1717276208faed023"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/f575588ccf27d8d54a1e99cfda944f2614b3255c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe46HCRC1aQ7uu5UhlAAA2JMQAJ+buRzIbQ9pjju48pFsUEZH\nndOzvyzy3QmG8PwZ3tS/kzHVR0oU87WuPfF+U8KMjdhaluj5bHE/Orjsu77XRQml\nUUY2elKADl0s3erNiYIn3usIJbkOvZED2HajFwRyjwTyh1sNh3QWrtMVeajRsu41\nCpjgwW2IP3NBz11O1prb47sQzkxt4VHolC+9SYz6oe1j2/JnAxARmEJRPmQIdUZi\nlKPyXwKx7hBegOfk4Y+cgRV01Wwr/lUx0n3PXeB0PrZeGGccXOmyCih7o3BMqHj5\n2CCUOzHNc0LWRQAO/QNnzQ7pWARfwHeoQvEtArJ3fcDZO+WA8bIRe7hIMUfouBTO\nFx9HATO2Dkz+ZqW0mS9Ea0CdF4pyV9X7bfk7bRWD9IQDTa3UQNuAaxLdpWoOxBcg\n1ac/twCuhgGdkIOArOtClV5CJVCBdJ51wkwGMt8wjICMjRNhPlK8DXL5Q4egOnw4\nND0mYTIk7rod6L3BhzYM0Bb5fFUFNsz2i/ja7kZ89jgeCrp33Nuab6BAhsaRMdCS\nIxXe9JzpXoJfuHrjVQ3hsBF+Q/3q+2egUxTxBV9p9ga3l3na4CosG+r/po3viqhr\n7YXuTVvY84dN9MDu3sLav2rU01kwukv/isW7jxvHF53wsUD42eIUXXSw90neNPB1\nOXmeRH5zVJ7+G0K2mqqy\n=KShu\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 12ab744906ee8b6ea33edce1717276208faed023\nparent d19bb4471331ca2cb87b86e4c904bc9a2bafb044\nauthor aggshruti99 <aggshruti99@gmail.com> 1752927879 +0100\ncommitter GitHub <noreply@github.com> 1752927879 +0200\n\ngh-135730: Clarify multiprocessing.Queue close() documentation (#136803)\n\nAdd a copy of the text from SimpleQueue.close()\n\n---------\n\nCo-authored-by: saggarwal145 <saggarwal145@bloomberg.net>\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
          "verified_at": "2025-07-19T12:24:40Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/f575588ccf27d8d54a1e99cfda944f2614b3255c",
      "html_url": "https://github.com/python/cpython/commit/f575588ccf27d8d54a1e99cfda944f2614b3255c",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/f575588ccf27d8d54a1e99cfda944f2614b3255c/comments",
      "author": {
        "login": "aggshruti99",
        "id": 221436743,
        "node_id": "U_kgDODTLbRw",
        "avatar_url": "https://avatars.githubusercontent.com/u/221436743?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aggshruti99",
        "html_url": "https://github.com/aggshruti99",
        "followers_url": "https://api.github.com/users/aggshruti99/followers",
        "following_url": "https://api.github.com/users/aggshruti99/following{/other_user}",
        "gists_url": "https://api.github.com/users/aggshruti99/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aggshruti99/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aggshruti99/subscriptions",
        "organizations_url": "https://api.github.com/users/aggshruti99/orgs",
        "repos_url": "https://api.github.com/users/aggshruti99/repos",
        "events_url": "https://api.github.com/users/aggshruti99/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aggshruti99/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "d19bb4471331ca2cb87b86e4c904bc9a2bafb044",
          "url": "https://api.github.com/repos/python/cpython/commits/d19bb4471331ca2cb87b86e4c904bc9a2bafb044",
          "html_url": "https://github.com/python/cpython/commit/d19bb4471331ca2cb87b86e4c904bc9a2bafb044"
        }
      ]
    },
    {
      "sha": "d19bb4471331ca2cb87b86e4c904bc9a2bafb044",
      "node_id": "C_kwDOBN0Z8doAKGQxOWJiNDQ3MTMzMWNhMmNiODdiODZlNGM5MDRiYzlhMmJhZmIwNDQ",
      "commit": {
        "author": {
          "name": "Disconnect3d",
          "email": "dominik.b.czarnota@gmail.com",
          "date": "2025-07-19T11:52:54Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T11:52:54Z"
        },
        "message": "Doc/c-api/memory.rst: extend --without-pymalloc doc with ASan information (GH-136790)\n\n* Doc/c-api/memory.rst: extend --without-pymalloc doc with ASan information\n\nThis commit extends the documentation for disabling pymalloc with the `--without-pymalloc` flag regarding why it is worth to use it when enabling AddressSanitizer for Python build (which is done, e.g., in CPython's CI builds).\n\nI have tested the CPython latest main build with both ASan and pymalloc enabled and it seems to work just fine. I did run the `python -m test` suite which didn't uncover any ASan crashes (though, it detected some memory leaks, which I believe are irrelevant here).\n\nI have discussed ASan and this flag with @encukou on the CPython Core sprint on EuroPython 2025. We initially thought that the `--without-pymalloc` flag is needed for ASan builds due to the fact pymalloc must hit the begining of page when determining if the memory to be freed comes from pymalloc or was allocated by the system malloc. In other words, we thought, that ASan would crash CPython during free of big objects (allocated by system malloc). It may be that this was the case in the past, but it is not the case anymore as the `address_in_range` function used by pymalloc is annotated to be skipped from the ASan instrumentation.\n\nThis code can be seen here:\nhttps://github.com/python/cpython/blob/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1/Objects/obmalloc.c#L2096-L2110\n\nWhile the annotation macro is defined here:\nhttps://github.com/python/cpython/blob/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1/Include/pyport.h#L582-L598\n\nAnd the corresponding attribute is documented in:\n* for gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-no_005fsanitize_005faddress-function-attribute\n* for clang: https://clang.llvm.org/docs/AttributeReference.html#no-sanitize-address-no-address-safety-analysis\n\n* Update Doc/c-api/memory.rst\n\n* Improve --with-address-sanitizer and pymalloc docs\n\n---------\n\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
        "tree": {
          "sha": "6470d76721bf1eea7c1d38e5ff20c607c16da423",
          "url": "https://api.github.com/repos/python/cpython/git/trees/6470d76721bf1eea7c1d38e5ff20c607c16da423"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/d19bb4471331ca2cb87b86e4c904bc9a2bafb044",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe4cWCRC1aQ7uu5UhlAAA1rwQAGcPJxq3o3LVzntwGtBMepKl\n556646ywFyQG1gfk8f3ZlNMuzJkOvEefGM9p+j0Y+UMGWypiZcrirt4NTBiJcJa/\noXCkWa2NrlvRYqcRUz50qNlDJEqQ2xorn3AfNF5o9d9lcS/qKhzk2UPYY+iK0qQx\n41HYX4vNZNVdUl31aKbKTCl/j+qXBVrU5TzknSnUFw5//3t2QcmtgWk3DbDhc0RJ\nrwr4AP77WlT093QB5fPoX4KFRVZftocUJruW8YDpY8g9LCQV0Z/Wf5f3VKGS6y7q\n/jSYqonRNKIdrm6+kEbeVGi7RSYLP4durBSTvP5pPEVnjKJcmrIC2z2eXj0XKkPW\nZFrwzm3MugVrL1z95EymkioEVrbqNUou6Xmb1g2/5JixxUxLr2WPzBEZCA/jnIpf\n0oxK9dNj0vuppdSjuabDgVth4ZyoBOaFmBWz+o2QY3mfiLxwirhE9ws37tFB0Igm\n7aLA1F5b6Xfv5cbfnwuy/Gvw4jR/D5J9yZFDXon5Dlo8TwYcaR0OiNiIRnIV0K4k\nOhq3pn/eXgVqOwbyrOCpBHyyxNDmgQBkfnvacj5j6/5iHtAVTqdnCP+ilSO9C/qT\nh7WvvGmUyWkeL6b1CtbGI5SkymtNcz2tfKmt0ViV255FOmspZ/zjhs9YUENrDfz4\niDPwkDIGs3PhaYZlvu7M\n=n7xj\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 6470d76721bf1eea7c1d38e5ff20c607c16da423\nparent eb8ac4c85773160a6104abafdea9159f26363a9b\nauthor Disconnect3d <dominik.b.czarnota@gmail.com> 1752925974 +0200\ncommitter GitHub <noreply@github.com> 1752925974 +0200\n\nDoc/c-api/memory.rst: extend --without-pymalloc doc with ASan information (GH-136790)\n\n* Doc/c-api/memory.rst: extend --without-pymalloc doc with ASan information\n\nThis commit extends the documentation for disabling pymalloc with the `--without-pymalloc` flag regarding why it is worth to use it when enabling AddressSanitizer for Python build (which is done, e.g., in CPython's CI builds).\n\nI have tested the CPython latest main build with both ASan and pymalloc enabled and it seems to work just fine. I did run the `python -m test` suite which didn't uncover any ASan crashes (though, it detected some memory leaks, which I believe are irrelevant here).\n\nI have discussed ASan and this flag with @encukou on the CPython Core sprint on EuroPython 2025. We initially thought that the `--without-pymalloc` flag is needed for ASan builds due to the fact pymalloc must hit the begining of page when determining if the memory to be freed comes from pymalloc or was allocated by the system malloc. In other words, we thought, that ASan would crash CPython during free of big objects (allocated by system malloc). It may be that this was the case in the past, but it is not the case anymore as the `address_in_range` function used by pymalloc is annotated to be skipped from the ASan instrumentation.\n\nThis code can be seen here:\nhttps://github.com/python/cpython/blob/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1/Objects/obmalloc.c#L2096-L2110\n\nWhile the annotation macro is defined here:\nhttps://github.com/python/cpython/blob/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1/Include/pyport.h#L582-L598\n\nAnd the corresponding attribute is documented in:\n* for gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-no_005fsanitize_005faddress-function-attribute\n* for clang: https://clang.llvm.org/docs/AttributeReference.html#no-sanitize-address-no-address-safety-analysis\n\n* Update Doc/c-api/memory.rst\n\n* Improve --with-address-sanitizer and pymalloc docs\n\n---------\n\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
          "verified_at": "2025-07-19T11:52:54Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/d19bb4471331ca2cb87b86e4c904bc9a2bafb044",
      "html_url": "https://github.com/python/cpython/commit/d19bb4471331ca2cb87b86e4c904bc9a2bafb044",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/d19bb4471331ca2cb87b86e4c904bc9a2bafb044/comments",
      "author": {
        "login": "disconnect3d",
        "id": 10009354,
        "node_id": "MDQ6VXNlcjEwMDA5MzU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/10009354?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/disconnect3d",
        "html_url": "https://github.com/disconnect3d",
        "followers_url": "https://api.github.com/users/disconnect3d/followers",
        "following_url": "https://api.github.com/users/disconnect3d/following{/other_user}",
        "gists_url": "https://api.github.com/users/disconnect3d/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/disconnect3d/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/disconnect3d/subscriptions",
        "organizations_url": "https://api.github.com/users/disconnect3d/orgs",
        "repos_url": "https://api.github.com/users/disconnect3d/repos",
        "events_url": "https://api.github.com/users/disconnect3d/events{/privacy}",
        "received_events_url": "https://api.github.com/users/disconnect3d/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "eb8ac4c85773160a6104abafdea9159f26363a9b",
          "url": "https://api.github.com/repos/python/cpython/commits/eb8ac4c85773160a6104abafdea9159f26363a9b",
          "html_url": "https://github.com/python/cpython/commit/eb8ac4c85773160a6104abafdea9159f26363a9b"
        }
      ]
    },
    {
      "sha": "eb8ac4c85773160a6104abafdea9159f26363a9b",
      "node_id": "C_kwDOBN0Z8doAKGViOGFjNGM4NTc3MzE2MGE2MTA0YWJhZmRlYTkxNTlmMjYzNjNhOWI",
      "commit": {
        "author": {
          "name": "nacind",
          "email": "107233139+nacind@users.noreply.github.com",
          "date": "2025-07-19T11:26:50Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T11:26:50Z"
        },
        "message": "gh-122450: Indicate that `Fraction` denominators are always positive (#136789)",
        "tree": {
          "sha": "74c912105cc2000b418f34a926620244a2dc3851",
          "url": "https://api.github.com/repos/python/cpython/git/trees/74c912105cc2000b418f34a926620244a2dc3851"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/eb8ac4c85773160a6104abafdea9159f26363a9b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe4D6CRC1aQ7uu5UhlAAAAoUQAB1bezbY0b4xx1GSqsZunSW0\n6RKI8pzBTSzECeorVopgrd6W7hWcQ+tNBAwA18JyAkgtnCSBkGmS24ysKQHvNs/j\nE+7QtHzWVaw/OZHcXT7hB1lmbCLve6bQwyjdRtiQmnuw8V7IreiHDpQm+wvth4w7\ngCEn2oQFTJ/Xz0XDkpd5gusY1xepCfJCIfYuo+UkyY6y4yavkE2078NrQADDLivY\nx1EWbhw/VVW0heIcEfi6qgnMxuS8G57+JoM75ypJ6Dv3o2ucN1j2depUkRMJYpyO\nUKsbO4ihzzNCaN6h0jlLLrZ2F3rODsfB3L9GfHTzqG/KyP9UthMOO+YKhggQOD5M\nCMQknlRIzrC/dFQ+Q65TiRPh64zJKZyTQVcpTbajTw3uWIKRDjzzA+pXxhTFNtoz\nE3FeUg/UXeNXXGZn9WlUz7GqOAtZk8+desCuSU66Sa/U1G3apHKDT3lDZBS14gsq\nodxonKuY7bGQN5A5dkkV3Gbva31gIg1+r1+f0EvcerPFxOIFGW98bGkZ/ouy7s9+\nj8G/DAtC00N9Q3rcLMZ7kQR5EZ7QSS7YQVLUNroH90x9NrU2EV6yUeLXowBfBCBr\nokpUXm4i6zy2IDzkOka1WxDWBaoEN7DmXivnvUetmHhgnXBB+2/HI8z2ESZHP3se\nSe9gJJ1EdMFHYm0x21dy\n=oVw+\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 74c912105cc2000b418f34a926620244a2dc3851\nparent acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1\nauthor nacind <107233139+nacind@users.noreply.github.com> 1752924410 +0200\ncommitter GitHub <noreply@github.com> 1752924410 +0200\n\ngh-122450: Indicate that `Fraction` denominators are always positive (#136789)\n\n",
          "verified_at": "2025-07-19T11:26:50Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/eb8ac4c85773160a6104abafdea9159f26363a9b",
      "html_url": "https://github.com/python/cpython/commit/eb8ac4c85773160a6104abafdea9159f26363a9b",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/eb8ac4c85773160a6104abafdea9159f26363a9b/comments",
      "author": {
        "login": "nacind",
        "id": 107233139,
        "node_id": "U_kgDOBmQ_cw",
        "avatar_url": "https://avatars.githubusercontent.com/u/107233139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nacind",
        "html_url": "https://github.com/nacind",
        "followers_url": "https://api.github.com/users/nacind/followers",
        "following_url": "https://api.github.com/users/nacind/following{/other_user}",
        "gists_url": "https://api.github.com/users/nacind/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nacind/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nacind/subscriptions",
        "organizations_url": "https://api.github.com/users/nacind/orgs",
        "repos_url": "https://api.github.com/users/nacind/repos",
        "events_url": "https://api.github.com/users/nacind/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nacind/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1",
          "url": "https://api.github.com/repos/python/cpython/commits/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1",
          "html_url": "https://github.com/python/cpython/commit/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1"
        }
      ]
    },
    {
      "sha": "acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1",
      "node_id": "C_kwDOBN0Z8doAKGFjZWZiOTc4ZGNiNWRkNTU0ZTNjNDlhMzAxNWVlNWMyYWQ2YmZkYTE",
      "commit": {
        "author": {
          "name": "Sina Zel taat",
          "email": "111974143+SZeltaat@users.noreply.github.com",
          "date": "2025-07-19T10:19:41Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T10:19:41Z"
        },
        "message": "gh-136769: Include fixed-width integers in the fundamental data types table (#136784)\n\nFixed-sized types, like ``c_int32``, are currently missing from the fundamental data types table\nin the ``ctypes`` documentation. This commit adds them, and  notes that ``c_[u]int8`` is an alias\nof ``c_[u]byte``.",
        "tree": {
          "sha": "d2a11b7a76b9fe24f2b58219e348618110816131",
          "url": "https://api.github.com/repos/python/cpython/git/trees/d2a11b7a76b9fe24f2b58219e348618110816131"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe3E9CRC1aQ7uu5UhlAAAD2IQAHifwNWRdfsf1LntLg9Jc/2+\neBYAvLKoLZnL7ipfPcS+tWFJYLcuFFicz8QnPFIXn8E36EnbYqcvtPvjv3wYUC6t\nO5g9nnKvuFyhnJDFwkVlfOi1N+FC2zUMKSoXLwylGA5qSxL6OGr49HHWuMXwUCoc\nosz0qfAGZWgjv9hvUZAgFB/mLTs4aiCt2HYX2aSVFpnob0skbvnW9idLW30dq0kr\nhdtWcQ8c0XqOW+mnAGegZec8XcQfIJqMU/Myy6FSnDx+0nJ1i4gXxXFPPP1C22Sn\nTmfaQfNSs2HqBY/KmoyguBStnSgr9/tW6p9kQQ3NvZwbUpwgFoe2biApZOd7A27x\nAL+ssTNqwNOC/luavQbREp9iSgLGrkI5NVTs7sDUZXPR4HgVNiZQP4zgprnU3K6o\nsYPzuCtFLFcsfl3fhiejq6HnFxEgr7BP9JBOR3hxEEPSMFz8c/J06W73sCK9pn2e\nrUy9q7W5DV0admGpgU3hkId4ZXU0lQXTMAVkkOgmPOKP5ro+ZNO9J5CUo21WU4Qf\nDHXizLp6jps3GHXnnFn5WMhNhmGRPzfqPptG5xPZr7ESkjiLmA2NiUyptXUI099q\naMuqq7EpmYc1h/91+Vb99LrDl6UO7PEAlbdOVFy+X4WSW0ZQTRD+EsqqKEevlOMw\nXIx7gek4u/c5HCxPzwXK\n=rRcM\n-----END PGP SIGNATURE-----\n",
          "payload": "tree d2a11b7a76b9fe24f2b58219e348618110816131\nparent 263e451c4114ac98add1f1e8aa9ee030e054bdfd\nauthor Sina Zel taat <111974143+SZeltaat@users.noreply.github.com> 1752920381 +0200\ncommitter GitHub <noreply@github.com> 1752920381 +0100\n\ngh-136769: Include fixed-width integers in the fundamental data types table (#136784)\n\nFixed-sized types, like ``c_int32``, are currently missing from the fundamental data types table\nin the ``ctypes`` documentation. This commit adds them, and  notes that ``c_[u]int8`` is an alias\nof ``c_[u]byte``.\n",
          "verified_at": "2025-07-19T10:19:41Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1",
      "html_url": "https://github.com/python/cpython/commit/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/acefb978dcb5dd554e3c49a3015ee5c2ad6bfda1/comments",
      "author": {
        "login": "SZeltaat",
        "id": 111974143,
        "node_id": "U_kgDOBqyW_w",
        "avatar_url": "https://avatars.githubusercontent.com/u/111974143?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SZeltaat",
        "html_url": "https://github.com/SZeltaat",
        "followers_url": "https://api.github.com/users/SZeltaat/followers",
        "following_url": "https://api.github.com/users/SZeltaat/following{/other_user}",
        "gists_url": "https://api.github.com/users/SZeltaat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/SZeltaat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SZeltaat/subscriptions",
        "organizations_url": "https://api.github.com/users/SZeltaat/orgs",
        "repos_url": "https://api.github.com/users/SZeltaat/repos",
        "events_url": "https://api.github.com/users/SZeltaat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/SZeltaat/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "263e451c4114ac98add1f1e8aa9ee030e054bdfd",
          "url": "https://api.github.com/repos/python/cpython/commits/263e451c4114ac98add1f1e8aa9ee030e054bdfd",
          "html_url": "https://github.com/python/cpython/commit/263e451c4114ac98add1f1e8aa9ee030e054bdfd"
        }
      ]
    },
    {
      "sha": "263e451c4114ac98add1f1e8aa9ee030e054bdfd",
      "node_id": "C_kwDOBN0Z8doAKDI2M2U0NTFjNDExNGFjOThhZGQxZjFlOGFhOWVlMDMwZTA1NGJkZmQ",
      "commit": {
        "author": {
          "name": "Gergely Elias",
          "email": "gergely.elias@gmail.com",
          "date": "2025-07-19T09:51:11Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T09:51:11Z"
        },
        "message": "gh-74598: document that `fnmatch.filterfalse` is affected by cache limitation (#136781)",
        "tree": {
          "sha": "7efd293c5f6d2c1767e272b1507d298037f543ba",
          "url": "https://api.github.com/repos/python/cpython/git/trees/7efd293c5f6d2c1767e272b1507d298037f543ba"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/263e451c4114ac98add1f1e8aa9ee030e054bdfd",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe2qPCRC1aQ7uu5UhlAAAAw0QAHZjP673tj81yEm24XQtnUQL\nLTreEXNCSyz0JYqtMxDyFGQD4aILuV6MgOfg/xdstuKppjV+siQX5nAPqvhGRSFl\nKsMDRWMmkOsWW2V8anB44a23TpgsNIeiDHbSEJhjTDkm/LSZDRc8hSTnQ8oe+Jia\nOI6lC9dHvaTmSoNTwO2FoeCPfBw7IakXYWNIcwirFx7KEPDMTiFZgxRvgd+8vQNk\npmuSSRMjHR9gAPK/ORUuH6LWiBGJ26PJoQJhC7TLIJleRfJN8cIb8jqQj6hT3+cX\nMIyLm7doqep9leHQqJczwSvzSzCjw10HbZ8veSp3F9a2LqiQ1CeHXeeoQm+3ScCj\npr7fmj7lntvga/FuP2heOAEAnsqAjudFHbUSHZK/VMg8hTmhOtQJ+fS9Uh4Zegms\nDbqA8kz9WsWVdBATnGEz61cNc/xtXE48MZl+CIoQYWPO/IcBXd2ASekdD020egqK\n0wtETEvTj700bBsuaVYpREdQ8WiG5z2/TEewDRSyMciASc0P4PDCrBV65hQsKEfT\n7bcNhOJjKO5lVpgXPaqcOxrx7WvLAizyna7TMkH1DnraaNm4cwdJqKxWXaziQX/N\ndhVZisSxtJPRufuLZMOP77wbbYp01OjMKaaXy0VOTLn9hB/DrXupBW2lCLnIhDN7\njqXcNyHROTChqSFM+EWi\n=y1yA\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 7efd293c5f6d2c1767e272b1507d298037f543ba\nparent 3eecc72ac70943f7e33297eea17803af15322c88\nauthor Gergely Elias <gergely.elias@gmail.com> 1752918671 +0200\ncommitter GitHub <noreply@github.com> 1752918671 +0000\n\ngh-74598: document that `fnmatch.filterfalse` is affected by cache limitation (#136781)\n\n",
          "verified_at": "2025-07-19T09:51:11Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/263e451c4114ac98add1f1e8aa9ee030e054bdfd",
      "html_url": "https://github.com/python/cpython/commit/263e451c4114ac98add1f1e8aa9ee030e054bdfd",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/263e451c4114ac98add1f1e8aa9ee030e054bdfd/comments",
      "author": {
        "login": "gergely-elias",
        "id": 4532150,
        "node_id": "MDQ6VXNlcjQ1MzIxNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4532150?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gergely-elias",
        "html_url": "https://github.com/gergely-elias",
        "followers_url": "https://api.github.com/users/gergely-elias/followers",
        "following_url": "https://api.github.com/users/gergely-elias/following{/other_user}",
        "gists_url": "https://api.github.com/users/gergely-elias/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gergely-elias/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gergely-elias/subscriptions",
        "organizations_url": "https://api.github.com/users/gergely-elias/orgs",
        "repos_url": "https://api.github.com/users/gergely-elias/repos",
        "events_url": "https://api.github.com/users/gergely-elias/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gergely-elias/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3eecc72ac70943f7e33297eea17803af15322c88",
          "url": "https://api.github.com/repos/python/cpython/commits/3eecc72ac70943f7e33297eea17803af15322c88",
          "html_url": "https://github.com/python/cpython/commit/3eecc72ac70943f7e33297eea17803af15322c88"
        }
      ]
    },
    {
      "sha": "3eecc72ac70943f7e33297eea17803af15322c88",
      "node_id": "C_kwDOBN0Z8doAKDNlZWNjNzJhYzcwOTQzZjdlMzMyOTdlZWExNzgwM2FmMTUzMjJjODg",
      "commit": {
        "author": {
          "name": "RafaelWO",
          "email": "38643099+RafaelWO@users.noreply.github.com",
          "date": "2025-07-19T09:29:44Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T09:29:44Z"
        },
        "message": "Docs: Improve example for ``itertools.batched()`` (#136775)\n\nThe current example `batched('ABCDEFG', n=3) \u2192 ABC DEF G` can confuse readers because both, the size of the tuples and the number of tuples are 3.\nBy using a batch size of n=2, it is clearer that the `n` argument refers to the size of the resulting tuples.\nI.e. the new example is: `batched('ABCDEFG', n=2) \u2192 AB CD EF G`",
        "tree": {
          "sha": "08d7d02c849d99454485271877770a8657fde366",
          "url": "https://api.github.com/repos/python/cpython/git/trees/08d7d02c849d99454485271877770a8657fde366"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/3eecc72ac70943f7e33297eea17803af15322c88",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe2WICRC1aQ7uu5UhlAAAWcsQAJJQgeOci5SqkzDuSl465wf6\nuWryTutTbzwsvXzykKZIGUyxLj4WJqxtNFOFhoS+HWrMbVpDNu+Podg5gv5EVgUD\nFVTBOdGf+ezu8FzytuBag448t870Q2zT8aGZqia/1GoJkSrlrlpb/p5ShrroukeG\nL8WYTKpB0vM0rosylmwe8rZ0zh9qpKIQVmJX4cbAL7MaMG7Uo+b+4CXa5a3eYYT7\n+D+DBmx4J9fPQY2QpV7xgF7rh7Q2DoaRnZ/EVNPEU8Y8CyhBP6Bn3SVTZdeCqvKi\n2u0XTFN0UPhOfj1Wx2r5WcSsIlX3sQsjUgMjUnkFU1EgkQsuvk0/N+m8zhvcXiSI\nUjKQtpR2bGOn8oOAYbDi/4fv08OoGfb0gy9hO1uH3EENcvCYjsfXQQatH1LcaznH\n7BB/q/fpsOcYdSREiZnirE5WaGQyJHrqnyAO69T1Q+ar+kcezIyHKPwfyVAxQcWJ\nkI6KvWOGCVoX1XAYOuQCbEOsdgdz/KLGq9r07zmO2wq+Ur8vOq0D0x+YoYpgxwML\nTrgVTXDIMEAmpCe/e2YF7BZvQNdA5WpREHQSTmrAefafSgY3A75ucZFslK3Gca/l\n0J/wTuhPL+/mfTZg0UjZllFhXn5J/0ieYvGR3qm9oEzAo4G+yQ6kWPc69AwqergE\nC1v1NT2mO75mSN7msCdS\n=tIc9\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 08d7d02c849d99454485271877770a8657fde366\nparent 60146f4f6f24f37e3bfcb9f101565f6e86cf0146\nauthor RafaelWO <38643099+RafaelWO@users.noreply.github.com> 1752917384 +0200\ncommitter GitHub <noreply@github.com> 1752917384 +0100\n\nDocs: Improve example for ``itertools.batched()`` (#136775)\n\nThe current example `batched('ABCDEFG', n=3) \u2192 ABC DEF G` can confuse readers because both, the size of the tuples and the number of tuples are 3.\nBy using a batch size of n=2, it is clearer that the `n` argument refers to the size of the resulting tuples.\nI.e. the new example is: `batched('ABCDEFG', n=2) \u2192 AB CD EF G`",
          "verified_at": "2025-07-19T09:29:45Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/3eecc72ac70943f7e33297eea17803af15322c88",
      "html_url": "https://github.com/python/cpython/commit/3eecc72ac70943f7e33297eea17803af15322c88",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/3eecc72ac70943f7e33297eea17803af15322c88/comments",
      "author": {
        "login": "RafaelWO",
        "id": 38643099,
        "node_id": "MDQ6VXNlcjM4NjQzMDk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/38643099?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RafaelWO",
        "html_url": "https://github.com/RafaelWO",
        "followers_url": "https://api.github.com/users/RafaelWO/followers",
        "following_url": "https://api.github.com/users/RafaelWO/following{/other_user}",
        "gists_url": "https://api.github.com/users/RafaelWO/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/RafaelWO/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/RafaelWO/subscriptions",
        "organizations_url": "https://api.github.com/users/RafaelWO/orgs",
        "repos_url": "https://api.github.com/users/RafaelWO/repos",
        "events_url": "https://api.github.com/users/RafaelWO/events{/privacy}",
        "received_events_url": "https://api.github.com/users/RafaelWO/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "60146f4f6f24f37e3bfcb9f101565f6e86cf0146",
          "url": "https://api.github.com/repos/python/cpython/commits/60146f4f6f24f37e3bfcb9f101565f6e86cf0146",
          "html_url": "https://github.com/python/cpython/commit/60146f4f6f24f37e3bfcb9f101565f6e86cf0146"
        }
      ]
    },
    {
      "sha": "60146f4f6f24f37e3bfcb9f101565f6e86cf0146",
      "node_id": "C_kwDOBN0Z8doAKDYwMTQ2ZjRmNmYyNGYzN2UzYmZjYjlmMTAxNTY1ZjZlODZjZjAxNDY",
      "commit": {
        "author": {
          "name": "Hunter Hogan",
          "email": "hunterhogan@users.noreply.github.com",
          "date": "2025-07-19T09:14:49Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T09:14:49Z"
        },
        "message": "Fix typo in `Lib/test/test_ast/test_ast.py` (#136767)\n\n`ASTOptimiziationTests` -> `ASTOptimizationTests`",
        "tree": {
          "sha": "e35a37894d6a66f1bdefc3f14228deb1bcb293a6",
          "url": "https://api.github.com/repos/python/cpython/git/trees/e35a37894d6a66f1bdefc3f14228deb1bcb293a6"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/60146f4f6f24f37e3bfcb9f101565f6e86cf0146",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe2IJCRC1aQ7uu5UhlAAAC4IQAADGWngDdlKkAQnmMb5Ilszl\nnMZm5MHyqIJNVZtkk99YdUdYz3mas1Yztz8z83RloCHHwhJ7Yig7p3hZTvHoOWja\ncV/HxJT33pe7tPvm8otVjOkYRYZ+ofKjcxwFq9SH/CJ+f3s2/P/gWcGEcKlR3/qG\n8Ahlmo8HX4i1srKX2IEk/Mp4EjlNdkkKW+v2ixZscFNd84AwSYEOLFlbx+SLL+B9\n6Py8229Vhg61pPrK9fLAv4Ly+5iszCli7gjPNObgv4SyFixjuWv9msc3Mbs/bnZ0\n88jJw02fV0HGQP5wQE5lyzR6zZ5Pfz7pntclEsf5viY0dSQKUQll6v5seu2TRPBf\nPiQdmAf4BzcWree/kBoKZnJpXP2YyvYaOrBsOMA4GDZN+dbmJpUqMxzuAJY64/dz\nyAP+wAh8SHRtbHq8zg2hfBe9ioAcaSMO6NxDy0hnZHENA4Kd6X/G2WCg9ZTabH3Q\nj2GF1bSpeKkkof4EivNFOCYXbQPJ1S4VbHYvBc3IH3V6gQ8obXyK5Mhc/KKy4Dc2\n3VLDCBJ7mMyN/21EqVQF++T3UHq9TCV6JMlA3DTLJdRyVepPN2avIyzYEMV+SsSb\nI+EvIDxtLshOozeQR1cHheJWp5POTyENm8eVGNDr9PC7awpzMW5Bcm0pWB7PkFPo\ntjLAfugriwAEY1PCKFWw\n=5XAV\n-----END PGP SIGNATURE-----\n",
          "payload": "tree e35a37894d6a66f1bdefc3f14228deb1bcb293a6\nparent f520f229271d55201a090f48faf1aa6f087d7608\nauthor Hunter Hogan <hunterhogan@users.noreply.github.com> 1752916489 -0500\ncommitter GitHub <noreply@github.com> 1752916489 +0300\n\nFix typo in `Lib/test/test_ast/test_ast.py` (#136767)\n\n`ASTOptimiziationTests` -> `ASTOptimizationTests`",
          "verified_at": "2025-07-19T09:14:50Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/60146f4f6f24f37e3bfcb9f101565f6e86cf0146",
      "html_url": "https://github.com/python/cpython/commit/60146f4f6f24f37e3bfcb9f101565f6e86cf0146",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/60146f4f6f24f37e3bfcb9f101565f6e86cf0146/comments",
      "author": {
        "login": "hunterhogan",
        "id": 2958419,
        "node_id": "MDQ6VXNlcjI5NTg0MTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2958419?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hunterhogan",
        "html_url": "https://github.com/hunterhogan",
        "followers_url": "https://api.github.com/users/hunterhogan/followers",
        "following_url": "https://api.github.com/users/hunterhogan/following{/other_user}",
        "gists_url": "https://api.github.com/users/hunterhogan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hunterhogan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hunterhogan/subscriptions",
        "organizations_url": "https://api.github.com/users/hunterhogan/orgs",
        "repos_url": "https://api.github.com/users/hunterhogan/repos",
        "events_url": "https://api.github.com/users/hunterhogan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hunterhogan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f520f229271d55201a090f48faf1aa6f087d7608",
          "url": "https://api.github.com/repos/python/cpython/commits/f520f229271d55201a090f48faf1aa6f087d7608",
          "html_url": "https://github.com/python/cpython/commit/f520f229271d55201a090f48faf1aa6f087d7608"
        }
      ]
    },
    {
      "sha": "f520f229271d55201a090f48faf1aa6f087d7608",
      "node_id": "C_kwDOBN0Z8doAKGY1MjBmMjI5MjcxZDU1MjAxYTA5MGY0OGZhZjFhYTZmMDg3ZDc2MDg",
      "commit": {
        "author": {
          "name": "chemelnucfin",
          "email": "3982092+chemelnucfin@users.noreply.github.com",
          "date": "2025-07-19T08:54:20Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T08:54:20Z"
        },
        "message": "parser_generator.py typo - keywods -> keywords (#135014)",
        "tree": {
          "sha": "f9d72f7c8369d7b48d9946acf05a1f9da4ca7cec",
          "url": "https://api.github.com/repos/python/cpython/git/trees/f9d72f7c8369d7b48d9946acf05a1f9da4ca7cec"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/f520f229271d55201a090f48faf1aa6f087d7608",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe108CRC1aQ7uu5UhlAAAA3wQAB5YEl6vd85kyVZAUa4IodGl\nw10vbIrjwzl4Ns5gEY5qA/3VZVW9pb598t17Gpta3CK1ukay+7MEMOmq8u5cr3tB\nk4H3ShO1u3Y+L/9OKEKiP8j0eeAR9EHoVYlD8spZzkhaRGCv8tKKaOUvKuAhpU5I\nbyspVS6u7jHX1jjrxrtIrZsAaDuGa1AowHkXHu2v14VIgP5GRdEiUrzowHQEonw+\n5CD1dVsqM6BpQ8nBoU9jB8AyZOfB04JuOvgjym54QOS32TcI6Q8WshBjLuT2EemE\nwtd3vuI+HvwScCFWv9tTvlt1uhB9O1UpAhKNm2MXGBZlwBnkEIRQl6nndTrfmooy\nv+S/oYFRHCueRa5S4NCbpWzBMy934JZj6k9fIc0h9zYcHVHKCikm5r0GlIrbpFQv\n9ineKFKPwGc3j742IaRbfi4XlwAB62cgN9urZsZvqRqNfNr2xJ/9KUjGFAWAaf2u\nBjHD7/G48anhncgAQ8aNOpgIZwknoF80kNt73R/I0iNa0JAiMVGWus78XUZZ9GWN\nQ7F2JExGTJYxsSf8XzaBIB5aztgMKL4S9d3D7LVPY+2K6WURRD1lEiOL2RWtpEfv\n0sS7ULsG/GHHrya//lqUVi4vuPAWSSbnnJ7e9QGl6T1RnGHNi5uOmGiFnVF60mV4\nAHiJxQB3hp78NyQeHHSl\n=E//J\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f9d72f7c8369d7b48d9946acf05a1f9da4ca7cec\nparent 09ac8e042f540420c233679c432b3dabc3e0b7d9\nauthor chemelnucfin <3982092+chemelnucfin@users.noreply.github.com> 1752915260 -0700\ncommitter GitHub <noreply@github.com> 1752915260 +0300\n\nparser_generator.py typo - keywods -> keywords (#135014)\n\n",
          "verified_at": "2025-07-19T08:54:20Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/f520f229271d55201a090f48faf1aa6f087d7608",
      "html_url": "https://github.com/python/cpython/commit/f520f229271d55201a090f48faf1aa6f087d7608",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/f520f229271d55201a090f48faf1aa6f087d7608/comments",
      "author": {
        "login": "chemelnucfin",
        "id": 3982092,
        "node_id": "MDQ6VXNlcjM5ODIwOTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3982092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chemelnucfin",
        "html_url": "https://github.com/chemelnucfin",
        "followers_url": "https://api.github.com/users/chemelnucfin/followers",
        "following_url": "https://api.github.com/users/chemelnucfin/following{/other_user}",
        "gists_url": "https://api.github.com/users/chemelnucfin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chemelnucfin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chemelnucfin/subscriptions",
        "organizations_url": "https://api.github.com/users/chemelnucfin/orgs",
        "repos_url": "https://api.github.com/users/chemelnucfin/repos",
        "events_url": "https://api.github.com/users/chemelnucfin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chemelnucfin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "09ac8e042f540420c233679c432b3dabc3e0b7d9",
          "url": "https://api.github.com/repos/python/cpython/commits/09ac8e042f540420c233679c432b3dabc3e0b7d9",
          "html_url": "https://github.com/python/cpython/commit/09ac8e042f540420c233679c432b3dabc3e0b7d9"
        }
      ]
    },
    {
      "sha": "09ac8e042f540420c233679c432b3dabc3e0b7d9",
      "node_id": "C_kwDOBN0Z8doAKDA5YWM4ZTA0MmY1NDA0MjBjMjMzNjc5YzQzMmIzZGFiYzNlMGI3ZDk",
      "commit": {
        "author": {
          "name": "Roman",
          "email": "121314722+GameRoMan@users.noreply.github.com",
          "date": "2025-07-19T08:48:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-19T08:48:04Z"
        },
        "message": "Fix typo: \"occured\" =>\"occurred\" (#134928)\n\nCo-authored-by: Stan Ulbrych <89152624+StanFromIreland@users.noreply.github.com>",
        "tree": {
          "sha": "47294b41043d911227c6631602a33bed763be3db",
          "url": "https://api.github.com/repos/python/cpython/git/trees/47294b41043d911227c6631602a33bed763be3db"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/09ac8e042f540420c233679c432b3dabc3e0b7d9",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoe1vECRC1aQ7uu5UhlAAAsPYQABh/oSMIaUq9XJrMYzUWwgRX\ne+PdLIWfv0T5NW4L4t+N7gcz0IenuMoDw5dNFBLmoCvJ9JfHIuQkUGYTzS5l0oyr\nNX6Vfrllkt/SPGRmcbatMj+BZJK6gbcNtv6+V6Q1NUsMk7g1toe+EfkRX1i4eN7K\nQYLfSMrB0UuUSaJbpUBpA/VNkQoQm3rxpKSGD9XIr5Hi3Dr1of3tIbocvpzcOGbl\n7etJhn4KK/g6vo3cvOeOXXoFZwHBihYv248pEzVNSE3n09ggrOjx0DV5nHmhzcl0\nYRpvqMQZjsAccyEa9O6cPQO2TY99R7ZbY5QBUgsdFZfXDJ9ZzRb5cxXuJc7t6PFz\nX1s+WKy84URt10HuAH8SLJBj/ZU873wtMpl2HRtDbR62GS/w2RhIztUNQlyW7dmw\nlNppnVo6PpGuT/b+bRBr8kOywzYyecmLeJUmobfzUyhzUX9tHWHRwf3nyB3OtFuJ\nilXjjY74JRG230QIAyD9s8hOdWnyAJ58ubseVMKF4bVmrcPzsLNp3iLzCYkmCEaX\nhT2HPpMZFKuy2y68aWGeaKH2NzDSoduhdIG5lY1CzVRUsbM3T4IKKj8UEQUE+ND9\nx8pd63Vs7sQCHTnJAuYZwfQUnt56Rg8Sc2bZR8+QhH5hUSG7sXprdiKTHlHYuO3N\nAqe0mjLopVG1jmxR9a/g\n=23Qt\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 47294b41043d911227c6631602a33bed763be3db\nparent 03017a8cc2242d881a3042b1eb9084c9bae9f85d\nauthor Roman <121314722+GameRoMan@users.noreply.github.com> 1752914884 +0100\ncommitter GitHub <noreply@github.com> 1752914884 +0300\n\nFix typo: \"occured\" =>\"occurred\" (#134928)\n\nCo-authored-by: Stan Ulbrych <89152624+StanFromIreland@users.noreply.github.com>",
          "verified_at": "2025-07-19T08:48:04Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/09ac8e042f540420c233679c432b3dabc3e0b7d9",
      "html_url": "https://github.com/python/cpython/commit/09ac8e042f540420c233679c432b3dabc3e0b7d9",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/09ac8e042f540420c233679c432b3dabc3e0b7d9/comments",
      "author": {
        "login": "GameRoMan",
        "id": 121314722,
        "node_id": "U_kgDOBzsdog",
        "avatar_url": "https://avatars.githubusercontent.com/u/121314722?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GameRoMan",
        "html_url": "https://github.com/GameRoMan",
        "followers_url": "https://api.github.com/users/GameRoMan/followers",
        "following_url": "https://api.github.com/users/GameRoMan/following{/other_user}",
        "gists_url": "https://api.github.com/users/GameRoMan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/GameRoMan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/GameRoMan/subscriptions",
        "organizations_url": "https://api.github.com/users/GameRoMan/orgs",
        "repos_url": "https://api.github.com/users/GameRoMan/repos",
        "events_url": "https://api.github.com/users/GameRoMan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/GameRoMan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "03017a8cc2242d881a3042b1eb9084c9bae9f85d",
          "url": "https://api.github.com/repos/python/cpython/commits/03017a8cc2242d881a3042b1eb9084c9bae9f85d",
          "html_url": "https://github.com/python/cpython/commit/03017a8cc2242d881a3042b1eb9084c9bae9f85d"
        }
      ]
    },
    {
      "sha": "03017a8cc2242d881a3042b1eb9084c9bae9f85d",
      "node_id": "C_kwDOBN0Z8doAKDAzMDE3YThjYzIyNDJkODgxYTMwNDJiMWViOTA4NGM5YmFlOWY4NWQ",
      "commit": {
        "author": {
          "name": "Mikhail Efimov",
          "email": "efimov.mikhail@gmail.com",
          "date": "2025-07-18T16:07:46Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-18T16:07:46Z"
        },
        "message": "gh-136438: Make sure `test_ast` pass with all optimization levels (#136596)\n\nExplicitly pass an `optimizer` parameter to the calls of `ast.parse/compile`, because if it is not provided, the interpreter will use its internal state, which can be modified using the `-O` or `-OO` flags.\n\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "tree": {
          "sha": "f62751312ecc68e72f6afb2fe48b8d225aa6cfa5",
          "url": "https://api.github.com/repos/python/cpython/git/trees/f62751312ecc68e72f6afb2fe48b8d225aa6cfa5"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/03017a8cc2242d881a3042b1eb9084c9bae9f85d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoenFSCRC1aQ7uu5UhlAAAHAgQAF4j0Z8xbeEXRcCJ/fyXaVzz\ntdsOmcxqnSDfS+whT/QPI2/pXsP/8WV26wMTK3MUfjtEl2emhF8Atyg1ld0m+K47\ntlmsBeS6vq8nl3K3H36uP8wK3v7Z8KaqMy7opIPvom/ObsAGJbXLXCJM+fyYE/of\nvDFb6TqqtRNMhtjMUfah6MJpNGZGZK2H9nNmvvMTiKxW8WUS6a56bWKuxD1IObyH\nj+D8yJV2ZXsefPZav/MHXRYcnJdXiZPQogKUjTuR6DUOASXIE/Isy6BCdcsnkJjn\nE+TLdS44mASUHyfrM5kIxFldRm06fZ/89BNrz+lsJF7OH+2dYc+UaLIu3wClwxCO\n2JvdrTBKKfbHfrxgi5ovNHvxJ0RMkgRkhSjgbWnU12CS7BwCtr5f8qE+UxHiQ1N3\nfa7sE3oWsKim/3uaY0uw2jHGL4xrA+Q01tczk7s/WDZJpJNhsw/SMmfmWmeXR6ww\nRk4JzsH3JxdZMKuZjxMuP1e1giXyUAyNPmJXk/dm9vQFtO1zLBAUFAQeLnJjzFx9\nh/Fwr4K2U9YAlZq/v1Ib6a1Ejxk2LpoW5DP3JCxsSIHRjAto8kuCnXrlbo6sVwJF\ntVItGaYNscajdaKwRCDUnwDL7oNwPhOExFF69VyRIx7ap2e8NvJkdoG3ITINUvCt\nxJYum9K07JhB0e+FlRX6\n=gI5x\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f62751312ecc68e72f6afb2fe48b8d225aa6cfa5\nparent 28937d3a21cf8168c853ae43374a8287c21f71c9\nauthor Mikhail Efimov <efimov.mikhail@gmail.com> 1752854866 +0300\ncommitter GitHub <noreply@github.com> 1752854866 +0300\n\ngh-136438: Make sure `test_ast` pass with all optimization levels (#136596)\n\nExplicitly pass an `optimizer` parameter to the calls of `ast.parse/compile`, because if it is not provided, the interpreter will use its internal state, which can be modified using the `-O` or `-OO` flags.\n\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>\n\n",
          "verified_at": "2025-07-18T16:07:46Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/03017a8cc2242d881a3042b1eb9084c9bae9f85d",
      "html_url": "https://github.com/python/cpython/commit/03017a8cc2242d881a3042b1eb9084c9bae9f85d",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/03017a8cc2242d881a3042b1eb9084c9bae9f85d/comments",
      "author": {
        "login": "efimov-mikhail",
        "id": 5574866,
        "node_id": "MDQ6VXNlcjU1NzQ4NjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5574866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/efimov-mikhail",
        "html_url": "https://github.com/efimov-mikhail",
        "followers_url": "https://api.github.com/users/efimov-mikhail/followers",
        "following_url": "https://api.github.com/users/efimov-mikhail/following{/other_user}",
        "gists_url": "https://api.github.com/users/efimov-mikhail/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/efimov-mikhail/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/efimov-mikhail/subscriptions",
        "organizations_url": "https://api.github.com/users/efimov-mikhail/orgs",
        "repos_url": "https://api.github.com/users/efimov-mikhail/repos",
        "events_url": "https://api.github.com/users/efimov-mikhail/events{/privacy}",
        "received_events_url": "https://api.github.com/users/efimov-mikhail/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "28937d3a21cf8168c853ae43374a8287c21f71c9",
          "url": "https://api.github.com/repos/python/cpython/commits/28937d3a21cf8168c853ae43374a8287c21f71c9",
          "html_url": "https://github.com/python/cpython/commit/28937d3a21cf8168c853ae43374a8287c21f71c9"
        }
      ]
    },
    {
      "sha": "28937d3a21cf8168c853ae43374a8287c21f71c9",
      "node_id": "C_kwDOBN0Z8doAKDI4OTM3ZDNhMjFjZjgxNjhjODUzYWU0MzM3NGE4Mjg3YzIxZjcxYzk",
      "commit": {
        "author": {
          "name": "Tian Gao",
          "email": "gaogaotiantian@hotmail.com",
          "date": "2025-07-17T18:10:10Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-17T18:10:10Z"
        },
        "message": "gh-136697: Use the standard audit event format for sys.monitoring docs (#136747)",
        "tree": {
          "sha": "02a7a0488f617d7eb4445966599a332f7b2e602e",
          "url": "https://api.github.com/repos/python/cpython/git/trees/02a7a0488f617d7eb4445966599a332f7b2e602e"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/28937d3a21cf8168c853ae43374a8287c21f71c9",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoeTyCCRC1aQ7uu5UhlAAAl/AQALBTLqxTQgmdqhIydtTUhNOG\nlbeYlFgZMhmSmoWgiKiDX1XGvqBGfXfGw/x7VZBAEGFNDH37F48K9go54rubLMLQ\n2nKvS99Hzz8H9LUEdOX+k6m5zonf/924amMStxbbkxC3oWhuifW2XvIVYRYH+JVB\nk7VOLf+OKjTbLJt5jn0DzFfv7vGgg5FKhSLx6JNnF6htft2i6PzkcVO/drjn8atp\nLHCcDa3c0pNBElpeuR7y9fU0yWTMErX8Qy1a+gTyV4oG/2DP+djwDaO2oBNQAnlS\nDZlUpGqE8OrbT7m2p20RhvIlzSKzk+pTrIzj5bgJEMRNFMzSgTQI+TA88ASrgbye\nlyX7Ew0mTM+RKWZ7wR3ZhP9quWPY/GZZutGc8dC0htjUefEGhcCzdXRuUtYR3h0F\n8fujXxfJyKgiOeL/U0ry0N9crgcQA6kgz0I6zOz94tdwa+/EiDKg+ER8ZndQyIPm\n5v9pink5068s3QCTx3crZcR7l0dsJrZ4+eBiuSOBu86i5Z0pznTN/HWAw8J2YR/E\nM7ZH8/E8RS27C0rTulyFc0ZhJtXvyybsq2EFDlgN8C1kYecuqlw49Ohbmd+tICQd\nAuTEQSjGlU0zmrTtalpLZaV9UDgArzpgcsz+VzNuyLijzfHv33vJHR0RV8pMN1JG\nV79GEx2SJX1HiMm8osrr\n=Z1QQ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 02a7a0488f617d7eb4445966599a332f7b2e602e\nparent eddc8c0a1d274ff6393c6fa233e535360c0dd07b\nauthor Tian Gao <gaogaotiantian@hotmail.com> 1752775810 -0700\ncommitter GitHub <noreply@github.com> 1752775810 -0700\n\ngh-136697: Use the standard audit event format for sys.monitoring docs (#136747)\n\n",
          "verified_at": "2025-07-17T18:10:10Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/28937d3a21cf8168c853ae43374a8287c21f71c9",
      "html_url": "https://github.com/python/cpython/commit/28937d3a21cf8168c853ae43374a8287c21f71c9",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/28937d3a21cf8168c853ae43374a8287c21f71c9/comments",
      "author": {
        "login": "gaogaotiantian",
        "id": 13121107,
        "node_id": "MDQ6VXNlcjEzMTIxMTA3",
        "avatar_url": "https://avatars.githubusercontent.com/u/13121107?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaogaotiantian",
        "html_url": "https://github.com/gaogaotiantian",
        "followers_url": "https://api.github.com/users/gaogaotiantian/followers",
        "following_url": "https://api.github.com/users/gaogaotiantian/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaogaotiantian/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaogaotiantian/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaogaotiantian/subscriptions",
        "organizations_url": "https://api.github.com/users/gaogaotiantian/orgs",
        "repos_url": "https://api.github.com/users/gaogaotiantian/repos",
        "events_url": "https://api.github.com/users/gaogaotiantian/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaogaotiantian/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "eddc8c0a1d274ff6393c6fa233e535360c0dd07b",
          "url": "https://api.github.com/repos/python/cpython/commits/eddc8c0a1d274ff6393c6fa233e535360c0dd07b",
          "html_url": "https://github.com/python/cpython/commit/eddc8c0a1d274ff6393c6fa233e535360c0dd07b"
        }
      ]
    },
    {
      "sha": "eddc8c0a1d274ff6393c6fa233e535360c0dd07b",
      "node_id": "C_kwDOBN0Z8doAKGVkZGM4YzBhMWQyNzRmZjYzOTNjNmZhMjMzZTUzNTM2MGMwZGQwN2I",
      "commit": {
        "author": {
          "name": "Alper",
          "email": "alperyoney@fb.com",
          "date": "2025-07-17T16:16:01Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-17T16:16:01Z"
        },
        "message": "gh-116738: Make pwd module thread-safe (#136695)\n\nMake the pwd module functions getpwuid(), getpwnam(), and getpwall() thread-safe. These changes apply to scenarios where the GIL is disabled or in subinterpreter use cases.",
        "tree": {
          "sha": "4d9e2e20a75bea0c4e7852915443e05cf41746dd",
          "url": "https://api.github.com/repos/python/cpython/git/trees/4d9e2e20a75bea0c4e7852915443e05cf41746dd"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/eddc8c0a1d274ff6393c6fa233e535360c0dd07b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoeSHBCRC1aQ7uu5UhlAAABaoQAI2uKa8ehpsaq7hKsH2T3qoj\nf9ybPYtUtmkbRJPeZ5R4ezQX3iw4w89Pcs3ipKr3D8LZkFbo5kgsTUAMA2qHV6FG\neelqag7WxJJnAa+GDcrA6V+T+wtDbLqqmWEvKz3Wwd5CHo4C9LaQJiEzb89Y3QJ4\nTpBDhj6l85pMhgc0PqK4VE9TnwSO/fnPQHg4xVsrKbuiAa9KifyV/tinXLcgTByy\n3dLJmX+/gwg+nYWhqjuTgsH1jgb+Y2qtUcf9Iht3XHfxud+dqpNNIdBfDpD8S1LS\nlJjGmCLt/aQUKcJdHEFSfMYDYvlRO/2pgAx12qni+vaXSBgxT5GWmGqCZwlG4pHL\nyJ9JXHIZHrKGEfACwPIny27WxbO05dJX288uGDZ5DI3oEygdY2DJaVjfM273sMIz\nU1q6JlJPkUdelFfrHMbJchhN0tgn81KtXK5/2mtMT2wYNmuvK0xnkgU2CxPlL6c6\nHGfvyUCisYBGk5G/xMSS8Xf9GJkADbJYrk2i2u11i3Vm81Cl2ym/55Y4G2DQToQW\nqXYi9ar9Sos6sALzlcxcFqz84cYwNp8WnA8c4KSwTk9z2VJtci0sfsii0Af1LDVo\nT1mO4uCQcHYmQJrvHCXP5MWS0AV7HzKu4iA1zL4sy/Hm2sUSz8pIB7M3mokDPCgs\nuSmhqTICiiBTTPYFX/l1\n=9YnR\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 4d9e2e20a75bea0c4e7852915443e05cf41746dd\nparent 22af5d35a620ee44393853036a8450ceb047688e\nauthor Alper <alperyoney@fb.com> 1752768961 -0700\ncommitter GitHub <noreply@github.com> 1752768961 -0700\n\ngh-116738: Make pwd module thread-safe (#136695)\n\nMake the pwd module functions getpwuid(), getpwnam(), and getpwall() thread-safe. These changes apply to scenarios where the GIL is disabled or in subinterpreter use cases.",
          "verified_at": "2025-07-17T16:16:02Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/eddc8c0a1d274ff6393c6fa233e535360c0dd07b",
      "html_url": "https://github.com/python/cpython/commit/eddc8c0a1d274ff6393c6fa233e535360c0dd07b",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/eddc8c0a1d274ff6393c6fa233e535360c0dd07b/comments",
      "author": {
        "login": "yoney",
        "id": 2095011,
        "node_id": "MDQ6VXNlcjIwOTUwMTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2095011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yoney",
        "html_url": "https://github.com/yoney",
        "followers_url": "https://api.github.com/users/yoney/followers",
        "following_url": "https://api.github.com/users/yoney/following{/other_user}",
        "gists_url": "https://api.github.com/users/yoney/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/yoney/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yoney/subscriptions",
        "organizations_url": "https://api.github.com/users/yoney/orgs",
        "repos_url": "https://api.github.com/users/yoney/repos",
        "events_url": "https://api.github.com/users/yoney/events{/privacy}",
        "received_events_url": "https://api.github.com/users/yoney/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "22af5d35a620ee44393853036a8450ceb047688e",
          "url": "https://api.github.com/repos/python/cpython/commits/22af5d35a620ee44393853036a8450ceb047688e",
          "html_url": "https://github.com/python/cpython/commit/22af5d35a620ee44393853036a8450ceb047688e"
        }
      ]
    },
    {
      "sha": "22af5d35a620ee44393853036a8450ceb047688e",
      "node_id": "C_kwDOBN0Z8doAKDIyYWY1ZDM1YTYyMGVlNDQzOTM4NTMwMzZhODQ1MGNlYjA0NzY4OGU",
      "commit": {
        "author": {
          "name": "Hood Chatham",
          "email": "roberthoodchatham@gmail.com",
          "date": "2025-07-17T15:39:01Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-17T15:39:01Z"
        },
        "message": "gh-127146: Emscripten: Set umask to zero in python.sh (#136740)\n\nClears the umask used during a test of pydoc.apropos when testing on\nEmscripten. This is to work around a known issue in Emscripten; but it's not\nclear if the chmod call that is causing the problem is actually testing\nanything of significance.",
        "tree": {
          "sha": "21b165556a9ce485f3ed7a6be33355410b04c6d0",
          "url": "https://api.github.com/repos/python/cpython/git/trees/21b165556a9ce485f3ed7a6be33355410b04c6d0"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/22af5d35a620ee44393853036a8450ceb047688e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoeRkVCRC1aQ7uu5UhlAAAAf8QAIfU5QhRYhBb+4HhU837qxPn\ntnD9bH1hitDy0yVXk3e08EnEFgV9QjJBHxhAkdDfWl6XXoXykejsZGntFkdQVXLh\nP53kTBE12dc8UfFhr7zcPfV5BJNtA6kctVed35tgJPMxw09KGFKvGhkMPW2iIuW0\nIobInAJ94ZVVy+hyJiqwr9ke5rXbSJGvV6zC81G+lkK8fRnRjE01RlNaZcKtUQK4\nFvu6qH0XPO/zc5lSNUrqqd58/cHe9Ky6HAAUWU0nJQXf16l09Ih4b2R/2jNswaHZ\n/SnUmKXlCI9KKhNm5iwsdFQp0RL/FG/tKOwcvfzGQbV4Ol/Y/tVP7q3h2nIyTfZj\njDV6yLbouX1vmNa9appivpaLXPkSJnAxaocR3xnw1K3dYxYBOb5gsYjLpxNq2tuh\nhiYA3D0dIf0U+EZ48axOfzweeGs7JVf3L7j9lqjHk73+jRyVmTAqhglVuMBMfl4L\naV5Z3MGR/lYc7mtFcwRNw7FZ4GEs+/iSJuJHanDFJzeDchwsfTTlka+Qr+cz82fJ\nQE4EMyxAJLL/QPXiGzopySxbl2A/iVdxa2ISDeAB6Vq9vNx2cApNBHkhKNkOJKXd\nYIRRExR9IIZee8bABij9XxBkdVogHCFp/pffPNOg+J5n1HUO8ww/HHfPok2YQK/S\n0qLuCg20+m9IKl+Bz8zn\n=SmmT\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 21b165556a9ce485f3ed7a6be33355410b04c6d0\nparent 180b3eb697bf5bb0088f3f35ef2d3675f9fff04f\nauthor Hood Chatham <roberthoodchatham@gmail.com> 1752766741 +0200\ncommitter GitHub <noreply@github.com> 1752766741 +0000\n\ngh-127146: Emscripten: Set umask to zero in python.sh (#136740)\n\nClears the umask used during a test of pydoc.apropos when testing on\nEmscripten. This is to work around a known issue in Emscripten; but it's not\nclear if the chmod call that is causing the problem is actually testing\nanything of significance.",
          "verified_at": "2025-07-17T15:39:02Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/22af5d35a620ee44393853036a8450ceb047688e",
      "html_url": "https://github.com/python/cpython/commit/22af5d35a620ee44393853036a8450ceb047688e",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/22af5d35a620ee44393853036a8450ceb047688e/comments",
      "author": {
        "login": "hoodmane",
        "id": 8739626,
        "node_id": "MDQ6VXNlcjg3Mzk2MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoodmane",
        "html_url": "https://github.com/hoodmane",
        "followers_url": "https://api.github.com/users/hoodmane/followers",
        "following_url": "https://api.github.com/users/hoodmane/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions",
        "organizations_url": "https://api.github.com/users/hoodmane/orgs",
        "repos_url": "https://api.github.com/users/hoodmane/repos",
        "events_url": "https://api.github.com/users/hoodmane/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoodmane/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "180b3eb697bf5bb0088f3f35ef2d3675f9fff04f",
          "url": "https://api.github.com/repos/python/cpython/commits/180b3eb697bf5bb0088f3f35ef2d3675f9fff04f",
          "html_url": "https://github.com/python/cpython/commit/180b3eb697bf5bb0088f3f35ef2d3675f9fff04f"
        }
      ]
    },
    {
      "sha": "180b3eb697bf5bb0088f3f35ef2d3675f9fff04f",
      "node_id": "C_kwDOBN0Z8doAKDE4MGIzZWI2OTdiZjViYjAwODhmM2YzNWVmMmQzNjc1ZjlmZmYwNGY",
      "commit": {
        "author": {
          "name": "Ole Herman Schumacher Elgesem",
          "email": "4048546+olehermanse@users.noreply.github.com",
          "date": "2025-07-16T17:29:30Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T17:29:30Z"
        },
        "message": "fix traceback.FrameSummary docstring by adding end_lineno, colno, and end_colno (#136716)",
        "tree": {
          "sha": "bd7aa7b19b83849156f649944d315b13120e90d3",
          "url": "https://api.github.com/repos/python/cpython/git/trees/bd7aa7b19b83849156f649944d315b13120e90d3"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/180b3eb697bf5bb0088f3f35ef2d3675f9fff04f",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod+F6CRC1aQ7uu5UhlAAA7JEQACCjMABAwovhqBmAu/+kmlSA\n2pqo/jXYK/GCO6o3hPGrcw09im0ha/0Gs/JXPgGfdBhOhrfuqp+fyXs+umzOLT0o\neFtriUeTblNK9nXJdrjRMq7wNv836WP1Fkjod0gdTDCf/xk4m7/42HzDkr2sit6J\nm8x3FF+2lAt37fS3tUyf/oGEoETm2kEvnaIsvKbHYJ07NKOVuAPUqRg5ijNPuhj2\nP/s6T2QVJE33pfH156jcO+NlSIXZ4lFWm8D8K9bdxCPOZM79VU3v4b7477kW5hs/\ndksTSQBxgTa+xRlqu1GB8HKjVQfKoQDGDs1gzYgVjHZRkBbMwSt5pVtg5vIqSpgo\nYNuJh0hQeXeHQ8j4lIYznCYWrBfMWJfA0vJjudc2ddlHBCu94mpBesALMeqtGcyU\nYfAW+oltoEKecNaNiNbt/Qgn+Z6CnHwpZAwIEoqAoj1+4IZHOrfRbqpLAymkUl4D\nfN990xYfRNw0ErlW32xkAQxtYjC4kTyL8k947GNBQaW5/yTRUDexrZyl1gc3XJt4\nsAzqUdvZqFBO88leCkGtCJmm0YJXAHKGKl3MX8WbeyrIVGZr9ZaWAovjwONtDLJO\nOh+iJmHwVOVxp+mwiyZGVXDCKW0UHVNeFYDvi17k+yZyY91SqTwcJrxFbecskjrH\nqzJq4U1cMMVV+99b4zuH\n=A8dt\n-----END PGP SIGNATURE-----\n",
          "payload": "tree bd7aa7b19b83849156f649944d315b13120e90d3\nparent b7d722547bcc9e92dca4837b9fdbe7457788820b\nauthor Ole Herman Schumacher Elgesem <4048546+olehermanse@users.noreply.github.com> 1752686970 +0200\ncommitter GitHub <noreply@github.com> 1752686970 +0530\n\nfix traceback.FrameSummary docstring by adding end_lineno, colno, and end_colno (#136716)\n\n",
          "verified_at": "2025-07-16T17:29:31Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/180b3eb697bf5bb0088f3f35ef2d3675f9fff04f",
      "html_url": "https://github.com/python/cpython/commit/180b3eb697bf5bb0088f3f35ef2d3675f9fff04f",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/180b3eb697bf5bb0088f3f35ef2d3675f9fff04f/comments",
      "author": {
        "login": "olehermanse",
        "id": 4048546,
        "node_id": "MDQ6VXNlcjQwNDg1NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4048546?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olehermanse",
        "html_url": "https://github.com/olehermanse",
        "followers_url": "https://api.github.com/users/olehermanse/followers",
        "following_url": "https://api.github.com/users/olehermanse/following{/other_user}",
        "gists_url": "https://api.github.com/users/olehermanse/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olehermanse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olehermanse/subscriptions",
        "organizations_url": "https://api.github.com/users/olehermanse/orgs",
        "repos_url": "https://api.github.com/users/olehermanse/repos",
        "events_url": "https://api.github.com/users/olehermanse/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olehermanse/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b7d722547bcc9e92dca4837b9fdbe7457788820b",
          "url": "https://api.github.com/repos/python/cpython/commits/b7d722547bcc9e92dca4837b9fdbe7457788820b",
          "html_url": "https://github.com/python/cpython/commit/b7d722547bcc9e92dca4837b9fdbe7457788820b"
        }
      ]
    },
    {
      "sha": "b7d722547bcc9e92dca4837b9fdbe7457788820b",
      "node_id": "C_kwDOBN0Z8doAKGI3ZDcyMjU0N2JjYzllOTJkY2E0ODM3YjlmZGJlNzQ1Nzc4ODgyMGI",
      "commit": {
        "author": {
          "name": "Kumar Aditya",
          "email": "kumaraditya@python.org",
          "date": "2025-07-16T16:39:08Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T16:39:08Z"
        },
        "message": "gh-136669: build `_asyncio` as static module (#136670)\n\n`_asyncio` is now built as a static module so that thread states can be accessed directly via registers and avoids the overhead of function call.",
        "tree": {
          "sha": "5b1a5eab2448d03d6a74362757f086f5e4698a69",
          "url": "https://api.github.com/repos/python/cpython/git/trees/5b1a5eab2448d03d6a74362757f086f5e4698a69"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/b7d722547bcc9e92dca4837b9fdbe7457788820b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod9WsCRC1aQ7uu5UhlAAA9bsQAK9nl8joXaOdKjjF+ib7NDCw\nJ9l/MuLKSaZZ6p/d/74OULPfVyvJf261qRThNCsjU1IbnUjULlVa5FyYVd4rDEhT\nqNxuKutoN5xXq8WeNWKCrx7kS+oT3I/xb2bUx8GGNw3Oua9vGnwGpeSd4gJhbar0\nOs1boOc70KjXWyv+7PSTjDyq3f2HTDWpFyBtzeHrvg3z68nQzCmKFmpp5D+xf9oA\nNcAligyxvkBl3dq0Zl2ahLLhjMxCNLIcj4bPe8/VgsGEmpvNAJfyVTVgoJUzoqFA\n/vsXTQ9IEwHpNfDK3B0uN9n186McLjEmpSRMWzuvNpgX3rgVUYrYqvEXQshvijnz\niIk3pq8Euq1adlFb++Y2xSCAoZBUsVisP91wE81RCZeoyiRINRJJY6Rp9aAN6dla\nrHnnUqfiwZ/qY1VljvFW1TSEhP4L+s57oq9Wpvus2ut4uGYXR5T/q8YneB9iUGDM\nvETN4NuShXP+1GtNkex0S5sUG9J57voL4lkanpuNmht5ft5d8c8YplORsi5ETg0h\nEvQXwWJJja18VJbb7ny9Lxo0Ddtx3FdxGLMaahnnpEow+RC7TER9AEnmYIuF25wd\nsrsm/JtVHFjdMlMIoIvAktY28vSf6wTBWyn+YETvrSuSjfXMrq1jdyZWwZjNmFWy\nGCTjWGUpzLOheHtzPWLu\n=q4mG\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 5b1a5eab2448d03d6a74362757f086f5e4698a69\nparent 69d8fe50ddc4dbe757c9929a532e2e882f0261ba\nauthor Kumar Aditya <kumaraditya@python.org> 1752683948 +0530\ncommitter GitHub <noreply@github.com> 1752683948 +0530\n\ngh-136669: build `_asyncio` as static module (#136670)\n\n`_asyncio` is now built as a static module so that thread states can be accessed directly via registers and avoids the overhead of function call. ",
          "verified_at": "2025-07-16T16:39:09Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/b7d722547bcc9e92dca4837b9fdbe7457788820b",
      "html_url": "https://github.com/python/cpython/commit/b7d722547bcc9e92dca4837b9fdbe7457788820b",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/b7d722547bcc9e92dca4837b9fdbe7457788820b/comments",
      "author": {
        "login": "kumaraditya303",
        "id": 59607654,
        "node_id": "MDQ6VXNlcjU5NjA3NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/59607654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kumaraditya303",
        "html_url": "https://github.com/kumaraditya303",
        "followers_url": "https://api.github.com/users/kumaraditya303/followers",
        "following_url": "https://api.github.com/users/kumaraditya303/following{/other_user}",
        "gists_url": "https://api.github.com/users/kumaraditya303/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kumaraditya303/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kumaraditya303/subscriptions",
        "organizations_url": "https://api.github.com/users/kumaraditya303/orgs",
        "repos_url": "https://api.github.com/users/kumaraditya303/repos",
        "events_url": "https://api.github.com/users/kumaraditya303/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kumaraditya303/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "69d8fe50ddc4dbe757c9929a532e2e882f0261ba",
          "url": "https://api.github.com/repos/python/cpython/commits/69d8fe50ddc4dbe757c9929a532e2e882f0261ba",
          "html_url": "https://github.com/python/cpython/commit/69d8fe50ddc4dbe757c9929a532e2e882f0261ba"
        }
      ]
    },
    {
      "sha": "69d8fe50ddc4dbe757c9929a532e2e882f0261ba",
      "node_id": "C_kwDOBN0Z8doAKDY5ZDhmZTUwZGRjNGRiZTc1N2M5OTI5YTUzMmUyZTg4MmYwMjYxYmE",
      "commit": {
        "author": {
          "name": "Bartosz S\u0142awecki",
          "email": "bartosz@ilikepython.com",
          "date": "2025-07-16T16:34:14Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T16:34:14Z"
        },
        "message": "gh-126548: Add a thread-unsafety warning for `importlib.reload()` (GH-136704)",
        "tree": {
          "sha": "e01cc31f4365dab57243721fbfaaae20f963a04d",
          "url": "https://api.github.com/repos/python/cpython/git/trees/e01cc31f4365dab57243721fbfaaae20f963a04d"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/69d8fe50ddc4dbe757c9929a532e2e882f0261ba",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod9SGCRC1aQ7uu5UhlAAAUUEQABY5GG3mtrboZRErsuNXEGwN\nW2NEiKUWMRyHKu9xl1wiPN1M8csydfdrCuvjjiZ3WXKXhfKt5ZfitKubA+Rdbx/s\n9KDJqPmTw22ltybUzu+GtNNBuwsJeQs8J+Ygo0cPxH5IZhesK90cGMgNZ2whwsR0\nhmDKS38HqWkP6mALUb5Cz0+nmrYLr6dw5Te14UC+BA4VgrCAznjqDvc7+INaHqUq\nbyHIujReqMphSLU934/usyjRN5a/cihcXCqzU87UpVA8mdnGg4WcaUlIh/4xM9MH\n5PBb6BZUPXNMMaoDz8a0+KOsUohA6LXaIzz+wlMrhoqbGNYycknURdQ9InDK28Mz\n/twJBmLKgHlEDPhwVwDVQSsDb8dMop36npNH7P5J9RdSJb6x54G5oKdWEOXYpRKW\n3cM60ccxVuyNZToB5O+SDOJSx1G4dehikRy+pqaln2I5K9qJvzW1LySnZz+fPVPQ\naRA0nHH+KQIBu26Jpu1uGmrawt+SdphAuNbyfKZkYe7CXRXTCJiDz61dQ1gmDrAl\n/NjudQ6nkO/2txe5Jk+EO0K7A3LPJa1GtI6Z98CdoocMc9RfW5mLFjk36KuSOHwT\n6r653K+MLH2JivwXkXb7gqgdw5KOPLYGTKJgUA5EKx4+dP+DPD8aalksBbI+ublO\nj7f9YDhJk7cHMEgvgZBE\n=RrZh\n-----END PGP SIGNATURE-----\n",
          "payload": "tree e01cc31f4365dab57243721fbfaaae20f963a04d\nparent dcd27aace180737adaddc79c00c181816fc6e162\nauthor Bartosz S\u0142awecki <bartosz@ilikepython.com> 1752683654 +0200\ncommitter GitHub <noreply@github.com> 1752683654 -0400\n\ngh-126548: Add a thread-unsafety warning for `importlib.reload()` (GH-136704)\n\n",
          "verified_at": "2025-07-16T16:34:15Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/69d8fe50ddc4dbe757c9929a532e2e882f0261ba",
      "html_url": "https://github.com/python/cpython/commit/69d8fe50ddc4dbe757c9929a532e2e882f0261ba",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/69d8fe50ddc4dbe757c9929a532e2e882f0261ba/comments",
      "author": {
        "login": "bswck",
        "id": 64036239,
        "node_id": "MDQ6VXNlcjY0MDM2MjM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/64036239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bswck",
        "html_url": "https://github.com/bswck",
        "followers_url": "https://api.github.com/users/bswck/followers",
        "following_url": "https://api.github.com/users/bswck/following{/other_user}",
        "gists_url": "https://api.github.com/users/bswck/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bswck/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bswck/subscriptions",
        "organizations_url": "https://api.github.com/users/bswck/orgs",
        "repos_url": "https://api.github.com/users/bswck/repos",
        "events_url": "https://api.github.com/users/bswck/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bswck/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "dcd27aace180737adaddc79c00c181816fc6e162",
          "url": "https://api.github.com/repos/python/cpython/commits/dcd27aace180737adaddc79c00c181816fc6e162",
          "html_url": "https://github.com/python/cpython/commit/dcd27aace180737adaddc79c00c181816fc6e162"
        }
      ]
    },
    {
      "sha": "dcd27aace180737adaddc79c00c181816fc6e162",
      "node_id": "C_kwDOBN0Z8doAKGRjZDI3YWFjZTE4MDczN2FkYWRkYzc5YzAwYzE4MTgxNmZjNmUxNjI",
      "commit": {
        "author": {
          "name": "Hood Chatham",
          "email": "roberthoodchatham@gmail.com",
          "date": "2025-07-16T15:53:47Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T15:53:47Z"
        },
        "message": "gh-127146: Emscripten: Don't need to avoid unpaired surrogate anymore (#136707)\n\nThis might have been fixed by gh-136624, or by some Emscripten change.\nIn any case, it no longer seems to be needed.",
        "tree": {
          "sha": "3397bcd06f4b6a710383c012f9ef369cd523cb28",
          "url": "https://api.github.com/repos/python/cpython/git/trees/3397bcd06f4b6a710383c012f9ef369cd523cb28"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/dcd27aace180737adaddc79c00c181816fc6e162",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod8sLCRC1aQ7uu5UhlAAAjCEQAKiOJJtlDaPr+Ja4XVKQ0Wh0\numFk8VhrKnAS/3VaeM5ebOIOgqdynlIeSca3NEwkqNiKe+1lwMrpYVgV7BZRpkQ1\noxtB+z4Crm4lEDOfE+SsOHYO01UqeI8yDuHR7UwS3B43BEByN5zGNtSbiQUdYZY2\nmzwNP6A/UiqDaKOQewiVpeoGoqiVdiO6NOVga4vl4spCe4Hj9WR7gLhJteUP97Tr\ntX5d8yE07A+x7VwrC3OhXNJnKW56USs2xrqbCqqK8KNelRTSYQRBQJD7D22yL/JZ\nTUaN2vxhsCDREWnT0At0AFAFNuZzZPa95YUGp9ASGL9efWWMm3n/8Rgt989NrdGY\nyObe8CUTqKd1213+S9NATekZZL8avIym4fX3//XwG8T6IaeAi++OzSsDxFmxCUEF\nR0rQmhkkl+whUvwKYUe7gIIMK9QpsQiFXJGczHDwnc3pFntABS3gH/GsA9cErNRj\nkOXEFScNjaUxlK/M0oCD0XNF5UTUseqgNtv1tAGDa5BNk+YTRdUanHipUiRqEqok\nYMkbrhB5/3MgBsfoEy/ri/26zEK1AU1RNBM77MY1kI8c4NbUjcx4LP7YIujmtK6f\nXDzGw+kuMLjG/HZIphZp2TiUeN/tQyEUJELKtnZTMakMwiT7SzkDu11020rwD1rG\n0pdVV6IjhzcMk3GLcbIh\n=BBsF\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 3397bcd06f4b6a710383c012f9ef369cd523cb28\nparent bde808ad6ba5eee8a6201983cf071449d7ce7e39\nauthor Hood Chatham <roberthoodchatham@gmail.com> 1752681227 +0200\ncommitter GitHub <noreply@github.com> 1752681227 +0200\n\ngh-127146: Emscripten: Don't need to avoid unpaired surrogate anymore (#136707)\n\nThis might have been fixed by gh-136624, or by some Emscripten change.\nIn any case, it no longer seems to be needed.",
          "verified_at": "2025-07-16T15:53:48Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/dcd27aace180737adaddc79c00c181816fc6e162",
      "html_url": "https://github.com/python/cpython/commit/dcd27aace180737adaddc79c00c181816fc6e162",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/dcd27aace180737adaddc79c00c181816fc6e162/comments",
      "author": {
        "login": "hoodmane",
        "id": 8739626,
        "node_id": "MDQ6VXNlcjg3Mzk2MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoodmane",
        "html_url": "https://github.com/hoodmane",
        "followers_url": "https://api.github.com/users/hoodmane/followers",
        "following_url": "https://api.github.com/users/hoodmane/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions",
        "organizations_url": "https://api.github.com/users/hoodmane/orgs",
        "repos_url": "https://api.github.com/users/hoodmane/repos",
        "events_url": "https://api.github.com/users/hoodmane/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoodmane/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bde808ad6ba5eee8a6201983cf071449d7ce7e39",
          "url": "https://api.github.com/repos/python/cpython/commits/bde808ad6ba5eee8a6201983cf071449d7ce7e39",
          "html_url": "https://github.com/python/cpython/commit/bde808ad6ba5eee8a6201983cf071449d7ce7e39"
        }
      ]
    },
    {
      "sha": "bde808ad6ba5eee8a6201983cf071449d7ce7e39",
      "node_id": "C_kwDOBN0Z8doAKGJkZTgwOGFkNmJhNWVlZThhNjIwMTk4M2NmMDcxNDQ5ZDdjZTdlMzk",
      "commit": {
        "author": {
          "name": "Harmen Stoppels",
          "email": "harmenstoppels@gmail.com",
          "date": "2025-07-16T15:30:10Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T15:30:10Z"
        },
        "message": "gh-136710: Fix bad indentation in `os.chdir` docstring (GH-136709)",
        "tree": {
          "sha": "a0e2fa13efb0d4688bdf724bd0d9889b2426cc72",
          "url": "https://api.github.com/repos/python/cpython/git/trees/a0e2fa13efb0d4688bdf724bd0d9889b2426cc72"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/bde808ad6ba5eee8a6201983cf071449d7ce7e39",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod8WCCRC1aQ7uu5UhlAAAos0QACQBRqShedYIVIeG9c1hR8PZ\nhwmSFWhOsV0Zn1fBhSe86q+GZQ5ogHNMSgMcYU9kV31rcaKEqF9VfdT2IDuECpN2\ni++r9OnMkKu2ZpSpH8lKxZKITlenz2rxLqbCjPlF1wQN3RujF28RIz6f9MtzcMkV\nFoNJD7a0Tyz19ujeOiBS/bV/j5z5tnioC6GVGBCtLCTK5XHdarnpgODR/GKybGwU\nj/c7PmeTbzD5p+kNm+mpn4MwVpMDdT5zetsnDkrB1i6lImURPKJu9rUEknR1HjJf\nm/FTcylR6dY6G6efoZcvRSMWRJlr/o1dZrSNxcbNvRiw7rAISHZOZ18LnTrcFc2p\nwKm+xP82O/hvoqF2wV1Ro9SsbDlRfZBSwgnLDniNS1ZFt8W3+NBtKALFK+e9pXdc\nvBpWOYgKF5tNzqVXvaVCB4CUi7kT/HyNzDVoJvRGzm+kJEuCowuTSxtbQ0IW1anS\nRRD3dtnQwLeTM6TvxY+4ao6pkvXdDCT5h9pU10e+JHb/+OYBKQEkaK7stcuNij2k\nyXh5tnsJEPIJOUGq/pkj0Xwdgvwx2AmFNjxtd7TFAIMemtm6avn4mK/DRnhI+LFB\n+c65Wm2ii4pyTt4U2Z4AXLM/GPMjm5uiHDTzXEqLvy1d2JcO7lwAKIYvfQVXX07A\nkrR0VkSA4TGL+dYIg/fP\n=fu6W\n-----END PGP SIGNATURE-----\n",
          "payload": "tree a0e2fa13efb0d4688bdf724bd0d9889b2426cc72\nparent 2f0db9b05f0598548c0c136571c31065ecf961e5\nauthor Harmen Stoppels <harmenstoppels@gmail.com> 1752679810 +0200\ncommitter GitHub <noreply@github.com> 1752679810 +0000\n\ngh-136710: Fix bad indentation in `os.chdir` docstring (GH-136709)\n\n",
          "verified_at": "2025-07-16T15:30:11Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/bde808ad6ba5eee8a6201983cf071449d7ce7e39",
      "html_url": "https://github.com/python/cpython/commit/bde808ad6ba5eee8a6201983cf071449d7ce7e39",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/bde808ad6ba5eee8a6201983cf071449d7ce7e39/comments",
      "author": {
        "login": "haampie",
        "id": 194764,
        "node_id": "MDQ6VXNlcjE5NDc2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/194764?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/haampie",
        "html_url": "https://github.com/haampie",
        "followers_url": "https://api.github.com/users/haampie/followers",
        "following_url": "https://api.github.com/users/haampie/following{/other_user}",
        "gists_url": "https://api.github.com/users/haampie/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/haampie/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/haampie/subscriptions",
        "organizations_url": "https://api.github.com/users/haampie/orgs",
        "repos_url": "https://api.github.com/users/haampie/repos",
        "events_url": "https://api.github.com/users/haampie/events{/privacy}",
        "received_events_url": "https://api.github.com/users/haampie/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "2f0db9b05f0598548c0c136571c31065ecf961e5",
          "url": "https://api.github.com/repos/python/cpython/commits/2f0db9b05f0598548c0c136571c31065ecf961e5",
          "html_url": "https://github.com/python/cpython/commit/2f0db9b05f0598548c0c136571c31065ecf961e5"
        }
      ]
    },
    {
      "sha": "2f0db9b05f0598548c0c136571c31065ecf961e5",
      "node_id": "C_kwDOBN0Z8doAKDJmMGRiOWIwNWYwNTk4NTQ4YzBjMTM2NTcxYzMxMDY1ZWNmOTYxZTU",
      "commit": {
        "author": {
          "name": "sobolevn",
          "email": "mail@sobolevn.me",
          "date": "2025-07-16T14:35:15Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T14:35:15Z"
        },
        "message": "Add `.gram` file to the `.editorconfig` (#136680)",
        "tree": {
          "sha": "39ccdde6f99cd51aca0ef61b0e20fc9eac85db61",
          "url": "https://api.github.com/repos/python/cpython/git/trees/39ccdde6f99cd51aca0ef61b0e20fc9eac85db61"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/2f0db9b05f0598548c0c136571c31065ecf961e5",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod7ijCRC1aQ7uu5UhlAAA4/UQAImKmARmjhxlUIiN0hl5NrYM\neTKbUxnOMxgTD/clDNJ2jhaNNlaBVZ3Knwp+oEEdd/Q26aTI9ZghWy56rd929LhV\n1akMAF1DkS9u1etcL2v3U4v3ElAH7zFK8vrtqKxcnYDdHAXCqffVvdLFW8XwXeNL\n7nV3WvbgNho2yp+JL5LLs1gFCTW0kA2DeCFNsQ37KZviKhe+iO9keRyXU69e4BuH\n14A6xlGd1j1W5dAXvEIslZmzSNNV5Qy5Oob1T1aWC1Iu+cBaUifuMbtbI6mGYJJA\nApj19PlTZhSNzxc3sA5CuNlJr8MBLnmZAOm+PyecvPaTxkd3GZXOZ0kZlQq3nAHz\nqrksJUJB/fGX/bNuhspz3/qEugl4IRYFzYmX9PyJTkKGsLLuut/bNXOCq6unMnaA\nT9SGAmOg1T5dZz53SIE0XYetWBetsSJmKIRLGv7j9VwDK7CDY7853B2+zMsQjzol\n8ANgwK1xrW1lrdykaRS2wJnJbYds0ZobT0+deQXcp1irrS1lL5j7Q0U0EzBaMe7X\nZQ6Nca750fIZ+UWElkwh30NyT6tDz7AfWqs7WgHQkn+M7S/mpu0lCXeH52/lbwuf\nfH4dVf9oRxMTZfQuJGcefTFzfNuhnVrHWnNplDrLm2gwcfttSd3SMsIOX40m7JMQ\n6RpYRXiNKNr8nkzZbhue\n=BdwU\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 39ccdde6f99cd51aca0ef61b0e20fc9eac85db61\nparent c730952aa64b790c75c437cb63a1242dc08c2e97\nauthor sobolevn <mail@sobolevn.me> 1752676515 +0300\ncommitter GitHub <noreply@github.com> 1752676515 +0300\n\nAdd `.gram` file to the `.editorconfig` (#136680)\n\n",
          "verified_at": "2025-07-16T14:35:16Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/2f0db9b05f0598548c0c136571c31065ecf961e5",
      "html_url": "https://github.com/python/cpython/commit/2f0db9b05f0598548c0c136571c31065ecf961e5",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/2f0db9b05f0598548c0c136571c31065ecf961e5/comments",
      "author": {
        "login": "sobolevn",
        "id": 4660275,
        "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sobolevn",
        "html_url": "https://github.com/sobolevn",
        "followers_url": "https://api.github.com/users/sobolevn/followers",
        "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
        "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
        "organizations_url": "https://api.github.com/users/sobolevn/orgs",
        "repos_url": "https://api.github.com/users/sobolevn/repos",
        "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sobolevn/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c730952aa64b790c75c437cb63a1242dc08c2e97",
          "url": "https://api.github.com/repos/python/cpython/commits/c730952aa64b790c75c437cb63a1242dc08c2e97",
          "html_url": "https://github.com/python/cpython/commit/c730952aa64b790c75c437cb63a1242dc08c2e97"
        }
      ]
    },
    {
      "sha": "c730952aa64b790c75c437cb63a1242dc08c2e97",
      "node_id": "C_kwDOBN0Z8doAKGM3MzA5NTJhYTY0Yjc5MGM3NWM0MzdjYjYzYTEyNDJkYzA4YzJlOTc",
      "commit": {
        "author": {
          "name": "Hood Chatham",
          "email": "roberthoodchatham@gmail.com",
          "date": "2025-07-16T14:02:25Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T14:02:25Z"
        },
        "message": "gh-127146: Emscripten: more regular stack overflow skips (#136708)\n\nMakes the Emscripten stack overflow skip message consistent with WASI, \nand replaces some ad-hoc skips.",
        "tree": {
          "sha": "78e66a65fb2108c682dda78e58ea3ef447e30061",
          "url": "https://api.github.com/repos/python/cpython/git/trees/78e66a65fb2108c682dda78e58ea3ef447e30061"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/c730952aa64b790c75c437cb63a1242dc08c2e97",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod7DxCRC1aQ7uu5UhlAAA/E0QAHXhDmxs0uIX5pvTZao22uOp\nYGlzE4fqPwGg3jIufXPQExZTNnr//jEiUtQPsfLyDQsGXFTSOVkx5Rvaqcxi/+1a\nYfj8x279dwUy4t+oEna3dgEye44w9eYN7QtpF83F/nxOheqHZHKXjJu+KOPhtYYI\nS9SW2SFGAR2JauKKIOnvTF11ZYdd9fq/6r2CH5+6fO4Xe+mM//1MlUtTKD+l5egs\ns6gVy8UwwfAI/Yrxw6Am6G/D4iMARYU/wQNrzo8JVp6J7MJHvj2CjfbgXpH4xTQd\nZLEtqfXNK5s9IJIkdHM6AckuG0I3FkKOrdY2ws7P5mrgpJBXvcwI4AW1yc/pghpV\nMFJwt+cqp9C2vFxy2zot1cAvF3+W1plrhATknLNVXyyybqFMyWZBdWwX4WwHtVcG\nVU0ph/QI7l9RNSpP+/gkJOcO5GOJs2GRyNkgCC++uA4lfkRFXqEr2+rWxROcyR5b\nbpeAJWcW/VM7vZGjsiGm+zTjO9ZWeKjxODLbluXuAZtHF5SgqqF/vhF/qH6XfAad\n4u9FnAu4Y5Z0LrlKpC1ntTZPGnFLsJhqYzxta88CTLf1+Jz7JZ666ZrZF8MQueCP\nD3mx38A8IU7ET6lz2kEXO3bArnDiHw8E1+JUh1EeAw8aKtLiHr2T1pZG9uMr4bOn\n/wLqsB04JbJGW388Lugm\n=s85H\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 78e66a65fb2108c682dda78e58ea3ef447e30061\nparent 12e52cad718723636a96042f9399634392285c44\nauthor Hood Chatham <roberthoodchatham@gmail.com> 1752674545 +0200\ncommitter GitHub <noreply@github.com> 1752674545 +0000\n\ngh-127146: Emscripten: more regular stack overflow skips (#136708)\n\nMakes the Emscripten stack overflow skip message consistent with WASI, \nand replaces some ad-hoc skips.",
          "verified_at": "2025-07-16T14:02:26Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/c730952aa64b790c75c437cb63a1242dc08c2e97",
      "html_url": "https://github.com/python/cpython/commit/c730952aa64b790c75c437cb63a1242dc08c2e97",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/c730952aa64b790c75c437cb63a1242dc08c2e97/comments",
      "author": {
        "login": "hoodmane",
        "id": 8739626,
        "node_id": "MDQ6VXNlcjg3Mzk2MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoodmane",
        "html_url": "https://github.com/hoodmane",
        "followers_url": "https://api.github.com/users/hoodmane/followers",
        "following_url": "https://api.github.com/users/hoodmane/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions",
        "organizations_url": "https://api.github.com/users/hoodmane/orgs",
        "repos_url": "https://api.github.com/users/hoodmane/repos",
        "events_url": "https://api.github.com/users/hoodmane/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoodmane/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "12e52cad718723636a96042f9399634392285c44",
          "url": "https://api.github.com/repos/python/cpython/commits/12e52cad718723636a96042f9399634392285c44",
          "html_url": "https://github.com/python/cpython/commit/12e52cad718723636a96042f9399634392285c44"
        }
      ]
    },
    {
      "sha": "12e52cad718723636a96042f9399634392285c44",
      "node_id": "C_kwDOBN0Z8doAKDEyZTUyY2FkNzE4NzIzNjM2YTk2MDQyZjkzOTk2MzQzOTIyODVjNDQ",
      "commit": {
        "author": {
          "name": "Hood Chatham",
          "email": "roberthoodchatham@gmail.com",
          "date": "2025-07-16T13:33:15Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T13:33:15Z"
        },
        "message": "gh-127146: Emscripten: Make os.umask() actually work (#136706)\n\nProvide a stub implementation of umask that is enough to get some tests passing.\nMore work is needed upstream in Emscripten to make all umask tests to pass.",
        "tree": {
          "sha": "ccc25d82bd75c2b941d60a06b8d7dd6885846211",
          "url": "https://api.github.com/repos/python/cpython/git/trees/ccc25d82bd75c2b941d60a06b8d7dd6885846211"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/12e52cad718723636a96042f9399634392285c44",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod6obCRC1aQ7uu5UhlAAAKnkQAH5+RamTnJMdDQFHq6QedKV5\nw4O7GG9KJjBKRQCb0IZkHcqAsBHidjYrqwgn7deP1aTsyUIZDgyUcAbn6G/i2WCX\n8Mtikmx/jmmqXOa3sKkp9l2xOgPmR78TmNjQWRN0fZy21EAcxOrj1tckUZhfMbpy\nipLxtO0pEwacdeOUFkrTsIuhQOisye/AJoOuvTtXXF+qWZ4V5foY7C/X7bQAmhdm\noQVs8dnWM6X5hzuB+du19+sy18ur3jeV1mqzuwi3loT+FOjSZiAm0Ig4OiL+/dMM\nqitvhEnp4BG5GhEZijw+eTzdX5NYI/YXrkZ9BcxWRYvxAew3im9+VQufqORsbT15\nkbssknJ1N5vBEaWcbyoYbdMewVnK6oD6PSmIWY02pttdDFqZ9oS3m5gE4vGFSCp3\nbecUnsirqDuT4UJxvEt0WIOaNnm/eQQ4sD4NFIqatVBqoi0EhSwcT7KFsJmWHjpv\noblKLg5zUuc/P/y+00TEmzdN4ibti2JVqhZxNS8G2sTukOknwoe/M4qCQ4SznKAh\n9nxWkvdQmeUcRK63/4vKXRXnoOUuWX8G8NKNKwDfUcfDqmH8d9gqlSpZqIr9/659\nsDsMdS2qoU6YOMCUJ12bz+GME1zrv6MX6FePmkEfEomrJkXsvvc094xt3t9foonL\n47T21UzwrgkkbswsrKK4\n=604h\n-----END PGP SIGNATURE-----\n",
          "payload": "tree ccc25d82bd75c2b941d60a06b8d7dd6885846211\nparent 8e2f4b448380b4c835442534d566618f06e32573\nauthor Hood Chatham <roberthoodchatham@gmail.com> 1752672795 +0200\ncommitter GitHub <noreply@github.com> 1752672795 +0200\n\ngh-127146: Emscripten: Make os.umask() actually work (#136706)\n\nProvide a stub implementation of umask that is enough to get some tests passing.\nMore work is needed upstream in Emscripten to make all umask tests to pass.",
          "verified_at": "2025-07-16T13:33:16Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/12e52cad718723636a96042f9399634392285c44",
      "html_url": "https://github.com/python/cpython/commit/12e52cad718723636a96042f9399634392285c44",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/12e52cad718723636a96042f9399634392285c44/comments",
      "author": {
        "login": "hoodmane",
        "id": 8739626,
        "node_id": "MDQ6VXNlcjg3Mzk2MjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8739626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hoodmane",
        "html_url": "https://github.com/hoodmane",
        "followers_url": "https://api.github.com/users/hoodmane/followers",
        "following_url": "https://api.github.com/users/hoodmane/following{/other_user}",
        "gists_url": "https://api.github.com/users/hoodmane/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hoodmane/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hoodmane/subscriptions",
        "organizations_url": "https://api.github.com/users/hoodmane/orgs",
        "repos_url": "https://api.github.com/users/hoodmane/repos",
        "events_url": "https://api.github.com/users/hoodmane/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hoodmane/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8e2f4b448380b4c835442534d566618f06e32573",
          "url": "https://api.github.com/repos/python/cpython/commits/8e2f4b448380b4c835442534d566618f06e32573",
          "html_url": "https://github.com/python/cpython/commit/8e2f4b448380b4c835442534d566618f06e32573"
        }
      ]
    },
    {
      "sha": "8e2f4b448380b4c835442534d566618f06e32573",
      "node_id": "C_kwDOBN0Z8doAKDhlMmY0YjQ0ODM4MGI0YzgzNTQ0MjUzNGQ1NjY2MThmMDZlMzI1NzM",
      "commit": {
        "author": {
          "name": "Facundo Batista",
          "email": "facundo@taniquetil.com.ar",
          "date": "2025-07-16T11:55:31Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T11:55:31Z"
        },
        "message": "Improved venv docs to indicate that isolation is the default. (#136698)\n\n* Improved venv docs to note that isolation is the default.\n\n* Insert \"that\" so that a sentence reads better.\n\n* Improved wording.\n\n---------\n\nCo-authored-by: Vinay Sajip <vinay_sajip@yahoo.co.uk>",
        "tree": {
          "sha": "100b251e297a26a957ba7b0926bc19703d526828",
          "url": "https://api.github.com/repos/python/cpython/git/trees/100b251e297a26a957ba7b0926bc19703d526828"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/8e2f4b448380b4c835442534d566618f06e32573",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod5MzCRC1aQ7uu5UhlAAAvCEQAE8DsUu4slWTu0mKq9ZH1Uyk\nFMLGgIfdP5Kmw7b8LbYs+z6hCiJsfL0G8ztrjJNR6bj8EOU77iCvzzo7POzv38kr\na+RC9AMfq8AAMH6yOIm+ad3Uru2CFU+X1mhgJRn9r5rZV61DkD5j9ZAwxhvQAXO9\nIyG0DYIkC6qMUijq0LRXJ1Oj6Kx60cV7YyhQk9N4zkdTc15KZylqcx2kXVm6SeER\nlkJhseyJm9+WVIgtGkUwV76q3N2LI925F/4F3c7sKSipAOg72PVF+P/U9VKbSnoC\nj2A/fGaVxTvDwo6FtQdpm+EuQAeJXgB6Vp3s7OKJ681Ey+LB7wMjnCuqADI5848H\nJeC2XR+tSLJ7iB1BHWmp5y6P6tmXMWRQiKXZ624Nf05J7hDzDefyf+RYBrciLcKH\nt4F8fHdOPk81ZvMm3GsBttmMteqUqPDuk2mEkkQKe3RsFzmqdllZ52V9V8ISZ3RZ\nw8ZxI3B8YQtvTmRI6A2y0mEkx5Btch3EYfiwV6GBvlrNZcK9lbhqe70nrdOEZEcg\nHte3PltjlycAWKmuYSBUH+OOB/5I3bA8BUxKXpQhOqW17f0z7uYZyAOAHhAR7ReP\nV11oaUWjq0vzeZ7O5ncyQ+iAzlT3uOK1sFlZTpn5jp9/2U3VT5sLQKfl/V9wmWsk\nNpGO9AdDsvLB6A7NIDJv\n=LYR5\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 100b251e297a26a957ba7b0926bc19703d526828\nparent ef66fb597ba909ead2fbfc06f748aa7b7e9ea437\nauthor Facundo Batista <facundo@taniquetil.com.ar> 1752666931 -0300\ncommitter GitHub <noreply@github.com> 1752666931 -0300\n\nImproved venv docs to indicate that isolation is the default. (#136698)\n\n* Improved venv docs to note that isolation is the default.\n\n* Insert \"that\" so that a sentence reads better.\n\n* Improved wording.\n\n---------\n\nCo-authored-by: Vinay Sajip <vinay_sajip@yahoo.co.uk>",
          "verified_at": "2025-07-16T11:55:32Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/8e2f4b448380b4c835442534d566618f06e32573",
      "html_url": "https://github.com/python/cpython/commit/8e2f4b448380b4c835442534d566618f06e32573",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/8e2f4b448380b4c835442534d566618f06e32573/comments",
      "author": {
        "login": "facundobatista",
        "id": 184060,
        "node_id": "MDQ6VXNlcjE4NDA2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/184060?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/facundobatista",
        "html_url": "https://github.com/facundobatista",
        "followers_url": "https://api.github.com/users/facundobatista/followers",
        "following_url": "https://api.github.com/users/facundobatista/following{/other_user}",
        "gists_url": "https://api.github.com/users/facundobatista/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/facundobatista/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/facundobatista/subscriptions",
        "organizations_url": "https://api.github.com/users/facundobatista/orgs",
        "repos_url": "https://api.github.com/users/facundobatista/repos",
        "events_url": "https://api.github.com/users/facundobatista/events{/privacy}",
        "received_events_url": "https://api.github.com/users/facundobatista/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ef66fb597ba909ead2fbfc06f748aa7b7e9ea437",
          "url": "https://api.github.com/repos/python/cpython/commits/ef66fb597ba909ead2fbfc06f748aa7b7e9ea437",
          "html_url": "https://github.com/python/cpython/commit/ef66fb597ba909ead2fbfc06f748aa7b7e9ea437"
        }
      ]
    },
    {
      "sha": "ef66fb597ba909ead2fbfc06f748aa7b7e9ea437",
      "node_id": "C_kwDOBN0Z8doAKGVmNjZmYjU5N2JhOTA5ZWFkMmZiZmMwNmY3NDhhYTdiN2U5ZWE0Mzc",
      "commit": {
        "author": {
          "name": "Pablo Galindo Salgado",
          "email": "Pablogsal@gmail.com",
          "date": "2025-07-16T09:47:13Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T09:47:13Z"
        },
        "message": "gh-135148: Correctly handle f/t strings with comments and debug expressions (#135198)",
        "tree": {
          "sha": "88e326fcda5915e087a29de6bd6780cd1c656a53",
          "url": "https://api.github.com/repos/python/cpython/git/trees/88e326fcda5915e087a29de6bd6780cd1c656a53"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/ef66fb597ba909ead2fbfc06f748aa7b7e9ea437",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod3UhCRC1aQ7uu5UhlAAA1uIQAAah6KSk4j0SNs1nfUYmPyX7\n3M9yzsX21rw2D3EznOsep6AXWUveRl+T93RbPp/S1+YVuholuDnxuJmv8UazZVCL\nWBgPgNv+JFsU9J28G7Q0abFHRpaPP95kgq1050XHYPaX4PAf4/iIIGLuf96tIvLx\ntQZB1xGp+7G9LcclaXuv7JJkUOa0dodmjqNTYEbkGCzYSwosTcenDMQe7dqdeQ1J\neqsn7fpn55Hu2amv1Vqz/qv/UXUjNOjolxQ0gTuA7iF7eRSB5zz6rVqT7UzLTPV9\nvp9lV5CL2Td9yPx8TIAsRPgkDg9KSp2Ll3ebUxkBxfzQq/1L/H2EqX0Zy8qkABBT\n7nayFEzWp2tr3kf46b1NiC6HV3CFVka5K0ydLW3FyeSxfgfYNmF5HZ64F4GPuepk\nkvLcTRG/L9tNEgpyv8PPJxI586Hf/gAP2mSAqy3H656K57QpxPR9kl7Dq6V+hIYE\n0Zr7rbZvqkHdRFgXflIICdDALdPZCRDw157DpYBiYwCt9HN5mJHVlQH6//WI5SSN\nEELxRpyAUXQmQt1LkQbRwBU24oPfxZ9Sg0fELBy1OdFcZKJVFE0wIrnGuUS+PGhn\nzJxXfZuv7Gb7vKIj/XxfErZ03Vk2XY6FPc0VO5TW/uLMlh7dIJ9m5FxqFzx+qBRG\nvKr+HiYQhlp19FvlbpyD\n=zgz6\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 88e326fcda5915e087a29de6bd6780cd1c656a53\nparent e89923d36650fe10ce1c6b5f7152638589684004\nauthor Pablo Galindo Salgado <Pablogsal@gmail.com> 1752659233 +0200\ncommitter GitHub <noreply@github.com> 1752659233 +0200\n\ngh-135148: Correctly handle f/t strings with comments and debug expressions (#135198)\n\n",
          "verified_at": "2025-07-16T09:47:14Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/ef66fb597ba909ead2fbfc06f748aa7b7e9ea437",
      "html_url": "https://github.com/python/cpython/commit/ef66fb597ba909ead2fbfc06f748aa7b7e9ea437",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/ef66fb597ba909ead2fbfc06f748aa7b7e9ea437/comments",
      "author": {
        "login": "pablogsal",
        "id": 11718525,
        "node_id": "MDQ6VXNlcjExNzE4NTI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11718525?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablogsal",
        "html_url": "https://github.com/pablogsal",
        "followers_url": "https://api.github.com/users/pablogsal/followers",
        "following_url": "https://api.github.com/users/pablogsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/pablogsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pablogsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pablogsal/subscriptions",
        "organizations_url": "https://api.github.com/users/pablogsal/orgs",
        "repos_url": "https://api.github.com/users/pablogsal/repos",
        "events_url": "https://api.github.com/users/pablogsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pablogsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e89923d36650fe10ce1c6b5f7152638589684004",
          "url": "https://api.github.com/repos/python/cpython/commits/e89923d36650fe10ce1c6b5f7152638589684004",
          "html_url": "https://github.com/python/cpython/commit/e89923d36650fe10ce1c6b5f7152638589684004"
        }
      ]
    },
    {
      "sha": "e89923d36650fe10ce1c6b5f7152638589684004",
      "node_id": "C_kwDOBN0Z8doAKGU4OTkyM2QzNjY1MGZlMTBjZTFjNmI1ZjcxNTI2Mzg1ODk2ODQwMDQ",
      "commit": {
        "author": {
          "name": "William Andrea",
          "email": "22385371+wjandrea@users.noreply.github.com",
          "date": "2025-07-16T07:01:26Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-07-16T07:01:26Z"
        },
        "message": "fix grammar typo in `logging.rst` (#136584)",
        "tree": {
          "sha": "d93b23736e1e89085fa364327b48d9859c0dbd1d",
          "url": "https://api.github.com/repos/python/cpython/git/trees/d93b23736e1e89085fa364327b48d9859c0dbd1d"
        },
        "url": "https://api.github.com/repos/python/cpython/git/commits/e89923d36650fe10ce1c6b5f7152638589684004",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJod05GCRC1aQ7uu5UhlAAAxe0QAA4oJd04tsxeAf6K0kN8ysnR\nlEom5Ab1ONLyN/qdbsdR6Ox9qLqLU2PUdSOSBHISeyjVDp46Uk3bar832MqDdQ8b\nDMB/kVlmsyJCvJkllJBxsYIP31lNn+gBIMdJ33NCRJvTKSZfAl/SISjixkgNVUZQ\nayJTZTpBni6UocSNV/U5mqBo8PNAqDAraBhzqRoFuAsrEh14DJt+f8BSy75fUosw\nO6v03jsTwfbjphEmajB3flG2rtJUhuhsc6HBYjNhvd/exB4xJ5Hjv58G6nS0lim0\nmWTehlaTwnBJLHIVhGC39v0ONXJOmVthMH6DeMtVxsKgIZyZbqy3FCHuDDn5m+sB\n0Z9BwglRS0ixpo3JaM4n0eMqjhvzolLoYh3E1kkZT3vSjSCAx5KA1Zx7iOopoXlj\nIqhA8KqjRCmxwwNBr84ouVv8XSoc+5CUibL86jP4GT4AObWXPWelkVpuB7lT3wNR\naueRpp9sJ1O2YY7GRh87w/5IVIRuwZmghCdcGf7MmkfRFvm5Y1qeYP3QWOUSc0Uv\ncozIc7u22wSsx7c+VCg6fakqBLZgDwtZjYeoAc6v8V3a6jrVNrze7E5NvdFOuPLi\ng40yfCpdykjW8NNndWHbnZHoPMJ0Bxwa436WCTwuv7bx/vPihyCa08/HcOYwj16p\n25jWtG2HIcuUS3AucZam\n=JKKv\n-----END PGP SIGNATURE-----\n",
          "payload": "tree d93b23736e1e89085fa364327b48d9859c0dbd1d\nparent e81c4e84b3a8688a367099e3adf9b2fcf914447f\nauthor William Andrea <22385371+wjandrea@users.noreply.github.com> 1752649286 -0300\ncommitter GitHub <noreply@github.com> 1752649286 +0530\n\nfix grammar typo in `logging.rst` (#136584)\n\n",
          "verified_at": "2025-07-16T07:01:27Z"
        }
      },
      "url": "https://api.github.com/repos/python/cpython/commits/e89923d36650fe10ce1c6b5f7152638589684004",
      "html_url": "https://github.com/python/cpython/commit/e89923d36650fe10ce1c6b5f7152638589684004",
      "comments_url": "https://api.github.com/repos/python/cpython/commits/e89923d36650fe10ce1c6b5f7152638589684004/comments",
      "author": {
        "login": "wjandrea",
        "id": 22385371,
        "node_id": "MDQ6VXNlcjIyMzg1Mzcx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22385371?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wjandrea",
        "html_url": "https://github.com/wjandrea",
        "followers_url": "https://api.github.com/users/wjandrea/followers",
        "following_url": "https://api.github.com/users/wjandrea/following{/other_user}",
        "gists_url": "https://api.github.com/users/wjandrea/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wjandrea/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wjandrea/subscriptions",
        "organizations_url": "https://api.github.com/users/wjandrea/orgs",
        "repos_url": "https://api.github.com/users/wjandrea/repos",
        "events_url": "https://api.github.com/users/wjandrea/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wjandrea/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e81c4e84b3a8688a367099e3adf9b2fcf914447f",
          "url": "https://api.github.com/repos/python/cpython/commits/e81c4e84b3a8688a367099e3adf9b2fcf914447f",
          "html_url": "https://github.com/python/cpython/commit/e81c4e84b3a8688a367099e3adf9b2fcf914447f"
        }
      ]
    }
  ]
}